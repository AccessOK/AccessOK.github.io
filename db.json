{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/maupassant/source/css/copycode.scss","path":"css/copycode.scss","modified":0,"renderable":1},{"_id":"themes/maupassant/source/css/copyright.scss","path":"css/copyright.scss","modified":0,"renderable":1},{"_id":"themes/maupassant/source/css/donate.scss","path":"css/donate.scss","modified":0,"renderable":1},{"_id":"themes/maupassant/source/css/search.scss","path":"css/search.scss","modified":0,"renderable":1},{"_id":"themes/maupassant/source/css/style.scss","path":"css/style.scss","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/AccessOK.png","path":"img/AccessOK.png","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/bitcoin.svg","path":"img/bitcoin.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/alipay.svg","path":"img/alipay.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/github.svg","path":"img/github.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/like.svg","path":"img/like.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/wechat.svg","path":"img/wechat.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/paypal.svg","path":"img/paypal.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","path":"js/codeblock-resizer.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/copycode.js","path":"js/copycode.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/copyright.js","path":"js/copyright.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/donate.js","path":"js/donate.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/fancybox.js","path":"js/fancybox.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/love.js","path":"js/love.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/recent-comments.js","path":"js/recent-comments.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/share.js","path":"js/share.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/smartresize.js","path":"js/smartresize.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/totop.js","path":"js/totop.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_drafts/Openstack-实例网络联通性调研测试.md","hash":"a7089743d02891c2e8e0c3c2803e2ddf673a4673","modified":1703850122042},{"_id":"source/_drafts/hello-world.md","hash":"842dbad4cec970e83075ef576f32326b64822537","modified":1703492832681},{"_id":"source/_drafts/kolla编译Openstack 容器镜像.md","hash":"8628ddb3b90842cc39911f3965c451df625eea9d","modified":1709187752989},{"_id":"source/about/index.md","hash":"819479beec9bd84335305138601c7d287ae09f96","modified":1703570432423},{"_id":"source/archive/index.md","hash":"3e55abe40024ff50aabf717411f37f4db95dd70b","modified":1703569588680},{"_id":"source/_posts/Fio测试磁盘读写性能.md","hash":"d40902a9b76dc8a0ce0e957d685834cea285259d","modified":1709190103072},{"_id":"source/_posts/Java环境相关配置.md","hash":"128da952bc1e79382773c61c0b5692d0043a8411","modified":1709188457766},{"_id":"source/_posts/Openstack-VNC分辨率控制调研.md","hash":"d66ce37e1ef00b87be7e42e14dcf0816c038b2e9","modified":1703732334788},{"_id":"source/_posts/Openstack开发环境部署.md","hash":"45a7810c67fac98eba5155d9ea79d77ea5c578a1","modified":1703578763443},{"_id":"source/_posts/Opensyack-v部署.md","hash":"f5e2620e85542495d706d928b8fffa03e86c0204","modified":1703572708973},{"_id":"source/_posts/Python相关环境配置.md","hash":"b314ec68b9bbb77ca87bbcf0a86acc52e9099c9f","modified":1709190262781},{"_id":"source/_posts/git使用.md","hash":"b95ab4bb7e061bd974b9b5e54c1b988d2e431a38","modified":1709190219064},{"_id":"source/_posts/kolla-ansible部署Openstack.md","hash":"f9087514cc9c6c50bd69e9b8a837b75f98d5d9b6","modified":1703573317765},{"_id":"source/_posts/mock编译rpm软件包.md","hash":"2af1b062f78ffae8eec9682d4f0c54ea74f7f4ac","modified":1703580392539},{"_id":"source/_posts/nova源码解析.md","hash":"3850241cfaee6817d7176990d82187380e12605b","modified":1703573544689},{"_id":"source/_posts/创建windows的qcow2镜像.md","hash":"dbbc5e0b7860caa09fd0a530268ad7f25d1b749a","modified":1709190256596},{"_id":"source/_posts/基于Debian使用docker.md","hash":"fd131bc05f8ffa23cabeb408826e32abc22b67ae","modified":1703647457700},{"_id":"source/_posts/基于Nova开发Usb.md","hash":"16f07feed81fafddb71fc4a242167b9ca3dba5de","modified":1699939167000},{"_id":"source/_posts/常用性能测试小工具集锦.md","hash":"e8ecd652d03700a1b206b02b093ef5cb754dfa77","modified":1717382804639},{"_id":"source/_posts/搭建Blog.md","hash":"5d580382dca3f1529351af42c327d796239f13c9","modified":1709192106427},{"_id":"source/_posts/搭建Trojan.md","hash":"0b8a8a60e8297a285eef546209449b235664e2fb","modified":1703572995330},{"_id":"source/_posts/数据库配置.md","hash":"688b1745074b72233c2961cefdf560412c0d884e","modified":1703578053961},{"_id":"source/_posts/磁盘扩容根分区.md","hash":"5fc1135d41abb6a194842b2319fc2f4e9758b081","modified":1703572664144},{"_id":"source/images/image-20231228185457722.png","hash":"ac4940c679b269b0c5a5305b40e348e64ab4e0ea","modified":1703760912042},{"_id":"source/images/image-20231229141435188.png","hash":"8a954f5c5a0f0544c61473fa415d0f1d31ee596f","modified":1703830485711},{"_id":"source/images/image-20231229155051281.png","hash":"3dbc2613005997c2d6578d068600da6bc42d8f86","modified":1703836261275},{"_id":"source/images/image-20231228184850234.png","hash":"46f0a3a94e615dd36a068a767a4c6a23e3308d3b","modified":1703760561165},{"_id":"source/images/image-20231228201621724.png","hash":"43cfdf2b6279b4c93878a4276cd821b0233b80d7","modified":1703765797300},{"_id":"themes/maupassant/.gitignore","hash":"16945417d10c15c950306794dbb0d970b5a199fe","modified":1703492892285},{"_id":"themes/maupassant/.travis.yml","hash":"0339959f29deddc365e8fe8bd85da524410b9a23","modified":1703492892285},{"_id":"themes/maupassant/LICENSE","hash":"f0ac2f92770650c9835183f79010c0d307b34acd","modified":1703492892285},{"_id":"themes/maupassant/README.md","hash":"c6da8254deefb8054dfb3e174f6113b860ccde69","modified":1703492892285},{"_id":"themes/maupassant/_config.yml","hash":"183bfe04bbc94a00d3b194f2d05b125c880f8dc6","modified":1703579675009},{"_id":"themes/maupassant/package.json","hash":"f092433469eb87362e831326425a6a5c3c9fea0d","modified":1703492892289},{"_id":"themes/maupassant/languages/de-DE.yml","hash":"5d3556a885e355a8c2da65ef3e7b3ee36a628bfa","modified":1703492892285},{"_id":"themes/maupassant/languages/en.yml","hash":"27d8484ce29989317624e9852c5495289fe5501c","modified":1703492892285},{"_id":"themes/maupassant/languages/es-ES.yml","hash":"58e1d04bcd1834fa9d2960e18e027abbbccbedc9","modified":1703492892285},{"_id":"themes/maupassant/languages/fr-FR.yml","hash":"b47906ec0abf867fb3e3360bc046b7afb68aee25","modified":1703492892285},{"_id":"themes/maupassant/languages/ko.yml","hash":"909a33e0befa6978e8e72157c6b415b48551ee31","modified":1703492892285},{"_id":"themes/maupassant/languages/nb-NO.yml","hash":"dfef2a8f7582f9bccf7cf8376fb2b96c1e452d5f","modified":1703492892285},{"_id":"themes/maupassant/languages/ru.yml","hash":"2476a631f4d3c668de04af85a6c2c97ba2a57e96","modified":1703492892285},{"_id":"themes/maupassant/languages/zh-CN.yml","hash":"433484ab11838cc8540aceaf13eb718fa180ed9c","modified":1703492892285},{"_id":"themes/maupassant/languages/zh-TW.yml","hash":"58905c7fa82ee4f2232bcd00301dfcd7b711c61e","modified":1703492892285},{"_id":"themes/maupassant/layout/archive.pug","hash":"9bf5245929529576b5d6678142276adf3c221a6d","modified":1703492892289},{"_id":"themes/maupassant/layout/base-without-sidebar.pug","hash":"6b1ff15ae71223ef2cae1a56e40d2354cf40ff31","modified":1703492892289},{"_id":"themes/maupassant/layout/base.pug","hash":"ebfbb48e5f4b6810d5ea0b9e1bb252196ff698e8","modified":1703492892289},{"_id":"themes/maupassant/layout/blogroll.pug","hash":"31106223b01f45ab0b9747f91db104b0f0d1d4cc","modified":1703492892289},{"_id":"themes/maupassant/layout/index.pug","hash":"3e71a8b314b57a3e8b9f1d275c482361025afb23","modified":1703492892289},{"_id":"themes/maupassant/layout/page.pug","hash":"9b72086ff877de064f804a59684140af09470484","modified":1703492892289},{"_id":"themes/maupassant/layout/post.pug","hash":"f69362f8bffcccf696f793b6084cdec773b85cc1","modified":1703492892289},{"_id":"themes/maupassant/layout/single-column.pug","hash":"0593f261dc208bb0b5c4232eb41eff597a291bd9","modified":1703492892289},{"_id":"themes/maupassant/layout/tagcloud.pug","hash":"5c06b2a267070bd866b911cc894f314e97dfe2b4","modified":1703492892289},{"_id":"themes/maupassant/layout/timeline.pug","hash":"cef82a79f57e4e491f2934d990da939c4bebceb6","modified":1703492892289},{"_id":"themes/maupassant/layout/_partial/after_footer.pug","hash":"21fdb56fc42c5a250c04e92f49eb12ebcf0e2f3e","modified":1703492892285},{"_id":"themes/maupassant/layout/_partial/comments.pug","hash":"402762b310f1dbdd1c24fdabbb14705d632684d1","modified":1703492892285},{"_id":"themes/maupassant/layout/_partial/darkmode.pug","hash":"82567449d68025cc7fee5259d4769f5ee015aa26","modified":1703492892285},{"_id":"themes/maupassant/layout/_partial/footer.pug","hash":"650781b5bc8c632658ad6880ba663b1e3bfb5798","modified":1703492892285},{"_id":"themes/maupassant/layout/_partial/head.pug","hash":"12d4aa97403f0bc5135e924b0b33251b0a1ad51d","modified":1703492892285},{"_id":"themes/maupassant/layout/_partial/helpers.pug","hash":"acdf9e2d52ee86c831fa15ce1570930c5779bc78","modified":1703492892285},{"_id":"themes/maupassant/layout/_partial/mathjax.pug","hash":"b54b56faff9e47ab3ca3cdd55056c73e60776f3c","modified":1703492892285},{"_id":"themes/maupassant/layout/_partial/mathjax2.pug","hash":"f91a71eb8a1af225a4f0f7749fedf534cc0ceae0","modified":1703492892285},{"_id":"themes/maupassant/layout/_partial/paginator.pug","hash":"53f9cb77448e84a98da5eb688e2e12b173c555bb","modified":1703492892285},{"_id":"themes/maupassant/layout/_partial/post_nav.pug","hash":"a2d698c84bb6da08195fe870dbd7215f65388d3f","modified":1703492892285},{"_id":"themes/maupassant/layout/_partial/tag.pug","hash":"a21ffd35f129244729ad64128cafe4781447c96d","modified":1703492892285},{"_id":"themes/maupassant/layout/_partial/totop.pug","hash":"8225bbc3cdb9648bc2e6872e5c616a9a1e4def4f","modified":1703492892285},{"_id":"themes/maupassant/layout/_partial/wordcount.pug","hash":"7dde69ef8f86745b83ba5f03c75717a782752f2b","modified":1703492892285},{"_id":"themes/maupassant/layout/_widget/category.pug","hash":"f2e9f6ff02b858b507f61768753b54846491f87a","modified":1703492892285},{"_id":"themes/maupassant/layout/_widget/copyright.pug","hash":"17e68ea3e87f128819d16ec30cd506a51fe80a7f","modified":1703492892285},{"_id":"themes/maupassant/layout/_widget/donate.pug","hash":"859eddafd2762072bc5af850038ff377578b0ce4","modified":1703492892289},{"_id":"themes/maupassant/layout/_widget/info.pug","hash":"82359802de5a4e3d80ec9a3737b071fd5c3be221","modified":1703492892289},{"_id":"themes/maupassant/layout/_widget/links.pug","hash":"3f6048423887f359bb97d17621e961495d209a7c","modified":1703492892289},{"_id":"themes/maupassant/layout/_widget/recent_comments.pug","hash":"e63c9f0a770324a03146fc263f3000c7cdc59631","modified":1703492892289},{"_id":"themes/maupassant/layout/_widget/recent_posts.pug","hash":"5a86fcd97933c665b5afef701d8b30cfd2952691","modified":1703492892289},{"_id":"themes/maupassant/layout/_widget/search.pug","hash":"a141293ce93b312f4db9f28207d02ee578ede359","modified":1703492892289},{"_id":"themes/maupassant/layout/_widget/tag.pug","hash":"9b73975ac67b471ae91803b8477932d2c5e5a4f2","modified":1703492892289},{"_id":"themes/maupassant/source/css/copycode.scss","hash":"e2463b8dacf629e180a1b6cd80667ca8044292eb","modified":1703492892289},{"_id":"themes/maupassant/source/css/copyright.scss","hash":"a418da11a88d1feb14500df42ed97a64da6a7611","modified":1703492892289},{"_id":"themes/maupassant/source/css/donate.scss","hash":"95b2fd65042afecc0b5530847c369bcc11d74bd0","modified":1703492892289},{"_id":"themes/maupassant/source/css/search.scss","hash":"9406e138d7bb6a9ef4a067eba1dafa627519c8a7","modified":1703492892289},{"_id":"themes/maupassant/source/css/style.scss","hash":"388b9d5d850c042da2997d17c90a99fb83cb0150","modified":1703492892289},{"_id":"themes/maupassant/source/img/AccessOK.png","hash":"f99bf1003acca3631543629496ab1b678f36cde6","modified":1703569077000},{"_id":"themes/maupassant/source/img/avatar.png","hash":"2f701dadc2dc8eb637f48b5eedf9bca7fb5fd031","modified":1703492892289},{"_id":"themes/maupassant/source/img/bitcoin.svg","hash":"590b6b6462896168d08b30dfe2de5f08950d5553","modified":1703492892289},{"_id":"themes/maupassant/source/img/alipay.svg","hash":"3d94d2f9b09e352802628c9225578e1086f5fef3","modified":1703492892289},{"_id":"themes/maupassant/source/img/github.svg","hash":"277798d16cb6106e45ef74f6b9972011fa43401b","modified":1703492892289},{"_id":"themes/maupassant/source/img/like.svg","hash":"e6e4bd1af076be9358316cac89efdc22ef4a5064","modified":1703492892289},{"_id":"themes/maupassant/source/img/wechat.svg","hash":"19c1f68ec8c0b8e9f7855e7a6e78077f70a1aedc","modified":1703492892289},{"_id":"themes/maupassant/source/img/paypal.svg","hash":"09786c983a10bc570dcd05b87cec601e9d01eb00","modified":1703492892289},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","hash":"5d0b786d60bf225d9eabcc9cece2719ff4d9b6cd","modified":1703492892289},{"_id":"themes/maupassant/source/js/copycode.js","hash":"fde1f153bab1f00ae8930668094c00aa9ff3c7a3","modified":1703492892289},{"_id":"themes/maupassant/source/js/copyright.js","hash":"7b1bd775ea22abf33d57f78628f436bf656e439a","modified":1703492892289},{"_id":"themes/maupassant/source/js/donate.js","hash":"bdddd8d9847462d020f7a511e7e12c046223195d","modified":1703492892289},{"_id":"themes/maupassant/source/js/fancybox.js","hash":"0ec64dd79760e01f7d88611b1bd5221ec30b80cb","modified":1703492892289},{"_id":"themes/maupassant/source/js/love.js","hash":"5cf89f622bf891cf1986845eb92eadef6f358eb7","modified":1703492892289},{"_id":"themes/maupassant/source/js/recent-comments.js","hash":"78708f86aa1fdcc003a056b1f91aac62d31bb012","modified":1703492892289},{"_id":"themes/maupassant/source/js/search.js","hash":"6fdfd143646d12b8dbef9b5809cea768192f08aa","modified":1703492892289},{"_id":"themes/maupassant/source/js/share.js","hash":"a2f9de374523dc7f2ddb90ed5f24b668c20d9272","modified":1703492892289},{"_id":"themes/maupassant/source/js/smartresize.js","hash":"3ef157fd877167e3290f42c67a624ea375a46c24","modified":1703492892289},{"_id":"themes/maupassant/source/js/totop.js","hash":"7dbf8fcf582a4fb6eb9b2c60d6de9f9c2091ec4c","modified":1703492892289},{"_id":"source/images/image-20231228203258610.png","hash":"dec98ea4238e191538f75cf69ab65ba949918786","modified":1703766788290},{"_id":"source/images/image-20231228203329441.png","hash":"8c724c8c56fad195a52d54734bbad5ce0320a894","modified":1703766827238},{"_id":"source/images/image-20231229151952217.png","hash":"4ee15a6bfb04c7e2d2ce3191813e3d660a2b25b3","modified":1703834402997},{"_id":"source/images/image-20231229152313834.png","hash":"805314ad840e640adf5a5b98f7e7fd2bd2ce9cb8","modified":1703834603585},{"_id":"source/images/image-20231229152826265.png","hash":"5153b25c763c226192ea68a3a8441da08a6f1698","modified":1703834916975},{"_id":"source/images/image-20240112161213152.png","hash":"d22bd8018b7462f8f5e4aeefc2eb7b4472b9df63","modified":1705047153014},{"_id":"source/images/image-20231228191755526.png","hash":"d0599432d81a9ae725ae5fd43df0105a39796ef0","modified":1703762285566},{"_id":"source/images/image-20231228191834263.png","hash":"d919e42b7252709e175999b6fb86f1ed02210328","modified":1703762326022},{"_id":"source/images/image-20231228202958546.png","hash":"5ab4fe38793a6477f779e08de5747da920000ac1","modified":1703766610122},{"_id":"source/images/image-20231228203146416.png","hash":"a31932e5ef348368a1bc6e646d8c1e69689bea6e","modified":1703766716758},{"_id":"source/images/image-20231228212703017.png","hash":"c34896cd966e1ef3cd0a37ccc9e58a5888632882","modified":1703770034679},{"_id":"source/images/image-20231228223002957.png","hash":"1507de3959394f626337353d0bfcc43fa5f0bea8","modified":1703773811977},{"_id":"source/images/image-20231229135018445.png","hash":"393eac9b994e3cb33bf20cad9bd1cdb53afb4df6","modified":1703829035869},{"_id":"source/images/image-20231229141136199.png","hash":"94b751bb26797d83e3a7626ec517a71eec2bab72","modified":1703830311530},{"_id":"source/images/image-20231229153048490.png","hash":"b62d4b23d96ec1017ea4296a7ed4f7e681ad1dad","modified":1703835060135},{"_id":"source/images/image-20231229153845717.png","hash":"7888380dee7ba14fe2fa6521ef11c68e5de908a3","modified":1703835536495},{"_id":"source/images/image-20231229154121220.png","hash":"faa3ac14b0a0442c68fc35d3ef7b1df6add9c73b","modified":1703835690783},{"_id":"source/images/image-20231229155148823.png","hash":"1295f8d20b8f8ed74431cd7092cdbecb783fa2c1","modified":1703836319443},{"_id":"source/images/image-20231229151744918.png","hash":"5d85da823b73caac2ba1f68c64906fa8763505ae","modified":1703834276940},{"_id":"source/images/image-20231229160925504.png","hash":"3dfe1ae555b5d21a82fef34d9ccf68a8c701e65c","modified":1703837374039},{"_id":"source/images/image-20240112161247302.png","hash":"d29d458c57a0fa17f5cce6fbbfccae76bcb00c55","modified":1705047176994},{"_id":"source/images/image-20240112161655349.png","hash":"3e81cc9a4976c4c85c7ed10f4c68ac21488efb49","modified":1705047425465},{"_id":"source/images/image-20240112161504454.png","hash":"46806e0ec96b99aa64e41ca9e91b9ff08f9132f2","modified":1705047317426},{"_id":"source/images/image-20231228191201350.png","hash":"8de4a8877b10f83ee022d88aaa3f1a4039a4307b","modified":1703761933504},{"_id":"source/_drafts/Java环境相关配置.md","hash":"128da952bc1e79382773c61c0b5692d0043a8411","modified":1709190217428},{"_id":"source/_drafts/Openstack-VNC分辨率控制调研.md","hash":"f563e9d3b4f6aaac4ee48fa06bc7dd14c9166345","modified":1709190215612},{"_id":"source/_drafts/Openstack开发环境部署.md","hash":"45a7810c67fac98eba5155d9ea79d77ea5c578a1","modified":1703578763443},{"_id":"source/_drafts/Opensyack-v部署.md","hash":"f5e2620e85542495d706d928b8fffa03e86c0204","modified":1703572708973},{"_id":"source/_drafts/kolla-ansible部署Openstack.md","hash":"f9087514cc9c6c50bd69e9b8a837b75f98d5d9b6","modified":1703573317765},{"_id":"source/_drafts/nova源码解析.md","hash":"3850241cfaee6817d7176990d82187380e12605b","modified":1703573544689},{"_id":"source/_drafts/基于Nova开发Usb.md","hash":"16f07feed81fafddb71fc4a242167b9ca3dba5de","modified":1699939167000},{"_id":"source/_drafts/搭建Trojan.md","hash":"0b8a8a60e8297a285eef546209449b235664e2fb","modified":1703572995330},{"_id":"source/_drafts/基于openEuler使用oos编包.md","hash":"76f9ec6c9695e4027470d118910fd5dcadff03bc","modified":1710152149666},{"_id":"public/atom.xml","hash":"99e08a3521617c5da92e01e3fe1473cb6906b5ed","modified":1717382853141},{"_id":"public/search.xml","hash":"42e0ff4e79112fcc84b3cb7336eadaede0021d80","modified":1717382853141},{"_id":"public/about/index.html","hash":"2f9037c6b17cabd6a4c2fdf66f427a2165b87c67","modified":1717382853141},{"_id":"public/archive/index.html","hash":"b1826d306479207b0438afc6e23bcb161eb6b33f","modified":1717382853141},{"_id":"public/2024/01/10/创建windows的qcow2镜像/index.html","hash":"61852f821e1b4bc847452fee87d6f3fa26452558","modified":1717382853141},{"_id":"public/2023/12/25/Fio测试磁盘读写性能/index.html","hash":"fe7d3624892cd949885db7e304b9779189c7dd2f","modified":1717382853141},{"_id":"public/2023/12/25/基于Debian使用docker/index.html","hash":"a29a484279f0e3d357ffda22c068b696dba47c65","modified":1717382853141},{"_id":"public/2023/12/25/常用性能测试小工具集锦/index.html","hash":"008c258da026551215f41b7a60a4728d43f483d2","modified":1717382853141},{"_id":"public/2023/12/15/Python相关环境配置/index.html","hash":"21346f2515fff3820fbd6ce34b52e0151f63ee08","modified":1717382853141},{"_id":"public/2023/12/15/git使用/index.html","hash":"c632f884cac600633ad3eac011000ba1207251ea","modified":1717382853141},{"_id":"public/2023/12/15/mock编译rpm软件包/index.html","hash":"eb725c8f24ed7cb00154233f696b6075c2c0edbc","modified":1717382853141},{"_id":"public/2023/12/15/数据库配置/index.html","hash":"887262d6b6c1f0bef5b7fe5674826a4960484b7b","modified":1717382853141},{"_id":"public/2023/12/15/磁盘扩容根分区/index.html","hash":"13e64edf4b099aaa18356afa90f9cd6842e4011a","modified":1717382853141},{"_id":"public/2023/12/15/Java环境相关配置/index.html","hash":"fa1db7a173d383b41918e8a5106a736982542856","modified":1717382853141},{"_id":"public/2023/12/14/搭建Blog/index.html","hash":"7c606c8f54a0521d8cb04d8445d6128c59f58d0e","modified":1717382853141},{"_id":"public/archives/index.html","hash":"36dc70d8fac95e2efbf17a58c0b1fe91c897f7e4","modified":1717382853141},{"_id":"public/archives/page/2/index.html","hash":"9e7df7ed32f66a0d1e3b14e72cc3952a7cbe4aaa","modified":1717382853141},{"_id":"public/archives/2023/index.html","hash":"f8dd8f1a33dd7e72df0ef4ceff376ca59ff11ce8","modified":1717382853141},{"_id":"public/archives/2023/12/index.html","hash":"f8dd8f1a33dd7e72df0ef4ceff376ca59ff11ce8","modified":1717382853141},{"_id":"public/archives/2024/index.html","hash":"06cb5bccb806b0515fd9583b9d04378b810f04c2","modified":1717382853141},{"_id":"public/archives/2024/01/index.html","hash":"06cb5bccb806b0515fd9583b9d04378b810f04c2","modified":1717382853141},{"_id":"public/categories/Linux/index.html","hash":"0a8a8dceff81d49fb393e5d67b48f5f976ca9b26","modified":1717382853141},{"_id":"public/categories/Linux/Python/index.html","hash":"3094bace63d8a0f7835e47708a03272bee576d7a","modified":1717382853141},{"_id":"public/categories/Linux/Java/index.html","hash":"d69343f15834e60311f7eb72f11aeb059afc4699","modified":1717382853141},{"_id":"public/categories/Linux/Tools/index.html","hash":"15429311b749fd0607a01fe1c93c9f7f2d724a83","modified":1717382853141},{"_id":"public/categories/Learning-Tools/index.html","hash":"b05c114a23b8374eb457e2d215eb512f7572b43c","modified":1717382853141},{"_id":"public/categories/Linux/Mysql/index.html","hash":"ffefe559886e61681d522aa50832ec10b2a11870","modified":1717382853141},{"_id":"public/categories/Linux/Tools/Git/index.html","hash":"519b0b7fff5dfa499575423296da501207fe33c7","modified":1717382853141},{"_id":"public/categories/Learning-Tools/Linux/index.html","hash":"2ceb130a87f59f7e879c80fd6748b5751cb62a2d","modified":1717382853141},{"_id":"public/categories/Linux/Tools/Docker/index.html","hash":"347341e3a073596ef2e565842c8d6e64c49f9461","modified":1717382853141},{"_id":"public/categories/Learning-Tools/Hexo/index.html","hash":"7a965d749d16f448aa9da397a186dbf2b964f143","modified":1717382853141},{"_id":"public/categories/Learning-Tools/Linux/Rpm/index.html","hash":"06de07a2df2a50f5c2298a1819fb94ccfd8cc7d7","modified":1717382853141},{"_id":"public/categories/Linux/Tools/Test/index.html","hash":"53a70ef343b48f9e29f1e8330eedb5ee0eeec573","modified":1717382853141},{"_id":"public/index.html","hash":"6a665c8a32bb62a9b7425cad27f5c1eae78a2ce7","modified":1717382853141},{"_id":"public/page/2/index.html","hash":"97e67681f1d14df43fd2232d0635a96154b8c76f","modified":1717382853141},{"_id":"public/tags/Linux/index.html","hash":"8f288178c2c0342a28467a08d7ea691d2b184bdd","modified":1717382853141},{"_id":"public/tags/Java/index.html","hash":"d69343f15834e60311f7eb72f11aeb059afc4699","modified":1717382853141},{"_id":"public/tags/Python/index.html","hash":"3094bace63d8a0f7835e47708a03272bee576d7a","modified":1717382853141},{"_id":"public/tags/Git/index.html","hash":"519b0b7fff5dfa499575423296da501207fe33c7","modified":1717382853141},{"_id":"public/tags/Rpm/index.html","hash":"06de07a2df2a50f5c2298a1819fb94ccfd8cc7d7","modified":1717382853141},{"_id":"public/tags/Docker/index.html","hash":"347341e3a073596ef2e565842c8d6e64c49f9461","modified":1717382853141},{"_id":"public/tags/nodejs/index.html","hash":"49223e582d27d492587e2dbd32192285863092e9","modified":1717382853141},{"_id":"public/tags/Blog/index.html","hash":"57c48e82e3f1bb867bdf32a3990d2e2ff463f842","modified":1717382853141},{"_id":"public/tags/Mysql/index.html","hash":"ffefe559886e61681d522aa50832ec10b2a11870","modified":1717382853141},{"_id":"public/tags/磁盘/index.html","hash":"a7d344acc30627380bb5c3b45ff1601a7b7862be","modified":1717382853141},{"_id":"public/tags/Test/index.html","hash":"53a70ef343b48f9e29f1e8330eedb5ee0eeec573","modified":1717382853141},{"_id":"public/img/AccessOK.png","hash":"f99bf1003acca3631543629496ab1b678f36cde6","modified":1717382853141},{"_id":"public/img/alipay.svg","hash":"3d94d2f9b09e352802628c9225578e1086f5fef3","modified":1717382853141},{"_id":"public/img/avatar.png","hash":"2f701dadc2dc8eb637f48b5eedf9bca7fb5fd031","modified":1717382853141},{"_id":"public/img/github.svg","hash":"277798d16cb6106e45ef74f6b9972011fa43401b","modified":1717382853141},{"_id":"public/img/bitcoin.svg","hash":"590b6b6462896168d08b30dfe2de5f08950d5553","modified":1717382853141},{"_id":"public/img/like.svg","hash":"e6e4bd1af076be9358316cac89efdc22ef4a5064","modified":1717382853141},{"_id":"public/img/paypal.svg","hash":"09786c983a10bc570dcd05b87cec601e9d01eb00","modified":1717382853141},{"_id":"public/img/wechat.svg","hash":"19c1f68ec8c0b8e9f7855e7a6e78077f70a1aedc","modified":1717382853141},{"_id":"public/css/copycode.css","hash":"803d8bf898f47c3929665eb7af97da22f11efacd","modified":1717382853141},{"_id":"public/css/search.css","hash":"0d0f73b357c3bc5077ef657c73f679b22bea93fb","modified":1717382853141},{"_id":"public/css/style.css","hash":"b8bd7e1fcd5abf50d3c11028d1da3b6f0b4cf5c8","modified":1717382853141},{"_id":"public/js/codeblock-resizer.js","hash":"5d0b786d60bf225d9eabcc9cece2719ff4d9b6cd","modified":1717382853141},{"_id":"public/js/copycode.js","hash":"fde1f153bab1f00ae8930668094c00aa9ff3c7a3","modified":1717382853141},{"_id":"public/js/fancybox.js","hash":"0ec64dd79760e01f7d88611b1bd5221ec30b80cb","modified":1717382853141},{"_id":"public/css/copyright.css","hash":"e857156bd1f971fe6abdc22d2b8c82e495387438","modified":1717382853141},{"_id":"public/js/search.js","hash":"6fdfd143646d12b8dbef9b5809cea768192f08aa","modified":1717382853141},{"_id":"public/css/donate.css","hash":"d631def20dfb661439c506f28dc791f331d506f8","modified":1717382853141},{"_id":"public/js/smartresize.js","hash":"3ef157fd877167e3290f42c67a624ea375a46c24","modified":1717382853141},{"_id":"public/js/totop.js","hash":"7dbf8fcf582a4fb6eb9b2c60d6de9f9c2091ec4c","modified":1717382853141},{"_id":"public/js/donate.js","hash":"bdddd8d9847462d020f7a511e7e12c046223195d","modified":1717382853141},{"_id":"public/js/copyright.js","hash":"7b1bd775ea22abf33d57f78628f436bf656e439a","modified":1717382853141},{"_id":"public/js/love.js","hash":"5cf89f622bf891cf1986845eb92eadef6f358eb7","modified":1717382853141},{"_id":"public/js/share.js","hash":"a2f9de374523dc7f2ddb90ed5f24b668c20d9272","modified":1717382853141},{"_id":"public/js/recent-comments.js","hash":"78708f86aa1fdcc003a056b1f91aac62d31bb012","modified":1717382853141},{"_id":"public/images/image-20231228185457722.png","hash":"ac4940c679b269b0c5a5305b40e348e64ab4e0ea","modified":1717382853141},{"_id":"public/images/image-20231229141435188.png","hash":"8a954f5c5a0f0544c61473fa415d0f1d31ee596f","modified":1717382853141},{"_id":"public/images/image-20231229155051281.png","hash":"3dbc2613005997c2d6578d068600da6bc42d8f86","modified":1717382853141},{"_id":"public/images/image-20231228184850234.png","hash":"46f0a3a94e615dd36a068a767a4c6a23e3308d3b","modified":1717382853141},{"_id":"public/images/image-20231228201621724.png","hash":"43cfdf2b6279b4c93878a4276cd821b0233b80d7","modified":1717382853141},{"_id":"public/images/image-20231228203258610.png","hash":"dec98ea4238e191538f75cf69ab65ba949918786","modified":1717382853141},{"_id":"public/images/image-20231228203329441.png","hash":"8c724c8c56fad195a52d54734bbad5ce0320a894","modified":1717382853141},{"_id":"public/images/image-20231229151952217.png","hash":"4ee15a6bfb04c7e2d2ce3191813e3d660a2b25b3","modified":1717382853141},{"_id":"public/images/image-20231229152826265.png","hash":"5153b25c763c226192ea68a3a8441da08a6f1698","modified":1717382853141},{"_id":"public/images/image-20231229152313834.png","hash":"805314ad840e640adf5a5b98f7e7fd2bd2ce9cb8","modified":1717382853141},{"_id":"public/images/image-20240112161213152.png","hash":"d22bd8018b7462f8f5e4aeefc2eb7b4472b9df63","modified":1717382853141},{"_id":"public/images/image-20231228191755526.png","hash":"d0599432d81a9ae725ae5fd43df0105a39796ef0","modified":1717382853141},{"_id":"public/images/image-20231228191834263.png","hash":"d919e42b7252709e175999b6fb86f1ed02210328","modified":1717382853141},{"_id":"public/images/image-20231228202958546.png","hash":"5ab4fe38793a6477f779e08de5747da920000ac1","modified":1717382853141},{"_id":"public/images/image-20231228203146416.png","hash":"a31932e5ef348368a1bc6e646d8c1e69689bea6e","modified":1717382853141},{"_id":"public/images/image-20231228212703017.png","hash":"c34896cd966e1ef3cd0a37ccc9e58a5888632882","modified":1717382853141},{"_id":"public/images/image-20231228223002957.png","hash":"1507de3959394f626337353d0bfcc43fa5f0bea8","modified":1717382853141},{"_id":"public/images/image-20231229135018445.png","hash":"393eac9b994e3cb33bf20cad9bd1cdb53afb4df6","modified":1717382853141},{"_id":"public/images/image-20231229141136199.png","hash":"94b751bb26797d83e3a7626ec517a71eec2bab72","modified":1717382853141},{"_id":"public/images/image-20231229153048490.png","hash":"b62d4b23d96ec1017ea4296a7ed4f7e681ad1dad","modified":1717382853141},{"_id":"public/images/image-20231229154121220.png","hash":"faa3ac14b0a0442c68fc35d3ef7b1df6add9c73b","modified":1717382853141},{"_id":"public/images/image-20231229153845717.png","hash":"7888380dee7ba14fe2fa6521ef11c68e5de908a3","modified":1717382853141},{"_id":"public/images/image-20231229155148823.png","hash":"1295f8d20b8f8ed74431cd7092cdbecb783fa2c1","modified":1717382853141},{"_id":"public/images/image-20231229151744918.png","hash":"5d85da823b73caac2ba1f68c64906fa8763505ae","modified":1717382853141},{"_id":"public/images/image-20231229160925504.png","hash":"3dfe1ae555b5d21a82fef34d9ccf68a8c701e65c","modified":1717382853141},{"_id":"public/images/image-20240112161247302.png","hash":"d29d458c57a0fa17f5cce6fbbfccae76bcb00c55","modified":1717382853141},{"_id":"public/images/image-20240112161655349.png","hash":"3e81cc9a4976c4c85c7ed10f4c68ac21488efb49","modified":1717382853141},{"_id":"public/images/image-20240112161504454.png","hash":"46806e0ec96b99aa64e41ca9e91b9ff08f9132f2","modified":1717382853141},{"_id":"public/images/image-20231228191201350.png","hash":"8de4a8877b10f83ee022d88aaa3f1a4039a4307b","modified":1717382853141}],"Category":[{"name":"分类","_id":"clt6vkphc0005evig8maw1azb"},{"name":"Openstack","_id":"clt6vkphg000aevigd7vna27a"},{"name":"Linux","_id":"clt6vkphk000eevigf8ued8e3"},{"name":"子分类","parent":"clt6vkphc0005evig8maw1azb","_id":"clt6vkphm000kevig7rim7bxz"},{"name":"Deploy","parent":"clt6vkphg000aevigd7vna27a","_id":"clt6vkpho000qevig73juf3u6"},{"name":"Python","parent":"clt6vkphk000eevigf8ued8e3","_id":"clt6vkphv001aevigcsfrbjqd"},{"name":"Java","parent":"clt6vkphk000eevigf8ued8e3","_id":"clt6vkphx001ievigbmcte21g"},{"name":"Tools","parent":"clt6vkphk000eevigf8ued8e3","_id":"clt6vkphx001mevig540w7pyv"},{"name":"Learning Tools","_id":"clt6vkphz001vevig33tf5nqs"},{"name":"Nova","parent":"clt6vkphg000aevigd7vna27a","_id":"clt6vkphz0020evig2h30gtfz"},{"name":"Mysql","parent":"clt6vkphk000eevigf8ued8e3","_id":"clt6vkpi3002kevighyokamlh"},{"name":"Git","parent":"clt6vkphx001mevig540w7pyv","_id":"clt6vkpi4002qevig0jj2f4b8"},{"name":"Linux","parent":"clt6vkphz001vevig33tf5nqs","_id":"clt6vkpi5002wevig28lsbp8j"},{"name":"Development","parent":"clt6vkphz0020evig2h30gtfz","_id":"clt6vkpi50031evig4ogmhc91"},{"name":"Docker","parent":"clt6vkphx001mevig540w7pyv","_id":"clt6vkpi50036evig35la1f3a"},{"name":"Hexo","parent":"clt6vkphz001vevig33tf5nqs","_id":"clt6vkpi60038evigep3mag3n"},{"name":"Rpm","parent":"clt6vkpi5002wevig28lsbp8j","_id":"clt6vkpi7003hevig2kkuajfk"},{"name":"Test","parent":"clt6vkphx001mevig540w7pyv","_id":"clt6vno4r003wevigh2j81rua"},{"name":"Openstack","parent":"clt6vkphk000eevigf8ued8e3","_id":"clt6voq6y0045evig7b2qbbo3"},{"name":"Rpm","parent":"clt6vkphk000eevigf8ued8e3","_id":"clwycz7q20004fzig5rpo0dpe"},{"name":"OpenEuler","parent":"clwycz7q20004fzig5rpo0dpe","_id":"clwycz7q7000afzigda7410rf"}],"Data":[],"Page":[{"title":"AccessOK's About","date":"2023-12-15T09:00:09.000Z","layout":"true","_content":"## reading\n\n## writing","source":"about/index.md","raw":"---\ntitle: AccessOK's About\ndate: 2023-12-15 17:00:09\nlayout: true\n---\n## reading\n\n## writing","updated":"2023-12-26T06:00:32.423Z","path":"about/index.html","comments":1,"_id":"clt6vkph50000evig557g8dhk","content":"<h2 id=\"reading\"><a href=\"#reading\" class=\"headerlink\" title=\"reading\"></a>reading</h2><h2 id=\"writing\"><a href=\"#writing\" class=\"headerlink\" title=\"writing\"></a>writing</h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"reading\"><a href=\"#reading\" class=\"headerlink\" title=\"reading\"></a>reading</h2><h2 id=\"writing\"><a href=\"#writing\" class=\"headerlink\" title=\"writing\"></a>writing</h2>"},{"title":"archive","date":"2023-12-26T05:46:28.000Z","_content":"","source":"archive/index.md","raw":"---\ntitle: archive\ndate: 2023-12-26 13:46:28\n---\n","updated":"2023-12-26T05:46:28.680Z","path":"archive/index.html","comments":1,"layout":"page","_id":"clt6vkpha0002evig0v4j7e04","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"_content":"# Openstack-实例网络联通性调研测试\n\n环境：Openstack-v \n\n先删除所有网络，子网，端口，路由。\n\n## 测试步骤\n\n- 新建selfservice网络并创建实例，测试网络的封闭性。\n- 在selfservice网路创建实例，测试局域网的连通性。\n- 创建provider 网络，并通过路由连接到selfservice网络。连接实例与外部机器。测试路由有效。\n- 删除路由，创建浮动ip。浮动ip绑定实例，通过实例连接外部机器，外部机器通过浮动ip连接实例，测试浮动ip有效。\n\n## 云管平台验证\n\n1.创建私有网络。\n\n![image-20231228184850234](/home/wang/UOS/AccessOK/blog/source/images/image-20231228184850234.png)\n\n![image-20231228185457722](/home/wang/UOS/AccessOK/blog/source/images/image-20231228185457722.png)\n\n2.创建私有网络子网。\n\n![image-20231228185607415](/home/wang/.config/Typora/typora-user-images/image-20231228185607415.png)\n\n![image-20231228185958149](/home/wang/.config/Typora/typora-user-images/image-20231228185958149.png)\n\n3.通过私有网络创建实例。\n\n创建实例失败。\n\n![image-20231228191201350](/home/wang/UOS/AccessOK/blog/source/images/image-20231228191201350.png)\n\n4.选中之后批量删除实例，实例假删除。但是回收站中没有刚删除的实例。\n\n![image-20231228191755526](/home/wang/UOS/AccessOK/blog/source/images/image-20231228191755526.png)\n\n但是后台实例并没有删除。\n\n![image-20231228191834263](/home/wang/UOS/AccessOK/blog/source/images/image-20231228191834263.png)\n\nBUG：批量删除没有删除到回收站，数据库进行了删除操作，但是个人回收站无法查询到刚删除的实例。\n\n5.关闭“新建卷”创建实例成功，但是实例里面没有ip。\n\n![image-20231228201621724](/home/wang/UOS/AccessOK/blog/source/images/image-20231228201621724.png)\n\n![image-20231228203258610](/home/wang/UOS/AccessOK/blog/source/images/image-20231228203258610.png)\n\n6.同样的方式再创建一个实例。\n\n![image-20231228202958546](/home/wang/UOS/AccessOK/blog/source/images/image-20231228202958546.png)\n\n![image-20231228203329441](/home/wang/UOS/AccessOK/blog/source/images/image-20231228203329441.png)\n\nBUG：实例端口显示两个相同的ip\n\n![image-20231228203146416](/home/wang/UOS/AccessOK/blog/source/images/image-20231228203146416.png)\n\n7.通过dashboard 创建实例，查看ip状态。同样没有ip。\n![image-20231228212703017](/home/wang/UOS/AccessOK/blog/source/images/image-20231228212703017.png)\n\n8.更新148环境的iptables版本。并重启148环境，创建实例之后，有ip:10.100.10.20。\n\n![image-20231228223002957](/home/wang/UOS/AccessOK/blog/source/images/image-20231228223002957.png)\n\n9.在次创建实例，测试实例互通性。由此可知vxlan网络内实例互通。\n\n![image-20231229135018445](/home/wang/UOS/AccessOK/blog/source/images/image-20231229135018445.png)\n\n10.创建新的vxlan网络和子网。\n\n![image-20231229141136199](/home/wang/UOS/AccessOK/blog/source/images/image-20231229141136199.png)\n\n![image-20231229141435188](/home/wang/UOS/AccessOK/blog/source/images/image-20231229141435188.png)\n\n11.用不同局域网创建实例，测试不同局域网的连通性。预估结果，不同局域网之间实例链接失败。\n\n![image-20231229151744918](/home/wang/UOS/AccessOK/blog/source/images/image-20231229151744918.png)\n\n12.创建路由，链接两个局域网。\n\n![image-20231229151952217](/home/wang/UOS/AccessOK/blog/source/images/image-20231229151952217.png)\n\n![image-20231229152313834](/home/wang/UOS/AccessOK/blog/source/images/image-20231229152313834.png)\n\n![image-20231229152826265](/home/wang/UOS/AccessOK/blog/source/images/image-20231229152826265.png)\n\n13.再次连通两个实例，实例链接成功。\n\n![image-20231229153048490](/home/wang/UOS/AccessOK/blog/source/images/image-20231229153048490.png)\n\n14.创建provider网络。\n\n![image-20231229153845717](/home/wang/UOS/AccessOK/blog/source/images/image-20231229153845717.png)\n\n15.创建provider子网\n\n![image-20231229154121220](/home/wang/UOS/AccessOK/blog/source/images/image-20231229154121220.png)\n\n![image-20231229155051281](/home/wang/UOS/AccessOK/blog/source/images/image-20231229155051281.png)\n\n16.验证实例不能连通外部网络。\n\n![image-20231229155148823](/home/wang/UOS/AccessOK/blog/source/images/image-20231229155148823.png)\n\n17.使用provider网络创建实例，并测试实例的外网连通性。\n\n![image-20231229160925504](/home/wang/UOS/AccessOK/blog/source/images/image-20231229160925504.png)\n\n18.外部连通失败。执行如下脚本，关闭环境宿主机端口。嵌套openstack环境，所以需要关闭所有网络的端口安全。\n\n```bash\nserver_id=$1\n\nsource /root/admin-openrc.sh\nport_ids=`openstack port list --server $server_id -f value -c ID`\n\nfor i in ${port_ids[@]}; \ndo\n    echo \"disable security for port $i\";\n    openstack port set --disable-port-security --no-security-group $i;\ndone\n```\n\n\n\n## 问题反馈\n\nwlw：删除快照失败。","source":"_drafts/Openstack-实例网络联通性调研测试.md","raw":"# Openstack-实例网络联通性调研测试\n\n环境：Openstack-v \n\n先删除所有网络，子网，端口，路由。\n\n## 测试步骤\n\n- 新建selfservice网络并创建实例，测试网络的封闭性。\n- 在selfservice网路创建实例，测试局域网的连通性。\n- 创建provider 网络，并通过路由连接到selfservice网络。连接实例与外部机器。测试路由有效。\n- 删除路由，创建浮动ip。浮动ip绑定实例，通过实例连接外部机器，外部机器通过浮动ip连接实例，测试浮动ip有效。\n\n## 云管平台验证\n\n1.创建私有网络。\n\n![image-20231228184850234](/home/wang/UOS/AccessOK/blog/source/images/image-20231228184850234.png)\n\n![image-20231228185457722](/home/wang/UOS/AccessOK/blog/source/images/image-20231228185457722.png)\n\n2.创建私有网络子网。\n\n![image-20231228185607415](/home/wang/.config/Typora/typora-user-images/image-20231228185607415.png)\n\n![image-20231228185958149](/home/wang/.config/Typora/typora-user-images/image-20231228185958149.png)\n\n3.通过私有网络创建实例。\n\n创建实例失败。\n\n![image-20231228191201350](/home/wang/UOS/AccessOK/blog/source/images/image-20231228191201350.png)\n\n4.选中之后批量删除实例，实例假删除。但是回收站中没有刚删除的实例。\n\n![image-20231228191755526](/home/wang/UOS/AccessOK/blog/source/images/image-20231228191755526.png)\n\n但是后台实例并没有删除。\n\n![image-20231228191834263](/home/wang/UOS/AccessOK/blog/source/images/image-20231228191834263.png)\n\nBUG：批量删除没有删除到回收站，数据库进行了删除操作，但是个人回收站无法查询到刚删除的实例。\n\n5.关闭“新建卷”创建实例成功，但是实例里面没有ip。\n\n![image-20231228201621724](/home/wang/UOS/AccessOK/blog/source/images/image-20231228201621724.png)\n\n![image-20231228203258610](/home/wang/UOS/AccessOK/blog/source/images/image-20231228203258610.png)\n\n6.同样的方式再创建一个实例。\n\n![image-20231228202958546](/home/wang/UOS/AccessOK/blog/source/images/image-20231228202958546.png)\n\n![image-20231228203329441](/home/wang/UOS/AccessOK/blog/source/images/image-20231228203329441.png)\n\nBUG：实例端口显示两个相同的ip\n\n![image-20231228203146416](/home/wang/UOS/AccessOK/blog/source/images/image-20231228203146416.png)\n\n7.通过dashboard 创建实例，查看ip状态。同样没有ip。\n![image-20231228212703017](/home/wang/UOS/AccessOK/blog/source/images/image-20231228212703017.png)\n\n8.更新148环境的iptables版本。并重启148环境，创建实例之后，有ip:10.100.10.20。\n\n![image-20231228223002957](/home/wang/UOS/AccessOK/blog/source/images/image-20231228223002957.png)\n\n9.在次创建实例，测试实例互通性。由此可知vxlan网络内实例互通。\n\n![image-20231229135018445](/home/wang/UOS/AccessOK/blog/source/images/image-20231229135018445.png)\n\n10.创建新的vxlan网络和子网。\n\n![image-20231229141136199](/home/wang/UOS/AccessOK/blog/source/images/image-20231229141136199.png)\n\n![image-20231229141435188](/home/wang/UOS/AccessOK/blog/source/images/image-20231229141435188.png)\n\n11.用不同局域网创建实例，测试不同局域网的连通性。预估结果，不同局域网之间实例链接失败。\n\n![image-20231229151744918](/home/wang/UOS/AccessOK/blog/source/images/image-20231229151744918.png)\n\n12.创建路由，链接两个局域网。\n\n![image-20231229151952217](/home/wang/UOS/AccessOK/blog/source/images/image-20231229151952217.png)\n\n![image-20231229152313834](/home/wang/UOS/AccessOK/blog/source/images/image-20231229152313834.png)\n\n![image-20231229152826265](/home/wang/UOS/AccessOK/blog/source/images/image-20231229152826265.png)\n\n13.再次连通两个实例，实例链接成功。\n\n![image-20231229153048490](/home/wang/UOS/AccessOK/blog/source/images/image-20231229153048490.png)\n\n14.创建provider网络。\n\n![image-20231229153845717](/home/wang/UOS/AccessOK/blog/source/images/image-20231229153845717.png)\n\n15.创建provider子网\n\n![image-20231229154121220](/home/wang/UOS/AccessOK/blog/source/images/image-20231229154121220.png)\n\n![image-20231229155051281](/home/wang/UOS/AccessOK/blog/source/images/image-20231229155051281.png)\n\n16.验证实例不能连通外部网络。\n\n![image-20231229155148823](/home/wang/UOS/AccessOK/blog/source/images/image-20231229155148823.png)\n\n17.使用provider网络创建实例，并测试实例的外网连通性。\n\n![image-20231229160925504](/home/wang/UOS/AccessOK/blog/source/images/image-20231229160925504.png)\n\n18.外部连通失败。执行如下脚本，关闭环境宿主机端口。嵌套openstack环境，所以需要关闭所有网络的端口安全。\n\n```bash\nserver_id=$1\n\nsource /root/admin-openrc.sh\nport_ids=`openstack port list --server $server_id -f value -c ID`\n\nfor i in ${port_ids[@]}; \ndo\n    echo \"disable security for port $i\";\n    openstack port set --disable-port-security --no-security-group $i;\ndone\n```\n\n\n\n## 问题反馈\n\nwlw：删除快照失败。","slug":"Openstack-实例网络联通性调研测试","published":0,"date":"2023-12-28T08:06:33.068Z","updated":"2023-12-29T11:42:02.042Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"clt6vkph70001evig3u6qd27q","content":"<h1 id=\"Openstack-实例网络联通性调研测试\"><a href=\"#Openstack-实例网络联通性调研测试\" class=\"headerlink\" title=\"Openstack-实例网络联通性调研测试\"></a>Openstack-实例网络联通性调研测试</h1><p>环境：Openstack-v </p>\n<p>先删除所有网络，子网，端口，路由。</p>\n<h2 id=\"测试步骤\"><a href=\"#测试步骤\" class=\"headerlink\" title=\"测试步骤\"></a>测试步骤</h2><ul>\n<li>新建selfservice网络并创建实例，测试网络的封闭性。</li>\n<li>在selfservice网路创建实例，测试局域网的连通性。</li>\n<li>创建provider 网络，并通过路由连接到selfservice网络。连接实例与外部机器。测试路由有效。</li>\n<li>删除路由，创建浮动ip。浮动ip绑定实例，通过实例连接外部机器，外部机器通过浮动ip连接实例，测试浮动ip有效。</li>\n</ul>\n<h2 id=\"云管平台验证\"><a href=\"#云管平台验证\" class=\"headerlink\" title=\"云管平台验证\"></a>云管平台验证</h2><p>1.创建私有网络。</p>\n<p><img src=\"/home/wang/UOS/AccessOK/blog/source/images/image-20231228184850234.png\" alt=\"image-20231228184850234\"></p>\n<p><img src=\"/home/wang/UOS/AccessOK/blog/source/images/image-20231228185457722.png\" alt=\"image-20231228185457722\"></p>\n<p>2.创建私有网络子网。</p>\n<p><img src=\"/home/wang/.config/Typora/typora-user-images/image-20231228185607415.png\" alt=\"image-20231228185607415\"></p>\n<p><img src=\"/home/wang/.config/Typora/typora-user-images/image-20231228185958149.png\" alt=\"image-20231228185958149\"></p>\n<p>3.通过私有网络创建实例。</p>\n<p>创建实例失败。</p>\n<p><img src=\"/home/wang/UOS/AccessOK/blog/source/images/image-20231228191201350.png\" alt=\"image-20231228191201350\"></p>\n<p>4.选中之后批量删除实例，实例假删除。但是回收站中没有刚删除的实例。</p>\n<p><img src=\"/home/wang/UOS/AccessOK/blog/source/images/image-20231228191755526.png\" alt=\"image-20231228191755526\"></p>\n<p>但是后台实例并没有删除。</p>\n<p><img src=\"/home/wang/UOS/AccessOK/blog/source/images/image-20231228191834263.png\" alt=\"image-20231228191834263\"></p>\n<p>BUG：批量删除没有删除到回收站，数据库进行了删除操作，但是个人回收站无法查询到刚删除的实例。</p>\n<p>5.关闭“新建卷”创建实例成功，但是实例里面没有ip。</p>\n<p><img src=\"/home/wang/UOS/AccessOK/blog/source/images/image-20231228201621724.png\" alt=\"image-20231228201621724\"></p>\n<p><img src=\"/home/wang/UOS/AccessOK/blog/source/images/image-20231228203258610.png\" alt=\"image-20231228203258610\"></p>\n<p>6.同样的方式再创建一个实例。</p>\n<p><img src=\"/home/wang/UOS/AccessOK/blog/source/images/image-20231228202958546.png\" alt=\"image-20231228202958546\"></p>\n<p><img src=\"/home/wang/UOS/AccessOK/blog/source/images/image-20231228203329441.png\" alt=\"image-20231228203329441\"></p>\n<p>BUG：实例端口显示两个相同的ip</p>\n<p><img src=\"/home/wang/UOS/AccessOK/blog/source/images/image-20231228203146416.png\" alt=\"image-20231228203146416\"></p>\n<p>7.通过dashboard 创建实例，查看ip状态。同样没有ip。<br><img src=\"/home/wang/UOS/AccessOK/blog/source/images/image-20231228212703017.png\" alt=\"image-20231228212703017\"></p>\n<p>8.更新148环境的iptables版本。并重启148环境，创建实例之后，有ip:10.100.10.20。</p>\n<p><img src=\"/home/wang/UOS/AccessOK/blog/source/images/image-20231228223002957.png\" alt=\"image-20231228223002957\"></p>\n<p>9.在次创建实例，测试实例互通性。由此可知vxlan网络内实例互通。</p>\n<p><img src=\"/home/wang/UOS/AccessOK/blog/source/images/image-20231229135018445.png\" alt=\"image-20231229135018445\"></p>\n<p>10.创建新的vxlan网络和子网。</p>\n<p><img src=\"/home/wang/UOS/AccessOK/blog/source/images/image-20231229141136199.png\" alt=\"image-20231229141136199\"></p>\n<p><img src=\"/home/wang/UOS/AccessOK/blog/source/images/image-20231229141435188.png\" alt=\"image-20231229141435188\"></p>\n<p>11.用不同局域网创建实例，测试不同局域网的连通性。预估结果，不同局域网之间实例链接失败。</p>\n<p><img src=\"/home/wang/UOS/AccessOK/blog/source/images/image-20231229151744918.png\" alt=\"image-20231229151744918\"></p>\n<p>12.创建路由，链接两个局域网。</p>\n<p><img src=\"/home/wang/UOS/AccessOK/blog/source/images/image-20231229151952217.png\" alt=\"image-20231229151952217\"></p>\n<p><img src=\"/home/wang/UOS/AccessOK/blog/source/images/image-20231229152313834.png\" alt=\"image-20231229152313834\"></p>\n<p><img src=\"/home/wang/UOS/AccessOK/blog/source/images/image-20231229152826265.png\" alt=\"image-20231229152826265\"></p>\n<p>13.再次连通两个实例，实例链接成功。</p>\n<p><img src=\"/home/wang/UOS/AccessOK/blog/source/images/image-20231229153048490.png\" alt=\"image-20231229153048490\"></p>\n<p>14.创建provider网络。</p>\n<p><img src=\"/home/wang/UOS/AccessOK/blog/source/images/image-20231229153845717.png\" alt=\"image-20231229153845717\"></p>\n<p>15.创建provider子网</p>\n<p><img src=\"/home/wang/UOS/AccessOK/blog/source/images/image-20231229154121220.png\" alt=\"image-20231229154121220\"></p>\n<p><img src=\"/home/wang/UOS/AccessOK/blog/source/images/image-20231229155051281.png\" alt=\"image-20231229155051281\"></p>\n<p>16.验证实例不能连通外部网络。</p>\n<p><img src=\"/home/wang/UOS/AccessOK/blog/source/images/image-20231229155148823.png\" alt=\"image-20231229155148823\"></p>\n<p>17.使用provider网络创建实例，并测试实例的外网连通性。</p>\n<p><img src=\"/home/wang/UOS/AccessOK/blog/source/images/image-20231229160925504.png\" alt=\"image-20231229160925504\"></p>\n<p>18.外部连通失败。执行如下脚本，关闭环境宿主机端口。嵌套openstack环境，所以需要关闭所有网络的端口安全。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server_id=<span class=\"variable\">$1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">source</span> /root/admin-openrc.sh</span><br><span class=\"line\">port_ids=`openstack port list --server <span class=\"variable\">$server_id</span> -f value -c ID`</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"variable\">$&#123;port_ids[@]&#125;</span>; </span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;disable security for port <span class=\"variable\">$i</span>&quot;</span>;</span><br><span class=\"line\">    openstack port <span class=\"built_in\">set</span> --disable-port-security --no-security-group <span class=\"variable\">$i</span>;</span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"问题反馈\"><a href=\"#问题反馈\" class=\"headerlink\" title=\"问题反馈\"></a>问题反馈</h2><p>wlw：删除快照失败。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Openstack-实例网络联通性调研测试\"><a href=\"#Openstack-实例网络联通性调研测试\" class=\"headerlink\" title=\"Openstack-实例网络联通性调研测试\"></a>Openstack-实例网络联通性调研测试</h1><p>环境：Openstack-v </p>\n<p>先删除所有网络，子网，端口，路由。</p>\n<h2 id=\"测试步骤\"><a href=\"#测试步骤\" class=\"headerlink\" title=\"测试步骤\"></a>测试步骤</h2><ul>\n<li>新建selfservice网络并创建实例，测试网络的封闭性。</li>\n<li>在selfservice网路创建实例，测试局域网的连通性。</li>\n<li>创建provider 网络，并通过路由连接到selfservice网络。连接实例与外部机器。测试路由有效。</li>\n<li>删除路由，创建浮动ip。浮动ip绑定实例，通过实例连接外部机器，外部机器通过浮动ip连接实例，测试浮动ip有效。</li>\n</ul>\n<h2 id=\"云管平台验证\"><a href=\"#云管平台验证\" class=\"headerlink\" title=\"云管平台验证\"></a>云管平台验证</h2><p>1.创建私有网络。</p>\n<p><img src=\"/home/wang/UOS/AccessOK/blog/source/images/image-20231228184850234.png\" alt=\"image-20231228184850234\"></p>\n<p><img src=\"/home/wang/UOS/AccessOK/blog/source/images/image-20231228185457722.png\" alt=\"image-20231228185457722\"></p>\n<p>2.创建私有网络子网。</p>\n<p><img src=\"/home/wang/.config/Typora/typora-user-images/image-20231228185607415.png\" alt=\"image-20231228185607415\"></p>\n<p><img src=\"/home/wang/.config/Typora/typora-user-images/image-20231228185958149.png\" alt=\"image-20231228185958149\"></p>\n<p>3.通过私有网络创建实例。</p>\n<p>创建实例失败。</p>\n<p><img src=\"/home/wang/UOS/AccessOK/blog/source/images/image-20231228191201350.png\" alt=\"image-20231228191201350\"></p>\n<p>4.选中之后批量删除实例，实例假删除。但是回收站中没有刚删除的实例。</p>\n<p><img src=\"/home/wang/UOS/AccessOK/blog/source/images/image-20231228191755526.png\" alt=\"image-20231228191755526\"></p>\n<p>但是后台实例并没有删除。</p>\n<p><img src=\"/home/wang/UOS/AccessOK/blog/source/images/image-20231228191834263.png\" alt=\"image-20231228191834263\"></p>\n<p>BUG：批量删除没有删除到回收站，数据库进行了删除操作，但是个人回收站无法查询到刚删除的实例。</p>\n<p>5.关闭“新建卷”创建实例成功，但是实例里面没有ip。</p>\n<p><img src=\"/home/wang/UOS/AccessOK/blog/source/images/image-20231228201621724.png\" alt=\"image-20231228201621724\"></p>\n<p><img src=\"/home/wang/UOS/AccessOK/blog/source/images/image-20231228203258610.png\" alt=\"image-20231228203258610\"></p>\n<p>6.同样的方式再创建一个实例。</p>\n<p><img src=\"/home/wang/UOS/AccessOK/blog/source/images/image-20231228202958546.png\" alt=\"image-20231228202958546\"></p>\n<p><img src=\"/home/wang/UOS/AccessOK/blog/source/images/image-20231228203329441.png\" alt=\"image-20231228203329441\"></p>\n<p>BUG：实例端口显示两个相同的ip</p>\n<p><img src=\"/home/wang/UOS/AccessOK/blog/source/images/image-20231228203146416.png\" alt=\"image-20231228203146416\"></p>\n<p>7.通过dashboard 创建实例，查看ip状态。同样没有ip。<br><img src=\"/home/wang/UOS/AccessOK/blog/source/images/image-20231228212703017.png\" alt=\"image-20231228212703017\"></p>\n<p>8.更新148环境的iptables版本。并重启148环境，创建实例之后，有ip:10.100.10.20。</p>\n<p><img src=\"/home/wang/UOS/AccessOK/blog/source/images/image-20231228223002957.png\" alt=\"image-20231228223002957\"></p>\n<p>9.在次创建实例，测试实例互通性。由此可知vxlan网络内实例互通。</p>\n<p><img src=\"/home/wang/UOS/AccessOK/blog/source/images/image-20231229135018445.png\" alt=\"image-20231229135018445\"></p>\n<p>10.创建新的vxlan网络和子网。</p>\n<p><img src=\"/home/wang/UOS/AccessOK/blog/source/images/image-20231229141136199.png\" alt=\"image-20231229141136199\"></p>\n<p><img src=\"/home/wang/UOS/AccessOK/blog/source/images/image-20231229141435188.png\" alt=\"image-20231229141435188\"></p>\n<p>11.用不同局域网创建实例，测试不同局域网的连通性。预估结果，不同局域网之间实例链接失败。</p>\n<p><img src=\"/home/wang/UOS/AccessOK/blog/source/images/image-20231229151744918.png\" alt=\"image-20231229151744918\"></p>\n<p>12.创建路由，链接两个局域网。</p>\n<p><img src=\"/home/wang/UOS/AccessOK/blog/source/images/image-20231229151952217.png\" alt=\"image-20231229151952217\"></p>\n<p><img src=\"/home/wang/UOS/AccessOK/blog/source/images/image-20231229152313834.png\" alt=\"image-20231229152313834\"></p>\n<p><img src=\"/home/wang/UOS/AccessOK/blog/source/images/image-20231229152826265.png\" alt=\"image-20231229152826265\"></p>\n<p>13.再次连通两个实例，实例链接成功。</p>\n<p><img src=\"/home/wang/UOS/AccessOK/blog/source/images/image-20231229153048490.png\" alt=\"image-20231229153048490\"></p>\n<p>14.创建provider网络。</p>\n<p><img src=\"/home/wang/UOS/AccessOK/blog/source/images/image-20231229153845717.png\" alt=\"image-20231229153845717\"></p>\n<p>15.创建provider子网</p>\n<p><img src=\"/home/wang/UOS/AccessOK/blog/source/images/image-20231229154121220.png\" alt=\"image-20231229154121220\"></p>\n<p><img src=\"/home/wang/UOS/AccessOK/blog/source/images/image-20231229155051281.png\" alt=\"image-20231229155051281\"></p>\n<p>16.验证实例不能连通外部网络。</p>\n<p><img src=\"/home/wang/UOS/AccessOK/blog/source/images/image-20231229155148823.png\" alt=\"image-20231229155148823\"></p>\n<p>17.使用provider网络创建实例，并测试实例的外网连通性。</p>\n<p><img src=\"/home/wang/UOS/AccessOK/blog/source/images/image-20231229160925504.png\" alt=\"image-20231229160925504\"></p>\n<p>18.外部连通失败。执行如下脚本，关闭环境宿主机端口。嵌套openstack环境，所以需要关闭所有网络的端口安全。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server_id=<span class=\"variable\">$1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">source</span> /root/admin-openrc.sh</span><br><span class=\"line\">port_ids=`openstack port list --server <span class=\"variable\">$server_id</span> -f value -c ID`</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"variable\">$&#123;port_ids[@]&#125;</span>; </span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;disable security for port <span class=\"variable\">$i</span>&quot;</span>;</span><br><span class=\"line\">    openstack port <span class=\"built_in\">set</span> --disable-port-security --no-security-group <span class=\"variable\">$i</span>;</span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"问题反馈\"><a href=\"#问题反馈\" class=\"headerlink\" title=\"问题反馈\"></a>问题反馈</h2><p>wlw：删除快照失败。</p>\n"},{"title":"这里是文章的标题","date":"2023-12-25T08:27:12.681Z","description":"这里填写摘要。也可以把摘要这一段删去，在文章中想要截断的地方加入<!--more-->，这样在首页就只显示开头到截断的内容，而不会显示全文","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_drafts/hello-world.md","raw":"---\ntitle: 这里是文章的标题\ndate: 这里是发表时间，如：2021-08-15 08:15:16\ndescription: 这里填写摘要。也可以把摘要这一段删去，在文章中想要截断的地方加入<!--more-->，这样在首页就只显示开头到截断的内容，而不会显示全文\ncategories:\n- 分类\n- 子分类\ntags:\n- 标签1\n- 标签2\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":0,"updated":"2023-12-25T08:27:12.681Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clt6vkpha0003evig4akh1u83","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"kolla编译Openstack容器镜像","date":"2023-12-15T02:27:28.000Z","description":"kolla编译Openstack容器镜像","type":"tags","comments":1,"_content":"\nkolla提供编译镜像的功能，kolla-ansible具有部署openstack的功能。\n### 系统配置\n#### 关闭防火墙\n```bash\nsystemctl disable --now firewalld\n```\n#### 配置域名\n```bash\n#增加域名解析\necho \"10.30.38.116 harbor.chinauos.com\" >> /etc/hosts\n```\n注：\n“registry.uniontech.com”和“harbor.chinauos.com” 是两个容器镜像仓库。\n其中“harbor.chinauos.com”是对外仓库，“registry.uniontech.com”是研发仓库。\n### 搭建编译环境\n#### 安装配置docker\n安装docker和openstack-kolla包\n```bash\nyum install moby-engine  git -y python3-devel\n```\n配置docker\n```bash\nsystemctl enable --now  docker.service\n```\n修改docker配置文件:/etc/docker/daemon.json\n```bash\n{\n    \"insecure-registries\": [\n        \"registry.uniontech.com\", \"harbor.chinauos.com\"\n    ]\n}\n```\n注：配置docker拉取容器镜像的仓库，配置此域名之后要配置相应的域名。\n“registry.uniontech.com”账户和密码：\n“harbor.chinauos.com”账户和密码：\n为docker配置不安全仓库之后重新启动docker服务。\n```bash\nsystemctl daemon-reload \nsystemctl restart docker.service \n```\n#### 安装openstack-kolla\n```bash\n#拉起openstack-kolla源码\ngit clone -b victoria-source \\\n\"http://gerrit-dev.uniontech.com/openstack/openstack-kolla\"\n#切换到响应的分支安装\n#使用pip3安装/卸载源码\npip3 install openstack-kolla/\npip3 uninstall openstack-kolla/\n```\n注：\n\n1. 安装后所有容器镜像的Dockerfile都在/usr/local/share/kolla/docker对应名称目录下。\n2. 若需要修改容器镜像找到对应的目录，更改模板文件即可。\n3. 更新sql文件，请将sql文件重新命名为ustack.sql.j2。\n#### 登录harbor仓库\n```bash\ndocker login harbor.chinauos.com\n```\nUsername: ustack\nPassword: Ustack12#$\n参考：[https://ivanzz1001.github.io/records/post/docker/2018/04/11/docker-harbor-uage](https://ivanzz1001.github.io/records/post/docker/2018/04/11/docker-harbor-uage)\nharbor是镜像管理平台，登录用户之后，则可根据用户角色权限操作镜像。\n### 编译镜像\n```bash\nkolla-build \\\n--base-image harbor.chinauos.com/ren-test/uniontechos-server-20-1060a-x86  \\\n--config-file kolla-build.conf \\\n-t source \\\n--base uniontechos \\\n--tag victoria \\\nnova\n```\n参数说明: \n--base-image 使用指定的基础镜像\n--base 构建uniontechos镜像\n--tag 构建镜像生成镜像的tag\n--base-image 根据不架构修改-x86/-arm \n--config-file 指定特定的源码地址构建镜像。\n--template-only 不制作镜像，仅仅生成 Dockerfile文件。\n注：openstack上搭建环境时，建议采用外部网络直连的方式配置虚拟机网络，采用xlan网络配置浮动ip时，在构建容器镜像时会导致安装依赖失败，拉取不到容器里的依赖，亲测有效。\n注：部分参数可以使用kolla-build --help查询，image和tag等变量信息可以登录harbor进行查看。例如当前镜像在harbor.chinauos.com域名下的ren-test项目下的uniontechos-server-20-1060a-x86镜像。点击镜像即可查询tag名称。\nkolla-build.conf 格式参考如下：\n```bash\n[nova-base]\ntype = git\nlocation = http://gerrit-dev.uniontech.com/openstack/openstack-nova\nreference = victoria-source\n\n[cinder-base]\ntype = git\nlocation = http://gerrit-dev.uniontech.com/openstack/openstack-cinder\nreference = victoria-source\n```\n容器镜像仓库配置。可根据自身想要的安装包，配置源地址，此处的源地址是指构建容器镜像时安装依赖的rpm包的仓库地址。\n构建镜像 x86的源为:/usr/local/share/kolla/docker/base/UniontechOS.repo\n```bash\n[UniontechOS-$releasever-AppStream]\nname = UniontechOS $releasever AppStream\n#baseurl = https://cdimage.uniontech.com/server-dev/1060/a/release/compose/AppStream/x86_64/os/\nbaseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/AppStream/x86_64/os/\nenabled = 1\ngpgcheck = 0\nmodule_hotfixes=true\n\n[UniontechOS-$releasever-BaseOS]\nname = UniontechOS $releasever BaseOS\n#baseurl = http://10.30.38.131/kojifiles/repos/kongzi-build/latest/x86_64/\nbaseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/BaseOS/x86_64/os/\n#baseurl = https://cdimage.uniontech.com/server-dev/1060/a/release/compose/BaseOS/x86_64/os/\nenabled = 1\ngpgcheck = 0\nmodule_hotfixes=true\n\n[UnionTechOS-$releasever-openstack]\nname = UnionTechOS $releasever openstack\nbaseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/OpenStack-Victoria/x86_64/os/\n#baseurl = http://10.30.38.131/kojifiles/repos/kongzi-openstack-victoria-build/latest/x86_64/\nenabled = 1\ngpgcheck = 0\n\n[ceph]\nname=ceph\nbaseurl=https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/Storage/x86_64/\ngpgcheck=0\nenabled=0\nmodule_hotfixes=true\n\n[Tools]\nname = Tools\nbaseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/PowerTools/x86_64/os/\nenabled = 0\ngpgcheck = 0\n\n[PLUS]\nname = plus\nbaseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/Plus/x86_64/os/\nenabled = 0\ngpgcheck = 0\n```\n构建镜像 arm的源为:/usr/local/share/kolla/docker/base/Ustack_aarch64.repo\n```bash\n[UniontechOS-$releasever-AppStream]\nname = UniontechOS $releasever AppStream\n#https://cdimage.uniontech.com/server-dev/1060/e/release-0606/arm64/OS/\nbaseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/AppStream/aarch64/os/\n#baseurl = http://pools.uniontech.com/server-enterprise-c/kongzi/1020/AppStream/x86_64/\nenabled = 1\ngpgcheck = 0\n#module_hotfixes=true\n\n[UniontechOS-$releasever-BaseOS]\nname = UniontechOS $releasever BaseOS\n#baseurl = https://cdimage.uniontech.com/server-dev/1060/e/release-0606/arm64/everything/\nbaserurl = http://10.30.38.131/kojifiles/repos/kongzi-build/latest/aarch64/\n#baseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/BaseOS/aarch64/os/\nenabled = 1\ngpgcheck = 0\n#module_hotfixes=true\n\n[UnionTechOS-$releasever-openstack]\nname = UnionTechOS $releasever openstack\n#baseurl = https://cdimage.uniontech.com/server-dev/1060/e/release-0606/arm64/OpenStack-V/\nbaseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/OpenStack-Victoria/aarch64/os/\nenabled = 1\ngpgcheck = 0\n\n[ceph]\nname=ceph\nbaseurl=https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/Storage/aarch64/\ngpgcheck=0\nenabled=1\nmodule_hotfixes=true\n\n[Tools]\nname = Tools\nbaseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/PowerTools/aarch64/os/\nenabled = 1\ngpgcheck = 0\n\n[PLUS]\nname = plus\nbaseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/Plus/aarch64/os/\nenabled = 1\ngpgcheck = 0\n```\n注：制作ustack-web需要修改start.sh 如下:/usr/local/share/kolla/docker/base/start.sh\n![image.png](https://cdn.nlark.com/yuque/0/2023/png/26098815/1695277271879-efa44824-2de4-48af-86b1-8d348c42d10c.png#averageHue=%2314172a&clientId=u4d0409ea-d20d-4&from=paste&height=74&id=u8dd3bc39&originHeight=93&originWidth=591&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=9779&status=done&style=none&taskId=u8ca6c926-8137-456f-acc7-eeef95147c0&title=&width=472.8)\n### 推送镜像到harbor\n执行如下脚本前请先根据操作环境修改变量。\n```bash\nset -o errexit\n\nTAG=victoria\nKOLLA_NAMESPECE=kolla\nUOS_REGISTRY=harbor.chinauos.com\nUOS_NAMESPACE=kolla-ustack-v-x86\n#ren-test项目中的镜像为基础镜像，kolla-ustack-v-x86项目中的镜像为持续更新的研发镜像。\n\nKOLLA_SOURCE=$(docker images | awk /kolla/'{print $1}'| xargs -I {} echo -e {}':'${TAG})\nfor i in ${KOLLA_SOURCE}; do\n        DOCKER_IMAGE_LINE=$(echo $i | tr ' ' '\\n')\n        UOS_TEST=${DOCKER_IMAGE_LINE#${KOLLA_NAMESPECE}}\n        UOS_TAG=${UOS_REGISTRY}/${UOS_NAMESPACE}${UOS_TEST}\n        echo ${UOS_TAG}\n        docker tag ${DOCKER_IMAGE_LINE} ${UOS_TAG}\n        docker push ${UOS_TAG}\n        docker rmi -f ${UOS_TAG}\ndone\n```\n","source":"_drafts/kolla编译Openstack 容器镜像.md","raw":"---\ntitle: kolla编译Openstack容器镜像\ndate: 2023-12-15 10:27:28\ndescription: kolla编译Openstack容器镜像\ntype: \"tags\"\ncomments: true\ncategories:\n- Openstack\n- Deploy\ntags:\n- openstack\n---\n\nkolla提供编译镜像的功能，kolla-ansible具有部署openstack的功能。\n### 系统配置\n#### 关闭防火墙\n```bash\nsystemctl disable --now firewalld\n```\n#### 配置域名\n```bash\n#增加域名解析\necho \"10.30.38.116 harbor.chinauos.com\" >> /etc/hosts\n```\n注：\n“registry.uniontech.com”和“harbor.chinauos.com” 是两个容器镜像仓库。\n其中“harbor.chinauos.com”是对外仓库，“registry.uniontech.com”是研发仓库。\n### 搭建编译环境\n#### 安装配置docker\n安装docker和openstack-kolla包\n```bash\nyum install moby-engine  git -y python3-devel\n```\n配置docker\n```bash\nsystemctl enable --now  docker.service\n```\n修改docker配置文件:/etc/docker/daemon.json\n```bash\n{\n    \"insecure-registries\": [\n        \"registry.uniontech.com\", \"harbor.chinauos.com\"\n    ]\n}\n```\n注：配置docker拉取容器镜像的仓库，配置此域名之后要配置相应的域名。\n“registry.uniontech.com”账户和密码：\n“harbor.chinauos.com”账户和密码：\n为docker配置不安全仓库之后重新启动docker服务。\n```bash\nsystemctl daemon-reload \nsystemctl restart docker.service \n```\n#### 安装openstack-kolla\n```bash\n#拉起openstack-kolla源码\ngit clone -b victoria-source \\\n\"http://gerrit-dev.uniontech.com/openstack/openstack-kolla\"\n#切换到响应的分支安装\n#使用pip3安装/卸载源码\npip3 install openstack-kolla/\npip3 uninstall openstack-kolla/\n```\n注：\n\n1. 安装后所有容器镜像的Dockerfile都在/usr/local/share/kolla/docker对应名称目录下。\n2. 若需要修改容器镜像找到对应的目录，更改模板文件即可。\n3. 更新sql文件，请将sql文件重新命名为ustack.sql.j2。\n#### 登录harbor仓库\n```bash\ndocker login harbor.chinauos.com\n```\nUsername: ustack\nPassword: Ustack12#$\n参考：[https://ivanzz1001.github.io/records/post/docker/2018/04/11/docker-harbor-uage](https://ivanzz1001.github.io/records/post/docker/2018/04/11/docker-harbor-uage)\nharbor是镜像管理平台，登录用户之后，则可根据用户角色权限操作镜像。\n### 编译镜像\n```bash\nkolla-build \\\n--base-image harbor.chinauos.com/ren-test/uniontechos-server-20-1060a-x86  \\\n--config-file kolla-build.conf \\\n-t source \\\n--base uniontechos \\\n--tag victoria \\\nnova\n```\n参数说明: \n--base-image 使用指定的基础镜像\n--base 构建uniontechos镜像\n--tag 构建镜像生成镜像的tag\n--base-image 根据不架构修改-x86/-arm \n--config-file 指定特定的源码地址构建镜像。\n--template-only 不制作镜像，仅仅生成 Dockerfile文件。\n注：openstack上搭建环境时，建议采用外部网络直连的方式配置虚拟机网络，采用xlan网络配置浮动ip时，在构建容器镜像时会导致安装依赖失败，拉取不到容器里的依赖，亲测有效。\n注：部分参数可以使用kolla-build --help查询，image和tag等变量信息可以登录harbor进行查看。例如当前镜像在harbor.chinauos.com域名下的ren-test项目下的uniontechos-server-20-1060a-x86镜像。点击镜像即可查询tag名称。\nkolla-build.conf 格式参考如下：\n```bash\n[nova-base]\ntype = git\nlocation = http://gerrit-dev.uniontech.com/openstack/openstack-nova\nreference = victoria-source\n\n[cinder-base]\ntype = git\nlocation = http://gerrit-dev.uniontech.com/openstack/openstack-cinder\nreference = victoria-source\n```\n容器镜像仓库配置。可根据自身想要的安装包，配置源地址，此处的源地址是指构建容器镜像时安装依赖的rpm包的仓库地址。\n构建镜像 x86的源为:/usr/local/share/kolla/docker/base/UniontechOS.repo\n```bash\n[UniontechOS-$releasever-AppStream]\nname = UniontechOS $releasever AppStream\n#baseurl = https://cdimage.uniontech.com/server-dev/1060/a/release/compose/AppStream/x86_64/os/\nbaseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/AppStream/x86_64/os/\nenabled = 1\ngpgcheck = 0\nmodule_hotfixes=true\n\n[UniontechOS-$releasever-BaseOS]\nname = UniontechOS $releasever BaseOS\n#baseurl = http://10.30.38.131/kojifiles/repos/kongzi-build/latest/x86_64/\nbaseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/BaseOS/x86_64/os/\n#baseurl = https://cdimage.uniontech.com/server-dev/1060/a/release/compose/BaseOS/x86_64/os/\nenabled = 1\ngpgcheck = 0\nmodule_hotfixes=true\n\n[UnionTechOS-$releasever-openstack]\nname = UnionTechOS $releasever openstack\nbaseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/OpenStack-Victoria/x86_64/os/\n#baseurl = http://10.30.38.131/kojifiles/repos/kongzi-openstack-victoria-build/latest/x86_64/\nenabled = 1\ngpgcheck = 0\n\n[ceph]\nname=ceph\nbaseurl=https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/Storage/x86_64/\ngpgcheck=0\nenabled=0\nmodule_hotfixes=true\n\n[Tools]\nname = Tools\nbaseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/PowerTools/x86_64/os/\nenabled = 0\ngpgcheck = 0\n\n[PLUS]\nname = plus\nbaseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/Plus/x86_64/os/\nenabled = 0\ngpgcheck = 0\n```\n构建镜像 arm的源为:/usr/local/share/kolla/docker/base/Ustack_aarch64.repo\n```bash\n[UniontechOS-$releasever-AppStream]\nname = UniontechOS $releasever AppStream\n#https://cdimage.uniontech.com/server-dev/1060/e/release-0606/arm64/OS/\nbaseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/AppStream/aarch64/os/\n#baseurl = http://pools.uniontech.com/server-enterprise-c/kongzi/1020/AppStream/x86_64/\nenabled = 1\ngpgcheck = 0\n#module_hotfixes=true\n\n[UniontechOS-$releasever-BaseOS]\nname = UniontechOS $releasever BaseOS\n#baseurl = https://cdimage.uniontech.com/server-dev/1060/e/release-0606/arm64/everything/\nbaserurl = http://10.30.38.131/kojifiles/repos/kongzi-build/latest/aarch64/\n#baseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/BaseOS/aarch64/os/\nenabled = 1\ngpgcheck = 0\n#module_hotfixes=true\n\n[UnionTechOS-$releasever-openstack]\nname = UnionTechOS $releasever openstack\n#baseurl = https://cdimage.uniontech.com/server-dev/1060/e/release-0606/arm64/OpenStack-V/\nbaseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/OpenStack-Victoria/aarch64/os/\nenabled = 1\ngpgcheck = 0\n\n[ceph]\nname=ceph\nbaseurl=https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/Storage/aarch64/\ngpgcheck=0\nenabled=1\nmodule_hotfixes=true\n\n[Tools]\nname = Tools\nbaseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/PowerTools/aarch64/os/\nenabled = 1\ngpgcheck = 0\n\n[PLUS]\nname = plus\nbaseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/Plus/aarch64/os/\nenabled = 1\ngpgcheck = 0\n```\n注：制作ustack-web需要修改start.sh 如下:/usr/local/share/kolla/docker/base/start.sh\n![image.png](https://cdn.nlark.com/yuque/0/2023/png/26098815/1695277271879-efa44824-2de4-48af-86b1-8d348c42d10c.png#averageHue=%2314172a&clientId=u4d0409ea-d20d-4&from=paste&height=74&id=u8dd3bc39&originHeight=93&originWidth=591&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=9779&status=done&style=none&taskId=u8ca6c926-8137-456f-acc7-eeef95147c0&title=&width=472.8)\n### 推送镜像到harbor\n执行如下脚本前请先根据操作环境修改变量。\n```bash\nset -o errexit\n\nTAG=victoria\nKOLLA_NAMESPECE=kolla\nUOS_REGISTRY=harbor.chinauos.com\nUOS_NAMESPACE=kolla-ustack-v-x86\n#ren-test项目中的镜像为基础镜像，kolla-ustack-v-x86项目中的镜像为持续更新的研发镜像。\n\nKOLLA_SOURCE=$(docker images | awk /kolla/'{print $1}'| xargs -I {} echo -e {}':'${TAG})\nfor i in ${KOLLA_SOURCE}; do\n        DOCKER_IMAGE_LINE=$(echo $i | tr ' ' '\\n')\n        UOS_TEST=${DOCKER_IMAGE_LINE#${KOLLA_NAMESPECE}}\n        UOS_TAG=${UOS_REGISTRY}/${UOS_NAMESPACE}${UOS_TEST}\n        echo ${UOS_TAG}\n        docker tag ${DOCKER_IMAGE_LINE} ${UOS_TAG}\n        docker push ${UOS_TAG}\n        docker rmi -f ${UOS_TAG}\ndone\n```\n","slug":"kolla编译Openstack 容器镜像","published":0,"updated":"2024-02-29T06:22:32.989Z","layout":"post","photos":[],"link":"","_id":"clt6vkphb0004evigd8lj9xmo","content":"<p>kolla提供编译镜像的功能，kolla-ansible具有部署openstack的功能。</p>\n<h3 id=\"系统配置\"><a href=\"#系统配置\" class=\"headerlink\" title=\"系统配置\"></a>系统配置</h3><h4 id=\"关闭防火墙\"><a href=\"#关闭防火墙\" class=\"headerlink\" title=\"关闭防火墙\"></a>关闭防火墙</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl <span class=\"built_in\">disable</span> --now firewalld</span><br></pre></td></tr></table></figure>\n<h4 id=\"配置域名\"><a href=\"#配置域名\" class=\"headerlink\" title=\"配置域名\"></a>配置域名</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#增加域名解析</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;10.30.38.116 harbor.chinauos.com&quot;</span> &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure>\n<p>注：<br>“registry.uniontech.com”和“harbor.chinauos.com” 是两个容器镜像仓库。<br>其中“harbor.chinauos.com”是对外仓库，“registry.uniontech.com”是研发仓库。</p>\n<h3 id=\"搭建编译环境\"><a href=\"#搭建编译环境\" class=\"headerlink\" title=\"搭建编译环境\"></a>搭建编译环境</h3><h4 id=\"安装配置docker\"><a href=\"#安装配置docker\" class=\"headerlink\" title=\"安装配置docker\"></a>安装配置docker</h4><p>安装docker和openstack-kolla包</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install moby-engine  git -y python3-devel</span><br></pre></td></tr></table></figure>\n<p>配置docker</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl <span class=\"built_in\">enable</span> --now  docker.service</span><br></pre></td></tr></table></figure>\n<p>修改docker配置文件:&#x2F;etc&#x2F;docker&#x2F;daemon.json</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;insecure-registries&quot;</span>: [</span><br><span class=\"line\">        <span class=\"string\">&quot;registry.uniontech.com&quot;</span>, <span class=\"string\">&quot;harbor.chinauos.com&quot;</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注：配置docker拉取容器镜像的仓库，配置此域名之后要配置相应的域名。<br>“registry.uniontech.com”账户和密码：<br>“harbor.chinauos.com”账户和密码：<br>为docker配置不安全仓库之后重新启动docker服务。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl daemon-reload </span><br><span class=\"line\">systemctl restart docker.service </span><br></pre></td></tr></table></figure>\n<h4 id=\"安装openstack-kolla\"><a href=\"#安装openstack-kolla\" class=\"headerlink\" title=\"安装openstack-kolla\"></a>安装openstack-kolla</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#拉起openstack-kolla源码</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> -b victoria-source \\</span><br><span class=\"line\"><span class=\"string\">&quot;http://gerrit-dev.uniontech.com/openstack/openstack-kolla&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#切换到响应的分支安装</span></span><br><span class=\"line\"><span class=\"comment\">#使用pip3安装/卸载源码</span></span><br><span class=\"line\">pip3 install openstack-kolla/</span><br><span class=\"line\">pip3 uninstall openstack-kolla/</span><br></pre></td></tr></table></figure>\n<p>注：</p>\n<ol>\n<li>安装后所有容器镜像的Dockerfile都在&#x2F;usr&#x2F;local&#x2F;share&#x2F;kolla&#x2F;docker对应名称目录下。</li>\n<li>若需要修改容器镜像找到对应的目录，更改模板文件即可。</li>\n<li>更新sql文件，请将sql文件重新命名为ustack.sql.j2。</li>\n</ol>\n<h4 id=\"登录harbor仓库\"><a href=\"#登录harbor仓库\" class=\"headerlink\" title=\"登录harbor仓库\"></a>登录harbor仓库</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker login harbor.chinauos.com</span><br></pre></td></tr></table></figure>\n<p>Username: ustack<br>Password: Ustack12#$<br>参考：<a href=\"https://ivanzz1001.github.io/records/post/docker/2018/04/11/docker-harbor-uage\">https://ivanzz1001.github.io/records/post/docker/2018/04/11/docker-harbor-uage</a><br>harbor是镜像管理平台，登录用户之后，则可根据用户角色权限操作镜像。</p>\n<h3 id=\"编译镜像\"><a href=\"#编译镜像\" class=\"headerlink\" title=\"编译镜像\"></a>编译镜像</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kolla-build \\</span><br><span class=\"line\">--base-image harbor.chinauos.com/ren-test/uniontechos-server-20-1060a-x86  \\</span><br><span class=\"line\">--config-file kolla-build.conf \\</span><br><span class=\"line\">-t <span class=\"built_in\">source</span> \\</span><br><span class=\"line\">--base uniontechos \\</span><br><span class=\"line\">--tag victoria \\</span><br><span class=\"line\">nova</span><br></pre></td></tr></table></figure>\n<p>参数说明:<br>–base-image 使用指定的基础镜像<br>–base 构建uniontechos镜像<br>–tag 构建镜像生成镜像的tag<br>–base-image 根据不架构修改-x86&#x2F;-arm<br>–config-file 指定特定的源码地址构建镜像。<br>–template-only 不制作镜像，仅仅生成 Dockerfile文件。<br>注：openstack上搭建环境时，建议采用外部网络直连的方式配置虚拟机网络，采用xlan网络配置浮动ip时，在构建容器镜像时会导致安装依赖失败，拉取不到容器里的依赖，亲测有效。<br>注：部分参数可以使用kolla-build –help查询，image和tag等变量信息可以登录harbor进行查看。例如当前镜像在harbor.chinauos.com域名下的ren-test项目下的uniontechos-server-20-1060a-x86镜像。点击镜像即可查询tag名称。<br>kolla-build.conf 格式参考如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[nova-base]</span><br><span class=\"line\"><span class=\"built_in\">type</span> = git</span><br><span class=\"line\">location = http://gerrit-dev.uniontech.com/openstack/openstack-nova</span><br><span class=\"line\">reference = victoria-source</span><br><span class=\"line\"></span><br><span class=\"line\">[cinder-base]</span><br><span class=\"line\"><span class=\"built_in\">type</span> = git</span><br><span class=\"line\">location = http://gerrit-dev.uniontech.com/openstack/openstack-cinder</span><br><span class=\"line\">reference = victoria-source</span><br></pre></td></tr></table></figure>\n<p>容器镜像仓库配置。可根据自身想要的安装包，配置源地址，此处的源地址是指构建容器镜像时安装依赖的rpm包的仓库地址。<br>构建镜像 x86的源为:&#x2F;usr&#x2F;local&#x2F;share&#x2F;kolla&#x2F;docker&#x2F;base&#x2F;UniontechOS.repo</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[UniontechOS-<span class=\"variable\">$releasever</span>-AppStream]</span><br><span class=\"line\">name = UniontechOS <span class=\"variable\">$releasever</span> AppStream</span><br><span class=\"line\"><span class=\"comment\">#baseurl = https://cdimage.uniontech.com/server-dev/1060/a/release/compose/AppStream/x86_64/os/</span></span><br><span class=\"line\">baseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/AppStream/x86_64/os/</span><br><span class=\"line\">enabled = 1</span><br><span class=\"line\">gpgcheck = 0</span><br><span class=\"line\">module_hotfixes=<span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">[UniontechOS-<span class=\"variable\">$releasever</span>-BaseOS]</span><br><span class=\"line\">name = UniontechOS <span class=\"variable\">$releasever</span> BaseOS</span><br><span class=\"line\"><span class=\"comment\">#baseurl = http://10.30.38.131/kojifiles/repos/kongzi-build/latest/x86_64/</span></span><br><span class=\"line\">baseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/BaseOS/x86_64/os/</span><br><span class=\"line\"><span class=\"comment\">#baseurl = https://cdimage.uniontech.com/server-dev/1060/a/release/compose/BaseOS/x86_64/os/</span></span><br><span class=\"line\">enabled = 1</span><br><span class=\"line\">gpgcheck = 0</span><br><span class=\"line\">module_hotfixes=<span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">[UnionTechOS-<span class=\"variable\">$releasever</span>-openstack]</span><br><span class=\"line\">name = UnionTechOS <span class=\"variable\">$releasever</span> openstack</span><br><span class=\"line\">baseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/OpenStack-Victoria/x86_64/os/</span><br><span class=\"line\"><span class=\"comment\">#baseurl = http://10.30.38.131/kojifiles/repos/kongzi-openstack-victoria-build/latest/x86_64/</span></span><br><span class=\"line\">enabled = 1</span><br><span class=\"line\">gpgcheck = 0</span><br><span class=\"line\"></span><br><span class=\"line\">[ceph]</span><br><span class=\"line\">name=ceph</span><br><span class=\"line\">baseurl=https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/Storage/x86_64/</span><br><span class=\"line\">gpgcheck=0</span><br><span class=\"line\">enabled=0</span><br><span class=\"line\">module_hotfixes=<span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">[Tools]</span><br><span class=\"line\">name = Tools</span><br><span class=\"line\">baseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/PowerTools/x86_64/os/</span><br><span class=\"line\">enabled = 0</span><br><span class=\"line\">gpgcheck = 0</span><br><span class=\"line\"></span><br><span class=\"line\">[PLUS]</span><br><span class=\"line\">name = plus</span><br><span class=\"line\">baseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/Plus/x86_64/os/</span><br><span class=\"line\">enabled = 0</span><br><span class=\"line\">gpgcheck = 0</span><br></pre></td></tr></table></figure>\n<p>构建镜像 arm的源为:&#x2F;usr&#x2F;local&#x2F;share&#x2F;kolla&#x2F;docker&#x2F;base&#x2F;Ustack_aarch64.repo</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[UniontechOS-<span class=\"variable\">$releasever</span>-AppStream]</span><br><span class=\"line\">name = UniontechOS <span class=\"variable\">$releasever</span> AppStream</span><br><span class=\"line\"><span class=\"comment\">#https://cdimage.uniontech.com/server-dev/1060/e/release-0606/arm64/OS/</span></span><br><span class=\"line\">baseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/AppStream/aarch64/os/</span><br><span class=\"line\"><span class=\"comment\">#baseurl = http://pools.uniontech.com/server-enterprise-c/kongzi/1020/AppStream/x86_64/</span></span><br><span class=\"line\">enabled = 1</span><br><span class=\"line\">gpgcheck = 0</span><br><span class=\"line\"><span class=\"comment\">#module_hotfixes=true</span></span><br><span class=\"line\"></span><br><span class=\"line\">[UniontechOS-<span class=\"variable\">$releasever</span>-BaseOS]</span><br><span class=\"line\">name = UniontechOS <span class=\"variable\">$releasever</span> BaseOS</span><br><span class=\"line\"><span class=\"comment\">#baseurl = https://cdimage.uniontech.com/server-dev/1060/e/release-0606/arm64/everything/</span></span><br><span class=\"line\">baserurl = http://10.30.38.131/kojifiles/repos/kongzi-build/latest/aarch64/</span><br><span class=\"line\"><span class=\"comment\">#baseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/BaseOS/aarch64/os/</span></span><br><span class=\"line\">enabled = 1</span><br><span class=\"line\">gpgcheck = 0</span><br><span class=\"line\"><span class=\"comment\">#module_hotfixes=true</span></span><br><span class=\"line\"></span><br><span class=\"line\">[UnionTechOS-<span class=\"variable\">$releasever</span>-openstack]</span><br><span class=\"line\">name = UnionTechOS <span class=\"variable\">$releasever</span> openstack</span><br><span class=\"line\"><span class=\"comment\">#baseurl = https://cdimage.uniontech.com/server-dev/1060/e/release-0606/arm64/OpenStack-V/</span></span><br><span class=\"line\">baseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/OpenStack-Victoria/aarch64/os/</span><br><span class=\"line\">enabled = 1</span><br><span class=\"line\">gpgcheck = 0</span><br><span class=\"line\"></span><br><span class=\"line\">[ceph]</span><br><span class=\"line\">name=ceph</span><br><span class=\"line\">baseurl=https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/Storage/aarch64/</span><br><span class=\"line\">gpgcheck=0</span><br><span class=\"line\">enabled=1</span><br><span class=\"line\">module_hotfixes=<span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">[Tools]</span><br><span class=\"line\">name = Tools</span><br><span class=\"line\">baseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/PowerTools/aarch64/os/</span><br><span class=\"line\">enabled = 1</span><br><span class=\"line\">gpgcheck = 0</span><br><span class=\"line\"></span><br><span class=\"line\">[PLUS]</span><br><span class=\"line\">name = plus</span><br><span class=\"line\">baseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/Plus/aarch64/os/</span><br><span class=\"line\">enabled = 1</span><br><span class=\"line\">gpgcheck = 0</span><br></pre></td></tr></table></figure>\n<p>注：制作ustack-web需要修改start.sh 如下:&#x2F;usr&#x2F;local&#x2F;share&#x2F;kolla&#x2F;docker&#x2F;base&#x2F;start.sh<br><img src=\"https://cdn.nlark.com/yuque/0/2023/png/26098815/1695277271879-efa44824-2de4-48af-86b1-8d348c42d10c.png#averageHue=%2314172a&clientId=u4d0409ea-d20d-4&from=paste&height=74&id=u8dd3bc39&originHeight=93&originWidth=591&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=9779&status=done&style=none&taskId=u8ca6c926-8137-456f-acc7-eeef95147c0&title=&width=472.8\" alt=\"image.png\"></p>\n<h3 id=\"推送镜像到harbor\"><a href=\"#推送镜像到harbor\" class=\"headerlink\" title=\"推送镜像到harbor\"></a>推送镜像到harbor</h3><p>执行如下脚本前请先根据操作环境修改变量。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">set</span> -o errexit</span><br><span class=\"line\"></span><br><span class=\"line\">TAG=victoria</span><br><span class=\"line\">KOLLA_NAMESPECE=kolla</span><br><span class=\"line\">UOS_REGISTRY=harbor.chinauos.com</span><br><span class=\"line\">UOS_NAMESPACE=kolla-ustack-v-x86</span><br><span class=\"line\"><span class=\"comment\">#ren-test项目中的镜像为基础镜像，kolla-ustack-v-x86项目中的镜像为持续更新的研发镜像。</span></span><br><span class=\"line\"></span><br><span class=\"line\">KOLLA_SOURCE=$(docker images | awk /kolla/<span class=\"string\">&#x27;&#123;print $1&#125;&#x27;</span>| xargs -I &#123;&#125; <span class=\"built_in\">echo</span> -e &#123;&#125;<span class=\"string\">&#x27;:&#x27;</span><span class=\"variable\">$&#123;TAG&#125;</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"variable\">$&#123;KOLLA_SOURCE&#125;</span>; <span class=\"keyword\">do</span></span><br><span class=\"line\">        DOCKER_IMAGE_LINE=$(<span class=\"built_in\">echo</span> <span class=\"variable\">$i</span> | <span class=\"built_in\">tr</span> <span class=\"string\">&#x27; &#x27;</span> <span class=\"string\">&#x27;\\n&#x27;</span>)</span><br><span class=\"line\">        UOS_TEST=<span class=\"variable\">$&#123;DOCKER_IMAGE_LINE#<span class=\"variable\">$&#123;KOLLA_NAMESPECE&#125;</span>&#125;</span></span><br><span class=\"line\">        UOS_TAG=<span class=\"variable\">$&#123;UOS_REGISTRY&#125;</span>/<span class=\"variable\">$&#123;UOS_NAMESPACE&#125;</span><span class=\"variable\">$&#123;UOS_TEST&#125;</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;UOS_TAG&#125;</span></span><br><span class=\"line\">        docker tag <span class=\"variable\">$&#123;DOCKER_IMAGE_LINE&#125;</span> <span class=\"variable\">$&#123;UOS_TAG&#125;</span></span><br><span class=\"line\">        docker push <span class=\"variable\">$&#123;UOS_TAG&#125;</span></span><br><span class=\"line\">        docker rmi -f <span class=\"variable\">$&#123;UOS_TAG&#125;</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>kolla提供编译镜像的功能，kolla-ansible具有部署openstack的功能。</p>\n<h3 id=\"系统配置\"><a href=\"#系统配置\" class=\"headerlink\" title=\"系统配置\"></a>系统配置</h3><h4 id=\"关闭防火墙\"><a href=\"#关闭防火墙\" class=\"headerlink\" title=\"关闭防火墙\"></a>关闭防火墙</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl <span class=\"built_in\">disable</span> --now firewalld</span><br></pre></td></tr></table></figure>\n<h4 id=\"配置域名\"><a href=\"#配置域名\" class=\"headerlink\" title=\"配置域名\"></a>配置域名</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#增加域名解析</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;10.30.38.116 harbor.chinauos.com&quot;</span> &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure>\n<p>注：<br>“registry.uniontech.com”和“harbor.chinauos.com” 是两个容器镜像仓库。<br>其中“harbor.chinauos.com”是对外仓库，“registry.uniontech.com”是研发仓库。</p>\n<h3 id=\"搭建编译环境\"><a href=\"#搭建编译环境\" class=\"headerlink\" title=\"搭建编译环境\"></a>搭建编译环境</h3><h4 id=\"安装配置docker\"><a href=\"#安装配置docker\" class=\"headerlink\" title=\"安装配置docker\"></a>安装配置docker</h4><p>安装docker和openstack-kolla包</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install moby-engine  git -y python3-devel</span><br></pre></td></tr></table></figure>\n<p>配置docker</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl <span class=\"built_in\">enable</span> --now  docker.service</span><br></pre></td></tr></table></figure>\n<p>修改docker配置文件:&#x2F;etc&#x2F;docker&#x2F;daemon.json</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;insecure-registries&quot;</span>: [</span><br><span class=\"line\">        <span class=\"string\">&quot;registry.uniontech.com&quot;</span>, <span class=\"string\">&quot;harbor.chinauos.com&quot;</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注：配置docker拉取容器镜像的仓库，配置此域名之后要配置相应的域名。<br>“registry.uniontech.com”账户和密码：<br>“harbor.chinauos.com”账户和密码：<br>为docker配置不安全仓库之后重新启动docker服务。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl daemon-reload </span><br><span class=\"line\">systemctl restart docker.service </span><br></pre></td></tr></table></figure>\n<h4 id=\"安装openstack-kolla\"><a href=\"#安装openstack-kolla\" class=\"headerlink\" title=\"安装openstack-kolla\"></a>安装openstack-kolla</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#拉起openstack-kolla源码</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> -b victoria-source \\</span><br><span class=\"line\"><span class=\"string\">&quot;http://gerrit-dev.uniontech.com/openstack/openstack-kolla&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#切换到响应的分支安装</span></span><br><span class=\"line\"><span class=\"comment\">#使用pip3安装/卸载源码</span></span><br><span class=\"line\">pip3 install openstack-kolla/</span><br><span class=\"line\">pip3 uninstall openstack-kolla/</span><br></pre></td></tr></table></figure>\n<p>注：</p>\n<ol>\n<li>安装后所有容器镜像的Dockerfile都在&#x2F;usr&#x2F;local&#x2F;share&#x2F;kolla&#x2F;docker对应名称目录下。</li>\n<li>若需要修改容器镜像找到对应的目录，更改模板文件即可。</li>\n<li>更新sql文件，请将sql文件重新命名为ustack.sql.j2。</li>\n</ol>\n<h4 id=\"登录harbor仓库\"><a href=\"#登录harbor仓库\" class=\"headerlink\" title=\"登录harbor仓库\"></a>登录harbor仓库</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker login harbor.chinauos.com</span><br></pre></td></tr></table></figure>\n<p>Username: ustack<br>Password: Ustack12#$<br>参考：<a href=\"https://ivanzz1001.github.io/records/post/docker/2018/04/11/docker-harbor-uage\">https://ivanzz1001.github.io/records/post/docker/2018/04/11/docker-harbor-uage</a><br>harbor是镜像管理平台，登录用户之后，则可根据用户角色权限操作镜像。</p>\n<h3 id=\"编译镜像\"><a href=\"#编译镜像\" class=\"headerlink\" title=\"编译镜像\"></a>编译镜像</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kolla-build \\</span><br><span class=\"line\">--base-image harbor.chinauos.com/ren-test/uniontechos-server-20-1060a-x86  \\</span><br><span class=\"line\">--config-file kolla-build.conf \\</span><br><span class=\"line\">-t <span class=\"built_in\">source</span> \\</span><br><span class=\"line\">--base uniontechos \\</span><br><span class=\"line\">--tag victoria \\</span><br><span class=\"line\">nova</span><br></pre></td></tr></table></figure>\n<p>参数说明:<br>–base-image 使用指定的基础镜像<br>–base 构建uniontechos镜像<br>–tag 构建镜像生成镜像的tag<br>–base-image 根据不架构修改-x86&#x2F;-arm<br>–config-file 指定特定的源码地址构建镜像。<br>–template-only 不制作镜像，仅仅生成 Dockerfile文件。<br>注：openstack上搭建环境时，建议采用外部网络直连的方式配置虚拟机网络，采用xlan网络配置浮动ip时，在构建容器镜像时会导致安装依赖失败，拉取不到容器里的依赖，亲测有效。<br>注：部分参数可以使用kolla-build –help查询，image和tag等变量信息可以登录harbor进行查看。例如当前镜像在harbor.chinauos.com域名下的ren-test项目下的uniontechos-server-20-1060a-x86镜像。点击镜像即可查询tag名称。<br>kolla-build.conf 格式参考如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[nova-base]</span><br><span class=\"line\"><span class=\"built_in\">type</span> = git</span><br><span class=\"line\">location = http://gerrit-dev.uniontech.com/openstack/openstack-nova</span><br><span class=\"line\">reference = victoria-source</span><br><span class=\"line\"></span><br><span class=\"line\">[cinder-base]</span><br><span class=\"line\"><span class=\"built_in\">type</span> = git</span><br><span class=\"line\">location = http://gerrit-dev.uniontech.com/openstack/openstack-cinder</span><br><span class=\"line\">reference = victoria-source</span><br></pre></td></tr></table></figure>\n<p>容器镜像仓库配置。可根据自身想要的安装包，配置源地址，此处的源地址是指构建容器镜像时安装依赖的rpm包的仓库地址。<br>构建镜像 x86的源为:&#x2F;usr&#x2F;local&#x2F;share&#x2F;kolla&#x2F;docker&#x2F;base&#x2F;UniontechOS.repo</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[UniontechOS-<span class=\"variable\">$releasever</span>-AppStream]</span><br><span class=\"line\">name = UniontechOS <span class=\"variable\">$releasever</span> AppStream</span><br><span class=\"line\"><span class=\"comment\">#baseurl = https://cdimage.uniontech.com/server-dev/1060/a/release/compose/AppStream/x86_64/os/</span></span><br><span class=\"line\">baseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/AppStream/x86_64/os/</span><br><span class=\"line\">enabled = 1</span><br><span class=\"line\">gpgcheck = 0</span><br><span class=\"line\">module_hotfixes=<span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">[UniontechOS-<span class=\"variable\">$releasever</span>-BaseOS]</span><br><span class=\"line\">name = UniontechOS <span class=\"variable\">$releasever</span> BaseOS</span><br><span class=\"line\"><span class=\"comment\">#baseurl = http://10.30.38.131/kojifiles/repos/kongzi-build/latest/x86_64/</span></span><br><span class=\"line\">baseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/BaseOS/x86_64/os/</span><br><span class=\"line\"><span class=\"comment\">#baseurl = https://cdimage.uniontech.com/server-dev/1060/a/release/compose/BaseOS/x86_64/os/</span></span><br><span class=\"line\">enabled = 1</span><br><span class=\"line\">gpgcheck = 0</span><br><span class=\"line\">module_hotfixes=<span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">[UnionTechOS-<span class=\"variable\">$releasever</span>-openstack]</span><br><span class=\"line\">name = UnionTechOS <span class=\"variable\">$releasever</span> openstack</span><br><span class=\"line\">baseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/OpenStack-Victoria/x86_64/os/</span><br><span class=\"line\"><span class=\"comment\">#baseurl = http://10.30.38.131/kojifiles/repos/kongzi-openstack-victoria-build/latest/x86_64/</span></span><br><span class=\"line\">enabled = 1</span><br><span class=\"line\">gpgcheck = 0</span><br><span class=\"line\"></span><br><span class=\"line\">[ceph]</span><br><span class=\"line\">name=ceph</span><br><span class=\"line\">baseurl=https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/Storage/x86_64/</span><br><span class=\"line\">gpgcheck=0</span><br><span class=\"line\">enabled=0</span><br><span class=\"line\">module_hotfixes=<span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">[Tools]</span><br><span class=\"line\">name = Tools</span><br><span class=\"line\">baseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/PowerTools/x86_64/os/</span><br><span class=\"line\">enabled = 0</span><br><span class=\"line\">gpgcheck = 0</span><br><span class=\"line\"></span><br><span class=\"line\">[PLUS]</span><br><span class=\"line\">name = plus</span><br><span class=\"line\">baseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/Plus/x86_64/os/</span><br><span class=\"line\">enabled = 0</span><br><span class=\"line\">gpgcheck = 0</span><br></pre></td></tr></table></figure>\n<p>构建镜像 arm的源为:&#x2F;usr&#x2F;local&#x2F;share&#x2F;kolla&#x2F;docker&#x2F;base&#x2F;Ustack_aarch64.repo</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[UniontechOS-<span class=\"variable\">$releasever</span>-AppStream]</span><br><span class=\"line\">name = UniontechOS <span class=\"variable\">$releasever</span> AppStream</span><br><span class=\"line\"><span class=\"comment\">#https://cdimage.uniontech.com/server-dev/1060/e/release-0606/arm64/OS/</span></span><br><span class=\"line\">baseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/AppStream/aarch64/os/</span><br><span class=\"line\"><span class=\"comment\">#baseurl = http://pools.uniontech.com/server-enterprise-c/kongzi/1020/AppStream/x86_64/</span></span><br><span class=\"line\">enabled = 1</span><br><span class=\"line\">gpgcheck = 0</span><br><span class=\"line\"><span class=\"comment\">#module_hotfixes=true</span></span><br><span class=\"line\"></span><br><span class=\"line\">[UniontechOS-<span class=\"variable\">$releasever</span>-BaseOS]</span><br><span class=\"line\">name = UniontechOS <span class=\"variable\">$releasever</span> BaseOS</span><br><span class=\"line\"><span class=\"comment\">#baseurl = https://cdimage.uniontech.com/server-dev/1060/e/release-0606/arm64/everything/</span></span><br><span class=\"line\">baserurl = http://10.30.38.131/kojifiles/repos/kongzi-build/latest/aarch64/</span><br><span class=\"line\"><span class=\"comment\">#baseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/BaseOS/aarch64/os/</span></span><br><span class=\"line\">enabled = 1</span><br><span class=\"line\">gpgcheck = 0</span><br><span class=\"line\"><span class=\"comment\">#module_hotfixes=true</span></span><br><span class=\"line\"></span><br><span class=\"line\">[UnionTechOS-<span class=\"variable\">$releasever</span>-openstack]</span><br><span class=\"line\">name = UnionTechOS <span class=\"variable\">$releasever</span> openstack</span><br><span class=\"line\"><span class=\"comment\">#baseurl = https://cdimage.uniontech.com/server-dev/1060/e/release-0606/arm64/OpenStack-V/</span></span><br><span class=\"line\">baseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/OpenStack-Victoria/aarch64/os/</span><br><span class=\"line\">enabled = 1</span><br><span class=\"line\">gpgcheck = 0</span><br><span class=\"line\"></span><br><span class=\"line\">[ceph]</span><br><span class=\"line\">name=ceph</span><br><span class=\"line\">baseurl=https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/Storage/aarch64/</span><br><span class=\"line\">gpgcheck=0</span><br><span class=\"line\">enabled=1</span><br><span class=\"line\">module_hotfixes=<span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">[Tools]</span><br><span class=\"line\">name = Tools</span><br><span class=\"line\">baseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/PowerTools/aarch64/os/</span><br><span class=\"line\">enabled = 1</span><br><span class=\"line\">gpgcheck = 0</span><br><span class=\"line\"></span><br><span class=\"line\">[PLUS]</span><br><span class=\"line\">name = plus</span><br><span class=\"line\">baseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/Plus/aarch64/os/</span><br><span class=\"line\">enabled = 1</span><br><span class=\"line\">gpgcheck = 0</span><br></pre></td></tr></table></figure>\n<p>注：制作ustack-web需要修改start.sh 如下:&#x2F;usr&#x2F;local&#x2F;share&#x2F;kolla&#x2F;docker&#x2F;base&#x2F;start.sh<br><img src=\"https://cdn.nlark.com/yuque/0/2023/png/26098815/1695277271879-efa44824-2de4-48af-86b1-8d348c42d10c.png#averageHue=%2314172a&clientId=u4d0409ea-d20d-4&from=paste&height=74&id=u8dd3bc39&originHeight=93&originWidth=591&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=9779&status=done&style=none&taskId=u8ca6c926-8137-456f-acc7-eeef95147c0&title=&width=472.8\" alt=\"image.png\"></p>\n<h3 id=\"推送镜像到harbor\"><a href=\"#推送镜像到harbor\" class=\"headerlink\" title=\"推送镜像到harbor\"></a>推送镜像到harbor</h3><p>执行如下脚本前请先根据操作环境修改变量。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">set</span> -o errexit</span><br><span class=\"line\"></span><br><span class=\"line\">TAG=victoria</span><br><span class=\"line\">KOLLA_NAMESPECE=kolla</span><br><span class=\"line\">UOS_REGISTRY=harbor.chinauos.com</span><br><span class=\"line\">UOS_NAMESPACE=kolla-ustack-v-x86</span><br><span class=\"line\"><span class=\"comment\">#ren-test项目中的镜像为基础镜像，kolla-ustack-v-x86项目中的镜像为持续更新的研发镜像。</span></span><br><span class=\"line\"></span><br><span class=\"line\">KOLLA_SOURCE=$(docker images | awk /kolla/<span class=\"string\">&#x27;&#123;print $1&#125;&#x27;</span>| xargs -I &#123;&#125; <span class=\"built_in\">echo</span> -e &#123;&#125;<span class=\"string\">&#x27;:&#x27;</span><span class=\"variable\">$&#123;TAG&#125;</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"variable\">$&#123;KOLLA_SOURCE&#125;</span>; <span class=\"keyword\">do</span></span><br><span class=\"line\">        DOCKER_IMAGE_LINE=$(<span class=\"built_in\">echo</span> <span class=\"variable\">$i</span> | <span class=\"built_in\">tr</span> <span class=\"string\">&#x27; &#x27;</span> <span class=\"string\">&#x27;\\n&#x27;</span>)</span><br><span class=\"line\">        UOS_TEST=<span class=\"variable\">$&#123;DOCKER_IMAGE_LINE#<span class=\"variable\">$&#123;KOLLA_NAMESPECE&#125;</span>&#125;</span></span><br><span class=\"line\">        UOS_TAG=<span class=\"variable\">$&#123;UOS_REGISTRY&#125;</span>/<span class=\"variable\">$&#123;UOS_NAMESPACE&#125;</span><span class=\"variable\">$&#123;UOS_TEST&#125;</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;UOS_TAG&#125;</span></span><br><span class=\"line\">        docker tag <span class=\"variable\">$&#123;DOCKER_IMAGE_LINE&#125;</span> <span class=\"variable\">$&#123;UOS_TAG&#125;</span></span><br><span class=\"line\">        docker push <span class=\"variable\">$&#123;UOS_TAG&#125;</span></span><br><span class=\"line\">        docker rmi -f <span class=\"variable\">$&#123;UOS_TAG&#125;</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n"},{"title":"Fio测试磁盘读写性能","date":"2023-12-25T02:27:28.000Z","description":"Fio测试磁盘读写性能","type":"tags","comments":1,"_content":"# 环境\n\n内核：4.10\n\ncpu：8\n\n内存：8GB\n\n硬盘：100GB\n\n# 安装fio\n\nfio 的全称是 flexible I/O tester，是常用的磁盘性能测试工具。fio 通过产生一系列的线程或进程来执行用户指定的特定类型 IO 操作。典型的用法是用户将需要模拟的 IO 负载写入到 job file 中。fio 支持多种 IO 引擎，通过 ioengine=io_uring，我们可以在 fio 中使用 io_uring 接口来测试磁盘性能。\n\n```bash\nyum install fio\n```\n\n# 测试\n\n- 4k随机读\n\n  ```bash\n  fio -name=iouring_test -filename=/mnt/vdd/testfile -iodepth=128 -thread -rw=randread -ioengine=io_uring -sqthread_poll=1 -direct=1 -bs=4k -size=10G -numjobs=1 -runtime=120 -group_reporting\n  ```\n\n- 4k 随机写\n\n  ```bash\n  fio -name=iouring_test -filename=/mnt/vdd/testfile -iodepth=128 -thread -rw=randwrite -ioengine=io_uring -sqthread_poll=1 -direct=1 -bs=4k -size=10G -numjobs=1 -runtime=120 -group_reporting\n  ```\n\n- 随机读写\n\n  ```bash\n  fio -name=iouring_test -filename=/mnt/vdd/testfile -iodepth=128 -thread -rw=randrw -ioengine=io_uring -sqthread_poll=1 -direct=1 -bs=4k -size=10G -numjobs=1 -runtime=120 -group_reporting\n  ```\n\n- 4k 顺序读\n\n  ```\n  fio -name=iouring_test -filename=/mnt/vdd/testfile -iodepth=128 -thread -rw=read -ioengine=io_uring -sqthread_poll=1 -direct=1 -bs=4k -size=10G -numjobs=1 -runtime=120 -group_reporting\n  ```\n\n- 4k 顺序写\n\n  ```bash\n  fio -name=iouring_test -filename=/mnt/vdd/testfile -iodepth=128 -thread -rw=write -ioengine=io_uring -sqthread_poll=1 -direct=1 -bs=4k -size=10G -numjobs=1 -runtime=120 -group_reporting\n  ```\n\n- 4K顺序读写\n\n  ```bash\n  fio -name=iouring_test -filename=/mnt/vdd/testfile -iodepth=128 -thread -rw=rw -ioengine=io_uring -sqthread_poll=1 -direct=1 -bs=4k -size=10G -numjobs=1 -runtime=120 -group_reporting\n  ```\n\n  \n\n说明：\nfilename=/dev/sdb1    测试文件名称，通常选择需要测试的盘的data目录。\ndirect=1         测试过程绕过机器自带的buffer。使测试结果更真实。\nbs=16k          单次io的块文件大小为16k\nbsrange=512-2048     同上，提定数据块的大小范围\nsize=5g  本次的测试文件大小为5g，以每次4k的io进行测试。\nnumjobs=30        本次的测试线程为30.\nruntime=1000       测试时间为1000秒，如果不写则一直将5g文件分4k每次写完为止。\nioengine=psync      io引擎使用pync方式\nrwmixwrite=30      在混合读写的模式下，写占30%\ngroup_reporting     关于显示结果的，汇总每个进程的信息。\n\n此外\nlockmem=1g        只使用1g内存进行测试。\nzero_buffers       用0初始化系统buffer。\nnrfiles=8        每个进程生成文件的数量。\nread 顺序读\nwrite 顺序写\nrw,readwrite 顺序混合读写\nrandwrite 随机写\nrandread 随机读\nrandrw 随机混合读写\n","source":"_posts/Fio测试磁盘读写性能.md","raw":"---\ntitle: Fio测试磁盘读写性能\ndate: 2023-12-25 10:27:28\ndescription: Fio测试磁盘读写性能\ntype: \"tags\"\ncomments: true\ncategories:\n- Linux\n- Tools\n- Test\ntags:\n- Linux\n- Test\n---\n# 环境\n\n内核：4.10\n\ncpu：8\n\n内存：8GB\n\n硬盘：100GB\n\n# 安装fio\n\nfio 的全称是 flexible I/O tester，是常用的磁盘性能测试工具。fio 通过产生一系列的线程或进程来执行用户指定的特定类型 IO 操作。典型的用法是用户将需要模拟的 IO 负载写入到 job file 中。fio 支持多种 IO 引擎，通过 ioengine=io_uring，我们可以在 fio 中使用 io_uring 接口来测试磁盘性能。\n\n```bash\nyum install fio\n```\n\n# 测试\n\n- 4k随机读\n\n  ```bash\n  fio -name=iouring_test -filename=/mnt/vdd/testfile -iodepth=128 -thread -rw=randread -ioengine=io_uring -sqthread_poll=1 -direct=1 -bs=4k -size=10G -numjobs=1 -runtime=120 -group_reporting\n  ```\n\n- 4k 随机写\n\n  ```bash\n  fio -name=iouring_test -filename=/mnt/vdd/testfile -iodepth=128 -thread -rw=randwrite -ioengine=io_uring -sqthread_poll=1 -direct=1 -bs=4k -size=10G -numjobs=1 -runtime=120 -group_reporting\n  ```\n\n- 随机读写\n\n  ```bash\n  fio -name=iouring_test -filename=/mnt/vdd/testfile -iodepth=128 -thread -rw=randrw -ioengine=io_uring -sqthread_poll=1 -direct=1 -bs=4k -size=10G -numjobs=1 -runtime=120 -group_reporting\n  ```\n\n- 4k 顺序读\n\n  ```\n  fio -name=iouring_test -filename=/mnt/vdd/testfile -iodepth=128 -thread -rw=read -ioengine=io_uring -sqthread_poll=1 -direct=1 -bs=4k -size=10G -numjobs=1 -runtime=120 -group_reporting\n  ```\n\n- 4k 顺序写\n\n  ```bash\n  fio -name=iouring_test -filename=/mnt/vdd/testfile -iodepth=128 -thread -rw=write -ioengine=io_uring -sqthread_poll=1 -direct=1 -bs=4k -size=10G -numjobs=1 -runtime=120 -group_reporting\n  ```\n\n- 4K顺序读写\n\n  ```bash\n  fio -name=iouring_test -filename=/mnt/vdd/testfile -iodepth=128 -thread -rw=rw -ioengine=io_uring -sqthread_poll=1 -direct=1 -bs=4k -size=10G -numjobs=1 -runtime=120 -group_reporting\n  ```\n\n  \n\n说明：\nfilename=/dev/sdb1    测试文件名称，通常选择需要测试的盘的data目录。\ndirect=1         测试过程绕过机器自带的buffer。使测试结果更真实。\nbs=16k          单次io的块文件大小为16k\nbsrange=512-2048     同上，提定数据块的大小范围\nsize=5g  本次的测试文件大小为5g，以每次4k的io进行测试。\nnumjobs=30        本次的测试线程为30.\nruntime=1000       测试时间为1000秒，如果不写则一直将5g文件分4k每次写完为止。\nioengine=psync      io引擎使用pync方式\nrwmixwrite=30      在混合读写的模式下，写占30%\ngroup_reporting     关于显示结果的，汇总每个进程的信息。\n\n此外\nlockmem=1g        只使用1g内存进行测试。\nzero_buffers       用0初始化系统buffer。\nnrfiles=8        每个进程生成文件的数量。\nread 顺序读\nwrite 顺序写\nrw,readwrite 顺序混合读写\nrandwrite 随机写\nrandread 随机读\nrandrw 随机混合读写\n","slug":"Fio测试磁盘读写性能","published":1,"updated":"2024-02-29T07:01:43.072Z","_id":"clt6vkphd0007evigflo3e5no","layout":"post","photos":[],"link":"","content":"<h1 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h1><p>内核：4.10</p>\n<p>cpu：8</p>\n<p>内存：8GB</p>\n<p>硬盘：100GB</p>\n<h1 id=\"安装fio\"><a href=\"#安装fio\" class=\"headerlink\" title=\"安装fio\"></a>安装fio</h1><p>fio 的全称是 flexible I&#x2F;O tester，是常用的磁盘性能测试工具。fio 通过产生一系列的线程或进程来执行用户指定的特定类型 IO 操作。典型的用法是用户将需要模拟的 IO 负载写入到 job file 中。fio 支持多种 IO 引擎，通过 ioengine&#x3D;io_uring，我们可以在 fio 中使用 io_uring 接口来测试磁盘性能。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install fio</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h1><ul>\n<li><p>4k随机读</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fio -name=iouring_test -filename=/mnt/vdd/testfile -iodepth=128 -thread -rw=randread -ioengine=io_uring -sqthread_poll=1 -direct=1 -bs=4k -size=10G -numjobs=1 -runtime=120 -group_reporting</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>4k 随机写</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fio -name=iouring_test -filename=/mnt/vdd/testfile -iodepth=128 -thread -rw=randwrite -ioengine=io_uring -sqthread_poll=1 -direct=1 -bs=4k -size=10G -numjobs=1 -runtime=120 -group_reporting</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>随机读写</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fio -name=iouring_test -filename=/mnt/vdd/testfile -iodepth=128 -thread -rw=randrw -ioengine=io_uring -sqthread_poll=1 -direct=1 -bs=4k -size=10G -numjobs=1 -runtime=120 -group_reporting</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>4k 顺序读</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fio -name=iouring_test -filename=/mnt/vdd/testfile -iodepth=128 -thread -rw=read -ioengine=io_uring -sqthread_poll=1 -direct=1 -bs=4k -size=10G -numjobs=1 -runtime=120 -group_reporting</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>4k 顺序写</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fio -name=iouring_test -filename=/mnt/vdd/testfile -iodepth=128 -thread -rw=write -ioengine=io_uring -sqthread_poll=1 -direct=1 -bs=4k -size=10G -numjobs=1 -runtime=120 -group_reporting</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>4K顺序读写</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fio -name=iouring_test -filename=/mnt/vdd/testfile -iodepth=128 -thread -rw=rw -ioengine=io_uring -sqthread_poll=1 -direct=1 -bs=4k -size=10G -numjobs=1 -runtime=120 -group_reporting</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>说明：<br>filename&#x3D;&#x2F;dev&#x2F;sdb1    测试文件名称，通常选择需要测试的盘的data目录。<br>direct&#x3D;1         测试过程绕过机器自带的buffer。使测试结果更真实。<br>bs&#x3D;16k          单次io的块文件大小为16k<br>bsrange&#x3D;512-2048     同上，提定数据块的大小范围<br>size&#x3D;5g  本次的测试文件大小为5g，以每次4k的io进行测试。<br>numjobs&#x3D;30        本次的测试线程为30.<br>runtime&#x3D;1000       测试时间为1000秒，如果不写则一直将5g文件分4k每次写完为止。<br>ioengine&#x3D;psync      io引擎使用pync方式<br>rwmixwrite&#x3D;30      在混合读写的模式下，写占30%<br>group_reporting     关于显示结果的，汇总每个进程的信息。</p>\n<p>此外<br>lockmem&#x3D;1g        只使用1g内存进行测试。<br>zero_buffers       用0初始化系统buffer。<br>nrfiles&#x3D;8        每个进程生成文件的数量。<br>read 顺序读<br>write 顺序写<br>rw,readwrite 顺序混合读写<br>randwrite 随机写<br>randread 随机读<br>randrw 随机混合读写</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h1><p>内核：4.10</p>\n<p>cpu：8</p>\n<p>内存：8GB</p>\n<p>硬盘：100GB</p>\n<h1 id=\"安装fio\"><a href=\"#安装fio\" class=\"headerlink\" title=\"安装fio\"></a>安装fio</h1><p>fio 的全称是 flexible I&#x2F;O tester，是常用的磁盘性能测试工具。fio 通过产生一系列的线程或进程来执行用户指定的特定类型 IO 操作。典型的用法是用户将需要模拟的 IO 负载写入到 job file 中。fio 支持多种 IO 引擎，通过 ioengine&#x3D;io_uring，我们可以在 fio 中使用 io_uring 接口来测试磁盘性能。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install fio</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h1><ul>\n<li><p>4k随机读</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fio -name=iouring_test -filename=/mnt/vdd/testfile -iodepth=128 -thread -rw=randread -ioengine=io_uring -sqthread_poll=1 -direct=1 -bs=4k -size=10G -numjobs=1 -runtime=120 -group_reporting</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>4k 随机写</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fio -name=iouring_test -filename=/mnt/vdd/testfile -iodepth=128 -thread -rw=randwrite -ioengine=io_uring -sqthread_poll=1 -direct=1 -bs=4k -size=10G -numjobs=1 -runtime=120 -group_reporting</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>随机读写</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fio -name=iouring_test -filename=/mnt/vdd/testfile -iodepth=128 -thread -rw=randrw -ioengine=io_uring -sqthread_poll=1 -direct=1 -bs=4k -size=10G -numjobs=1 -runtime=120 -group_reporting</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>4k 顺序读</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fio -name=iouring_test -filename=/mnt/vdd/testfile -iodepth=128 -thread -rw=read -ioengine=io_uring -sqthread_poll=1 -direct=1 -bs=4k -size=10G -numjobs=1 -runtime=120 -group_reporting</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>4k 顺序写</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fio -name=iouring_test -filename=/mnt/vdd/testfile -iodepth=128 -thread -rw=write -ioengine=io_uring -sqthread_poll=1 -direct=1 -bs=4k -size=10G -numjobs=1 -runtime=120 -group_reporting</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>4K顺序读写</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fio -name=iouring_test -filename=/mnt/vdd/testfile -iodepth=128 -thread -rw=rw -ioengine=io_uring -sqthread_poll=1 -direct=1 -bs=4k -size=10G -numjobs=1 -runtime=120 -group_reporting</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>说明：<br>filename&#x3D;&#x2F;dev&#x2F;sdb1    测试文件名称，通常选择需要测试的盘的data目录。<br>direct&#x3D;1         测试过程绕过机器自带的buffer。使测试结果更真实。<br>bs&#x3D;16k          单次io的块文件大小为16k<br>bsrange&#x3D;512-2048     同上，提定数据块的大小范围<br>size&#x3D;5g  本次的测试文件大小为5g，以每次4k的io进行测试。<br>numjobs&#x3D;30        本次的测试线程为30.<br>runtime&#x3D;1000       测试时间为1000秒，如果不写则一直将5g文件分4k每次写完为止。<br>ioengine&#x3D;psync      io引擎使用pync方式<br>rwmixwrite&#x3D;30      在混合读写的模式下，写占30%<br>group_reporting     关于显示结果的，汇总每个进程的信息。</p>\n<p>此外<br>lockmem&#x3D;1g        只使用1g内存进行测试。<br>zero_buffers       用0初始化系统buffer。<br>nrfiles&#x3D;8        每个进程生成文件的数量。<br>read 顺序读<br>write 顺序写<br>rw,readwrite 顺序混合读写<br>randwrite 随机写<br>randread 随机读<br>randrw 随机混合读写</p>\n"},{"title":"Python安装配置","date":"2023-12-15T02:27:28.000Z","description":"Linux Python环境配置","type":"tags","comments":1,"_content":"\n# 安装Python\n1. 下载python\n```bash\n$ wget https://www.python.org/ftp/python/3.8.0/Python-3.8.0.tgz\n# 解压到opt\n$ tar -zxvf Python-3.8.0.tgz -C /opt\n```\n2. 编译安装python3.8.0\n```bash\n#进入到python-3.8.0文件夹\n$ cd /opt/Python-3.8.0 \n#检查以确保系统满足程序的最低要求\n$ sudo ./configure \n#执行编译脚本\n$ sudo make \n#直接安装\n$ sudo make install\n#替换原版本安装\n$ sudo make altinstall\n```\n3. 修改python默认版本\n```bash\n#查询python3.8位置\n$ whereis python3.8\npython3.9: /usr/local/bin/python3.8 /usr/local/lib/python3.8\n#删除当前软连接\n$ sudo rm /usr/bin/python\n#为新版python创建软链接\n$ sudo ln -s /usr/bin/python3.8 /usr/bin/python\n```\n4. 配置环境变量\n修改用户主目录下名为.bash_profile的文件，配置PATH环境变量并使其生效。\n```bash\n$ cd ~\n$ vim .bash_profile\n# ... 此处省略上面的代码 ...\nexport PATH=$PATH:/usr/local/python38/bin\n# ... 此处省略下面的代码 ...\n```\n5. 激活环境变量\n```bash\n$ source .bash_profile\n```\n# 修改Python默认版本\n1. 查询当前版本\n```bash\n$ python --version\nPython 2.7.16\n```\n2. 删除当前软链接\n```bash\n$ sudo rm /usr/bin/python\n```\n3. 为新版python创建软链接\n```bash\n$ sudo ln -s /usr/bin/python3.7 /usr/bin/python\n```\n4. 校验结果\n```bash\n$ python --version\nPython 3.7.3\n```\n# pip源配置\npip配置信息保存路径：~/.config/pip/pip.conf\n```bash\n#配置清华源\n$ pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple\n#删除配置\n$ pip config unset global.index-url\n```\n# venv环境配置\n1.创建独立的python运行环境\n```bash\n#创建独立目录\n$ mkdir venv\n$ cd venv/\n#初始化python运行环境\n$ python* -m venv .\n#查看当前目录，发现生成lib，include,bin，pyvenv.cfg\n$ ls\nbin  include  lib  pyvenv.cfg\n#进入bin目录，激活该venv环境\n$ cd bin\n$ source activate\n#退出当前的proj101env环境\n$ deactivate\n```\n# Ipython编程工具\n1. 安装Ipython\n```plain\n$ pip install ipython\n```\n2. 启动IPython\n```bash\n$ ipython\n```\n3. 退出ipython\n```bash\n$ ctl+D\n```\nturtle图形绘制工具\n1. 安装依赖\n```bash\n# For Ubuntu or other distros with Apt:\n$ sudo apt-get install python3-tk\n# For Fedora:\n$ sudo dnf install python3-tkinter\n```\n2. 绘制图形\n```plain\nimport turtle\n\nturtle.pensize(4)\nturtle.pencolor('red')\n\nturtle.forward(100)\nturtle.right(90)\nturtle.forward(100)\nturtle.right(90)\nturtle.forward(100)\nturtle.right(90)\nturtle.forward(100)\n\nturtle.mainloop()\n```\n\n\n","source":"_posts/Python相关环境配置.md","raw":"---\ntitle: Python安装配置\ndate: 2023-12-15 10:27:28\ndescription: Linux Python环境配置\ntype: \"tags\"\ncomments: true\ncategories:\n- Linux\n- Python\ntags:\n- Linux\n- Python\n---\n\n# 安装Python\n1. 下载python\n```bash\n$ wget https://www.python.org/ftp/python/3.8.0/Python-3.8.0.tgz\n# 解压到opt\n$ tar -zxvf Python-3.8.0.tgz -C /opt\n```\n2. 编译安装python3.8.0\n```bash\n#进入到python-3.8.0文件夹\n$ cd /opt/Python-3.8.0 \n#检查以确保系统满足程序的最低要求\n$ sudo ./configure \n#执行编译脚本\n$ sudo make \n#直接安装\n$ sudo make install\n#替换原版本安装\n$ sudo make altinstall\n```\n3. 修改python默认版本\n```bash\n#查询python3.8位置\n$ whereis python3.8\npython3.9: /usr/local/bin/python3.8 /usr/local/lib/python3.8\n#删除当前软连接\n$ sudo rm /usr/bin/python\n#为新版python创建软链接\n$ sudo ln -s /usr/bin/python3.8 /usr/bin/python\n```\n4. 配置环境变量\n修改用户主目录下名为.bash_profile的文件，配置PATH环境变量并使其生效。\n```bash\n$ cd ~\n$ vim .bash_profile\n# ... 此处省略上面的代码 ...\nexport PATH=$PATH:/usr/local/python38/bin\n# ... 此处省略下面的代码 ...\n```\n5. 激活环境变量\n```bash\n$ source .bash_profile\n```\n# 修改Python默认版本\n1. 查询当前版本\n```bash\n$ python --version\nPython 2.7.16\n```\n2. 删除当前软链接\n```bash\n$ sudo rm /usr/bin/python\n```\n3. 为新版python创建软链接\n```bash\n$ sudo ln -s /usr/bin/python3.7 /usr/bin/python\n```\n4. 校验结果\n```bash\n$ python --version\nPython 3.7.3\n```\n# pip源配置\npip配置信息保存路径：~/.config/pip/pip.conf\n```bash\n#配置清华源\n$ pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple\n#删除配置\n$ pip config unset global.index-url\n```\n# venv环境配置\n1.创建独立的python运行环境\n```bash\n#创建独立目录\n$ mkdir venv\n$ cd venv/\n#初始化python运行环境\n$ python* -m venv .\n#查看当前目录，发现生成lib，include,bin，pyvenv.cfg\n$ ls\nbin  include  lib  pyvenv.cfg\n#进入bin目录，激活该venv环境\n$ cd bin\n$ source activate\n#退出当前的proj101env环境\n$ deactivate\n```\n# Ipython编程工具\n1. 安装Ipython\n```plain\n$ pip install ipython\n```\n2. 启动IPython\n```bash\n$ ipython\n```\n3. 退出ipython\n```bash\n$ ctl+D\n```\nturtle图形绘制工具\n1. 安装依赖\n```bash\n# For Ubuntu or other distros with Apt:\n$ sudo apt-get install python3-tk\n# For Fedora:\n$ sudo dnf install python3-tkinter\n```\n2. 绘制图形\n```plain\nimport turtle\n\nturtle.pensize(4)\nturtle.pencolor('red')\n\nturtle.forward(100)\nturtle.right(90)\nturtle.forward(100)\nturtle.right(90)\nturtle.forward(100)\nturtle.right(90)\nturtle.forward(100)\n\nturtle.mainloop()\n```\n\n\n","slug":"Python相关环境配置","published":1,"updated":"2024-02-29T07:04:22.781Z","_id":"clt6vkphk000gevig8p1lcy6g","layout":"post","photos":[],"link":"","content":"<h1 id=\"安装Python\"><a href=\"#安装Python\" class=\"headerlink\" title=\"安装Python\"></a>安装Python</h1><ol>\n<li>下载python<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget https://www.python.org/ftp/python/3.8.0/Python-3.8.0.tgz</span><br><span class=\"line\"><span class=\"comment\"># 解压到opt</span></span><br><span class=\"line\">$ tar -zxvf Python-3.8.0.tgz -C /opt</span><br></pre></td></tr></table></figure></li>\n<li>编译安装python3.8.0<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#进入到python-3.8.0文件夹</span></span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> /opt/Python-3.8.0 </span><br><span class=\"line\"><span class=\"comment\">#检查以确保系统满足程序的最低要求</span></span><br><span class=\"line\">$ sudo ./configure </span><br><span class=\"line\"><span class=\"comment\">#执行编译脚本</span></span><br><span class=\"line\">$ sudo make </span><br><span class=\"line\"><span class=\"comment\">#直接安装</span></span><br><span class=\"line\">$ sudo make install</span><br><span class=\"line\"><span class=\"comment\">#替换原版本安装</span></span><br><span class=\"line\">$ sudo make altinstall</span><br></pre></td></tr></table></figure></li>\n<li>修改python默认版本<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#查询python3.8位置</span></span><br><span class=\"line\">$ whereis python3.8</span><br><span class=\"line\">python3.9: /usr/local/bin/python3.8 /usr/local/lib/python3.8</span><br><span class=\"line\"><span class=\"comment\">#删除当前软连接</span></span><br><span class=\"line\">$ sudo <span class=\"built_in\">rm</span> /usr/bin/python</span><br><span class=\"line\"><span class=\"comment\">#为新版python创建软链接</span></span><br><span class=\"line\">$ sudo <span class=\"built_in\">ln</span> -s /usr/bin/python3.8 /usr/bin/python</span><br></pre></td></tr></table></figure></li>\n<li>配置环境变量<br>修改用户主目录下名为.bash_profile的文件，配置PATH环境变量并使其生效。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> ~</span><br><span class=\"line\">$ vim .bash_profile</span><br><span class=\"line\"><span class=\"comment\"># ... 此处省略上面的代码 ...</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:/usr/local/python38/bin</span><br><span class=\"line\"><span class=\"comment\"># ... 此处省略下面的代码 ...</span></span><br></pre></td></tr></table></figure></li>\n<li>激活环境变量<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">source</span> .bash_profile</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h1 id=\"修改Python默认版本\"><a href=\"#修改Python默认版本\" class=\"headerlink\" title=\"修改Python默认版本\"></a>修改Python默认版本</h1><ol>\n<li>查询当前版本<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python --version</span><br><span class=\"line\">Python 2.7.16</span><br></pre></td></tr></table></figure></li>\n<li>删除当前软链接<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo <span class=\"built_in\">rm</span> /usr/bin/python</span><br></pre></td></tr></table></figure></li>\n<li>为新版python创建软链接<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo <span class=\"built_in\">ln</span> -s /usr/bin/python3.7 /usr/bin/python</span><br></pre></td></tr></table></figure></li>\n<li>校验结果<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python --version</span><br><span class=\"line\">Python 3.7.3</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h1 id=\"pip源配置\"><a href=\"#pip源配置\" class=\"headerlink\" title=\"pip源配置\"></a>pip源配置</h1><p>pip配置信息保存路径：~&#x2F;.config&#x2F;pip&#x2F;pip.conf</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#配置清华源</span></span><br><span class=\"line\">$ pip config <span class=\"built_in\">set</span> global.index-url https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class=\"line\"><span class=\"comment\">#删除配置</span></span><br><span class=\"line\">$ pip config <span class=\"built_in\">unset</span> global.index-url</span><br></pre></td></tr></table></figure>\n<h1 id=\"venv环境配置\"><a href=\"#venv环境配置\" class=\"headerlink\" title=\"venv环境配置\"></a>venv环境配置</h1><p>1.创建独立的python运行环境</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#创建独立目录</span></span><br><span class=\"line\">$ <span class=\"built_in\">mkdir</span> venv</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> venv/</span><br><span class=\"line\"><span class=\"comment\">#初始化python运行环境</span></span><br><span class=\"line\">$ python* -m venv .</span><br><span class=\"line\"><span class=\"comment\">#查看当前目录，发现生成lib，include,bin，pyvenv.cfg</span></span><br><span class=\"line\">$ <span class=\"built_in\">ls</span></span><br><span class=\"line\">bin  include  lib  pyvenv.cfg</span><br><span class=\"line\"><span class=\"comment\">#进入bin目录，激活该venv环境</span></span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> bin</span><br><span class=\"line\">$ <span class=\"built_in\">source</span> activate</span><br><span class=\"line\"><span class=\"comment\">#退出当前的proj101env环境</span></span><br><span class=\"line\">$ deactivate</span><br></pre></td></tr></table></figure>\n<h1 id=\"Ipython编程工具\"><a href=\"#Ipython编程工具\" class=\"headerlink\" title=\"Ipython编程工具\"></a>Ipython编程工具</h1><ol>\n<li>安装Ipython<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pip install ipython</span><br></pre></td></tr></table></figure></li>\n<li>启动IPython<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ipython</span><br></pre></td></tr></table></figure></li>\n<li>退出ipython<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ctl+D</span><br></pre></td></tr></table></figure>\nturtle图形绘制工具</li>\n<li>安装依赖<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># For Ubuntu or other distros with Apt:</span></span><br><span class=\"line\">$ sudo apt-get install python3-tk</span><br><span class=\"line\"><span class=\"comment\"># For Fedora:</span></span><br><span class=\"line\">$ sudo dnf install python3-tkinter</span><br></pre></td></tr></table></figure></li>\n<li>绘制图形<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import turtle</span><br><span class=\"line\"></span><br><span class=\"line\">turtle.pensize(4)</span><br><span class=\"line\">turtle.pencolor(&#x27;red&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">turtle.forward(100)</span><br><span class=\"line\">turtle.right(90)</span><br><span class=\"line\">turtle.forward(100)</span><br><span class=\"line\">turtle.right(90)</span><br><span class=\"line\">turtle.forward(100)</span><br><span class=\"line\">turtle.right(90)</span><br><span class=\"line\">turtle.forward(100)</span><br><span class=\"line\"></span><br><span class=\"line\">turtle.mainloop()</span><br></pre></td></tr></table></figure></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"安装Python\"><a href=\"#安装Python\" class=\"headerlink\" title=\"安装Python\"></a>安装Python</h1><ol>\n<li>下载python<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget https://www.python.org/ftp/python/3.8.0/Python-3.8.0.tgz</span><br><span class=\"line\"><span class=\"comment\"># 解压到opt</span></span><br><span class=\"line\">$ tar -zxvf Python-3.8.0.tgz -C /opt</span><br></pre></td></tr></table></figure></li>\n<li>编译安装python3.8.0<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#进入到python-3.8.0文件夹</span></span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> /opt/Python-3.8.0 </span><br><span class=\"line\"><span class=\"comment\">#检查以确保系统满足程序的最低要求</span></span><br><span class=\"line\">$ sudo ./configure </span><br><span class=\"line\"><span class=\"comment\">#执行编译脚本</span></span><br><span class=\"line\">$ sudo make </span><br><span class=\"line\"><span class=\"comment\">#直接安装</span></span><br><span class=\"line\">$ sudo make install</span><br><span class=\"line\"><span class=\"comment\">#替换原版本安装</span></span><br><span class=\"line\">$ sudo make altinstall</span><br></pre></td></tr></table></figure></li>\n<li>修改python默认版本<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#查询python3.8位置</span></span><br><span class=\"line\">$ whereis python3.8</span><br><span class=\"line\">python3.9: /usr/local/bin/python3.8 /usr/local/lib/python3.8</span><br><span class=\"line\"><span class=\"comment\">#删除当前软连接</span></span><br><span class=\"line\">$ sudo <span class=\"built_in\">rm</span> /usr/bin/python</span><br><span class=\"line\"><span class=\"comment\">#为新版python创建软链接</span></span><br><span class=\"line\">$ sudo <span class=\"built_in\">ln</span> -s /usr/bin/python3.8 /usr/bin/python</span><br></pre></td></tr></table></figure></li>\n<li>配置环境变量<br>修改用户主目录下名为.bash_profile的文件，配置PATH环境变量并使其生效。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> ~</span><br><span class=\"line\">$ vim .bash_profile</span><br><span class=\"line\"><span class=\"comment\"># ... 此处省略上面的代码 ...</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:/usr/local/python38/bin</span><br><span class=\"line\"><span class=\"comment\"># ... 此处省略下面的代码 ...</span></span><br></pre></td></tr></table></figure></li>\n<li>激活环境变量<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">source</span> .bash_profile</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h1 id=\"修改Python默认版本\"><a href=\"#修改Python默认版本\" class=\"headerlink\" title=\"修改Python默认版本\"></a>修改Python默认版本</h1><ol>\n<li>查询当前版本<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python --version</span><br><span class=\"line\">Python 2.7.16</span><br></pre></td></tr></table></figure></li>\n<li>删除当前软链接<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo <span class=\"built_in\">rm</span> /usr/bin/python</span><br></pre></td></tr></table></figure></li>\n<li>为新版python创建软链接<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo <span class=\"built_in\">ln</span> -s /usr/bin/python3.7 /usr/bin/python</span><br></pre></td></tr></table></figure></li>\n<li>校验结果<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python --version</span><br><span class=\"line\">Python 3.7.3</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h1 id=\"pip源配置\"><a href=\"#pip源配置\" class=\"headerlink\" title=\"pip源配置\"></a>pip源配置</h1><p>pip配置信息保存路径：~&#x2F;.config&#x2F;pip&#x2F;pip.conf</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#配置清华源</span></span><br><span class=\"line\">$ pip config <span class=\"built_in\">set</span> global.index-url https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class=\"line\"><span class=\"comment\">#删除配置</span></span><br><span class=\"line\">$ pip config <span class=\"built_in\">unset</span> global.index-url</span><br></pre></td></tr></table></figure>\n<h1 id=\"venv环境配置\"><a href=\"#venv环境配置\" class=\"headerlink\" title=\"venv环境配置\"></a>venv环境配置</h1><p>1.创建独立的python运行环境</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#创建独立目录</span></span><br><span class=\"line\">$ <span class=\"built_in\">mkdir</span> venv</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> venv/</span><br><span class=\"line\"><span class=\"comment\">#初始化python运行环境</span></span><br><span class=\"line\">$ python* -m venv .</span><br><span class=\"line\"><span class=\"comment\">#查看当前目录，发现生成lib，include,bin，pyvenv.cfg</span></span><br><span class=\"line\">$ <span class=\"built_in\">ls</span></span><br><span class=\"line\">bin  include  lib  pyvenv.cfg</span><br><span class=\"line\"><span class=\"comment\">#进入bin目录，激活该venv环境</span></span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> bin</span><br><span class=\"line\">$ <span class=\"built_in\">source</span> activate</span><br><span class=\"line\"><span class=\"comment\">#退出当前的proj101env环境</span></span><br><span class=\"line\">$ deactivate</span><br></pre></td></tr></table></figure>\n<h1 id=\"Ipython编程工具\"><a href=\"#Ipython编程工具\" class=\"headerlink\" title=\"Ipython编程工具\"></a>Ipython编程工具</h1><ol>\n<li>安装Ipython<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pip install ipython</span><br></pre></td></tr></table></figure></li>\n<li>启动IPython<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ipython</span><br></pre></td></tr></table></figure></li>\n<li>退出ipython<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ctl+D</span><br></pre></td></tr></table></figure>\nturtle图形绘制工具</li>\n<li>安装依赖<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># For Ubuntu or other distros with Apt:</span></span><br><span class=\"line\">$ sudo apt-get install python3-tk</span><br><span class=\"line\"><span class=\"comment\"># For Fedora:</span></span><br><span class=\"line\">$ sudo dnf install python3-tkinter</span><br></pre></td></tr></table></figure></li>\n<li>绘制图形<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import turtle</span><br><span class=\"line\"></span><br><span class=\"line\">turtle.pensize(4)</span><br><span class=\"line\">turtle.pencolor(&#x27;red&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">turtle.forward(100)</span><br><span class=\"line\">turtle.right(90)</span><br><span class=\"line\">turtle.forward(100)</span><br><span class=\"line\">turtle.right(90)</span><br><span class=\"line\">turtle.forward(100)</span><br><span class=\"line\">turtle.right(90)</span><br><span class=\"line\">turtle.forward(100)</span><br><span class=\"line\"></span><br><span class=\"line\">turtle.mainloop()</span><br></pre></td></tr></table></figure></li>\n</ol>\n"},{"title":"git使用","date":"2023-12-15T02:27:28.000Z","description":"Linux git使用","type":"tags","comments":1,"_content":"# 远程配置\n\"待补充···\"\n\n# 本地配置\n\n优先级：local > global > system\n\n```bash\ngit config user.name <name>\ngit config user.email <email>\n# --local ：local只对仓库有效\n# --global ：global对登录用户所有仓库有效\n# --system ：system对系统的所有用户有效\n```\n\n# 本地仓库切换分支\n\n```bash\ngit checkout <old-branch>\ngit checkout -b <new-branch>\n```\n\n# 合并远程分支\n\n```bash\ngit push origin <local-branch>:<cloud-branch>\n```\n\n# 删除本地分支\n\n```bash\ngit branch -d <local-branch>\n```\n# 删除远程分支\n\n```bash\ngit push origin -d <cloud-branch>\n```\n# 拉取远程代码到本地分支\n\n```bash\ngit pull origin <local-branch>\n```\n# 创建远程分支\n\n```bash\n# 将本地分支推送到远程分支，若远程分支不存在则会自动新建新远程分支\ngit push origin <local-branch>:<cloud-branch>\n# 将本地空分支推送到远程分支上时，则会删除该远程分支\ngit push origin :<cloud-branch>\n```\n\n# 合并commit\n\n```bash\n# 本地通常会有无数次 commit ，可以合并“相同功能”的多个 commit，以保持历史的简洁。\n\n```","source":"_posts/git使用.md","raw":"---\ntitle: git使用\ndate: 2023-12-15 10:27:28\ndescription: Linux git使用\ntype: \"tags\"\ncomments: true\ncategories:\n- Linux\n- Tools\n- Git\ntags:\n- Linux\n- Git\n---\n# 远程配置\n\"待补充···\"\n\n# 本地配置\n\n优先级：local > global > system\n\n```bash\ngit config user.name <name>\ngit config user.email <email>\n# --local ：local只对仓库有效\n# --global ：global对登录用户所有仓库有效\n# --system ：system对系统的所有用户有效\n```\n\n# 本地仓库切换分支\n\n```bash\ngit checkout <old-branch>\ngit checkout -b <new-branch>\n```\n\n# 合并远程分支\n\n```bash\ngit push origin <local-branch>:<cloud-branch>\n```\n\n# 删除本地分支\n\n```bash\ngit branch -d <local-branch>\n```\n# 删除远程分支\n\n```bash\ngit push origin -d <cloud-branch>\n```\n# 拉取远程代码到本地分支\n\n```bash\ngit pull origin <local-branch>\n```\n# 创建远程分支\n\n```bash\n# 将本地分支推送到远程分支，若远程分支不存在则会自动新建新远程分支\ngit push origin <local-branch>:<cloud-branch>\n# 将本地空分支推送到远程分支上时，则会删除该远程分支\ngit push origin :<cloud-branch>\n```\n\n# 合并commit\n\n```bash\n# 本地通常会有无数次 commit ，可以合并“相同功能”的多个 commit，以保持历史的简洁。\n\n```","slug":"git使用","published":1,"updated":"2024-02-29T07:03:39.064Z","_id":"clt6vkphl000ieviga59j9x5g","layout":"post","photos":[],"link":"","content":"<h1 id=\"远程配置\"><a href=\"#远程配置\" class=\"headerlink\" title=\"远程配置\"></a>远程配置</h1><p>“待补充···”</p>\n<h1 id=\"本地配置\"><a href=\"#本地配置\" class=\"headerlink\" title=\"本地配置\"></a>本地配置</h1><p>优先级：local &gt; global &gt; system</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config user.name &lt;name&gt;</span><br><span class=\"line\">git config user.email &lt;email&gt;</span><br><span class=\"line\"><span class=\"comment\"># --local ：local只对仓库有效</span></span><br><span class=\"line\"><span class=\"comment\"># --global ：global对登录用户所有仓库有效</span></span><br><span class=\"line\"><span class=\"comment\"># --system ：system对系统的所有用户有效</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"本地仓库切换分支\"><a href=\"#本地仓库切换分支\" class=\"headerlink\" title=\"本地仓库切换分支\"></a>本地仓库切换分支</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout &lt;old-branch&gt;</span><br><span class=\"line\">git checkout -b &lt;new-branch&gt;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"合并远程分支\"><a href=\"#合并远程分支\" class=\"headerlink\" title=\"合并远程分支\"></a>合并远程分支</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin &lt;local-branch&gt;:&lt;cloud-branch&gt;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"删除本地分支\"><a href=\"#删除本地分支\" class=\"headerlink\" title=\"删除本地分支\"></a>删除本地分支</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -d &lt;local-branch&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"删除远程分支\"><a href=\"#删除远程分支\" class=\"headerlink\" title=\"删除远程分支\"></a>删除远程分支</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin -d &lt;cloud-branch&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"拉取远程代码到本地分支\"><a href=\"#拉取远程代码到本地分支\" class=\"headerlink\" title=\"拉取远程代码到本地分支\"></a>拉取远程代码到本地分支</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull origin &lt;local-branch&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"创建远程分支\"><a href=\"#创建远程分支\" class=\"headerlink\" title=\"创建远程分支\"></a>创建远程分支</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将本地分支推送到远程分支，若远程分支不存在则会自动新建新远程分支</span></span><br><span class=\"line\">git push origin &lt;local-branch&gt;:&lt;cloud-branch&gt;</span><br><span class=\"line\"><span class=\"comment\"># 将本地空分支推送到远程分支上时，则会删除该远程分支</span></span><br><span class=\"line\">git push origin :&lt;cloud-branch&gt;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"合并commit\"><a href=\"#合并commit\" class=\"headerlink\" title=\"合并commit\"></a>合并commit</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 本地通常会有无数次 commit ，可以合并“相同功能”的多个 commit，以保持历史的简洁。</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"远程配置\"><a href=\"#远程配置\" class=\"headerlink\" title=\"远程配置\"></a>远程配置</h1><p>“待补充···”</p>\n<h1 id=\"本地配置\"><a href=\"#本地配置\" class=\"headerlink\" title=\"本地配置\"></a>本地配置</h1><p>优先级：local &gt; global &gt; system</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config user.name &lt;name&gt;</span><br><span class=\"line\">git config user.email &lt;email&gt;</span><br><span class=\"line\"><span class=\"comment\"># --local ：local只对仓库有效</span></span><br><span class=\"line\"><span class=\"comment\"># --global ：global对登录用户所有仓库有效</span></span><br><span class=\"line\"><span class=\"comment\"># --system ：system对系统的所有用户有效</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"本地仓库切换分支\"><a href=\"#本地仓库切换分支\" class=\"headerlink\" title=\"本地仓库切换分支\"></a>本地仓库切换分支</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout &lt;old-branch&gt;</span><br><span class=\"line\">git checkout -b &lt;new-branch&gt;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"合并远程分支\"><a href=\"#合并远程分支\" class=\"headerlink\" title=\"合并远程分支\"></a>合并远程分支</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin &lt;local-branch&gt;:&lt;cloud-branch&gt;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"删除本地分支\"><a href=\"#删除本地分支\" class=\"headerlink\" title=\"删除本地分支\"></a>删除本地分支</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -d &lt;local-branch&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"删除远程分支\"><a href=\"#删除远程分支\" class=\"headerlink\" title=\"删除远程分支\"></a>删除远程分支</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin -d &lt;cloud-branch&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"拉取远程代码到本地分支\"><a href=\"#拉取远程代码到本地分支\" class=\"headerlink\" title=\"拉取远程代码到本地分支\"></a>拉取远程代码到本地分支</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull origin &lt;local-branch&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"创建远程分支\"><a href=\"#创建远程分支\" class=\"headerlink\" title=\"创建远程分支\"></a>创建远程分支</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将本地分支推送到远程分支，若远程分支不存在则会自动新建新远程分支</span></span><br><span class=\"line\">git push origin &lt;local-branch&gt;:&lt;cloud-branch&gt;</span><br><span class=\"line\"><span class=\"comment\"># 将本地空分支推送到远程分支上时，则会删除该远程分支</span></span><br><span class=\"line\">git push origin :&lt;cloud-branch&gt;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"合并commit\"><a href=\"#合并commit\" class=\"headerlink\" title=\"合并commit\"></a>合并commit</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 本地通常会有无数次 commit ，可以合并“相同功能”的多个 commit，以保持历史的简洁。</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"mock编译rpm软件包","date":"2023-12-15T02:27:28.000Z","description":"Linux mock编译rpm软件包","type":"tags","comments":1,"_content":"# mock 环境编译\n\n1、yum install mock\n\n2、新建或修改 /etc/mock/example.cfg\n\n```shell\nconfig_opts['basedir'] = '/home/'\nconfig_opts['root'] = 'example'\nconfig_opts['target_arch'] = 'x86_64'\nconfig_opts['legal_host_arches'] = ('x86_64',)\nconfig_opts['chroot_setup_cmd'] = 'install tar gcc-c++   which xz sed make bzip2 gzip gcc coreutils unzip shadow-utils diffutils cpio bash gawk rpm-build info patch util-linux findutils grep vim automake yum wget git'\n\nconfig_opts['releasever'] = '8'\n\nconfig_opts['yum.conf'] = \"\"\"\n[main]\nkeepcache=1\ndebuglevel=2\nreposdir=/dev/null\nlogfile=/var/log/yum.log\nretries=20\nobsoletes=1\ngpgcheck=0\nassumeyes=1\nsyslog_ident=mock\nsyslog_device=\nmdpolicy=group:primary\n\n# repos\n[base]\nname=base\nbaseurl = url\nenabled=1\ngpgcheck=0\nmodule_hotfixes=true\n\"\"\"\n\n```\n3、可使用root直接运行，也可创建mock用户并添加到mockbuild组中在编译\n```bash\n$ mock -r example --rebuild *src.rpm\n```\n\n4、使用root用户进入mock环境\n\n```bash\n$ cd /var/lib/mock/**\n$ chroot .\n```\n\n# rpm-build编译\n\n```bash\n#解压src包\n$ rpm -ivh -D \"_topdir `pwd`\"  /path/to/*.src.rpm\n#根据spec下载依赖\n$ yum-builddep /path/to/*.spec\n# -D \"_topdir `pwd`\" 指定编译目录，否则会在默认目录下编译\n$ rpmbuild -ba -D \"_topdir `pwd`\" /path/to/*.spec\n```\n# koji提交\n\n1 .安装koji\n\n2.修改koji配置文件\n\n3.提交rpm包\n\n","source":"_posts/mock编译rpm软件包.md","raw":"---\ntitle: mock编译rpm软件包\ndate: 2023-12-15 10:27:28\ndescription: Linux mock编译rpm软件包\ntype: \"tags\"\ncomments: true\ncategories:\n- Learning Tools\n- Linux\n- Rpm\ntags:\n- Linux\n- Rpm\n---\n# mock 环境编译\n\n1、yum install mock\n\n2、新建或修改 /etc/mock/example.cfg\n\n```shell\nconfig_opts['basedir'] = '/home/'\nconfig_opts['root'] = 'example'\nconfig_opts['target_arch'] = 'x86_64'\nconfig_opts['legal_host_arches'] = ('x86_64',)\nconfig_opts['chroot_setup_cmd'] = 'install tar gcc-c++   which xz sed make bzip2 gzip gcc coreutils unzip shadow-utils diffutils cpio bash gawk rpm-build info patch util-linux findutils grep vim automake yum wget git'\n\nconfig_opts['releasever'] = '8'\n\nconfig_opts['yum.conf'] = \"\"\"\n[main]\nkeepcache=1\ndebuglevel=2\nreposdir=/dev/null\nlogfile=/var/log/yum.log\nretries=20\nobsoletes=1\ngpgcheck=0\nassumeyes=1\nsyslog_ident=mock\nsyslog_device=\nmdpolicy=group:primary\n\n# repos\n[base]\nname=base\nbaseurl = url\nenabled=1\ngpgcheck=0\nmodule_hotfixes=true\n\"\"\"\n\n```\n3、可使用root直接运行，也可创建mock用户并添加到mockbuild组中在编译\n```bash\n$ mock -r example --rebuild *src.rpm\n```\n\n4、使用root用户进入mock环境\n\n```bash\n$ cd /var/lib/mock/**\n$ chroot .\n```\n\n# rpm-build编译\n\n```bash\n#解压src包\n$ rpm -ivh -D \"_topdir `pwd`\"  /path/to/*.src.rpm\n#根据spec下载依赖\n$ yum-builddep /path/to/*.spec\n# -D \"_topdir `pwd`\" 指定编译目录，否则会在默认目录下编译\n$ rpmbuild -ba -D \"_topdir `pwd`\" /path/to/*.spec\n```\n# koji提交\n\n1 .安装koji\n\n2.修改koji配置文件\n\n3.提交rpm包\n\n","slug":"mock编译rpm软件包","published":1,"updated":"2023-12-26T08:46:32.539Z","layout":"post","photos":[],"link":"","_id":"clt6vkphn000oevig0zwehm1r","content":"<h1 id=\"mock-环境编译\"><a href=\"#mock-环境编译\" class=\"headerlink\" title=\"mock 环境编译\"></a>mock 环境编译</h1><p>1、yum install mock</p>\n<p>2、新建或修改 &#x2F;etc&#x2F;mock&#x2F;example.cfg</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config_opts[&#x27;basedir&#x27;] = &#x27;/home/&#x27;</span><br><span class=\"line\">config_opts[&#x27;root&#x27;] = &#x27;example&#x27;</span><br><span class=\"line\">config_opts[&#x27;target_arch&#x27;] = &#x27;x86_64&#x27;</span><br><span class=\"line\">config_opts[&#x27;legal_host_arches&#x27;] = (&#x27;x86_64&#x27;,)</span><br><span class=\"line\">config_opts[&#x27;chroot_setup_cmd&#x27;] = &#x27;install tar gcc-c++   which xz sed make bzip2 gzip gcc coreutils unzip shadow-utils diffutils cpio bash gawk rpm-build info patch util-linux findutils grep vim automake yum wget git&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">config_opts[&#x27;releasever&#x27;] = &#x27;8&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">config_opts[&#x27;yum.conf&#x27;] = &quot;&quot;&quot;</span><br><span class=\"line\">[main]</span><br><span class=\"line\">keepcache=1</span><br><span class=\"line\">debuglevel=2</span><br><span class=\"line\">reposdir=/dev/null</span><br><span class=\"line\">logfile=/var/log/yum.log</span><br><span class=\"line\">retries=20</span><br><span class=\"line\">obsoletes=1</span><br><span class=\"line\">gpgcheck=0</span><br><span class=\"line\">assumeyes=1</span><br><span class=\"line\">syslog_ident=mock</span><br><span class=\"line\">syslog_device=</span><br><span class=\"line\">mdpolicy=group:primary</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">repos</span></span><br><span class=\"line\">[base]</span><br><span class=\"line\">name=base</span><br><span class=\"line\">baseurl = url</span><br><span class=\"line\">enabled=1</span><br><span class=\"line\">gpgcheck=0</span><br><span class=\"line\">module_hotfixes=true</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>3、可使用root直接运行，也可创建mock用户并添加到mockbuild组中在编译</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mock -r example --rebuild *src.rpm</span><br></pre></td></tr></table></figure>\n\n<p>4、使用root用户进入mock环境</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> /var/lib/mock/**</span><br><span class=\"line\">$ <span class=\"built_in\">chroot</span> .</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"rpm-build编译\"><a href=\"#rpm-build编译\" class=\"headerlink\" title=\"rpm-build编译\"></a>rpm-build编译</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#解压src包</span></span><br><span class=\"line\">$ rpm -ivh -D <span class=\"string\">&quot;_topdir `pwd`&quot;</span>  /path/to/*.src.rpm</span><br><span class=\"line\"><span class=\"comment\">#根据spec下载依赖</span></span><br><span class=\"line\">$ yum-builddep /path/to/*.spec</span><br><span class=\"line\"><span class=\"comment\"># -D &quot;_topdir `pwd`&quot; 指定编译目录，否则会在默认目录下编译</span></span><br><span class=\"line\">$ rpmbuild -ba -D <span class=\"string\">&quot;_topdir `pwd`&quot;</span> /path/to/*.spec</span><br></pre></td></tr></table></figure>\n<h1 id=\"koji提交\"><a href=\"#koji提交\" class=\"headerlink\" title=\"koji提交\"></a>koji提交</h1><p>1 .安装koji</p>\n<p>2.修改koji配置文件</p>\n<p>3.提交rpm包</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"mock-环境编译\"><a href=\"#mock-环境编译\" class=\"headerlink\" title=\"mock 环境编译\"></a>mock 环境编译</h1><p>1、yum install mock</p>\n<p>2、新建或修改 &#x2F;etc&#x2F;mock&#x2F;example.cfg</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config_opts[&#x27;basedir&#x27;] = &#x27;/home/&#x27;</span><br><span class=\"line\">config_opts[&#x27;root&#x27;] = &#x27;example&#x27;</span><br><span class=\"line\">config_opts[&#x27;target_arch&#x27;] = &#x27;x86_64&#x27;</span><br><span class=\"line\">config_opts[&#x27;legal_host_arches&#x27;] = (&#x27;x86_64&#x27;,)</span><br><span class=\"line\">config_opts[&#x27;chroot_setup_cmd&#x27;] = &#x27;install tar gcc-c++   which xz sed make bzip2 gzip gcc coreutils unzip shadow-utils diffutils cpio bash gawk rpm-build info patch util-linux findutils grep vim automake yum wget git&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">config_opts[&#x27;releasever&#x27;] = &#x27;8&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">config_opts[&#x27;yum.conf&#x27;] = &quot;&quot;&quot;</span><br><span class=\"line\">[main]</span><br><span class=\"line\">keepcache=1</span><br><span class=\"line\">debuglevel=2</span><br><span class=\"line\">reposdir=/dev/null</span><br><span class=\"line\">logfile=/var/log/yum.log</span><br><span class=\"line\">retries=20</span><br><span class=\"line\">obsoletes=1</span><br><span class=\"line\">gpgcheck=0</span><br><span class=\"line\">assumeyes=1</span><br><span class=\"line\">syslog_ident=mock</span><br><span class=\"line\">syslog_device=</span><br><span class=\"line\">mdpolicy=group:primary</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">repos</span></span><br><span class=\"line\">[base]</span><br><span class=\"line\">name=base</span><br><span class=\"line\">baseurl = url</span><br><span class=\"line\">enabled=1</span><br><span class=\"line\">gpgcheck=0</span><br><span class=\"line\">module_hotfixes=true</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>3、可使用root直接运行，也可创建mock用户并添加到mockbuild组中在编译</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mock -r example --rebuild *src.rpm</span><br></pre></td></tr></table></figure>\n\n<p>4、使用root用户进入mock环境</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> /var/lib/mock/**</span><br><span class=\"line\">$ <span class=\"built_in\">chroot</span> .</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"rpm-build编译\"><a href=\"#rpm-build编译\" class=\"headerlink\" title=\"rpm-build编译\"></a>rpm-build编译</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#解压src包</span></span><br><span class=\"line\">$ rpm -ivh -D <span class=\"string\">&quot;_topdir `pwd`&quot;</span>  /path/to/*.src.rpm</span><br><span class=\"line\"><span class=\"comment\">#根据spec下载依赖</span></span><br><span class=\"line\">$ yum-builddep /path/to/*.spec</span><br><span class=\"line\"><span class=\"comment\"># -D &quot;_topdir `pwd`&quot; 指定编译目录，否则会在默认目录下编译</span></span><br><span class=\"line\">$ rpmbuild -ba -D <span class=\"string\">&quot;_topdir `pwd`&quot;</span> /path/to/*.spec</span><br></pre></td></tr></table></figure>\n<h1 id=\"koji提交\"><a href=\"#koji提交\" class=\"headerlink\" title=\"koji提交\"></a>koji提交</h1><p>1 .安装koji</p>\n<p>2.修改koji配置文件</p>\n<p>3.提交rpm包</p>\n"},{"title":"创建windows的qcow2镜像","date":"2024-01-10T02:27:28.000Z","description":"Linux Python环境配置","type":"tags","comments":1,"_content":"\n创建qcow2\n```bash\nqemu-img create -f qcow2 /path/to/win-iso/windows_server_2019.qcow2 50G\n```\n\n安装windows镜像到qcow2\n\n```bash\nvirt-install --virt-type=kvm --name win-2019 --cpu=host --memory 3072 --vcpus=2 --os-type=windows --os-variant=windows --disk=//path/to/win-iso/cn_windows_server_2019_x64_dvd_4de40f33.iso,device=cdrom --disk=/path/to//win-iso/virtio-win-0.1.172.iso,device=cdrom --network=default,model=virtio --graphics vnc --disk=/path/to/win-iso/windows_server_2019.qcow2,size=50,bus=virtio,format=qcow2 --boot cdrom --check all=off\n```\n\n压缩镜像\n\n```bash\nqemu-img convert -O qcow2 windows_server_2019.qcow2 new-windows_server_2019.qcow2\n```\n\n","source":"_posts/创建windows的qcow2镜像.md","raw":"---\ntitle: 创建windows的qcow2镜像\ndate: 2024-01-10 10:27:28\ndescription: Linux Python环境配置\ntype: \"tags\"\ncomments: true\ncategories:\n- Linux\n- Python\ntags:\n- Linux\n- Python\n---\n\n创建qcow2\n```bash\nqemu-img create -f qcow2 /path/to/win-iso/windows_server_2019.qcow2 50G\n```\n\n安装windows镜像到qcow2\n\n```bash\nvirt-install --virt-type=kvm --name win-2019 --cpu=host --memory 3072 --vcpus=2 --os-type=windows --os-variant=windows --disk=//path/to/win-iso/cn_windows_server_2019_x64_dvd_4de40f33.iso,device=cdrom --disk=/path/to//win-iso/virtio-win-0.1.172.iso,device=cdrom --network=default,model=virtio --graphics vnc --disk=/path/to/win-iso/windows_server_2019.qcow2,size=50,bus=virtio,format=qcow2 --boot cdrom --check all=off\n```\n\n压缩镜像\n\n```bash\nqemu-img convert -O qcow2 windows_server_2019.qcow2 new-windows_server_2019.qcow2\n```\n\n","slug":"创建windows的qcow2镜像","published":1,"updated":"2024-02-29T07:04:16.596Z","_id":"clt6vkphp000tevigarxs6id2","layout":"post","photos":[],"link":"","content":"<p>创建qcow2</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">qemu-img create -f qcow2 /path/to/win-iso/windows_server_2019.qcow2 50G</span><br></pre></td></tr></table></figure>\n\n<p>安装windows镜像到qcow2</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">virt-install --virt-type=kvm --name win-2019 --cpu=host --memory 3072 --vcpus=2 --os-type=windows --os-variant=windows --disk=//path/to/win-iso/cn_windows_server_2019_x64_dvd_4de40f33.iso,device=cdrom --disk=/path/to//win-iso/virtio-win-0.1.172.iso,device=cdrom --network=default,model=virtio --graphics vnc --disk=/path/to/win-iso/windows_server_2019.qcow2,size=50,bus=virtio,format=qcow2 --boot cdrom --check all=off</span><br></pre></td></tr></table></figure>\n\n<p>压缩镜像</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">qemu-img convert -O qcow2 windows_server_2019.qcow2 new-windows_server_2019.qcow2</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p>创建qcow2</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">qemu-img create -f qcow2 /path/to/win-iso/windows_server_2019.qcow2 50G</span><br></pre></td></tr></table></figure>\n\n<p>安装windows镜像到qcow2</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">virt-install --virt-type=kvm --name win-2019 --cpu=host --memory 3072 --vcpus=2 --os-type=windows --os-variant=windows --disk=//path/to/win-iso/cn_windows_server_2019_x64_dvd_4de40f33.iso,device=cdrom --disk=/path/to//win-iso/virtio-win-0.1.172.iso,device=cdrom --network=default,model=virtio --graphics vnc --disk=/path/to/win-iso/windows_server_2019.qcow2,size=50,bus=virtio,format=qcow2 --boot cdrom --check all=off</span><br></pre></td></tr></table></figure>\n\n<p>压缩镜像</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">qemu-img convert -O qcow2 windows_server_2019.qcow2 new-windows_server_2019.qcow2</span><br></pre></td></tr></table></figure>\n\n"},{"title":"基于Debian使用Docker","date":"2023-12-25T02:27:28.000Z","description":"基于Debian使用Docker","type":"tags","comments":1,"_content":"# 安装docker\n```bash\n sudo apt-get update\n sudo apt-get install docker-ce docker-ce-cli containerd.io\n```\n","source":"_posts/基于Debian使用docker.md","raw":"---\ntitle: 基于Debian使用Docker\ndate: 2023-12-25 10:27:28\ndescription: 基于Debian使用Docker\ntype: \"tags\"\ncomments: true\ncategories:\n- Linux\n- Tools\n- Docker\ntags:\n- Linux\n- Docker\n---\n# 安装docker\n```bash\n sudo apt-get update\n sudo apt-get install docker-ce docker-ce-cli containerd.io\n```\n","slug":"基于Debian使用docker","published":1,"updated":"2023-12-27T03:24:17.700Z","layout":"post","photos":[],"link":"","_id":"clt6vkphq000vevigav77f7xp","content":"<h1 id=\"安装docker\"><a href=\"#安装docker\" class=\"headerlink\" title=\"安装docker\"></a>安装docker</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"安装docker\"><a href=\"#安装docker\" class=\"headerlink\" title=\"安装docker\"></a>安装docker</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure>\n"},{"title":"搭建Blog","date":"2023-12-14T02:27:28.000Z","description":"梳理Blog搭建流程","type":"tags","comments":1,"_content":"\n# 搭建Blog\n\n## 安装node npm n\n\n- 安装node.js\n\n  ```bash\n  sudo apt-get install nodejs\n  ```\n\n- 安装npm\n  npm是nodejs的包管理器。\n  \n  ```bash\n  sudo apt-get install npm\n  ```\n\n- 安装n\n\n  n 是交互式 node.js 版本管理工具。\n\n  ```bash\n  sudo npm install -g n\n  ```\n\n  可以使用n安装特定版本的nodejs。\n  \n\n## 安装hexo\n\n​\t\tHexo 是**一个快速、简洁且高效的博客框架**。 Hexo 使用Markdown（或其他标记语言）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。\n\n- 配置国内源\n\n  ```bash\n  sudo npm set registry=https://registry.npm.taobao.org\n  ```\n\n- 安装hexo-cli\n\n  ``` bash\n  sudo npm install hexo-cli -g\n  ```\n\n- 初始化项目\n\n  ```bash\n  sudo npm init blog\n  ```\n\n- 安装依赖\n\n  ``` bash\n  npm install\n  ```\n- 打包成dist\n\n  ``` bash\n  npm run build\n  ```\n  \n- 运行hexo项目\n\n  ```bash\n  hexo server\n  ```\n\n- 替换主题\n\n  ```bash\n  安装主题和渲染器：\n  $ git clone https://github.com/tufu9441/maupassant-hexo.git themes/maupassant  \n  $ npm install hexo-renderer-pug --save  \n  $ npm install hexo-renderer-sass --save  \n  编辑Hexo目录下的 _config.yml，将theme的值改为maupassant。\n  注：依赖hexo-renderer-sass安装时容易报错，很可能是国内网络问题，请尝试使用代理或者切换至NPM的国内镜像源安装。\n  ```\n\n- 创建\"About页\"\n\n```bash\nhexo new page about\n创建成功后，编辑博客目录下 /source/about/index.md，添加 layout 属性。\n```\n- 创建\"Archive页\"\n\n```bash\nhexo new page archive\n创建成功后，编辑博客目录下 /source/archive/index.md。\n```\n- hexo使用参考：<https://hexo.io/zh-cn/>\n","source":"_posts/搭建Blog.md","raw":"---\ntitle: 搭建Blog\ndate: 2023-12-14 10:27:28\ndescription: 梳理Blog搭建流程\ntype: \"tags\"\ncomments: true\ncategories:\n- Learning Tools\n- Hexo\ntags:\n- nodejs\n- Blog\n---\n\n# 搭建Blog\n\n## 安装node npm n\n\n- 安装node.js\n\n  ```bash\n  sudo apt-get install nodejs\n  ```\n\n- 安装npm\n  npm是nodejs的包管理器。\n  \n  ```bash\n  sudo apt-get install npm\n  ```\n\n- 安装n\n\n  n 是交互式 node.js 版本管理工具。\n\n  ```bash\n  sudo npm install -g n\n  ```\n\n  可以使用n安装特定版本的nodejs。\n  \n\n## 安装hexo\n\n​\t\tHexo 是**一个快速、简洁且高效的博客框架**。 Hexo 使用Markdown（或其他标记语言）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。\n\n- 配置国内源\n\n  ```bash\n  sudo npm set registry=https://registry.npm.taobao.org\n  ```\n\n- 安装hexo-cli\n\n  ``` bash\n  sudo npm install hexo-cli -g\n  ```\n\n- 初始化项目\n\n  ```bash\n  sudo npm init blog\n  ```\n\n- 安装依赖\n\n  ``` bash\n  npm install\n  ```\n- 打包成dist\n\n  ``` bash\n  npm run build\n  ```\n  \n- 运行hexo项目\n\n  ```bash\n  hexo server\n  ```\n\n- 替换主题\n\n  ```bash\n  安装主题和渲染器：\n  $ git clone https://github.com/tufu9441/maupassant-hexo.git themes/maupassant  \n  $ npm install hexo-renderer-pug --save  \n  $ npm install hexo-renderer-sass --save  \n  编辑Hexo目录下的 _config.yml，将theme的值改为maupassant。\n  注：依赖hexo-renderer-sass安装时容易报错，很可能是国内网络问题，请尝试使用代理或者切换至NPM的国内镜像源安装。\n  ```\n\n- 创建\"About页\"\n\n```bash\nhexo new page about\n创建成功后，编辑博客目录下 /source/about/index.md，添加 layout 属性。\n```\n- 创建\"Archive页\"\n\n```bash\nhexo new page archive\n创建成功后，编辑博客目录下 /source/archive/index.md。\n```\n- hexo使用参考：<https://hexo.io/zh-cn/>\n","slug":"搭建Blog","published":1,"updated":"2024-02-29T07:35:06.427Z","_id":"clt6vkpht0012eviggp5v5hpy","layout":"post","photos":[],"link":"","content":"<h1 id=\"搭建Blog\"><a href=\"#搭建Blog\" class=\"headerlink\" title=\"搭建Blog\"></a>搭建Blog</h1><h2 id=\"安装node-npm-n\"><a href=\"#安装node-npm-n\" class=\"headerlink\" title=\"安装node npm n\"></a>安装node npm n</h2><ul>\n<li><p>安装node.js</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install nodejs</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装npm<br>npm是nodejs的包管理器。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install npm</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装n</p>\n<p>n 是交互式 node.js 版本管理工具。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo npm install -g n</span><br></pre></td></tr></table></figure>\n\n<p>可以使用n安装特定版本的nodejs。</p>\n</li>\n</ul>\n<h2 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h2><p>​\t\tHexo 是<strong>一个快速、简洁且高效的博客框架</strong>。 Hexo 使用Markdown（或其他标记语言）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>\n<ul>\n<li><p>配置国内源</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo npm <span class=\"built_in\">set</span> registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装hexo-cli</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo npm install hexo-cli -g</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>初始化项目</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo npm init blog</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装依赖</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install</span><br></pre></td></tr></table></figure></li>\n<li><p>打包成dist</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run build</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>运行hexo项目</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo server</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>替换主题</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">安装主题和渲染器：</span><br><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/tufu9441/maupassant-hexo.git themes/maupassant  </span><br><span class=\"line\">$ npm install hexo-renderer-pug --save  </span><br><span class=\"line\">$ npm install hexo-renderer-sass --save  </span><br><span class=\"line\">编辑Hexo目录下的 _config.yml，将theme的值改为maupassant。</span><br><span class=\"line\">注：依赖hexo-renderer-sass安装时容易报错，很可能是国内网络问题，请尝试使用代理或者切换至NPM的国内镜像源安装。</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建”About页”</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page about</span><br><span class=\"line\">创建成功后，编辑博客目录下 /source/about/index.md，添加 layout 属性。</span><br></pre></td></tr></table></figure>\n<ul>\n<li>创建”Archive页”</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page archive</span><br><span class=\"line\">创建成功后，编辑博客目录下 /source/archive/index.md。</span><br></pre></td></tr></table></figure>\n<ul>\n<li>hexo使用参考：<a href=\"https://hexo.io/zh-cn/\">https://hexo.io/zh-cn/</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"搭建Blog\"><a href=\"#搭建Blog\" class=\"headerlink\" title=\"搭建Blog\"></a>搭建Blog</h1><h2 id=\"安装node-npm-n\"><a href=\"#安装node-npm-n\" class=\"headerlink\" title=\"安装node npm n\"></a>安装node npm n</h2><ul>\n<li><p>安装node.js</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install nodejs</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装npm<br>npm是nodejs的包管理器。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install npm</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装n</p>\n<p>n 是交互式 node.js 版本管理工具。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo npm install -g n</span><br></pre></td></tr></table></figure>\n\n<p>可以使用n安装特定版本的nodejs。</p>\n</li>\n</ul>\n<h2 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h2><p>​\t\tHexo 是<strong>一个快速、简洁且高效的博客框架</strong>。 Hexo 使用Markdown（或其他标记语言）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>\n<ul>\n<li><p>配置国内源</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo npm <span class=\"built_in\">set</span> registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装hexo-cli</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo npm install hexo-cli -g</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>初始化项目</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo npm init blog</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装依赖</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install</span><br></pre></td></tr></table></figure></li>\n<li><p>打包成dist</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run build</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>运行hexo项目</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo server</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>替换主题</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">安装主题和渲染器：</span><br><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/tufu9441/maupassant-hexo.git themes/maupassant  </span><br><span class=\"line\">$ npm install hexo-renderer-pug --save  </span><br><span class=\"line\">$ npm install hexo-renderer-sass --save  </span><br><span class=\"line\">编辑Hexo目录下的 _config.yml，将theme的值改为maupassant。</span><br><span class=\"line\">注：依赖hexo-renderer-sass安装时容易报错，很可能是国内网络问题，请尝试使用代理或者切换至NPM的国内镜像源安装。</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建”About页”</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page about</span><br><span class=\"line\">创建成功后，编辑博客目录下 /source/about/index.md，添加 layout 属性。</span><br></pre></td></tr></table></figure>\n<ul>\n<li>创建”Archive页”</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page archive</span><br><span class=\"line\">创建成功后，编辑博客目录下 /source/archive/index.md。</span><br></pre></td></tr></table></figure>\n<ul>\n<li>hexo使用参考：<a href=\"https://hexo.io/zh-cn/\">https://hexo.io/zh-cn/</a></li>\n</ul>\n"},{"title":"Mysql8数据库配置","date":"2023-12-15T02:27:28.000Z","description":"Linux Mysql8数据库配置","type":"tags","comments":1,"_content":"# mysql8.0\n\n## mysql8.0 设置表名不区分大小写\n\n* 安装数据库之后不启动的情况下，修改/etc/my.cnf,在末行添加如下内容：\n```plain\n[mysqld]\nlower_case_table_names=1\n```\n## mysql8.0 设置密码\n\n* 设置密码\n```shell\n$ mysqladmin -uroot -p'' password 'new-password'\n```\n## mysql8.0 开启远程连接\n\n* 选择mysql数据库\n```plain\n> use mysql\n```\n* 更新域属性，'%'表示允许外部访问\n```plain\n> update user set host='%' where user ='root';\n```\n* 刷新:\n```plain\n> FLUSH PRIVILEGES;\n```\n将当前user和privilige表中的用户信息/权限设置从mysql库(MySQL数据库的内置库)中提取到内存里。\nMySQL用户数据和权限有修改后，希望在\"不重启MySQL服务\"的情况下直接生效，那么就需要执行这个命令。\n\n* 执行授权语句\n```plain\n> GRANT ALL PRIVILEGES ON *.* TO 'root'@'%'WITH GRANT OPTION;\n```\n* 关闭防火墙\n```shell\n$ systemctl disable firewalld\n$ systemctl stop firewalld\n```\n* 或者开放3306端口\n```shell\n#开放端口\n$ firewall-cmd --zone=public --add-port=3306/tcp --permanent\n#查看端口\n$ firewall-cmd --list-ports\n```\n# 保存现有数据更新数据库\n\n保存指定数据库数据到sql文件\n\n```plain\nmysqldump -uroot -pUnion@1234 --databases ustack_test > ustack_test.sql\n```\n查看表结构\n```plain\ndesc tablename;\n```\n查询数据库创建时间\n```plain\nSELECT create_time  FROM information_schema.tables  WHERE table_schema = '数据库名'\n```\n导出数据到sql\n```bash\nmysqldump -uroot -pPASSWORD  database_name > name.sql\n```\n导入现有sql\n","source":"_posts/数据库配置.md","raw":"---\ntitle: Mysql8数据库配置\ndate: 2023-12-15 10:27:28\ndescription: Linux Mysql8数据库配置\ntype: \"tags\"\ncomments: true\ncategories:\n- Linux\n- Mysql\ntags:\n- Linux\n- Mysql\n---\n# mysql8.0\n\n## mysql8.0 设置表名不区分大小写\n\n* 安装数据库之后不启动的情况下，修改/etc/my.cnf,在末行添加如下内容：\n```plain\n[mysqld]\nlower_case_table_names=1\n```\n## mysql8.0 设置密码\n\n* 设置密码\n```shell\n$ mysqladmin -uroot -p'' password 'new-password'\n```\n## mysql8.0 开启远程连接\n\n* 选择mysql数据库\n```plain\n> use mysql\n```\n* 更新域属性，'%'表示允许外部访问\n```plain\n> update user set host='%' where user ='root';\n```\n* 刷新:\n```plain\n> FLUSH PRIVILEGES;\n```\n将当前user和privilige表中的用户信息/权限设置从mysql库(MySQL数据库的内置库)中提取到内存里。\nMySQL用户数据和权限有修改后，希望在\"不重启MySQL服务\"的情况下直接生效，那么就需要执行这个命令。\n\n* 执行授权语句\n```plain\n> GRANT ALL PRIVILEGES ON *.* TO 'root'@'%'WITH GRANT OPTION;\n```\n* 关闭防火墙\n```shell\n$ systemctl disable firewalld\n$ systemctl stop firewalld\n```\n* 或者开放3306端口\n```shell\n#开放端口\n$ firewall-cmd --zone=public --add-port=3306/tcp --permanent\n#查看端口\n$ firewall-cmd --list-ports\n```\n# 保存现有数据更新数据库\n\n保存指定数据库数据到sql文件\n\n```plain\nmysqldump -uroot -pUnion@1234 --databases ustack_test > ustack_test.sql\n```\n查看表结构\n```plain\ndesc tablename;\n```\n查询数据库创建时间\n```plain\nSELECT create_time  FROM information_schema.tables  WHERE table_schema = '数据库名'\n```\n导出数据到sql\n```bash\nmysqldump -uroot -pPASSWORD  database_name > name.sql\n```\n导入现有sql\n","slug":"数据库配置","published":1,"updated":"2023-12-26T08:07:33.961Z","layout":"post","photos":[],"link":"","_id":"clt6vkphu0019evig6m7m47xa","content":"<h1 id=\"mysql8-0\"><a href=\"#mysql8-0\" class=\"headerlink\" title=\"mysql8.0\"></a>mysql8.0</h1><h2 id=\"mysql8-0-设置表名不区分大小写\"><a href=\"#mysql8-0-设置表名不区分大小写\" class=\"headerlink\" title=\"mysql8.0 设置表名不区分大小写\"></a>mysql8.0 设置表名不区分大小写</h2><ul>\n<li>安装数据库之后不启动的情况下，修改&#x2F;etc&#x2F;my.cnf,在末行添加如下内容：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\">lower_case_table_names=1</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"mysql8-0-设置密码\"><a href=\"#mysql8-0-设置密码\" class=\"headerlink\" title=\"mysql8.0 设置密码\"></a>mysql8.0 设置密码</h2><ul>\n<li>设置密码<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">mysqladmin -uroot -p<span class=\"string\">&#x27;&#x27;</span> password <span class=\"string\">&#x27;new-password&#x27;</span></span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"mysql8-0-开启远程连接\"><a href=\"#mysql8-0-开启远程连接\" class=\"headerlink\" title=\"mysql8.0 开启远程连接\"></a>mysql8.0 开启远程连接</h2><ul>\n<li><p>选择mysql数据库</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; use mysql</span><br></pre></td></tr></table></figure></li>\n<li><p>更新域属性，’%’表示允许外部访问</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; update user set host=&#x27;%&#x27; where user =&#x27;root&#x27;;</span><br></pre></td></tr></table></figure></li>\n<li><p>刷新:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure>\n<p>将当前user和privilige表中的用户信息&#x2F;权限设置从mysql库(MySQL数据库的内置库)中提取到内存里。<br>MySQL用户数据和权限有修改后，希望在”不重启MySQL服务”的情况下直接生效，那么就需要执行这个命令。</p>\n</li>\n<li><p>执行授权语句</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; GRANT ALL PRIVILEGES ON *.* TO &#x27;root&#x27;@&#x27;%&#x27;WITH GRANT OPTION;</span><br></pre></td></tr></table></figure></li>\n<li><p>关闭防火墙</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">systemctl <span class=\"built_in\">disable</span> firewalld</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">systemctl stop firewalld</span></span><br></pre></td></tr></table></figure></li>\n<li><p>或者开放3306端口</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">开放端口</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">firewall-cmd --zone=public --add-port=3306/tcp --permanent</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">查看端口</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">firewall-cmd --list-ports</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"保存现有数据更新数据库\"><a href=\"#保存现有数据更新数据库\" class=\"headerlink\" title=\"保存现有数据更新数据库\"></a>保存现有数据更新数据库</h1><p>保存指定数据库数据到sql文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqldump -uroot -pUnion@1234 --databases ustack_test &gt; ustack_test.sql</span><br></pre></td></tr></table></figure>\n<p>查看表结构</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">desc tablename;</span><br></pre></td></tr></table></figure>\n<p>查询数据库创建时间</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT create_time  FROM information_schema.tables  WHERE table_schema = &#x27;数据库名&#x27;</span><br></pre></td></tr></table></figure>\n<p>导出数据到sql</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqldump -uroot -pPASSWORD  database_name &gt; name.sql</span><br></pre></td></tr></table></figure>\n<p>导入现有sql</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"mysql8-0\"><a href=\"#mysql8-0\" class=\"headerlink\" title=\"mysql8.0\"></a>mysql8.0</h1><h2 id=\"mysql8-0-设置表名不区分大小写\"><a href=\"#mysql8-0-设置表名不区分大小写\" class=\"headerlink\" title=\"mysql8.0 设置表名不区分大小写\"></a>mysql8.0 设置表名不区分大小写</h2><ul>\n<li>安装数据库之后不启动的情况下，修改&#x2F;etc&#x2F;my.cnf,在末行添加如下内容：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\">lower_case_table_names=1</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"mysql8-0-设置密码\"><a href=\"#mysql8-0-设置密码\" class=\"headerlink\" title=\"mysql8.0 设置密码\"></a>mysql8.0 设置密码</h2><ul>\n<li>设置密码<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">mysqladmin -uroot -p<span class=\"string\">&#x27;&#x27;</span> password <span class=\"string\">&#x27;new-password&#x27;</span></span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"mysql8-0-开启远程连接\"><a href=\"#mysql8-0-开启远程连接\" class=\"headerlink\" title=\"mysql8.0 开启远程连接\"></a>mysql8.0 开启远程连接</h2><ul>\n<li><p>选择mysql数据库</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; use mysql</span><br></pre></td></tr></table></figure></li>\n<li><p>更新域属性，’%’表示允许外部访问</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; update user set host=&#x27;%&#x27; where user =&#x27;root&#x27;;</span><br></pre></td></tr></table></figure></li>\n<li><p>刷新:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure>\n<p>将当前user和privilige表中的用户信息&#x2F;权限设置从mysql库(MySQL数据库的内置库)中提取到内存里。<br>MySQL用户数据和权限有修改后，希望在”不重启MySQL服务”的情况下直接生效，那么就需要执行这个命令。</p>\n</li>\n<li><p>执行授权语句</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; GRANT ALL PRIVILEGES ON *.* TO &#x27;root&#x27;@&#x27;%&#x27;WITH GRANT OPTION;</span><br></pre></td></tr></table></figure></li>\n<li><p>关闭防火墙</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">systemctl <span class=\"built_in\">disable</span> firewalld</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">systemctl stop firewalld</span></span><br></pre></td></tr></table></figure></li>\n<li><p>或者开放3306端口</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">开放端口</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">firewall-cmd --zone=public --add-port=3306/tcp --permanent</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">查看端口</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">firewall-cmd --list-ports</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"保存现有数据更新数据库\"><a href=\"#保存现有数据更新数据库\" class=\"headerlink\" title=\"保存现有数据更新数据库\"></a>保存现有数据更新数据库</h1><p>保存指定数据库数据到sql文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqldump -uroot -pUnion@1234 --databases ustack_test &gt; ustack_test.sql</span><br></pre></td></tr></table></figure>\n<p>查看表结构</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">desc tablename;</span><br></pre></td></tr></table></figure>\n<p>查询数据库创建时间</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT create_time  FROM information_schema.tables  WHERE table_schema = &#x27;数据库名&#x27;</span><br></pre></td></tr></table></figure>\n<p>导出数据到sql</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqldump -uroot -pPASSWORD  database_name &gt; name.sql</span><br></pre></td></tr></table></figure>\n<p>导入现有sql</p>\n"},{"title":"lvm磁盘扩容","date":"2023-12-15T02:27:28.000Z","description":"Linux lvm磁盘扩容到根分区","type":"tags","comments":1,"_content":"# 扩容脚本\n```bash\n#!/bin/bash\n\n# 定义新磁盘，若当前磁盘分区不存在可使用fdisk提前划分。\n\ndisk=/dev/vda3\nvg=***\n\npvcreate $disk \nvgextend \"$vg\" $disk \nlvextend /dev/${vg}/root $disk # xfs文件系统时，写入文件系统，使扩容生效 \nxfs_growfs /dev/mapper/${vg}-root # ext文件系统用resize2fs命令替换xfs_growfs命令\n```\n# 详解\n\n- 磁盘，使用fdisk进行硬盘分区，三个主分区(p)，其余都是拓展分区(e)。\n- 物理卷(PV)，在逻辑卷管理系统最底层，可以是整个物理硬盘或实际物理硬盘上的分区。\n- 卷组(VG)，建立在物理卷上，一卷组中至少要包括一物理卷，卷组建立后可动态的添加卷到卷组中，一个逻辑卷管理系统工程中可有多个卷组。对于LVM上面的文件系统而言，VG就是一个大磁盘。文件系统时看不到LVM下面的组成部分的，它只管使用，而LVM则负责管理下面的组成储存块。\n- 逻辑卷(LV)，建立在卷组基础上，卷组中未分配空间可用于建立新的逻辑卷，逻辑卷建立后可以动态扩展和缩小空间。\n- 物理区域(PE)，是物理卷中可用于分配的最小存储单元，物理区域大小在建立卷组时指定，一旦确定不能更改，同一卷组所有物理卷的物理区域大小需一致，新的pv(物理卷)加入到vg(卷组)后，pe(物理区域)的大小自动更改为vg(卷组)中定义的pe大小。\n- 逻辑区域（LE），是逻辑卷中可用于分配的最小存储单元，逻辑区域的大小取决于逻辑卷所在卷组中的物理区域的大小。在同一个卷组中，LE的大小和PE是相同的，并且一一对应。\n- 卷组描述区域：卷组描述区域存在于每个物理卷中，用于描述物理卷本身、物理卷所属卷组、卷组中逻辑卷、逻辑卷中物理区域的分配等所有信息，它是在使用pvcreate建立物理卷时建立的。\n# xfs_growfs\n- 扩展一个现存的XFS文件系统\n\n# 依赖工具\n- 使用pv，vg，lv相关命令请先安装lvm2\n```bash\nyum insall lvm2\n```\n\n# 参考\n<https://blog.csdn.net/m0_52544877/article/details/127764618#t2>","source":"_posts/磁盘扩容根分区.md","raw":"---\ntitle: lvm磁盘扩容\ndate: 2023-12-15 10:27:28\ndescription: Linux lvm磁盘扩容到根分区\ntype: \"tags\"\ncomments: true\ncategories:\n- Learning Tools\n- Linux\ntags:\n- Linux\n- 磁盘\n---\n# 扩容脚本\n```bash\n#!/bin/bash\n\n# 定义新磁盘，若当前磁盘分区不存在可使用fdisk提前划分。\n\ndisk=/dev/vda3\nvg=***\n\npvcreate $disk \nvgextend \"$vg\" $disk \nlvextend /dev/${vg}/root $disk # xfs文件系统时，写入文件系统，使扩容生效 \nxfs_growfs /dev/mapper/${vg}-root # ext文件系统用resize2fs命令替换xfs_growfs命令\n```\n# 详解\n\n- 磁盘，使用fdisk进行硬盘分区，三个主分区(p)，其余都是拓展分区(e)。\n- 物理卷(PV)，在逻辑卷管理系统最底层，可以是整个物理硬盘或实际物理硬盘上的分区。\n- 卷组(VG)，建立在物理卷上，一卷组中至少要包括一物理卷，卷组建立后可动态的添加卷到卷组中，一个逻辑卷管理系统工程中可有多个卷组。对于LVM上面的文件系统而言，VG就是一个大磁盘。文件系统时看不到LVM下面的组成部分的，它只管使用，而LVM则负责管理下面的组成储存块。\n- 逻辑卷(LV)，建立在卷组基础上，卷组中未分配空间可用于建立新的逻辑卷，逻辑卷建立后可以动态扩展和缩小空间。\n- 物理区域(PE)，是物理卷中可用于分配的最小存储单元，物理区域大小在建立卷组时指定，一旦确定不能更改，同一卷组所有物理卷的物理区域大小需一致，新的pv(物理卷)加入到vg(卷组)后，pe(物理区域)的大小自动更改为vg(卷组)中定义的pe大小。\n- 逻辑区域（LE），是逻辑卷中可用于分配的最小存储单元，逻辑区域的大小取决于逻辑卷所在卷组中的物理区域的大小。在同一个卷组中，LE的大小和PE是相同的，并且一一对应。\n- 卷组描述区域：卷组描述区域存在于每个物理卷中，用于描述物理卷本身、物理卷所属卷组、卷组中逻辑卷、逻辑卷中物理区域的分配等所有信息，它是在使用pvcreate建立物理卷时建立的。\n# xfs_growfs\n- 扩展一个现存的XFS文件系统\n\n# 依赖工具\n- 使用pv，vg，lv相关命令请先安装lvm2\n```bash\nyum insall lvm2\n```\n\n# 参考\n<https://blog.csdn.net/m0_52544877/article/details/127764618#t2>","slug":"磁盘扩容根分区","published":1,"updated":"2023-12-26T06:37:44.144Z","layout":"post","photos":[],"link":"","_id":"clt6vkphv001eevigeoul2ve1","content":"<h1 id=\"扩容脚本\"><a href=\"#扩容脚本\" class=\"headerlink\" title=\"扩容脚本\"></a>扩容脚本</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义新磁盘，若当前磁盘分区不存在可使用fdisk提前划分。</span></span><br><span class=\"line\"></span><br><span class=\"line\">disk=/dev/vda3</span><br><span class=\"line\">vg=***</span><br><span class=\"line\"></span><br><span class=\"line\">pvcreate <span class=\"variable\">$disk</span> </span><br><span class=\"line\">vgextend <span class=\"string\">&quot;<span class=\"variable\">$vg</span>&quot;</span> <span class=\"variable\">$disk</span> </span><br><span class=\"line\">lvextend /dev/<span class=\"variable\">$&#123;vg&#125;</span>/root <span class=\"variable\">$disk</span> <span class=\"comment\"># xfs文件系统时，写入文件系统，使扩容生效 </span></span><br><span class=\"line\">xfs_growfs /dev/mapper/<span class=\"variable\">$&#123;vg&#125;</span>-root <span class=\"comment\"># ext文件系统用resize2fs命令替换xfs_growfs命令</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"详解\"><a href=\"#详解\" class=\"headerlink\" title=\"详解\"></a>详解</h1><ul>\n<li>磁盘，使用fdisk进行硬盘分区，三个主分区(p)，其余都是拓展分区(e)。</li>\n<li>物理卷(PV)，在逻辑卷管理系统最底层，可以是整个物理硬盘或实际物理硬盘上的分区。</li>\n<li>卷组(VG)，建立在物理卷上，一卷组中至少要包括一物理卷，卷组建立后可动态的添加卷到卷组中，一个逻辑卷管理系统工程中可有多个卷组。对于LVM上面的文件系统而言，VG就是一个大磁盘。文件系统时看不到LVM下面的组成部分的，它只管使用，而LVM则负责管理下面的组成储存块。</li>\n<li>逻辑卷(LV)，建立在卷组基础上，卷组中未分配空间可用于建立新的逻辑卷，逻辑卷建立后可以动态扩展和缩小空间。</li>\n<li>物理区域(PE)，是物理卷中可用于分配的最小存储单元，物理区域大小在建立卷组时指定，一旦确定不能更改，同一卷组所有物理卷的物理区域大小需一致，新的pv(物理卷)加入到vg(卷组)后，pe(物理区域)的大小自动更改为vg(卷组)中定义的pe大小。</li>\n<li>逻辑区域（LE），是逻辑卷中可用于分配的最小存储单元，逻辑区域的大小取决于逻辑卷所在卷组中的物理区域的大小。在同一个卷组中，LE的大小和PE是相同的，并且一一对应。</li>\n<li>卷组描述区域：卷组描述区域存在于每个物理卷中，用于描述物理卷本身、物理卷所属卷组、卷组中逻辑卷、逻辑卷中物理区域的分配等所有信息，它是在使用pvcreate建立物理卷时建立的。</li>\n</ul>\n<h1 id=\"xfs-growfs\"><a href=\"#xfs-growfs\" class=\"headerlink\" title=\"xfs_growfs\"></a>xfs_growfs</h1><ul>\n<li>扩展一个现存的XFS文件系统</li>\n</ul>\n<h1 id=\"依赖工具\"><a href=\"#依赖工具\" class=\"headerlink\" title=\"依赖工具\"></a>依赖工具</h1><ul>\n<li>使用pv，vg，lv相关命令请先安装lvm2<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum insall lvm2</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://blog.csdn.net/m0_52544877/article/details/127764618#t2\">https://blog.csdn.net/m0_52544877/article/details/127764618#t2</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"扩容脚本\"><a href=\"#扩容脚本\" class=\"headerlink\" title=\"扩容脚本\"></a>扩容脚本</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义新磁盘，若当前磁盘分区不存在可使用fdisk提前划分。</span></span><br><span class=\"line\"></span><br><span class=\"line\">disk=/dev/vda3</span><br><span class=\"line\">vg=***</span><br><span class=\"line\"></span><br><span class=\"line\">pvcreate <span class=\"variable\">$disk</span> </span><br><span class=\"line\">vgextend <span class=\"string\">&quot;<span class=\"variable\">$vg</span>&quot;</span> <span class=\"variable\">$disk</span> </span><br><span class=\"line\">lvextend /dev/<span class=\"variable\">$&#123;vg&#125;</span>/root <span class=\"variable\">$disk</span> <span class=\"comment\"># xfs文件系统时，写入文件系统，使扩容生效 </span></span><br><span class=\"line\">xfs_growfs /dev/mapper/<span class=\"variable\">$&#123;vg&#125;</span>-root <span class=\"comment\"># ext文件系统用resize2fs命令替换xfs_growfs命令</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"详解\"><a href=\"#详解\" class=\"headerlink\" title=\"详解\"></a>详解</h1><ul>\n<li>磁盘，使用fdisk进行硬盘分区，三个主分区(p)，其余都是拓展分区(e)。</li>\n<li>物理卷(PV)，在逻辑卷管理系统最底层，可以是整个物理硬盘或实际物理硬盘上的分区。</li>\n<li>卷组(VG)，建立在物理卷上，一卷组中至少要包括一物理卷，卷组建立后可动态的添加卷到卷组中，一个逻辑卷管理系统工程中可有多个卷组。对于LVM上面的文件系统而言，VG就是一个大磁盘。文件系统时看不到LVM下面的组成部分的，它只管使用，而LVM则负责管理下面的组成储存块。</li>\n<li>逻辑卷(LV)，建立在卷组基础上，卷组中未分配空间可用于建立新的逻辑卷，逻辑卷建立后可以动态扩展和缩小空间。</li>\n<li>物理区域(PE)，是物理卷中可用于分配的最小存储单元，物理区域大小在建立卷组时指定，一旦确定不能更改，同一卷组所有物理卷的物理区域大小需一致，新的pv(物理卷)加入到vg(卷组)后，pe(物理区域)的大小自动更改为vg(卷组)中定义的pe大小。</li>\n<li>逻辑区域（LE），是逻辑卷中可用于分配的最小存储单元，逻辑区域的大小取决于逻辑卷所在卷组中的物理区域的大小。在同一个卷组中，LE的大小和PE是相同的，并且一一对应。</li>\n<li>卷组描述区域：卷组描述区域存在于每个物理卷中，用于描述物理卷本身、物理卷所属卷组、卷组中逻辑卷、逻辑卷中物理区域的分配等所有信息，它是在使用pvcreate建立物理卷时建立的。</li>\n</ul>\n<h1 id=\"xfs-growfs\"><a href=\"#xfs-growfs\" class=\"headerlink\" title=\"xfs_growfs\"></a>xfs_growfs</h1><ul>\n<li>扩展一个现存的XFS文件系统</li>\n</ul>\n<h1 id=\"依赖工具\"><a href=\"#依赖工具\" class=\"headerlink\" title=\"依赖工具\"></a>依赖工具</h1><ul>\n<li>使用pv，vg，lv相关命令请先安装lvm2<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum insall lvm2</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://blog.csdn.net/m0_52544877/article/details/127764618#t2\">https://blog.csdn.net/m0_52544877/article/details/127764618#t2</a></p>\n"},{"title":"搭建Trojan","date":"2023-12-15T02:27:28.000Z","description":"搭建Trojan","type":"tags","comments":1,"_content":"参考文档：\n<https://www.yuque.com/accessac/pa1h2w/ysys8mram2cpdgmu>","source":"_drafts/搭建Trojan.md","raw":"---\ntitle: 搭建Trojan\ndate: 2023-12-15 10:27:28\ndescription: 搭建Trojan\ntype: \"tags\"\ncomments: true\ncategories:\n- Learning Tools\n- Hexo\ntags:\n- nodejs\n- Blog\n---\n参考文档：\n<https://www.yuque.com/accessac/pa1h2w/ysys8mram2cpdgmu>","slug":"搭建Trojan","published":0,"updated":"2023-12-26T06:43:15.330Z","_id":"clt6vqles004aevig61ij95k4","layout":"post","photos":[],"link":"","content":"<p>参考文档：<br><a href=\"https://www.yuque.com/accessac/pa1h2w/ysys8mram2cpdgmu\">https://www.yuque.com/accessac/pa1h2w/ysys8mram2cpdgmu</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>参考文档：<br><a href=\"https://www.yuque.com/accessac/pa1h2w/ysys8mram2cpdgmu\">https://www.yuque.com/accessac/pa1h2w/ysys8mram2cpdgmu</a></p>\n"},{"_content":"# 基于Nova开发Usb\n\n## 初识Nova\n\n​\tNova（OpenStack Compute Service）是 OpenStack 最核心的服务，负责维护和管理云环境的计算资源，同时管理虚拟机生命周期。\n\n- Nova-Api服务\n\n  主要用于接收和响应外部请求。\n\n  - nova-api组件实现了RESTful API功能，是外部访问Nova的唯一途径。\n  - 接收外部的请求并通过Message Queue将请求发送给其他的服务组件，同时也兼容EC2 API，所以也可以用EC2的管理工具对nova进行日常管理。\n\n- Nova-Cert服务\n\n  是Nova的证书管理服务，用来为EC2服务提供身份验证，仅仅是在EC2 API的请求中使用。\n\n- Nova-Scheduler服务\n\n  用于Nova的调度工作，在创建虚拟机时，由它选择将虚拟机创建在哪台计算节点上。\n\n- Nova-Conductor服务\n\n  这个是服务是计算节点访问数据库时的一个中间层，它出现的作用是防止计算节点的Nova-Compute服务直接访问数据库。\n\n- Nova-Console服务\n\n  Nova增强了它的控制台服务。控制台服务允许用户可以通过代理服务器访问虚拟化实例。这就涉及了一对新的守护进程（nova-console和nova-consoleauth).\n\n- Nova-Consoleauth服务\n\n  主要用于控制台的用户访问授权\n\n- Nova-Novncproxy服务\n\n  用于为用户访问虚拟机提供了一个VNC的代理。通过VNC协议，可以支持基于浏览器的novnc客户端，后面你在网页打开的console界面就是依靠这个服务提供的。\n\n- Nova-Compute\n\n  Nova-compute是Nova最重要的组件之一。\n\n  - nova-compute 一般运行在计算节点上，通过Message Queue接收并管理VM的生命周期。\n  - Nova-compute 通过Libvirt管理KVM，通过XenAPI管理Xen等。\n\n## nova源码目录结构\n\n```\naccelerator/    # Cyborg 加速器\napi/            # Nova API 服务\n\t__init__.py\n    auth.py             # 身份认证中间件\n    compute_req_id.py   # x-compute-request-id 中间件（oslo_middleware）\n    metadata/           # Metadata API\n    openstack/          # Nova v2.1 API\n        __init__.py\n        api_version_request.py  # 版本验证\n        auth.py                 # noauth 中间件\n        common.py               # 信息查询的工具函数\n        compute/                # 每个 API 的入口点\n        \tfrom nova.api.openstack.compute.routes import APIRouterV21\n        \troutes.py\t\t\t# 路由文件\n        identity.py             # 验证项目是否存在\n        requestlog.py           # 请求日志中间件\n        urlmap.py               # url 映射\n        versioned_method.py     # 版本信息\n        wsgi.py                 # WSGI 相关抽象类\n        wsgi_app.py             # WSGI 应用程序初始化方法\n    validation/         # 请求体验证\n    wsgi.py             # WSGI 原语（请求、应用、中间件、路由、加载器）\n    \ncmd/            # 各个 Nova 服务的入口程序\ncompute/        # Nova Compute 服务\nconductor/      # Nova Conductor 服务 *** 处理需要协调的请求（构建/调整）、充当数据库代理或处理对象转换。***\nconf/           # 所有的配置选项\nconsole/        # nova-console 服务\ndb/             # 封装数据库操作\nhacking/        # 编码规范检查\nimage/          # 封装镜像操作，Glance 接口抽象\nkeymgr/         # 密钥管理器实现\nlocale/         # 国际化相关文件\nnetwork/        # nova-network 服务\nnotifications/  # 通知相关功能\nobjects/        # 封装实体对象的 CURD 操作\npci/            # PCI/SR-IOV 支持\npolicies/       # 所有 Policy 的默认规则\nprivsep/        # oslo_privsep 相关\nscheduler/      # Nova Scheduler 服务\nservicegroup/   # 成员服务（membership），服务组\nstorage/        # Ceph 存储支持\ntests/          # 单元测试\nvirt/           # 支持的 hypervisor 驱动\nvolume/         # 封装卷访问接口，Cinder 接口抽象\n\n# 文件\n__init__.py\navailability_zones.py   # 区域设置的工具函数\nbaserpc.py              # 基础 RPC 客户端/服务端实现\nblock_device.py         # 块设备映射\ncache_utils.py          # oslo_cache 封装\nconfig.py               # 解析命令行参数\ncontext.py              # 贯穿 Nova 的所有请求的上下文\ncrypto.py               # 包装标准加密数据元素\ndebugger.py             # pydev 调试\nexception.py            # 基础异常类\nexception_wrapper.py    # 封装异常类\nfilters.py              # 基础过滤器\ni18n.py                 # 集成 oslo_i18n\nloadables.py            # 可加载类\nmanager.py              # 基础 Manager 类\nmiddleware.py           # 更新 oslo_middleware 的默认配置选项\nmonkey_patch.py         # eventlet 猴子补丁\npolicy.py               # 策略引擎\nprofiler.py             # 调用 OSProfiler\nquota.py                # 每个项目的资源配额\nrpc.py                  # RPC 操作相关的工具函数\nsafe_utils.py           # 不会导致循环导入的工具函数\nservice.py              # 通用节点基类，用于在主机上运行的所有工作者\nservice_auth.py         # 身份认证插件\ntest.py                 # 单元测试基础类\nutils.py                # 工具函数\nversion.py              # 版本号管理\nweights.py              # 权重插件\nwsgi.py                 # 管理 WSGI 应用的服务器类\n```\n\n## rpci\n\nhttps://jckling.github.io/2021/05/23/OpenStack/OpenStack%20Nova/index.html\n\n\n\n## 数据库\n\nhttps://xcodest.me/nova-cell-v2.html\n\n![image-20231113201456185](/home/wang/.config/Typora/typora-user-images/image-20231113201456185.png)\n\n\n\nnova主要有三个数据库，分别时nova，nova_api,nova_cell0。Nova Cell 模块以树型结构为基础，主要包括 API-Cell（根 Cell）与 Child-Cell 两种形式。API-Cell 运行 nova-api 服务，每个 Child-Cell 运行除 nova-api 外的所有 nova-*服务，且每个 Child-Cell 运行自己的消息队列、数据库及 nova-cells 服务。\n\ncell的两种架构模式及工作原理\n单cell部署 架构模式：\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/202012311730081.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpaHVpaHVpMDA2,size_16,color_FFFFFF,t_70#pic_center)\n\n多cell部署 架构模式：\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201231173031550.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpaHVpaHVpMDA2,size_16,color_FFFFFF,t_70#pic_center)\n\n下图整个有三部分组成，cell0， , cell1. cell2 位于最上层的cell0，也就是api-cell， 而下层的cell1与cell2则是平行对等的关系，他们之间无交互，相互独立，还可以继续增加cell3,cell4 。 而上层的api cell主要包括了\nNova API, Nova Scheduler, Nova Conductor 这3个 Nova 服务 ,同时在 API Cell 中还需要 MQ 提供组件内的通信服务。API Cell 中的 DB 包含两个数据库，分别是 api数据库 和 cell数据库，api 数据库保存了全局数据，比如 flavor 信息。此外 api 数据库中还有一部分表是用于 placement 服务的；而 cell数据库则是用于保存创建失败且还没有确定位于哪个 cell 的虚机数据，比如当虚拟机调度失败时，该虚拟机数据就会被保存到cell数据库中。也就是cell0数据库中。\n\n\n\n在每个 Cell 中，都有自己独立使用的数据库、消息队列和 Nova Conductor 服务，当前 Cell 中的所有计算节点，全部将数据发送到当前 Cell 中的消息队列，由 Nova Conductor 服务获取后，保存至当前 Cell 的 Nova 数据库中。整个过程都不会涉及到 API Cell 中的消息队列。因此通过对计算节点进行 Cell 划分，可以有效降低 API Cell 中消息队列和数据库的压力。假如一个 MQ 能支持200个计算节点，则在划分 Cell 以后，每个 Cell 都可以支持200个计算节点，有 N 个 Cell 就可以支持 N X 200 个计算节点，因此可以极大提升单个 OpenStack 的集群管理规模。\n\n3 ， Cell v2实现的原理\n在大致了解了 Cell V2 架构的基本组成后，接下来介绍一下在 Nova 组件中，究竟是如何实现 Cell 划分的。多 Cell 的实现涉及 nova_api 数据库中的3个表，分别是 cell_mappings, host_mappings, instance_mappings 表。这3个表之间的关系如下图所示：\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201231173050257.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpaHVpaHVpMDA2,size_16,color_FFFFFF,t_70#pic_center)\n\ncell_mappings 表记录了每个 Cell 的名字和其消息队列连接地址与数据库连接地址，通过该表中记录的信息，API Cell 中的 Nova API 服务和 Nova Conductor 服务就知道该如何连接到 Cell 中的消息队列和数据库了，并进一步将消息发送到 Cell 中的消息队列，或者直接访问 Cell 中的 Nova 数据库。\n\n在 host_mappings 表记录了计算节点和 Cell 之间的对应关系，而instance_mappings 表则记录了 instance 和 Cell 之间的对应关系。通过这两个表的映射关系，API Cell 中的服务就可以轻易知道计算节点或者虚拟机所处的 Cell，并通过 cell_mappings 数据表中提供的链接对其进行操作。\n\n\n## 开发环境部署\n\n### 部署环境\n\n- 使用kolla-ansible快速部署搭建all-in-one：\n\nubuntu搭建参考链接：https://docs.openstack.org/kolla-ansible/2023.1/user/quickstart.html\n\n- 使用kolla-dev-mode=true部署，将会拉取源码并挂载到容器,可实现直接修改源码之后重启容器即可生效。\n\n参考链接：https://docs.openstack.org/kolla-ansible/latest/contributor/kolla-for-openstack-development.html\n\n- 可在kolla-ansible源码中，修改{{ kolla_dev_repos_git  }}和{ nova_source_version }重新定义拉取源码的仓库和分支。拉取仓库依赖git，请提前安装。\n\n### 接口测试\n\n#### 获取token\n\n1.openstackclient 命令行获取\n\n```plain\n# openstack token issue\n```\n\n参考： https://blog.csdn.net/qq_30657195/article/details/108055043\n\n2.异地curl获取\n\n```plain\n# curl -i   -H \"Content-Type: application/json\"   -d '\n{ \"auth\": {\n    \"identity\": {\n      \"methods\": [\"password\"],\n      \"password\": {\n        \"user\": {\n          \"name\": \"admin\",\n          \"domain\": { \"id\": \"default\" },\n          \"password\": \"admin12#$\"\n        }\n      }\n    }\n  }\n}'   \"http://10.10.15.184:5000/v3/auth/tokens\" ; echo\n```\n\nhttps://docs.openstack.org/keystone/pike/api_curl_examples.html\n\n3.工具posttman获取\n\n根据curl命令修改postman参数，根据-H修改header参数，-d修改body参数。\n\nheader修改如图所示:\n\n![img](https://cdn.nlark.com/yuque/0/2023/png/26098815/1694746908100-354fb3bb-08f5-4965-9813-3f72a3ef0ec3.png)\n\nbody修改如图所示：\n\n![img](https://cdn.nlark.com/yuque/0/2023/png/26098815/1694746941243-c32f94bd-c1e5-4344-b37a-f5a449e548b5.png)\n\ntoken值如图所示：\n\n![img](https://cdn.nlark.com/yuque/0/2023/png/26098815/1694746997062-460d6c18-1591-4a42-b8a2-3570bb5c7c4c.png)\n\n#### 调用api\n\n1. 使用curl命令调用\n\n```plain\ncurl -s http://10.10.15.184:9292/images -H 'X-Auth-Token:gAAAAABlA8lIs87kbEYq85mnARenwHlLt_Nv_XflgQXJNBAM4tFcNAf8kG9fmXDRQCHZFaLu4u9cDNCLKADIwpkSSqNWDTI2lVLd02OD74NNG3tdUCSFs1KC6JAW0Bsv9LXnokrema_nwshrXcBwGvsBCb0RnNA60g'\n```\n\n参考：https://www.linux.com/training-tutorials/spinning-server-openstack-api/\n\n1. 使用postman调试\n\n![img](https://cdn.nlark.com/yuque/0/2023/png/26098815/1694749070795-8bc5bf37-7a04-4d1d-b844-92ca9f15a762.png)\n\n注：X-Auth-Token是发送请求时使用，X-Subject-Token是服务器响应请求时传回的参数。\n\nhttps://support.huaweicloud.com/intl/en-us/devg-roma/apic-dev-190216017.html\n\n#### LOG\n\n1. 可以使用pdb 等工具进行调试。\n\n参考：https://docs.openstack.org/oslotest/queens/user/features.html\n\n1. 或者LOG.info LOG.debug等输出日志。log文件输出的信息等级需要配置，只有符合配置文件/etc/nova/nova.conf中的日志等级的日志才会被输出。\n\n参考：https://docs.openstack.org/nova/pike/admin/manage-logs.html\n","source":"_drafts/基于Nova开发Usb.md","raw":"# 基于Nova开发Usb\n\n## 初识Nova\n\n​\tNova（OpenStack Compute Service）是 OpenStack 最核心的服务，负责维护和管理云环境的计算资源，同时管理虚拟机生命周期。\n\n- Nova-Api服务\n\n  主要用于接收和响应外部请求。\n\n  - nova-api组件实现了RESTful API功能，是外部访问Nova的唯一途径。\n  - 接收外部的请求并通过Message Queue将请求发送给其他的服务组件，同时也兼容EC2 API，所以也可以用EC2的管理工具对nova进行日常管理。\n\n- Nova-Cert服务\n\n  是Nova的证书管理服务，用来为EC2服务提供身份验证，仅仅是在EC2 API的请求中使用。\n\n- Nova-Scheduler服务\n\n  用于Nova的调度工作，在创建虚拟机时，由它选择将虚拟机创建在哪台计算节点上。\n\n- Nova-Conductor服务\n\n  这个是服务是计算节点访问数据库时的一个中间层，它出现的作用是防止计算节点的Nova-Compute服务直接访问数据库。\n\n- Nova-Console服务\n\n  Nova增强了它的控制台服务。控制台服务允许用户可以通过代理服务器访问虚拟化实例。这就涉及了一对新的守护进程（nova-console和nova-consoleauth).\n\n- Nova-Consoleauth服务\n\n  主要用于控制台的用户访问授权\n\n- Nova-Novncproxy服务\n\n  用于为用户访问虚拟机提供了一个VNC的代理。通过VNC协议，可以支持基于浏览器的novnc客户端，后面你在网页打开的console界面就是依靠这个服务提供的。\n\n- Nova-Compute\n\n  Nova-compute是Nova最重要的组件之一。\n\n  - nova-compute 一般运行在计算节点上，通过Message Queue接收并管理VM的生命周期。\n  - Nova-compute 通过Libvirt管理KVM，通过XenAPI管理Xen等。\n\n## nova源码目录结构\n\n```\naccelerator/    # Cyborg 加速器\napi/            # Nova API 服务\n\t__init__.py\n    auth.py             # 身份认证中间件\n    compute_req_id.py   # x-compute-request-id 中间件（oslo_middleware）\n    metadata/           # Metadata API\n    openstack/          # Nova v2.1 API\n        __init__.py\n        api_version_request.py  # 版本验证\n        auth.py                 # noauth 中间件\n        common.py               # 信息查询的工具函数\n        compute/                # 每个 API 的入口点\n        \tfrom nova.api.openstack.compute.routes import APIRouterV21\n        \troutes.py\t\t\t# 路由文件\n        identity.py             # 验证项目是否存在\n        requestlog.py           # 请求日志中间件\n        urlmap.py               # url 映射\n        versioned_method.py     # 版本信息\n        wsgi.py                 # WSGI 相关抽象类\n        wsgi_app.py             # WSGI 应用程序初始化方法\n    validation/         # 请求体验证\n    wsgi.py             # WSGI 原语（请求、应用、中间件、路由、加载器）\n    \ncmd/            # 各个 Nova 服务的入口程序\ncompute/        # Nova Compute 服务\nconductor/      # Nova Conductor 服务 *** 处理需要协调的请求（构建/调整）、充当数据库代理或处理对象转换。***\nconf/           # 所有的配置选项\nconsole/        # nova-console 服务\ndb/             # 封装数据库操作\nhacking/        # 编码规范检查\nimage/          # 封装镜像操作，Glance 接口抽象\nkeymgr/         # 密钥管理器实现\nlocale/         # 国际化相关文件\nnetwork/        # nova-network 服务\nnotifications/  # 通知相关功能\nobjects/        # 封装实体对象的 CURD 操作\npci/            # PCI/SR-IOV 支持\npolicies/       # 所有 Policy 的默认规则\nprivsep/        # oslo_privsep 相关\nscheduler/      # Nova Scheduler 服务\nservicegroup/   # 成员服务（membership），服务组\nstorage/        # Ceph 存储支持\ntests/          # 单元测试\nvirt/           # 支持的 hypervisor 驱动\nvolume/         # 封装卷访问接口，Cinder 接口抽象\n\n# 文件\n__init__.py\navailability_zones.py   # 区域设置的工具函数\nbaserpc.py              # 基础 RPC 客户端/服务端实现\nblock_device.py         # 块设备映射\ncache_utils.py          # oslo_cache 封装\nconfig.py               # 解析命令行参数\ncontext.py              # 贯穿 Nova 的所有请求的上下文\ncrypto.py               # 包装标准加密数据元素\ndebugger.py             # pydev 调试\nexception.py            # 基础异常类\nexception_wrapper.py    # 封装异常类\nfilters.py              # 基础过滤器\ni18n.py                 # 集成 oslo_i18n\nloadables.py            # 可加载类\nmanager.py              # 基础 Manager 类\nmiddleware.py           # 更新 oslo_middleware 的默认配置选项\nmonkey_patch.py         # eventlet 猴子补丁\npolicy.py               # 策略引擎\nprofiler.py             # 调用 OSProfiler\nquota.py                # 每个项目的资源配额\nrpc.py                  # RPC 操作相关的工具函数\nsafe_utils.py           # 不会导致循环导入的工具函数\nservice.py              # 通用节点基类，用于在主机上运行的所有工作者\nservice_auth.py         # 身份认证插件\ntest.py                 # 单元测试基础类\nutils.py                # 工具函数\nversion.py              # 版本号管理\nweights.py              # 权重插件\nwsgi.py                 # 管理 WSGI 应用的服务器类\n```\n\n## rpci\n\nhttps://jckling.github.io/2021/05/23/OpenStack/OpenStack%20Nova/index.html\n\n\n\n## 数据库\n\nhttps://xcodest.me/nova-cell-v2.html\n\n![image-20231113201456185](/home/wang/.config/Typora/typora-user-images/image-20231113201456185.png)\n\n\n\nnova主要有三个数据库，分别时nova，nova_api,nova_cell0。Nova Cell 模块以树型结构为基础，主要包括 API-Cell（根 Cell）与 Child-Cell 两种形式。API-Cell 运行 nova-api 服务，每个 Child-Cell 运行除 nova-api 外的所有 nova-*服务，且每个 Child-Cell 运行自己的消息队列、数据库及 nova-cells 服务。\n\ncell的两种架构模式及工作原理\n单cell部署 架构模式：\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/202012311730081.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpaHVpaHVpMDA2,size_16,color_FFFFFF,t_70#pic_center)\n\n多cell部署 架构模式：\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201231173031550.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpaHVpaHVpMDA2,size_16,color_FFFFFF,t_70#pic_center)\n\n下图整个有三部分组成，cell0， , cell1. cell2 位于最上层的cell0，也就是api-cell， 而下层的cell1与cell2则是平行对等的关系，他们之间无交互，相互独立，还可以继续增加cell3,cell4 。 而上层的api cell主要包括了\nNova API, Nova Scheduler, Nova Conductor 这3个 Nova 服务 ,同时在 API Cell 中还需要 MQ 提供组件内的通信服务。API Cell 中的 DB 包含两个数据库，分别是 api数据库 和 cell数据库，api 数据库保存了全局数据，比如 flavor 信息。此外 api 数据库中还有一部分表是用于 placement 服务的；而 cell数据库则是用于保存创建失败且还没有确定位于哪个 cell 的虚机数据，比如当虚拟机调度失败时，该虚拟机数据就会被保存到cell数据库中。也就是cell0数据库中。\n\n\n\n在每个 Cell 中，都有自己独立使用的数据库、消息队列和 Nova Conductor 服务，当前 Cell 中的所有计算节点，全部将数据发送到当前 Cell 中的消息队列，由 Nova Conductor 服务获取后，保存至当前 Cell 的 Nova 数据库中。整个过程都不会涉及到 API Cell 中的消息队列。因此通过对计算节点进行 Cell 划分，可以有效降低 API Cell 中消息队列和数据库的压力。假如一个 MQ 能支持200个计算节点，则在划分 Cell 以后，每个 Cell 都可以支持200个计算节点，有 N 个 Cell 就可以支持 N X 200 个计算节点，因此可以极大提升单个 OpenStack 的集群管理规模。\n\n3 ， Cell v2实现的原理\n在大致了解了 Cell V2 架构的基本组成后，接下来介绍一下在 Nova 组件中，究竟是如何实现 Cell 划分的。多 Cell 的实现涉及 nova_api 数据库中的3个表，分别是 cell_mappings, host_mappings, instance_mappings 表。这3个表之间的关系如下图所示：\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201231173050257.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpaHVpaHVpMDA2,size_16,color_FFFFFF,t_70#pic_center)\n\ncell_mappings 表记录了每个 Cell 的名字和其消息队列连接地址与数据库连接地址，通过该表中记录的信息，API Cell 中的 Nova API 服务和 Nova Conductor 服务就知道该如何连接到 Cell 中的消息队列和数据库了，并进一步将消息发送到 Cell 中的消息队列，或者直接访问 Cell 中的 Nova 数据库。\n\n在 host_mappings 表记录了计算节点和 Cell 之间的对应关系，而instance_mappings 表则记录了 instance 和 Cell 之间的对应关系。通过这两个表的映射关系，API Cell 中的服务就可以轻易知道计算节点或者虚拟机所处的 Cell，并通过 cell_mappings 数据表中提供的链接对其进行操作。\n\n\n## 开发环境部署\n\n### 部署环境\n\n- 使用kolla-ansible快速部署搭建all-in-one：\n\nubuntu搭建参考链接：https://docs.openstack.org/kolla-ansible/2023.1/user/quickstart.html\n\n- 使用kolla-dev-mode=true部署，将会拉取源码并挂载到容器,可实现直接修改源码之后重启容器即可生效。\n\n参考链接：https://docs.openstack.org/kolla-ansible/latest/contributor/kolla-for-openstack-development.html\n\n- 可在kolla-ansible源码中，修改{{ kolla_dev_repos_git  }}和{ nova_source_version }重新定义拉取源码的仓库和分支。拉取仓库依赖git，请提前安装。\n\n### 接口测试\n\n#### 获取token\n\n1.openstackclient 命令行获取\n\n```plain\n# openstack token issue\n```\n\n参考： https://blog.csdn.net/qq_30657195/article/details/108055043\n\n2.异地curl获取\n\n```plain\n# curl -i   -H \"Content-Type: application/json\"   -d '\n{ \"auth\": {\n    \"identity\": {\n      \"methods\": [\"password\"],\n      \"password\": {\n        \"user\": {\n          \"name\": \"admin\",\n          \"domain\": { \"id\": \"default\" },\n          \"password\": \"admin12#$\"\n        }\n      }\n    }\n  }\n}'   \"http://10.10.15.184:5000/v3/auth/tokens\" ; echo\n```\n\nhttps://docs.openstack.org/keystone/pike/api_curl_examples.html\n\n3.工具posttman获取\n\n根据curl命令修改postman参数，根据-H修改header参数，-d修改body参数。\n\nheader修改如图所示:\n\n![img](https://cdn.nlark.com/yuque/0/2023/png/26098815/1694746908100-354fb3bb-08f5-4965-9813-3f72a3ef0ec3.png)\n\nbody修改如图所示：\n\n![img](https://cdn.nlark.com/yuque/0/2023/png/26098815/1694746941243-c32f94bd-c1e5-4344-b37a-f5a449e548b5.png)\n\ntoken值如图所示：\n\n![img](https://cdn.nlark.com/yuque/0/2023/png/26098815/1694746997062-460d6c18-1591-4a42-b8a2-3570bb5c7c4c.png)\n\n#### 调用api\n\n1. 使用curl命令调用\n\n```plain\ncurl -s http://10.10.15.184:9292/images -H 'X-Auth-Token:gAAAAABlA8lIs87kbEYq85mnARenwHlLt_Nv_XflgQXJNBAM4tFcNAf8kG9fmXDRQCHZFaLu4u9cDNCLKADIwpkSSqNWDTI2lVLd02OD74NNG3tdUCSFs1KC6JAW0Bsv9LXnokrema_nwshrXcBwGvsBCb0RnNA60g'\n```\n\n参考：https://www.linux.com/training-tutorials/spinning-server-openstack-api/\n\n1. 使用postman调试\n\n![img](https://cdn.nlark.com/yuque/0/2023/png/26098815/1694749070795-8bc5bf37-7a04-4d1d-b844-92ca9f15a762.png)\n\n注：X-Auth-Token是发送请求时使用，X-Subject-Token是服务器响应请求时传回的参数。\n\nhttps://support.huaweicloud.com/intl/en-us/devg-roma/apic-dev-190216017.html\n\n#### LOG\n\n1. 可以使用pdb 等工具进行调试。\n\n参考：https://docs.openstack.org/oslotest/queens/user/features.html\n\n1. 或者LOG.info LOG.debug等输出日志。log文件输出的信息等级需要配置，只有符合配置文件/etc/nova/nova.conf中的日志等级的日志才会被输出。\n\n参考：https://docs.openstack.org/nova/pike/admin/manage-logs.html\n","slug":"基于Nova开发Usb","published":0,"date":"2024-01-19T09:27:04.245Z","updated":"2023-11-14T05:19:27.000Z","_id":"clt6vqq5k004fevigd53e9wkg","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"基于Nova开发Usb\"><a href=\"#基于Nova开发Usb\" class=\"headerlink\" title=\"基于Nova开发Usb\"></a>基于Nova开发Usb</h1><h2 id=\"初识Nova\"><a href=\"#初识Nova\" class=\"headerlink\" title=\"初识Nova\"></a>初识Nova</h2><p>​\tNova（OpenStack Compute Service）是 OpenStack 最核心的服务，负责维护和管理云环境的计算资源，同时管理虚拟机生命周期。</p>\n<ul>\n<li><p>Nova-Api服务</p>\n<p>主要用于接收和响应外部请求。</p>\n<ul>\n<li>nova-api组件实现了RESTful API功能，是外部访问Nova的唯一途径。</li>\n<li>接收外部的请求并通过Message Queue将请求发送给其他的服务组件，同时也兼容EC2 API，所以也可以用EC2的管理工具对nova进行日常管理。</li>\n</ul>\n</li>\n<li><p>Nova-Cert服务</p>\n<p>是Nova的证书管理服务，用来为EC2服务提供身份验证，仅仅是在EC2 API的请求中使用。</p>\n</li>\n<li><p>Nova-Scheduler服务</p>\n<p>用于Nova的调度工作，在创建虚拟机时，由它选择将虚拟机创建在哪台计算节点上。</p>\n</li>\n<li><p>Nova-Conductor服务</p>\n<p>这个是服务是计算节点访问数据库时的一个中间层，它出现的作用是防止计算节点的Nova-Compute服务直接访问数据库。</p>\n</li>\n<li><p>Nova-Console服务</p>\n<p>Nova增强了它的控制台服务。控制台服务允许用户可以通过代理服务器访问虚拟化实例。这就涉及了一对新的守护进程（nova-console和nova-consoleauth).</p>\n</li>\n<li><p>Nova-Consoleauth服务</p>\n<p>主要用于控制台的用户访问授权</p>\n</li>\n<li><p>Nova-Novncproxy服务</p>\n<p>用于为用户访问虚拟机提供了一个VNC的代理。通过VNC协议，可以支持基于浏览器的novnc客户端，后面你在网页打开的console界面就是依靠这个服务提供的。</p>\n</li>\n<li><p>Nova-Compute</p>\n<p>Nova-compute是Nova最重要的组件之一。</p>\n<ul>\n<li>nova-compute 一般运行在计算节点上，通过Message Queue接收并管理VM的生命周期。</li>\n<li>Nova-compute 通过Libvirt管理KVM，通过XenAPI管理Xen等。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"nova源码目录结构\"><a href=\"#nova源码目录结构\" class=\"headerlink\" title=\"nova源码目录结构\"></a>nova源码目录结构</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">accelerator/    # Cyborg 加速器</span><br><span class=\"line\">api/            # Nova API 服务</span><br><span class=\"line\">\t__init__.py</span><br><span class=\"line\">    auth.py             # 身份认证中间件</span><br><span class=\"line\">    compute_req_id.py   # x-compute-request-id 中间件（oslo_middleware）</span><br><span class=\"line\">    metadata/           # Metadata API</span><br><span class=\"line\">    openstack/          # Nova v2.1 API</span><br><span class=\"line\">        __init__.py</span><br><span class=\"line\">        api_version_request.py  # 版本验证</span><br><span class=\"line\">        auth.py                 # noauth 中间件</span><br><span class=\"line\">        common.py               # 信息查询的工具函数</span><br><span class=\"line\">        compute/                # 每个 API 的入口点</span><br><span class=\"line\">        \tfrom nova.api.openstack.compute.routes import APIRouterV21</span><br><span class=\"line\">        \troutes.py\t\t\t# 路由文件</span><br><span class=\"line\">        identity.py             # 验证项目是否存在</span><br><span class=\"line\">        requestlog.py           # 请求日志中间件</span><br><span class=\"line\">        urlmap.py               # url 映射</span><br><span class=\"line\">        versioned_method.py     # 版本信息</span><br><span class=\"line\">        wsgi.py                 # WSGI 相关抽象类</span><br><span class=\"line\">        wsgi_app.py             # WSGI 应用程序初始化方法</span><br><span class=\"line\">    validation/         # 请求体验证</span><br><span class=\"line\">    wsgi.py             # WSGI 原语（请求、应用、中间件、路由、加载器）</span><br><span class=\"line\">    </span><br><span class=\"line\">cmd/            # 各个 Nova 服务的入口程序</span><br><span class=\"line\">compute/        # Nova Compute 服务</span><br><span class=\"line\">conductor/      # Nova Conductor 服务 *** 处理需要协调的请求（构建/调整）、充当数据库代理或处理对象转换。***</span><br><span class=\"line\">conf/           # 所有的配置选项</span><br><span class=\"line\">console/        # nova-console 服务</span><br><span class=\"line\">db/             # 封装数据库操作</span><br><span class=\"line\">hacking/        # 编码规范检查</span><br><span class=\"line\">image/          # 封装镜像操作，Glance 接口抽象</span><br><span class=\"line\">keymgr/         # 密钥管理器实现</span><br><span class=\"line\">locale/         # 国际化相关文件</span><br><span class=\"line\">network/        # nova-network 服务</span><br><span class=\"line\">notifications/  # 通知相关功能</span><br><span class=\"line\">objects/        # 封装实体对象的 CURD 操作</span><br><span class=\"line\">pci/            # PCI/SR-IOV 支持</span><br><span class=\"line\">policies/       # 所有 Policy 的默认规则</span><br><span class=\"line\">privsep/        # oslo_privsep 相关</span><br><span class=\"line\">scheduler/      # Nova Scheduler 服务</span><br><span class=\"line\">servicegroup/   # 成员服务（membership），服务组</span><br><span class=\"line\">storage/        # Ceph 存储支持</span><br><span class=\"line\">tests/          # 单元测试</span><br><span class=\"line\">virt/           # 支持的 hypervisor 驱动</span><br><span class=\"line\">volume/         # 封装卷访问接口，Cinder 接口抽象</span><br><span class=\"line\"></span><br><span class=\"line\"># 文件</span><br><span class=\"line\">__init__.py</span><br><span class=\"line\">availability_zones.py   # 区域设置的工具函数</span><br><span class=\"line\">baserpc.py              # 基础 RPC 客户端/服务端实现</span><br><span class=\"line\">block_device.py         # 块设备映射</span><br><span class=\"line\">cache_utils.py          # oslo_cache 封装</span><br><span class=\"line\">config.py               # 解析命令行参数</span><br><span class=\"line\">context.py              # 贯穿 Nova 的所有请求的上下文</span><br><span class=\"line\">crypto.py               # 包装标准加密数据元素</span><br><span class=\"line\">debugger.py             # pydev 调试</span><br><span class=\"line\">exception.py            # 基础异常类</span><br><span class=\"line\">exception_wrapper.py    # 封装异常类</span><br><span class=\"line\">filters.py              # 基础过滤器</span><br><span class=\"line\">i18n.py                 # 集成 oslo_i18n</span><br><span class=\"line\">loadables.py            # 可加载类</span><br><span class=\"line\">manager.py              # 基础 Manager 类</span><br><span class=\"line\">middleware.py           # 更新 oslo_middleware 的默认配置选项</span><br><span class=\"line\">monkey_patch.py         # eventlet 猴子补丁</span><br><span class=\"line\">policy.py               # 策略引擎</span><br><span class=\"line\">profiler.py             # 调用 OSProfiler</span><br><span class=\"line\">quota.py                # 每个项目的资源配额</span><br><span class=\"line\">rpc.py                  # RPC 操作相关的工具函数</span><br><span class=\"line\">safe_utils.py           # 不会导致循环导入的工具函数</span><br><span class=\"line\">service.py              # 通用节点基类，用于在主机上运行的所有工作者</span><br><span class=\"line\">service_auth.py         # 身份认证插件</span><br><span class=\"line\">test.py                 # 单元测试基础类</span><br><span class=\"line\">utils.py                # 工具函数</span><br><span class=\"line\">version.py              # 版本号管理</span><br><span class=\"line\">weights.py              # 权重插件</span><br><span class=\"line\">wsgi.py                 # 管理 WSGI 应用的服务器类</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"rpci\"><a href=\"#rpci\" class=\"headerlink\" title=\"rpci\"></a>rpci</h2><p><a href=\"https://jckling.github.io/2021/05/23/OpenStack/OpenStack%20Nova/index.html\">https://jckling.github.io/2021/05/23/OpenStack/OpenStack%20Nova/index.html</a></p>\n<h2 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h2><p><a href=\"https://xcodest.me/nova-cell-v2.html\">https://xcodest.me/nova-cell-v2.html</a></p>\n<p><img src=\"/home/wang/.config/Typora/typora-user-images/image-20231113201456185.png\" alt=\"image-20231113201456185\"></p>\n<p>nova主要有三个数据库，分别时nova，nova_api,nova_cell0。Nova Cell 模块以树型结构为基础，主要包括 API-Cell（根 Cell）与 Child-Cell 两种形式。API-Cell 运行 nova-api 服务，每个 Child-Cell 运行除 nova-api 外的所有 nova-*服务，且每个 Child-Cell 运行自己的消息队列、数据库及 nova-cells 服务。</p>\n<p>cell的两种架构模式及工作原理<br>单cell部署 架构模式：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/202012311730081.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpaHVpaHVpMDA2,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<p>多cell部署 架构模式：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20201231173031550.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpaHVpaHVpMDA2,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<p>下图整个有三部分组成，cell0， , cell1. cell2 位于最上层的cell0，也就是api-cell， 而下层的cell1与cell2则是平行对等的关系，他们之间无交互，相互独立，还可以继续增加cell3,cell4 。 而上层的api cell主要包括了<br>Nova API, Nova Scheduler, Nova Conductor 这3个 Nova 服务 ,同时在 API Cell 中还需要 MQ 提供组件内的通信服务。API Cell 中的 DB 包含两个数据库，分别是 api数据库 和 cell数据库，api 数据库保存了全局数据，比如 flavor 信息。此外 api 数据库中还有一部分表是用于 placement 服务的；而 cell数据库则是用于保存创建失败且还没有确定位于哪个 cell 的虚机数据，比如当虚拟机调度失败时，该虚拟机数据就会被保存到cell数据库中。也就是cell0数据库中。</p>\n<p>在每个 Cell 中，都有自己独立使用的数据库、消息队列和 Nova Conductor 服务，当前 Cell 中的所有计算节点，全部将数据发送到当前 Cell 中的消息队列，由 Nova Conductor 服务获取后，保存至当前 Cell 的 Nova 数据库中。整个过程都不会涉及到 API Cell 中的消息队列。因此通过对计算节点进行 Cell 划分，可以有效降低 API Cell 中消息队列和数据库的压力。假如一个 MQ 能支持200个计算节点，则在划分 Cell 以后，每个 Cell 都可以支持200个计算节点，有 N 个 Cell 就可以支持 N X 200 个计算节点，因此可以极大提升单个 OpenStack 的集群管理规模。</p>\n<p>3 ， Cell v2实现的原理<br>在大致了解了 Cell V2 架构的基本组成后，接下来介绍一下在 Nova 组件中，究竟是如何实现 Cell 划分的。多 Cell 的实现涉及 nova_api 数据库中的3个表，分别是 cell_mappings, host_mappings, instance_mappings 表。这3个表之间的关系如下图所示：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20201231173050257.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpaHVpaHVpMDA2,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<p>cell_mappings 表记录了每个 Cell 的名字和其消息队列连接地址与数据库连接地址，通过该表中记录的信息，API Cell 中的 Nova API 服务和 Nova Conductor 服务就知道该如何连接到 Cell 中的消息队列和数据库了，并进一步将消息发送到 Cell 中的消息队列，或者直接访问 Cell 中的 Nova 数据库。</p>\n<p>在 host_mappings 表记录了计算节点和 Cell 之间的对应关系，而instance_mappings 表则记录了 instance 和 Cell 之间的对应关系。通过这两个表的映射关系，API Cell 中的服务就可以轻易知道计算节点或者虚拟机所处的 Cell，并通过 cell_mappings 数据表中提供的链接对其进行操作。</p>\n<h2 id=\"开发环境部署\"><a href=\"#开发环境部署\" class=\"headerlink\" title=\"开发环境部署\"></a>开发环境部署</h2><h3 id=\"部署环境\"><a href=\"#部署环境\" class=\"headerlink\" title=\"部署环境\"></a>部署环境</h3><ul>\n<li>使用kolla-ansible快速部署搭建all-in-one：</li>\n</ul>\n<p>ubuntu搭建参考链接：<a href=\"https://docs.openstack.org/kolla-ansible/2023.1/user/quickstart.html\">https://docs.openstack.org/kolla-ansible/2023.1/user/quickstart.html</a></p>\n<ul>\n<li>使用kolla-dev-mode&#x3D;true部署，将会拉取源码并挂载到容器,可实现直接修改源码之后重启容器即可生效。</li>\n</ul>\n<p>参考链接：<a href=\"https://docs.openstack.org/kolla-ansible/latest/contributor/kolla-for-openstack-development.html\">https://docs.openstack.org/kolla-ansible/latest/contributor/kolla-for-openstack-development.html</a></p>\n<ul>\n<li>可在kolla-ansible源码中，修改和{ nova_source_version }重新定义拉取源码的仓库和分支。拉取仓库依赖git，请提前安装。</li>\n</ul>\n<h3 id=\"接口测试\"><a href=\"#接口测试\" class=\"headerlink\" title=\"接口测试\"></a>接口测试</h3><h4 id=\"获取token\"><a href=\"#获取token\" class=\"headerlink\" title=\"获取token\"></a>获取token</h4><p>1.openstackclient 命令行获取</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># openstack token issue</span><br></pre></td></tr></table></figure>\n\n<p>参考： <a href=\"https://blog.csdn.net/qq_30657195/article/details/108055043\">https://blog.csdn.net/qq_30657195/article/details/108055043</a></p>\n<p>2.异地curl获取</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># curl -i   -H &quot;Content-Type: application/json&quot;   -d &#x27;</span><br><span class=\"line\">&#123; &quot;auth&quot;: &#123;</span><br><span class=\"line\">    &quot;identity&quot;: &#123;</span><br><span class=\"line\">      &quot;methods&quot;: [&quot;password&quot;],</span><br><span class=\"line\">      &quot;password&quot;: &#123;</span><br><span class=\"line\">        &quot;user&quot;: &#123;</span><br><span class=\"line\">          &quot;name&quot;: &quot;admin&quot;,</span><br><span class=\"line\">          &quot;domain&quot;: &#123; &quot;id&quot;: &quot;default&quot; &#125;,</span><br><span class=\"line\">          &quot;password&quot;: &quot;admin12#$&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;&#x27;   &quot;http://10.10.15.184:5000/v3/auth/tokens&quot; ; echo</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://docs.openstack.org/keystone/pike/api_curl_examples.html\">https://docs.openstack.org/keystone/pike/api_curl_examples.html</a></p>\n<p>3.工具posttman获取</p>\n<p>根据curl命令修改postman参数，根据-H修改header参数，-d修改body参数。</p>\n<p>header修改如图所示:</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/26098815/1694746908100-354fb3bb-08f5-4965-9813-3f72a3ef0ec3.png\" alt=\"img\"></p>\n<p>body修改如图所示：</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/26098815/1694746941243-c32f94bd-c1e5-4344-b37a-f5a449e548b5.png\" alt=\"img\"></p>\n<p>token值如图所示：</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/26098815/1694746997062-460d6c18-1591-4a42-b8a2-3570bb5c7c4c.png\" alt=\"img\"></p>\n<h4 id=\"调用api\"><a href=\"#调用api\" class=\"headerlink\" title=\"调用api\"></a>调用api</h4><ol>\n<li>使用curl命令调用</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -s http://10.10.15.184:9292/images -H &#x27;X-Auth-Token:gAAAAABlA8lIs87kbEYq85mnARenwHlLt_Nv_XflgQXJNBAM4tFcNAf8kG9fmXDRQCHZFaLu4u9cDNCLKADIwpkSSqNWDTI2lVLd02OD74NNG3tdUCSFs1KC6JAW0Bsv9LXnokrema_nwshrXcBwGvsBCb0RnNA60g&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>参考：<a href=\"https://www.linux.com/training-tutorials/spinning-server-openstack-api/\">https://www.linux.com/training-tutorials/spinning-server-openstack-api/</a></p>\n<ol>\n<li>使用postman调试</li>\n</ol>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/26098815/1694749070795-8bc5bf37-7a04-4d1d-b844-92ca9f15a762.png\" alt=\"img\"></p>\n<p>注：X-Auth-Token是发送请求时使用，X-Subject-Token是服务器响应请求时传回的参数。</p>\n<p><a href=\"https://support.huaweicloud.com/intl/en-us/devg-roma/apic-dev-190216017.html\">https://support.huaweicloud.com/intl/en-us/devg-roma/apic-dev-190216017.html</a></p>\n<h4 id=\"LOG\"><a href=\"#LOG\" class=\"headerlink\" title=\"LOG\"></a>LOG</h4><ol>\n<li>可以使用pdb 等工具进行调试。</li>\n</ol>\n<p>参考：<a href=\"https://docs.openstack.org/oslotest/queens/user/features.html\">https://docs.openstack.org/oslotest/queens/user/features.html</a></p>\n<ol>\n<li>或者LOG.info LOG.debug等输出日志。log文件输出的信息等级需要配置，只有符合配置文件&#x2F;etc&#x2F;nova&#x2F;nova.conf中的日志等级的日志才会被输出。</li>\n</ol>\n<p>参考：<a href=\"https://docs.openstack.org/nova/pike/admin/manage-logs.html\">https://docs.openstack.org/nova/pike/admin/manage-logs.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"基于Nova开发Usb\"><a href=\"#基于Nova开发Usb\" class=\"headerlink\" title=\"基于Nova开发Usb\"></a>基于Nova开发Usb</h1><h2 id=\"初识Nova\"><a href=\"#初识Nova\" class=\"headerlink\" title=\"初识Nova\"></a>初识Nova</h2><p>​\tNova（OpenStack Compute Service）是 OpenStack 最核心的服务，负责维护和管理云环境的计算资源，同时管理虚拟机生命周期。</p>\n<ul>\n<li><p>Nova-Api服务</p>\n<p>主要用于接收和响应外部请求。</p>\n<ul>\n<li>nova-api组件实现了RESTful API功能，是外部访问Nova的唯一途径。</li>\n<li>接收外部的请求并通过Message Queue将请求发送给其他的服务组件，同时也兼容EC2 API，所以也可以用EC2的管理工具对nova进行日常管理。</li>\n</ul>\n</li>\n<li><p>Nova-Cert服务</p>\n<p>是Nova的证书管理服务，用来为EC2服务提供身份验证，仅仅是在EC2 API的请求中使用。</p>\n</li>\n<li><p>Nova-Scheduler服务</p>\n<p>用于Nova的调度工作，在创建虚拟机时，由它选择将虚拟机创建在哪台计算节点上。</p>\n</li>\n<li><p>Nova-Conductor服务</p>\n<p>这个是服务是计算节点访问数据库时的一个中间层，它出现的作用是防止计算节点的Nova-Compute服务直接访问数据库。</p>\n</li>\n<li><p>Nova-Console服务</p>\n<p>Nova增强了它的控制台服务。控制台服务允许用户可以通过代理服务器访问虚拟化实例。这就涉及了一对新的守护进程（nova-console和nova-consoleauth).</p>\n</li>\n<li><p>Nova-Consoleauth服务</p>\n<p>主要用于控制台的用户访问授权</p>\n</li>\n<li><p>Nova-Novncproxy服务</p>\n<p>用于为用户访问虚拟机提供了一个VNC的代理。通过VNC协议，可以支持基于浏览器的novnc客户端，后面你在网页打开的console界面就是依靠这个服务提供的。</p>\n</li>\n<li><p>Nova-Compute</p>\n<p>Nova-compute是Nova最重要的组件之一。</p>\n<ul>\n<li>nova-compute 一般运行在计算节点上，通过Message Queue接收并管理VM的生命周期。</li>\n<li>Nova-compute 通过Libvirt管理KVM，通过XenAPI管理Xen等。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"nova源码目录结构\"><a href=\"#nova源码目录结构\" class=\"headerlink\" title=\"nova源码目录结构\"></a>nova源码目录结构</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">accelerator/    # Cyborg 加速器</span><br><span class=\"line\">api/            # Nova API 服务</span><br><span class=\"line\">\t__init__.py</span><br><span class=\"line\">    auth.py             # 身份认证中间件</span><br><span class=\"line\">    compute_req_id.py   # x-compute-request-id 中间件（oslo_middleware）</span><br><span class=\"line\">    metadata/           # Metadata API</span><br><span class=\"line\">    openstack/          # Nova v2.1 API</span><br><span class=\"line\">        __init__.py</span><br><span class=\"line\">        api_version_request.py  # 版本验证</span><br><span class=\"line\">        auth.py                 # noauth 中间件</span><br><span class=\"line\">        common.py               # 信息查询的工具函数</span><br><span class=\"line\">        compute/                # 每个 API 的入口点</span><br><span class=\"line\">        \tfrom nova.api.openstack.compute.routes import APIRouterV21</span><br><span class=\"line\">        \troutes.py\t\t\t# 路由文件</span><br><span class=\"line\">        identity.py             # 验证项目是否存在</span><br><span class=\"line\">        requestlog.py           # 请求日志中间件</span><br><span class=\"line\">        urlmap.py               # url 映射</span><br><span class=\"line\">        versioned_method.py     # 版本信息</span><br><span class=\"line\">        wsgi.py                 # WSGI 相关抽象类</span><br><span class=\"line\">        wsgi_app.py             # WSGI 应用程序初始化方法</span><br><span class=\"line\">    validation/         # 请求体验证</span><br><span class=\"line\">    wsgi.py             # WSGI 原语（请求、应用、中间件、路由、加载器）</span><br><span class=\"line\">    </span><br><span class=\"line\">cmd/            # 各个 Nova 服务的入口程序</span><br><span class=\"line\">compute/        # Nova Compute 服务</span><br><span class=\"line\">conductor/      # Nova Conductor 服务 *** 处理需要协调的请求（构建/调整）、充当数据库代理或处理对象转换。***</span><br><span class=\"line\">conf/           # 所有的配置选项</span><br><span class=\"line\">console/        # nova-console 服务</span><br><span class=\"line\">db/             # 封装数据库操作</span><br><span class=\"line\">hacking/        # 编码规范检查</span><br><span class=\"line\">image/          # 封装镜像操作，Glance 接口抽象</span><br><span class=\"line\">keymgr/         # 密钥管理器实现</span><br><span class=\"line\">locale/         # 国际化相关文件</span><br><span class=\"line\">network/        # nova-network 服务</span><br><span class=\"line\">notifications/  # 通知相关功能</span><br><span class=\"line\">objects/        # 封装实体对象的 CURD 操作</span><br><span class=\"line\">pci/            # PCI/SR-IOV 支持</span><br><span class=\"line\">policies/       # 所有 Policy 的默认规则</span><br><span class=\"line\">privsep/        # oslo_privsep 相关</span><br><span class=\"line\">scheduler/      # Nova Scheduler 服务</span><br><span class=\"line\">servicegroup/   # 成员服务（membership），服务组</span><br><span class=\"line\">storage/        # Ceph 存储支持</span><br><span class=\"line\">tests/          # 单元测试</span><br><span class=\"line\">virt/           # 支持的 hypervisor 驱动</span><br><span class=\"line\">volume/         # 封装卷访问接口，Cinder 接口抽象</span><br><span class=\"line\"></span><br><span class=\"line\"># 文件</span><br><span class=\"line\">__init__.py</span><br><span class=\"line\">availability_zones.py   # 区域设置的工具函数</span><br><span class=\"line\">baserpc.py              # 基础 RPC 客户端/服务端实现</span><br><span class=\"line\">block_device.py         # 块设备映射</span><br><span class=\"line\">cache_utils.py          # oslo_cache 封装</span><br><span class=\"line\">config.py               # 解析命令行参数</span><br><span class=\"line\">context.py              # 贯穿 Nova 的所有请求的上下文</span><br><span class=\"line\">crypto.py               # 包装标准加密数据元素</span><br><span class=\"line\">debugger.py             # pydev 调试</span><br><span class=\"line\">exception.py            # 基础异常类</span><br><span class=\"line\">exception_wrapper.py    # 封装异常类</span><br><span class=\"line\">filters.py              # 基础过滤器</span><br><span class=\"line\">i18n.py                 # 集成 oslo_i18n</span><br><span class=\"line\">loadables.py            # 可加载类</span><br><span class=\"line\">manager.py              # 基础 Manager 类</span><br><span class=\"line\">middleware.py           # 更新 oslo_middleware 的默认配置选项</span><br><span class=\"line\">monkey_patch.py         # eventlet 猴子补丁</span><br><span class=\"line\">policy.py               # 策略引擎</span><br><span class=\"line\">profiler.py             # 调用 OSProfiler</span><br><span class=\"line\">quota.py                # 每个项目的资源配额</span><br><span class=\"line\">rpc.py                  # RPC 操作相关的工具函数</span><br><span class=\"line\">safe_utils.py           # 不会导致循环导入的工具函数</span><br><span class=\"line\">service.py              # 通用节点基类，用于在主机上运行的所有工作者</span><br><span class=\"line\">service_auth.py         # 身份认证插件</span><br><span class=\"line\">test.py                 # 单元测试基础类</span><br><span class=\"line\">utils.py                # 工具函数</span><br><span class=\"line\">version.py              # 版本号管理</span><br><span class=\"line\">weights.py              # 权重插件</span><br><span class=\"line\">wsgi.py                 # 管理 WSGI 应用的服务器类</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"rpci\"><a href=\"#rpci\" class=\"headerlink\" title=\"rpci\"></a>rpci</h2><p><a href=\"https://jckling.github.io/2021/05/23/OpenStack/OpenStack%20Nova/index.html\">https://jckling.github.io/2021/05/23/OpenStack/OpenStack%20Nova/index.html</a></p>\n<h2 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h2><p><a href=\"https://xcodest.me/nova-cell-v2.html\">https://xcodest.me/nova-cell-v2.html</a></p>\n<p><img src=\"/home/wang/.config/Typora/typora-user-images/image-20231113201456185.png\" alt=\"image-20231113201456185\"></p>\n<p>nova主要有三个数据库，分别时nova，nova_api,nova_cell0。Nova Cell 模块以树型结构为基础，主要包括 API-Cell（根 Cell）与 Child-Cell 两种形式。API-Cell 运行 nova-api 服务，每个 Child-Cell 运行除 nova-api 外的所有 nova-*服务，且每个 Child-Cell 运行自己的消息队列、数据库及 nova-cells 服务。</p>\n<p>cell的两种架构模式及工作原理<br>单cell部署 架构模式：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/202012311730081.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpaHVpaHVpMDA2,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<p>多cell部署 架构模式：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20201231173031550.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpaHVpaHVpMDA2,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<p>下图整个有三部分组成，cell0， , cell1. cell2 位于最上层的cell0，也就是api-cell， 而下层的cell1与cell2则是平行对等的关系，他们之间无交互，相互独立，还可以继续增加cell3,cell4 。 而上层的api cell主要包括了<br>Nova API, Nova Scheduler, Nova Conductor 这3个 Nova 服务 ,同时在 API Cell 中还需要 MQ 提供组件内的通信服务。API Cell 中的 DB 包含两个数据库，分别是 api数据库 和 cell数据库，api 数据库保存了全局数据，比如 flavor 信息。此外 api 数据库中还有一部分表是用于 placement 服务的；而 cell数据库则是用于保存创建失败且还没有确定位于哪个 cell 的虚机数据，比如当虚拟机调度失败时，该虚拟机数据就会被保存到cell数据库中。也就是cell0数据库中。</p>\n<p>在每个 Cell 中，都有自己独立使用的数据库、消息队列和 Nova Conductor 服务，当前 Cell 中的所有计算节点，全部将数据发送到当前 Cell 中的消息队列，由 Nova Conductor 服务获取后，保存至当前 Cell 的 Nova 数据库中。整个过程都不会涉及到 API Cell 中的消息队列。因此通过对计算节点进行 Cell 划分，可以有效降低 API Cell 中消息队列和数据库的压力。假如一个 MQ 能支持200个计算节点，则在划分 Cell 以后，每个 Cell 都可以支持200个计算节点，有 N 个 Cell 就可以支持 N X 200 个计算节点，因此可以极大提升单个 OpenStack 的集群管理规模。</p>\n<p>3 ， Cell v2实现的原理<br>在大致了解了 Cell V2 架构的基本组成后，接下来介绍一下在 Nova 组件中，究竟是如何实现 Cell 划分的。多 Cell 的实现涉及 nova_api 数据库中的3个表，分别是 cell_mappings, host_mappings, instance_mappings 表。这3个表之间的关系如下图所示：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20201231173050257.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpaHVpaHVpMDA2,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<p>cell_mappings 表记录了每个 Cell 的名字和其消息队列连接地址与数据库连接地址，通过该表中记录的信息，API Cell 中的 Nova API 服务和 Nova Conductor 服务就知道该如何连接到 Cell 中的消息队列和数据库了，并进一步将消息发送到 Cell 中的消息队列，或者直接访问 Cell 中的 Nova 数据库。</p>\n<p>在 host_mappings 表记录了计算节点和 Cell 之间的对应关系，而instance_mappings 表则记录了 instance 和 Cell 之间的对应关系。通过这两个表的映射关系，API Cell 中的服务就可以轻易知道计算节点或者虚拟机所处的 Cell，并通过 cell_mappings 数据表中提供的链接对其进行操作。</p>\n<h2 id=\"开发环境部署\"><a href=\"#开发环境部署\" class=\"headerlink\" title=\"开发环境部署\"></a>开发环境部署</h2><h3 id=\"部署环境\"><a href=\"#部署环境\" class=\"headerlink\" title=\"部署环境\"></a>部署环境</h3><ul>\n<li>使用kolla-ansible快速部署搭建all-in-one：</li>\n</ul>\n<p>ubuntu搭建参考链接：<a href=\"https://docs.openstack.org/kolla-ansible/2023.1/user/quickstart.html\">https://docs.openstack.org/kolla-ansible/2023.1/user/quickstart.html</a></p>\n<ul>\n<li>使用kolla-dev-mode&#x3D;true部署，将会拉取源码并挂载到容器,可实现直接修改源码之后重启容器即可生效。</li>\n</ul>\n<p>参考链接：<a href=\"https://docs.openstack.org/kolla-ansible/latest/contributor/kolla-for-openstack-development.html\">https://docs.openstack.org/kolla-ansible/latest/contributor/kolla-for-openstack-development.html</a></p>\n<ul>\n<li>可在kolla-ansible源码中，修改和{ nova_source_version }重新定义拉取源码的仓库和分支。拉取仓库依赖git，请提前安装。</li>\n</ul>\n<h3 id=\"接口测试\"><a href=\"#接口测试\" class=\"headerlink\" title=\"接口测试\"></a>接口测试</h3><h4 id=\"获取token\"><a href=\"#获取token\" class=\"headerlink\" title=\"获取token\"></a>获取token</h4><p>1.openstackclient 命令行获取</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># openstack token issue</span><br></pre></td></tr></table></figure>\n\n<p>参考： <a href=\"https://blog.csdn.net/qq_30657195/article/details/108055043\">https://blog.csdn.net/qq_30657195/article/details/108055043</a></p>\n<p>2.异地curl获取</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># curl -i   -H &quot;Content-Type: application/json&quot;   -d &#x27;</span><br><span class=\"line\">&#123; &quot;auth&quot;: &#123;</span><br><span class=\"line\">    &quot;identity&quot;: &#123;</span><br><span class=\"line\">      &quot;methods&quot;: [&quot;password&quot;],</span><br><span class=\"line\">      &quot;password&quot;: &#123;</span><br><span class=\"line\">        &quot;user&quot;: &#123;</span><br><span class=\"line\">          &quot;name&quot;: &quot;admin&quot;,</span><br><span class=\"line\">          &quot;domain&quot;: &#123; &quot;id&quot;: &quot;default&quot; &#125;,</span><br><span class=\"line\">          &quot;password&quot;: &quot;admin12#$&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;&#x27;   &quot;http://10.10.15.184:5000/v3/auth/tokens&quot; ; echo</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://docs.openstack.org/keystone/pike/api_curl_examples.html\">https://docs.openstack.org/keystone/pike/api_curl_examples.html</a></p>\n<p>3.工具posttman获取</p>\n<p>根据curl命令修改postman参数，根据-H修改header参数，-d修改body参数。</p>\n<p>header修改如图所示:</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/26098815/1694746908100-354fb3bb-08f5-4965-9813-3f72a3ef0ec3.png\" alt=\"img\"></p>\n<p>body修改如图所示：</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/26098815/1694746941243-c32f94bd-c1e5-4344-b37a-f5a449e548b5.png\" alt=\"img\"></p>\n<p>token值如图所示：</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/26098815/1694746997062-460d6c18-1591-4a42-b8a2-3570bb5c7c4c.png\" alt=\"img\"></p>\n<h4 id=\"调用api\"><a href=\"#调用api\" class=\"headerlink\" title=\"调用api\"></a>调用api</h4><ol>\n<li>使用curl命令调用</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -s http://10.10.15.184:9292/images -H &#x27;X-Auth-Token:gAAAAABlA8lIs87kbEYq85mnARenwHlLt_Nv_XflgQXJNBAM4tFcNAf8kG9fmXDRQCHZFaLu4u9cDNCLKADIwpkSSqNWDTI2lVLd02OD74NNG3tdUCSFs1KC6JAW0Bsv9LXnokrema_nwshrXcBwGvsBCb0RnNA60g&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>参考：<a href=\"https://www.linux.com/training-tutorials/spinning-server-openstack-api/\">https://www.linux.com/training-tutorials/spinning-server-openstack-api/</a></p>\n<ol>\n<li>使用postman调试</li>\n</ol>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/26098815/1694749070795-8bc5bf37-7a04-4d1d-b844-92ca9f15a762.png\" alt=\"img\"></p>\n<p>注：X-Auth-Token是发送请求时使用，X-Subject-Token是服务器响应请求时传回的参数。</p>\n<p><a href=\"https://support.huaweicloud.com/intl/en-us/devg-roma/apic-dev-190216017.html\">https://support.huaweicloud.com/intl/en-us/devg-roma/apic-dev-190216017.html</a></p>\n<h4 id=\"LOG\"><a href=\"#LOG\" class=\"headerlink\" title=\"LOG\"></a>LOG</h4><ol>\n<li>可以使用pdb 等工具进行调试。</li>\n</ol>\n<p>参考：<a href=\"https://docs.openstack.org/oslotest/queens/user/features.html\">https://docs.openstack.org/oslotest/queens/user/features.html</a></p>\n<ol>\n<li>或者LOG.info LOG.debug等输出日志。log文件输出的信息等级需要配置，只有符合配置文件&#x2F;etc&#x2F;nova&#x2F;nova.conf中的日志等级的日志才会被输出。</li>\n</ol>\n<p>参考：<a href=\"https://docs.openstack.org/nova/pike/admin/manage-logs.html\">https://docs.openstack.org/nova/pike/admin/manage-logs.html</a></p>\n"},{"title":"Openstack-V部署","date":"2023-12-15T02:27:28.000Z","description":"Openstack-V部署流程及脚本","type":"tags","comments":1,"_content":"","source":"_drafts/Opensyack-v部署.md","raw":"---\ntitle: Openstack-V部署\ndate: 2023-12-15 10:27:28\ndescription: Openstack-V部署流程及脚本\ntype: \"tags\"\ncomments: true\ncategories:\n- Openstack\n- Deploy\ntags:\n- openstack\n---\n","slug":"Opensyack-v部署","published":0,"updated":"2023-12-26T06:38:28.973Z","_id":"clt6vr6x3004gevig4a2iaw38","layout":"post","photos":[],"link":"","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Openstack开发环境部署","date":"2023-12-15T02:27:28.000Z","description":"Openstack开发环境部署","type":"tags","comments":1,"_content":"kolla-ansible\n参考文档：\n<https://docs.openstack.org/kolla-ansible/latest/user/quickstart.html>\n<https://docs.openstack.org/kolla-ansible/latest/user/troubleshooting.html>\n<https://docs.openstack.org/kolla-ansible/latest/contributor/kolla-for-openstack-development.html>\n\nGateway\npdb\n查看容器挂载情况\ndocker inspect container_name | grep Mounts -A 20","source":"_drafts/Openstack开发环境部署.md","raw":"---\ntitle: Openstack开发环境部署\ndate: 2023-12-15 10:27:28\ndescription: Openstack开发环境部署\ntype: \"tags\"\ncomments: true\ncategories:\n- Openstack\n- Deploy\ntags:\n- openstack\n---\nkolla-ansible\n参考文档：\n<https://docs.openstack.org/kolla-ansible/latest/user/quickstart.html>\n<https://docs.openstack.org/kolla-ansible/latest/user/troubleshooting.html>\n<https://docs.openstack.org/kolla-ansible/latest/contributor/kolla-for-openstack-development.html>\n\nGateway\npdb\n查看容器挂载情况\ndocker inspect container_name | grep Mounts -A 20","slug":"Openstack开发环境部署","published":0,"updated":"2023-12-26T08:19:23.443Z","_id":"clt6vrdru004kevig0qw6cgz4","layout":"post","photos":[],"link":"","content":"<p>kolla-ansible<br>参考文档：<br><a href=\"https://docs.openstack.org/kolla-ansible/latest/user/quickstart.html\">https://docs.openstack.org/kolla-ansible/latest/user/quickstart.html</a><br><a href=\"https://docs.openstack.org/kolla-ansible/latest/user/troubleshooting.html\">https://docs.openstack.org/kolla-ansible/latest/user/troubleshooting.html</a><br><a href=\"https://docs.openstack.org/kolla-ansible/latest/contributor/kolla-for-openstack-development.html\">https://docs.openstack.org/kolla-ansible/latest/contributor/kolla-for-openstack-development.html</a></p>\n<p>Gateway<br>pdb<br>查看容器挂载情况<br>docker inspect container_name | grep Mounts -A 20</p>\n","site":{"data":{}},"excerpt":"","more":"<p>kolla-ansible<br>参考文档：<br><a href=\"https://docs.openstack.org/kolla-ansible/latest/user/quickstart.html\">https://docs.openstack.org/kolla-ansible/latest/user/quickstart.html</a><br><a href=\"https://docs.openstack.org/kolla-ansible/latest/user/troubleshooting.html\">https://docs.openstack.org/kolla-ansible/latest/user/troubleshooting.html</a><br><a href=\"https://docs.openstack.org/kolla-ansible/latest/contributor/kolla-for-openstack-development.html\">https://docs.openstack.org/kolla-ansible/latest/contributor/kolla-for-openstack-development.html</a></p>\n<p>Gateway<br>pdb<br>查看容器挂载情况<br>docker inspect container_name | grep Mounts -A 20</p>\n"},{"title":"Openstack-如何虚拟机图像清晰","date":"2023-12-25T02:27:28.000Z","description":"Openstack-如何虚拟机图像清晰","type":"tags","comments":1,"_content":"# Openstack-如何虚拟机图像清晰","source":"_drafts/Openstack-VNC分辨率控制调研.md","raw":"---\ntitle: Openstack-如何虚拟机图像清晰\ndate: 2023-12-25 10:27:28\ndescription: Openstack-如何虚拟机图像清晰\ntype: \"tags\"\ncomments: true\ncategories:\n- Linux\n- Openstack\ntags:\n- Linux\n- Openstack\n---\n# Openstack-如何虚拟机图像清晰","slug":"Openstack-VNC分辨率控制调研","published":0,"updated":"2024-02-29T07:03:35.612Z","_id":"clt6vrger004oevig8ts0calg","layout":"post","photos":[],"link":"","content":"<h1 id=\"Openstack-如何虚拟机图像清晰\"><a href=\"#Openstack-如何虚拟机图像清晰\" class=\"headerlink\" title=\"Openstack-如何虚拟机图像清晰\"></a>Openstack-如何虚拟机图像清晰</h1>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Openstack-如何虚拟机图像清晰\"><a href=\"#Openstack-如何虚拟机图像清晰\" class=\"headerlink\" title=\"Openstack-如何虚拟机图像清晰\"></a>Openstack-如何虚拟机图像清晰</h1>"},{"title":"nova源码解析","date":"2023-12-15T02:27:28.000Z","description":"nova源码解析","type":"tags","comments":1,"_content":"","source":"_drafts/nova源码解析.md","raw":"---\ntitle: nova源码解析\ndate: 2023-12-15 10:27:28\ndescription: nova源码解析\ntype: \"tags\"\ncomments: true\ncategories:\n- Openstack\n- Nova\n- Development\ntags:\n- openstack\n- nova\n---","slug":"nova源码解析","published":0,"updated":"2023-12-26T06:52:24.689Z","_id":"clt6vrjeb004tevig1ha0fdce","layout":"post","photos":[],"link":"","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"kolla-ansible部署Openstack","date":"2023-12-15T02:27:28.000Z","description":"kolla-ansible部署Openstack","type":"tags","comments":1,"_content":"","source":"_drafts/kolla-ansible部署Openstack.md","raw":"---\ntitle: kolla-ansible部署Openstack\ndate: 2023-12-15 10:27:28\ndescription: kolla-ansible部署Openstack\ntype: \"tags\"\ncomments: true\ncategories:\n- Openstack\n- Deploy\ntags:\n- openstack\n---","slug":"kolla-ansible部署Openstack","published":0,"updated":"2023-12-26T06:48:37.765Z","_id":"clt6vrspu0054evig1m3pbzm5","layout":"post","photos":[],"link":"","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"基于openEuler使用oos编包","date":"2024-03-11T10:09:16.000Z","description":"基于openEuler使用oos编包<!--more-->OpenEuler社区贡献","_content":"基于Euller-22.03系统。\n## 系统配置\n## 安装依赖\n","source":"_drafts/基于openEuler使用oos编包.md","raw":"---\ntitle: 基于openEuler使用oos编包\ndate: 2024-03-11 18:09:16\ndescription: 基于openEuler使用oos编包<!--more-->OpenEuler社区贡献\ncategories:\n- Linux\n- Rpm\n- OpenEuler\ntags:\n- Linux\n- Rpm\n- OpenEuler\n---\n基于Euller-22.03系统。\n## 系统配置\n## 安装依赖\n","slug":"基于openEuler使用oos编包","published":0,"updated":"2024-03-11T10:15:49.666Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clwycz7pu0000fzigdgd6406d","content":"<p>基于Euller-22.03系统。</p>\n<h2 id=\"系统配置\"><a href=\"#系统配置\" class=\"headerlink\" title=\"系统配置\"></a>系统配置</h2><h2 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h2>","site":{"data":{}},"excerpt":"","more":"<p>基于Euller-22.03系统。</p>\n<h2 id=\"系统配置\"><a href=\"#系统配置\" class=\"headerlink\" title=\"系统配置\"></a>系统配置</h2><h2 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h2>"},{"title":"java安装配置","date":"2023-12-15T02:27:28.000Z","description":"Linux java环境配置","type":"tags","comments":1,"_content":"\n# Java-环境安装配置\nLink： <https://www.oracle.com/java/technologies/downloads/>\n\n下载tar包，解压到指定的位置\n\n修改环境变量(Linux)\n\n```plain\nvim /etc/profile\nexport JAVA_HOME=/opt/java/jdk1.8.0_381\nexport PATH=$JAVA_HOME/bin:$PATH\nexport CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar\nexport JRE_HOME=$JAVA_HOME/jre\n```\n# maven配置\nLink：<https://maven.apache.org/>\n\n```plain\nexport MAVEN_HOME=/opt/maven/apache-maven-3.9.4\nexport PATH=${PATH}:${MAVEN_HOME}/bin\n```\n# 运行jar包\n```bash\n# 打包jar\nmvn package ***.jar\n# 直接运行\njava -jar ***.jar\n# 开启后台运行\nnohup java -jar ***.jar &\n```\n","source":"_posts/Java环境相关配置.md","raw":"---\ntitle: java安装配置\ndate: 2023-12-15 10:27:28\ndescription: Linux java环境配置\ntype: \"tags\"\ncomments: true\ncategories:\n- Linux\n- Java\ntags:\n- Linux\n- Java\n---\n\n# Java-环境安装配置\nLink： <https://www.oracle.com/java/technologies/downloads/>\n\n下载tar包，解压到指定的位置\n\n修改环境变量(Linux)\n\n```plain\nvim /etc/profile\nexport JAVA_HOME=/opt/java/jdk1.8.0_381\nexport PATH=$JAVA_HOME/bin:$PATH\nexport CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar\nexport JRE_HOME=$JAVA_HOME/jre\n```\n# maven配置\nLink：<https://maven.apache.org/>\n\n```plain\nexport MAVEN_HOME=/opt/maven/apache-maven-3.9.4\nexport PATH=${PATH}:${MAVEN_HOME}/bin\n```\n# 运行jar包\n```bash\n# 打包jar\nmvn package ***.jar\n# 直接运行\njava -jar ***.jar\n# 开启后台运行\nnohup java -jar ***.jar &\n```\n","slug":"Java环境相关配置","published":1,"updated":"2024-02-29T07:03:37.428Z","layout":"post","photos":[],"link":"","_id":"clwycz7py0001fzigeangfgvi","content":"<h1 id=\"Java-环境安装配置\"><a href=\"#Java-环境安装配置\" class=\"headerlink\" title=\"Java-环境安装配置\"></a>Java-环境安装配置</h1><p>Link： <a href=\"https://www.oracle.com/java/technologies/downloads/\">https://www.oracle.com/java/technologies/downloads/</a></p>\n<p>下载tar包，解压到指定的位置</p>\n<p>修改环境变量(Linux)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/profile</span><br><span class=\"line\">export JAVA_HOME=/opt/java/jdk1.8.0_381</span><br><span class=\"line\">export PATH=$JAVA_HOME/bin:$PATH</span><br><span class=\"line\">export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class=\"line\">export JRE_HOME=$JAVA_HOME/jre</span><br></pre></td></tr></table></figure>\n<h1 id=\"maven配置\"><a href=\"#maven配置\" class=\"headerlink\" title=\"maven配置\"></a>maven配置</h1><p>Link：<a href=\"https://maven.apache.org/\">https://maven.apache.org/</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export MAVEN_HOME=/opt/maven/apache-maven-3.9.4</span><br><span class=\"line\">export PATH=$&#123;PATH&#125;:$&#123;MAVEN_HOME&#125;/bin</span><br></pre></td></tr></table></figure>\n<h1 id=\"运行jar包\"><a href=\"#运行jar包\" class=\"headerlink\" title=\"运行jar包\"></a>运行jar包</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 打包jar</span></span><br><span class=\"line\">mvn package ***.jar</span><br><span class=\"line\"><span class=\"comment\"># 直接运行</span></span><br><span class=\"line\">java -jar ***.jar</span><br><span class=\"line\"><span class=\"comment\"># 开启后台运行</span></span><br><span class=\"line\"><span class=\"built_in\">nohup</span> java -jar ***.jar &amp;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Java-环境安装配置\"><a href=\"#Java-环境安装配置\" class=\"headerlink\" title=\"Java-环境安装配置\"></a>Java-环境安装配置</h1><p>Link： <a href=\"https://www.oracle.com/java/technologies/downloads/\">https://www.oracle.com/java/technologies/downloads/</a></p>\n<p>下载tar包，解压到指定的位置</p>\n<p>修改环境变量(Linux)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/profile</span><br><span class=\"line\">export JAVA_HOME=/opt/java/jdk1.8.0_381</span><br><span class=\"line\">export PATH=$JAVA_HOME/bin:$PATH</span><br><span class=\"line\">export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class=\"line\">export JRE_HOME=$JAVA_HOME/jre</span><br></pre></td></tr></table></figure>\n<h1 id=\"maven配置\"><a href=\"#maven配置\" class=\"headerlink\" title=\"maven配置\"></a>maven配置</h1><p>Link：<a href=\"https://maven.apache.org/\">https://maven.apache.org/</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export MAVEN_HOME=/opt/maven/apache-maven-3.9.4</span><br><span class=\"line\">export PATH=$&#123;PATH&#125;:$&#123;MAVEN_HOME&#125;/bin</span><br></pre></td></tr></table></figure>\n<h1 id=\"运行jar包\"><a href=\"#运行jar包\" class=\"headerlink\" title=\"运行jar包\"></a>运行jar包</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 打包jar</span></span><br><span class=\"line\">mvn package ***.jar</span><br><span class=\"line\"><span class=\"comment\"># 直接运行</span></span><br><span class=\"line\">java -jar ***.jar</span><br><span class=\"line\"><span class=\"comment\"># 开启后台运行</span></span><br><span class=\"line\"><span class=\"built_in\">nohup</span> java -jar ***.jar &amp;</span><br></pre></td></tr></table></figure>\n"},{"title":"常用性能测试小工具集锦","date":"2023-12-25T02:27:28.000Z","description":"常用性能测试小工具集锦","type":"tags","comments":1,"_content":"# 常用性能测试小工具集锦\n\n## 性能测试\n\n​\t基于工作中做的性能测试，收纳整理出《常用性能测试小工具集锦》。主要从性能测试和工具集锦两个方面分享。\n\n### 性能测试\n\n​\t\t性能测试是一种评估系统性能的方法，它可以检测系统的可扩展性、吞吐量、响应时间、负载能力、稳定性和安全性等指标。性能测试可以帮助开发人员、系统管理员和业务用户了解系统的实际运行情况，并找出可能存在的瓶颈和问题。\n\n#### 性能测试指标\n\n​\t\t衡量系统性能的评价标准。\n\n##### **系统性能测试指标**\n\n​\t\t响应时间、系统处理能力，吞吐量，并发用户数，错误率等。\n\n##### 响应时间\n\n​\t\t简称RT，指的是客户发出请求到得到系统响应的整个过程的时间。也就是用户从客户端发起一个请求开始，到客户端接收到从服务器端返回的响应结束，整个过程所耗费的时间。\n\n##### 系统处理能力\n\n​\t\t系统在利用系统硬件平台和软件平台进行信息处理的能力。系统处理能力通过系统每秒钟能够处理的交易数量来评价。交易有两种理解：一是业务人员角度的一笔业务过程；二是系统角度的一次交易申请和响应过程。前者称为业务交易过程，后者称为事务。系统处理能力又用HPS(每秒点击次数)，TPS(系统每秒处理交易次数)，QPS(系统每秒处理查询次数)指标来度量。\n\n##### 吞吐量\n\n​\t\t吞吐量是指系统在单位时间内处理请求的数量。尤其对于并发系统，通常需要用吞吐量作为性能指标。\n\n##### 并发用户数\n\n​\t\t并发用户数指在同一时刻内，登录系统并进行业务操作的用户数量。\n\n##### 错误率\n\n​\t\t简称FR，指系统在负载情况下，失败交易的概率。错误率＝(失败交易数/交易总数)*100%。\n\n#### **资源性能指标**\n\nCPU、内存、磁盘吞吐量、网络吞吐量等。\n\n##### CPU\n\n​\t\tCPU指标主要指的CPU利用率。单位时间内服务器CPU的使用统计，可以用除CPU空闲时间外其他时间占总CPU时间的百分比来表示。即：CPU使用率=1-CPU空闲时间/总CPU时间。\n\n```\n字段说明：\nus (user)：用户态的CPU使用时间比例，是用户运行程序的真正时间，它不包括后面的ni时间。\nsy (system): 内核态的CPU使用时间比例，是操作系统的运行时间，操作系统运行时，用户运行程序往往处于等待状态。\nni (nice): 表示低优先级用户态的CPU时间比例，取值范围为[-20,19]，数值越大，则优先级越低。\nid (idle): 表示空闲的CPU时间比例，值越大，CPU空闲时间比例越高，利用率越低。\nwa (iowait): 表示处于IO等待状态的CPU时间比例。\nhi (hard interrupt): 表示处理硬中断的CPU时间比例。硬中断，也叫异步中断。硬中断是由硬件设备依照CPU时钟信号产生的，即意味着中断发生具备随机性和突发性，可以在指令正在执行时发生。\nsi (soft interrupt): 与hi相反，表示处理软中断的CPU时间比例。软中断，也叫同步中断。软中断是由CPU执行中断产生指令时产生，是由程序预先实现好的，不是随机的。\nst (steal): 表示当前系统运行在虚拟机中被其他虚拟机占用的CPU时间比例。这体现为物理 CPU 没有办法为当前系统服务，通常正在为另一个系统服务。 在虚拟机超卖比较严重的场景，这个数值非常明显。 这部分时间显然不是当前系统所用，而是被其他系统占用了。\n```\n\n​\t\t当us很高时，说明CPU时间主要消耗在用户代码上，可以从用户代码角度考虑优化性能；当sy很高时，说明CPU时间主要消耗在内核上，可以从是否系统调用频繁、CPU进程或线程切换频繁角度考虑性能的优化；当wa很高时，说明有进程在进行频繁的IO操作，可能是磁盘IO或者网络IO。一般情况下，如果%us+%sy<=70%，我们可以认为系统的运行状态良好。\n\n##### 内存\n\n​\t\ttotal(内存总量),free(空闲内存),used(已使用内存),buffer/cache(缓存)。buffers与cached都是内存操作，用来保存系统曾经打开过的文件以及文件属性信息，这样当操作系统需要读取某些文件时，会优先从buffers与cached内存区查找，然后才从磁盘读取。通过缓存，能够大大提高了操作系统的性能。因此，对于linux系统来说，可用于分配的内存不止free的内存，同时还包括cached的内存（其实还包括buffers的内存）。cached和buffers都属于缓存，它们的区别主要在于cached主要用来缓冲频繁读取的文件，它可以直接记忆我们打开的文件内容；而buffers主要用来给块设备做的缓冲大小，只记录文件系统的元数据(metadata)以及缓存文件(tracking in-flight pages)信息，比如存储目录里面的内容，权限等。\n\n在性能测试中，经常会用到系统已用内存、物理已用内存、系统内存占用率以及物理内存占用率这几个指标，它们的计算公式如下：\n\n```\n物理已用内存 = 实际已用内存 - 缓冲 - 缓存 \n物理空闲内存 = 总物理内存 - 实际已用内存 + 缓冲 + 缓存 \n应用程序可用空闲内存 = 总物理内存 - 实际已用内存 \n应用程序已用内存 = 实际已用内存 - 缓冲 - 缓存\ntotal = used + free + buffer/cache\navaiable = free + buffer/cache\n```\n\n​\t\t一般情况下，系统内存占用率<=70%，我们可以认为系统的内存使用情况良好，如果超出则说明系统内存资源紧张。\n\n##### 磁盘\n\n- 磁盘I/O：I/O，即input/output，磁盘的输入输出，输入指的是对磁盘写入数据，输出指的是从磁盘读出数据，磁盘I/O可以理解为读写。应用发起的一次或多次数据请求，I/O请求的数据量又称I/O大小，单位为KiB，例如4KiB、256KiB、1024KiB等；\n- 磁盘IOPS：磁盘IOPS是指一秒内磁盘进行多少次I/O读写；\n- 磁盘吞吐量：每秒磁盘I/O的流量，即磁盘写入加上读出的数据的大小。\n\n```\nI/O 读写的类型，大体上可以分为：\n读 / 写 I/O：存数据时候对应的是写操作，取数据的时候对应的是是读操作。\n大 / 小块 I/O：这个数值指的是控制器指令中给出的连续读出扇区数目的多少。\n连续 / 随机 I/O：连续 I/O 指的是本次 I/O 给出的初始扇区地址和上一次 I/O 的结束扇区地址是完全连续或者相隔不多的。反之，如果相差很大，则算作一次随机 I/O。连续 I/O 比随机 I/O 效率高，因为在做连续 I/O 的时候，磁头几乎不用换道，或者换道的时间很短；而对于随机 I/O，如果这个 I/O 很多的话，会导致磁头不停地换道，造成效率的极大降低。\n顺序 / 并发 I/O：从概念上讲，并发 I/O 就是指向一块磁盘发出一条 I/O 指令后，不必等待它回应，接着向另外一块磁盘发 I/O 指令。对于具有条带性的 RAID（LUN），对其进行的 I/O 操作是并发的，例如：raid 0+1(1+0),raid5 等。反之则为顺序 I/O。\n吞吐量 = IOPS * I/O大小\n```\n\n##### 网络\n\n​\t网络吞吐量是指在某个时刻，在网络中的两个节点之间，提给给网络应用的剩余带宽。 即在没有帧丢失的状况下，设备能够接受的最大速率。\n\n```\n通常是以 4 个指标来衡量网络的性能，分别是带宽、延时、吞吐率、PPS（Packet Per Second），它们表示的意义如下\n带宽，表示链路的最大传输速率，单位是 b/s （比特 / 秒），带宽越大，其传输能力就越强。\n延时，表示请求数据包发送后，收到对端响应，所需要的时间延迟。不同的场景有着不同的含义，比如可以表示建立 TCP 连接所需的时间延迟，或一个数据包往返所需的时间延迟。\n吞吐率，表示单位时间内成功传输的数据量，单位是 b/s（比特 / 秒）或者 B/s（字节 / 秒），吞吐受带宽限制，带宽越大，吞吐率的上限才可能越高。\nPPS，全称是 Packet Per Second（包 / 秒），表示以网络包为单位的传输速率，一般用来评估系统对于网络的转发能力。\n当然，除了以上这四种基本的指标，还有一些其他常用的性能指标，比如：\n\n网络的可用性，表示网络能否正常通信；\n并发连接数，表示 TCP 连接数量；\n丢包率，表示所丢失数据包数量占所发送数据组的比率；\n重传率，表示重传网络包的比例；\n```\n\n## 工具集锦\n\n#### unixBench\n\nUnixBench的测试能力包含系统调用、读写、进程、2D、3D、管道、运算等系统基准性能，会对系统CPU、内存、磁盘、网络等各个方面进行一系列的测试。\n\n```\n./Run -c 1 -c 8 //表示执行两次，第一次单个copies,第二次8个copies的测试任务。\n```\n\n测试结果\n\n```\nmake all\nmake[1]: Entering directory '/path/to/test-tool/UnixBench5.1.3-1'\nChecking distribution of files\n./pgms  exists\n./src  exists\n./testdir  exists\n./results  exists\nmake[1]: Leaving directory '/path/to/test-tool/UnixBench5.1.3-1'\n\n   #    #  #    #  #  #    #          #####   ######  #    #   ####   #    #\n   #    #  ##   #  #   #  #           #    #  #       ##   #  #    #  #    #\n   #    #  # #  #  #    ##            #####   #####   # #  #  #       ######\n   #    #  #  # #  #    ##            #    #  #       #  # #  #       #    #\n   #    #  #   ##  #   #  #           #    #  #       #   ##  #    #  #    #\n    ####   #    #  #  #    #          #####   ######  #    #   ####   #    #\n\n   Version 5.1.3                      Based on the Byte Magazine Unix Benchmark\n\n   Multi-CPU version                  Version 5 revisions by Ian Smith,\n                                      Sunnyvale, CA, USA\n   January 13, 2011                   johantheghost at yahoo period com\n\n\n1 x Dhrystone 2 using register variables  1 2 3 4 5 6 7 8 9 10\n\n1 x Double-Precision Whetstone  1 2 3 4 5 6 7 8 9 10\n\n1 x Execl Throughput  1 2 3\n\n1 x File Copy 1024 bufsize 2000 maxblocks  1 2 3\n\n1 x File Copy 256 bufsize 500 maxblocks  1 2 3\n\n1 x File Copy 4096 bufsize 8000 maxblocks  1 2 3\n\n1 x Pipe Throughput  1 2 3 4 5 6 7 8 9 10\n\n1 x Pipe-based Context Switching  1 2 3 4 5 6 7 8 9 10\n\n1 x Process Creation  1 2 3\n\n1 x System Call Overhead  1 2 3 4 5 6 7 8 9 10\n\n1 x Shell Scripts (1 concurrent)  1 2 3\n\n1 x Shell Scripts (8 concurrent)  1 2 3\n\n8 x Dhrystone 2 using register variables  1 2 3 4 5 6 7 8 9 10\n\n8 x Double-Precision Whetstone  1 2 3 4 5 6 7 8 9 10\n\n8 x Execl Throughput  1 2 3\n\n8 x File Copy 1024 bufsize 2000 maxblocks  1 2 3\n\n8 x File Copy 256 bufsize 500 maxblocks  1 2 3\n\n8 x File Copy 4096 bufsize 8000 maxblocks  1 2 3\n\n8 x Pipe Throughput  1 2 3 4 5 6 7 8 9 10\n\n8 x Pipe-based Context Switching  1 2 3 4 5 6 7 8 9 10\n\n8 x Process Creation  1 2 3\n\n8 x System Call Overhead  1 2 3 4 5 6 7 8 9 10\n\n8 x Shell Scripts (1 concurrent)  1 2 3\n\n8 x Shell Scripts (8 concurrent)  1 2 3\n\n========================================================================\n   BYTE UNIX Benchmarks (Version 5.1.3)\n\n   System: wang-PC: GNU/Linux\n   OS: GNU/Linux -- 5.15.77-amd64-desktop -- #2 SMP Thu Jun 15 16:06:18 CST 2023\n   Machine: x86_64 (unknown)\n   Language: en_US.utf8 (charmap=\"UTF-8\", collate=\"UTF-8\")\n   CPU 0: Intel(R) Core(TM) i5-10210U CPU @ 1.60GHz (4199.9 bogomips)\n          Hyper-Threading, x86-64, MMX, Physical Address Ext, SYSENTER/SYSEXIT, SYSCALL/SYSRET, Intel virtualization\n   CPU 1: Intel(R) Core(TM) i5-10210U CPU @ 1.60GHz (4199.9 bogomips)\n          Hyper-Threading, x86-64, MMX, Physical Address Ext, SYSENTER/SYSEXIT, SYSCALL/SYSRET, Intel virtualization\n   CPU 2: Intel(R) Core(TM) i5-10210U CPU @ 1.60GHz (4199.9 bogomips)\n          Hyper-Threading, x86-64, MMX, Physical Address Ext, SYSENTER/SYSEXIT, SYSCALL/SYSRET, Intel virtualization\n   CPU 3: Intel(R) Core(TM) i5-10210U CPU @ 1.60GHz (4199.9 bogomips)\n          Hyper-Threading, x86-64, MMX, Physical Address Ext, SYSENTER/SYSEXIT, SYSCALL/SYSRET, Intel virtualization\n   CPU 4: Intel(R) Core(TM) i5-10210U CPU @ 1.60GHz (4199.9 bogomips)\n          Hyper-Threading, x86-64, MMX, Physical Address Ext, SYSENTER/SYSEXIT, SYSCALL/SYSRET, Intel virtualization\n   CPU 5: Intel(R) Core(TM) i5-10210U CPU @ 1.60GHz (4199.9 bogomips)\n          Hyper-Threading, x86-64, MMX, Physical Address Ext, SYSENTER/SYSEXIT, SYSCALL/SYSRET, Intel virtualization\n   CPU 6: Intel(R) Core(TM) i5-10210U CPU @ 1.60GHz (4199.9 bogomips)\n          Hyper-Threading, x86-64, MMX, Physical Address Ext, SYSENTER/SYSEXIT, SYSCALL/SYSRET, Intel virtualization\n   CPU 7: Intel(R) Core(TM) i5-10210U CPU @ 1.60GHz (4199.9 bogomips)\n          Hyper-Threading, x86-64, MMX, Physical Address Ext, SYSENTER/SYSEXIT, SYSCALL/SYSRET, Intel virtualization\n   14:50:41 up 11 days, 23:45,  1 user,  load average: 0.95, 1.32, 7.18; runlevel 5\n\n------------------------------------------------------------------------\nBenchmark Run: Wed Jan 24 2024 14:50:41 - 15:18:32\n8 CPUs in system; running 1 parallel copy of tests\n\nDhrystone 2 using register variables       47877041.4 lps   (10.0 s, 7 samples)\nDouble-Precision Whetstone                     7784.4 MWIPS (9.0 s, 7 samples)\nExecl Throughput                               5666.5 lps   (30.0 s, 2 samples)\nFile Copy 1024 bufsize 2000 maxblocks       1493924.1 KBps  (30.0 s, 2 samples)\nFile Copy 256 bufsize 500 maxblocks          426805.3 KBps  (30.0 s, 2 samples)\nFile Copy 4096 bufsize 8000 maxblocks       3119870.2 KBps  (30.0 s, 2 samples)\nPipe Throughput                             2577750.5 lps   (10.0 s, 7 samples)\nPipe-based Context Switching                 296557.3 lps   (10.0 s, 7 samples)\nProcess Creation                              13157.5 lps   (30.0 s, 2 samples)\nShell Scripts (1 concurrent)                  14761.5 lpm   (60.0 s, 2 samples)\nShell Scripts (8 concurrent)                   4321.8 lpm   (60.0 s, 2 samples)\nSystem Call Overhead                        2784511.9 lps   (10.0 s, 7 samples)\n\nSystem Benchmarks Index Values               BASELINE       RESULT    INDEX\nDhrystone 2 using register variables         116700.0   47877041.4   4102.6\nDouble-Precision Whetstone                       55.0       7784.4   1415.3\nExecl Throughput                                 43.0       5666.5   1317.8\nFile Copy 1024 bufsize 2000 maxblocks          3960.0    1493924.1   3772.5\nFile Copy 256 bufsize 500 maxblocks            1655.0     426805.3   2578.9\nFile Copy 4096 bufsize 8000 maxblocks          5800.0    3119870.2   5379.1\nPipe Throughput                               12440.0    2577750.5   2072.1\nPipe-based Context Switching                   4000.0     296557.3    741.4\nProcess Creation                                126.0      13157.5   1044.2\nShell Scripts (1 concurrent)                     42.4      14761.5   3481.5\nShell Scripts (8 concurrent)                      6.0       4321.8   7203.0\nSystem Call Overhead                          15000.0    2784511.9   1856.3\n                                                                   ========\nSystem Benchmarks Index Score                                        2360.4\n\n------------------------------------------------------------------------\nBenchmark Run: Wed Jan 24 2024 15:18:32 - 15:46:49\n8 CPUs in system; running 8 parallel copies of tests\n\nDhrystone 2 using register variables      176274670.8 lps   (10.0 s, 7 samples)\nDouble-Precision Whetstone                    46994.6 MWIPS (9.4 s, 7 samples)\nExecl Throughput                              20151.0 lps   (30.0 s, 2 samples)\nFile Copy 1024 bufsize 2000 maxblocks       1745833.5 KBps  (30.0 s, 2 samples)\nFile Copy 256 bufsize 500 maxblocks          478830.4 KBps  (30.0 s, 2 samples)\nFile Copy 4096 bufsize 8000 maxblocks       4568801.0 KBps  (30.0 s, 2 samples)\nPipe Throughput                             9157085.1 lps   (10.0 s, 7 samples)\nPipe-based Context Switching                1132991.1 lps   (10.0 s, 7 samples)\nProcess Creation                              44340.3 lps   (30.0 s, 2 samples)\nShell Scripts (1 concurrent)                  36537.4 lpm   (60.0 s, 2 samples)\nShell Scripts (8 concurrent)                   4653.2 lpm   (60.1 s, 2 samples)\nSystem Call Overhead                        8498217.7 lps   (10.0 s, 7 samples)\n\nSystem Benchmarks Index Values               BASELINE       RESULT    INDEX\nDhrystone 2 using register variables         116700.0  176274670.8  15104.9\nDouble-Precision Whetstone                       55.0      46994.6   8544.5\nExecl Throughput                                 43.0      20151.0   4686.3\nFile Copy 1024 bufsize 2000 maxblocks          3960.0    1745833.5   4408.7\nFile Copy 256 bufsize 500 maxblocks            1655.0     478830.4   2893.2\nFile Copy 4096 bufsize 8000 maxblocks          5800.0    4568801.0   7877.2\nPipe Throughput                               12440.0    9157085.1   7361.0\nPipe-based Context Switching                   4000.0    1132991.1   2832.5\nProcess Creation                                126.0      44340.3   3519.1\nShell Scripts (1 concurrent)                     42.4      36537.4   8617.3\nShell Scripts (8 concurrent)                      6.0       4653.2   7755.3\nSystem Call Overhead                          15000.0    8498217.7   5665.5\n                                                                   ========\nSystem Benchmarks Index Score                                        5874.3\n```\n\n测试项目\n\n![image-20240124153054135](/home/wang/.config/Typora/typora-user-images/image-20240124153054135.png)\n\n```\nDhrystone测试：\n\t测试聚焦在字符串处理，没有浮点运算操作。这个测试用于测试链接器编译、代码优化、内存缓存、等待状态、整数数据类型等。\nWhetstone测试：\n\t测试项目用于测试浮点运算效率和速度。含若干个科学计算的典型性能模块，包含大量的C语言函数,sin cos sqrt exp和日志以及使用整数和浮点的数学操作。包含数组访问、条件分支和过程调用。\nExecl Throughput测试：\n\t每秒钟可以执行的execl系统调用的次数。\nFile Copy测试：\n\t这项测试衡量文件数据从一个文件被传输到另外一个，使用大量的缓存。包括文件的读、写、复制测试，测试指标是一定时间内（默认是10秒）被重写、读、复制的字符数量。\nPipe Throughput(管道吞吐)测试:\n\t测试在一秒钟一个进程写512比特到一个管道中并且读回来的次数。管道吞吐测试和实际编程有差距。\nPipe-based Context Switching(基于管道的上下文交互)测试:\n\t测试衡量两个进程通过管道交换和整数倍的增加吞吐的次数。基于管道的上下文切换和真实程序很类似。测试程序产生一个双向管道通讯的子线程。\nProcess Creation(进程创建)测试:\n\t这项测试衡量一个进程能产生子线程并且立即退出的次数。新进程真的创建进程阻塞和内存占用，所以测试程序直接使用内存带宽。这项测试用于典型的比较大量的操作系统进程创建操作。\nShell Scripts测试:\n\tshell脚本测试用于衡量在一分钟内，一个进程可以启动并停止shell脚本的次数，通常会测试1，2， 3， 4， 8 个shell脚本的共同拷贝，shell脚本是一套转化数据文件的脚本。\nSystem Call Overhead （系统调用消耗）测试:\n\t测试衡量进入和离开系统内核的消耗，例如，系统调用的消耗。程序简单重复的执行getpid调用（返回调用的进程id）。消耗的指标是调用进入和离开内核的执行时间。\nGraphical Tests(图形)测试:\n\t测试非常粗的2D和3D图形性能，尤其是3D测试非常有限。测试结果和硬件，系统合适的驱动关系很大。\n```\n\n#### fio\n\nfio主要用来测试硬盘io性能。这个工具的可定制性非常强，可以根据测试者的想法进行各种混合io测试，它支持13种不同类型io引擎（libaio、sync、mmap、posixaio、network等等）。它可以测试块设备或文件，可以通过多线程或进程模拟各种io操作，可以测试统计iops、带宽和时延等性能。我们主要使用fio工具进行存储性能测试。\n\n```\nfio -name=iouring_test -filename=/mnt/vdd/testfile -iodepth=128 -thread -rw=randread -ioengine=io_uring -sqthread_poll=1 -direct=1 -bs=4k -size=10G -numjobs=1 -runtime=120 -group_reporting\n```\n\n说明：\nfilename=/dev/sdb1    测试文件名称，通常选择需要测试的盘的data目录。\ndirect=1         测试过程绕过机器自带的buffer。使测试结果更真实。\nbs=4k          单次io的块文件大小为16k\nsize=5g  本次的测试文件大小为5g，以每次4k的io进行测试。\nnumjobs=1        本次的测试线程为30.\nruntime=120       测试时间为120秒，如果不写则一直将5g文件分4k每次写完为止。\nioengine=io_uring      io引擎使用io_uring方式\ngroup_reporting     关于显示结果的，汇总每个进程的信息。\n\n此外\nrwmixwrite=30      在混合读写的模式下，写占30%\nlockmem=1g        只使用1g内存进行测试。\nzero_buffers       用0初始化系统buffer。\nnrfiles=8        每个进程生成文件的数量。\nread 顺序读\nwrite 顺序写\nrw,readwrite 顺序混合读写\nrandwrite 随机写\nrandread 随机读\nrandrw 随机混合读写\n\n```\nuring -sqthread_poll=1 -direct=1 -bs=4k -size=10G -numjobs=1 -runtime=120 -group_reporting\niouring_test: (g=0): rw=randread, bs=(R) 4096B-4096B, (W) 4096B-4096B, (T) 4096B-4096B, ioengine=io_uring, iodepth=128\nfio-3.22\nStarting 1 thread\nJobs: 1 (f=1): [r(1)][3.2%][eta 01h:01m:42s]                        \niouring_test: (groupid=0, jobs=1): err= 0: pid=63227: Wed Jan 24 15:55:58 2024\n  read: IOPS=682, BW=2729KiB/s (2795kB/s)(330MiB/123713msec)  //读操作的iops(每秒输入输出量)和bw(带宽)\n    clat (usec): min=506, max=11807k, avg=187540.47, stdev=846840.59\n     lat (usec): min=507, max=11807k, avg=187541.31, stdev=846840.60\n    clat percentiles (usec):\n     |  1.00th=[    1188],  5.00th=[    5800], 10.00th=[    8160],\n     | 20.00th=[   11469], 30.00th=[   15008], 40.00th=[   19792],\n     | 50.00th=[   26084], 60.00th=[   36439], 70.00th=[   56361],\n     | 80.00th=[  104334], 90.00th=[  238027], 95.00th=[  425722],\n     | 99.00th=[ 5804917], 99.50th=[ 7214203], 99.90th=[ 8422163],\n     | 99.95th=[ 8657044], 99.99th=[10804528]\n   bw (  KiB/s): min= 1357, max= 5397, per=100.00%, avg=2806.35, stdev=636.20, samples=240\n   iops        : min=  339, max= 1349, avg=701.40, stdev=159.08, samples=240\n  lat (usec)   : 750=0.13%, 1000=0.50%\n  lat (msec)   : 2=0.93%, 4=1.25%, 10=12.60%, 20=25.15%, 50=27.08%\n  lat (msec)   : 100=11.79%, 250=11.16%, 500=5.21%, 750=1.25%, 1000=0.54%\n  lat (msec)   : 2000=0.58%, >=2000=1.83%\n  cpu          : usr=99.85%, sys=0.08%, ctx=94, majf=0, minf=0\n  IO depths    : 1=0.1%, 2=0.1%, 4=0.1%, 8=0.1%, 16=0.1%, 32=0.1%, >=64=99.9%\n     submit    : 0=0.0%, 4=0.0%, 8=0.0%, 16=0.0%, 32=0.0%, 64=0.0%, >=64=0.0%\n     complete  : 0=0.0%, 4=100.0%, 8=0.0%, 16=0.0%, 32=0.0%, 64=0.0%, >=64=0.1%\n     issued rwts: total=84415,0,0,0 short=0,0,0,0 dropped=0,0,0,0\n     latency   : target=0, window=0, percentile=100.00%, depth=128\n\nRun status group 0 (all jobs):\n   READ: bw=2729KiB/s (2795kB/s), 2729KiB/s-2729KiB/s (2795kB/s-2795kB/s), io=330MiB (346MB), run=123713-123713msec\n\nDisk stats (read/write):\n    dm-0: ios=84415/17, merge=0/0, ticks=15416332/27284, in_queue=15443616, util=100.00%, aggrios=84414/15, aggrmerge=1/2, aggrticks=15402295/25881, aggrin_queue=15260184, aggrutil=100.00%\n  vda: ios=84414/15, merge=1/2, ticks=15402295/25881, in_queue=15260184, util=100.00%\n```\n\n#### lmbench\n\n`Lmbench` 是一款简易可以移植的内存测试工具，其主要功能有，带宽测评（读取缓存文件、拷贝内存、读/写内存、管道、TCP），延时测评（上下文切换、网络、文件系统的建立和删除、进程创建、[信号处理](https://so.csdn.net/so/search?q=信号处理&spm=1001.2101.3001.7020)、上层系统调用、内存读入反应时间）等功能。\n\n#### Stream\n\nStream内存带宽性能测试基准工具。\n\nstream通过生成四种不同模式下的内存读写操作，用于测试内存带宽。\n\nCopy操作最为简单，它先访问一个内存单元读出其中的值，再将值写入到另一个内存单元。\n\nScale操作先从内存单元读出其中的值，作一个乘法运算，再将结果写入到另一个内存单元。\n\nAdd操作先从内存单元读出两个值，做加法运算， 再将结果写入到另一个内存单元。\n\nTriad的中文含义是将三个组合起来，在本测试中表示的意思是将Copy、Scale、Add三种操作组合起来进行测试。具体操作方式是：先从内存数组中读两个值a、b，对其进行乘加混合运算（a+因子* b），将运算结果写入到另一个内存单元。 \n\n#### iozone\n\nIOzone是文件系统性能测试工具。可以测试不同的操作系统中文件系统的读写性能。可以测试 Read, write, re-read,re-write, read backwards, read strided, fread, fwrite, random read, pread, mmap, aio_read, aio_write 等等不同的模式下的硬盘的性能。\n\n| Write          | 测试向一个新文件写入的性能。当一个新文件被写入时，不仅仅是那些文件中的数据需要被存储，还包括那些用于定位数据存储在存储介质的具体位置的额外信息。这些额外信息被称作 “元数据”。它包括目录信息，所分配的空间和一些与该文件有关但又并非该文件所含数据的其他数据。拜这些额外信息所赐，Write 的性能通常会比 Re-write 的性能低。 |\n| -------------- | ------------------------------------------------------------ |\n| Re-write       | 测试向一个已存在的文件写入的性能。当一个已存在的文件被写入时，所需工作量较少，因为此时元数据已经存在。Re-write 的性能通常比 Write 的性能高。 |\n| Read           | 测试读一个已存在的文件的性能。                               |\n| Re-Read        | 测试读一个最近读过的文件的性能。Re-Read 性能会高些，因为操作系统通常会缓存最近读过的文件数据。这个缓存可以被用于读以提高性能。 |\n| Random Read    | 测试读一个文件中的随机偏移量的性能。许多因素可能影响这种情况下的系统性能，例如：操作系统缓存的大小，磁盘数量，寻道延迟和其他。 |\n| Random Write   | 测试写一个文件中的随机偏移量的性能。同样，许多因素可能影响这种情况下的系统性能，例如：操作系统缓存的大小，磁盘数量，寻道延迟和其他。 |\n| Random Mix     | 测试读写一个文件中的随机偏移量的性能。同样，许多因素可能影响这种情况下的系统性能，例如：操作系统缓存的大小，磁盘数量，寻道延迟和其他。这个测试只有在吞吐量测试模式下才能进行。每个线程 / 进程运行读或写测试。这种分布式读 / 写测试是基于 round robin 模式的。最好使用多于一个线程 / 进程执行此测试。 |\n| Backwards Read | 测试使用倒序读一个文件的性能。这种读文件方法可能看起来很可笑，事实上，有些应用确实这么干。MSC Nastran 是一个使用倒序读文件的应用程序的一个例子。它所读的文件都十分大（大小从 G 级别到 T 级别）。尽管许多操作系统使用一些特殊实现来优化顺序读文件的速度，很少有操作系统注意到并增强倒序读文件的性能。 |\n| Record Rewrite | 测试写与覆盖写一个文件中的特定块的性能。这个块可能会发生一些很有趣的事。如果这个块足够小（比 CPU 数据缓存小），测出来的性能将会非常高。如果比 CPU 数据缓存大而比 TLB 小，测出来的是另一个阶段的性能。如果比此二者都大，但比操作系统缓存小，得到的性能又是一个阶段。若大到超过操作系统缓存，又是另一番结果。 |\n| Strided Read   | 测试跳跃读一个文件的性能。举例如下：在 0 偏移量处读 4Kbytes，然后间隔 200Kbytes, 读 4Kbytes，再间隔 200Kbytes，如此反复。此时的模式是读 4Kbytes，间隔 200Kbytes 并重复这个模式。这又是一个典型的应用行为，文件中使用了数据结构并且访问这个数据结构的特定区域的应用程序常常这样做。许多操作系统并没注意到这种行为或者针对这种类型的访问做一些优化。同样，这种访问行为也可能导致一些有趣的性能异常。一个例子是在一个数据片化的文件系统里，应用程序的跳跃导致某一个特定的磁盘成为性能瓶颈。 |\n| Fwrite         | 测试调用库函数 fwrite () 来写文件的性能。这是一个执行缓存与阻塞写操作的库例程。缓存在用户空间之内。如果一个应用程序想要写很小的传输块，fwrite () 函数中的缓存与阻塞 I/O 功能能通过减少实际操作系统调用并在操作系统调用时增加传输块的大小来增强应用程序的性能。这个测试是写一个新文件，所以元数据的写入也是要的。 |\n| Frewrite       | 测试调用库函数 fwrite () 来写文件的性能。这是一个执行缓存与阻塞写操作的库例程。缓存在用户空间之内。如果一个应用程序想要写很小的传输块，fwrite () 函数中的缓存与阻塞 I/O 功能能通过减少实际操作系统调用并在操作系统调用时增加传输块的大小来增强应用程序的性能。 |\n\n#### iperf3\n\niperf3是基于Client/Server的网络性能测试工具，通常用于测试网络上可达到的最大带宽，它能够测试TCP、UDP及SCTP的带宽质量，可以提供网络吞吐量、网络波动、网络丢包率以及最大传输单元大小等信息，能够帮助我们测试网络性能，定位网络瓶颈。\n\n#### netperf\n\nNetperf是一种网络性能的测量工具，可以测试基于TCP或UDP吞吐、响应速率。Netperf包括Clien和Server端，Server端主要用来实现监听工作，Client端进行测试。\n\n#### ltp\n\nLTP测试套件是测试Linux内核和内核相关特性的工具的集合。该工具的目的是通过把测试自动化引入到Linux内核测试，提高Linux的内核质量。通过功能测试、压力测试和回归测试来验证 Linux 系统的可靠性、稳定性和健壮性。整个项目约4000个测试用例。\n","source":"_posts/常用性能测试小工具集锦.md","raw":"---\ntitle: 常用性能测试小工具集锦\ndate: 2023-12-25 10:27:28\ndescription: 常用性能测试小工具集锦\ntype: \"tags\"\ncomments: true\ncategories:\n- Linux\n- Tools\n- Test\ntags:\n- Linux\n- Test\n---\n# 常用性能测试小工具集锦\n\n## 性能测试\n\n​\t基于工作中做的性能测试，收纳整理出《常用性能测试小工具集锦》。主要从性能测试和工具集锦两个方面分享。\n\n### 性能测试\n\n​\t\t性能测试是一种评估系统性能的方法，它可以检测系统的可扩展性、吞吐量、响应时间、负载能力、稳定性和安全性等指标。性能测试可以帮助开发人员、系统管理员和业务用户了解系统的实际运行情况，并找出可能存在的瓶颈和问题。\n\n#### 性能测试指标\n\n​\t\t衡量系统性能的评价标准。\n\n##### **系统性能测试指标**\n\n​\t\t响应时间、系统处理能力，吞吐量，并发用户数，错误率等。\n\n##### 响应时间\n\n​\t\t简称RT，指的是客户发出请求到得到系统响应的整个过程的时间。也就是用户从客户端发起一个请求开始，到客户端接收到从服务器端返回的响应结束，整个过程所耗费的时间。\n\n##### 系统处理能力\n\n​\t\t系统在利用系统硬件平台和软件平台进行信息处理的能力。系统处理能力通过系统每秒钟能够处理的交易数量来评价。交易有两种理解：一是业务人员角度的一笔业务过程；二是系统角度的一次交易申请和响应过程。前者称为业务交易过程，后者称为事务。系统处理能力又用HPS(每秒点击次数)，TPS(系统每秒处理交易次数)，QPS(系统每秒处理查询次数)指标来度量。\n\n##### 吞吐量\n\n​\t\t吞吐量是指系统在单位时间内处理请求的数量。尤其对于并发系统，通常需要用吞吐量作为性能指标。\n\n##### 并发用户数\n\n​\t\t并发用户数指在同一时刻内，登录系统并进行业务操作的用户数量。\n\n##### 错误率\n\n​\t\t简称FR，指系统在负载情况下，失败交易的概率。错误率＝(失败交易数/交易总数)*100%。\n\n#### **资源性能指标**\n\nCPU、内存、磁盘吞吐量、网络吞吐量等。\n\n##### CPU\n\n​\t\tCPU指标主要指的CPU利用率。单位时间内服务器CPU的使用统计，可以用除CPU空闲时间外其他时间占总CPU时间的百分比来表示。即：CPU使用率=1-CPU空闲时间/总CPU时间。\n\n```\n字段说明：\nus (user)：用户态的CPU使用时间比例，是用户运行程序的真正时间，它不包括后面的ni时间。\nsy (system): 内核态的CPU使用时间比例，是操作系统的运行时间，操作系统运行时，用户运行程序往往处于等待状态。\nni (nice): 表示低优先级用户态的CPU时间比例，取值范围为[-20,19]，数值越大，则优先级越低。\nid (idle): 表示空闲的CPU时间比例，值越大，CPU空闲时间比例越高，利用率越低。\nwa (iowait): 表示处于IO等待状态的CPU时间比例。\nhi (hard interrupt): 表示处理硬中断的CPU时间比例。硬中断，也叫异步中断。硬中断是由硬件设备依照CPU时钟信号产生的，即意味着中断发生具备随机性和突发性，可以在指令正在执行时发生。\nsi (soft interrupt): 与hi相反，表示处理软中断的CPU时间比例。软中断，也叫同步中断。软中断是由CPU执行中断产生指令时产生，是由程序预先实现好的，不是随机的。\nst (steal): 表示当前系统运行在虚拟机中被其他虚拟机占用的CPU时间比例。这体现为物理 CPU 没有办法为当前系统服务，通常正在为另一个系统服务。 在虚拟机超卖比较严重的场景，这个数值非常明显。 这部分时间显然不是当前系统所用，而是被其他系统占用了。\n```\n\n​\t\t当us很高时，说明CPU时间主要消耗在用户代码上，可以从用户代码角度考虑优化性能；当sy很高时，说明CPU时间主要消耗在内核上，可以从是否系统调用频繁、CPU进程或线程切换频繁角度考虑性能的优化；当wa很高时，说明有进程在进行频繁的IO操作，可能是磁盘IO或者网络IO。一般情况下，如果%us+%sy<=70%，我们可以认为系统的运行状态良好。\n\n##### 内存\n\n​\t\ttotal(内存总量),free(空闲内存),used(已使用内存),buffer/cache(缓存)。buffers与cached都是内存操作，用来保存系统曾经打开过的文件以及文件属性信息，这样当操作系统需要读取某些文件时，会优先从buffers与cached内存区查找，然后才从磁盘读取。通过缓存，能够大大提高了操作系统的性能。因此，对于linux系统来说，可用于分配的内存不止free的内存，同时还包括cached的内存（其实还包括buffers的内存）。cached和buffers都属于缓存，它们的区别主要在于cached主要用来缓冲频繁读取的文件，它可以直接记忆我们打开的文件内容；而buffers主要用来给块设备做的缓冲大小，只记录文件系统的元数据(metadata)以及缓存文件(tracking in-flight pages)信息，比如存储目录里面的内容，权限等。\n\n在性能测试中，经常会用到系统已用内存、物理已用内存、系统内存占用率以及物理内存占用率这几个指标，它们的计算公式如下：\n\n```\n物理已用内存 = 实际已用内存 - 缓冲 - 缓存 \n物理空闲内存 = 总物理内存 - 实际已用内存 + 缓冲 + 缓存 \n应用程序可用空闲内存 = 总物理内存 - 实际已用内存 \n应用程序已用内存 = 实际已用内存 - 缓冲 - 缓存\ntotal = used + free + buffer/cache\navaiable = free + buffer/cache\n```\n\n​\t\t一般情况下，系统内存占用率<=70%，我们可以认为系统的内存使用情况良好，如果超出则说明系统内存资源紧张。\n\n##### 磁盘\n\n- 磁盘I/O：I/O，即input/output，磁盘的输入输出，输入指的是对磁盘写入数据，输出指的是从磁盘读出数据，磁盘I/O可以理解为读写。应用发起的一次或多次数据请求，I/O请求的数据量又称I/O大小，单位为KiB，例如4KiB、256KiB、1024KiB等；\n- 磁盘IOPS：磁盘IOPS是指一秒内磁盘进行多少次I/O读写；\n- 磁盘吞吐量：每秒磁盘I/O的流量，即磁盘写入加上读出的数据的大小。\n\n```\nI/O 读写的类型，大体上可以分为：\n读 / 写 I/O：存数据时候对应的是写操作，取数据的时候对应的是是读操作。\n大 / 小块 I/O：这个数值指的是控制器指令中给出的连续读出扇区数目的多少。\n连续 / 随机 I/O：连续 I/O 指的是本次 I/O 给出的初始扇区地址和上一次 I/O 的结束扇区地址是完全连续或者相隔不多的。反之，如果相差很大，则算作一次随机 I/O。连续 I/O 比随机 I/O 效率高，因为在做连续 I/O 的时候，磁头几乎不用换道，或者换道的时间很短；而对于随机 I/O，如果这个 I/O 很多的话，会导致磁头不停地换道，造成效率的极大降低。\n顺序 / 并发 I/O：从概念上讲，并发 I/O 就是指向一块磁盘发出一条 I/O 指令后，不必等待它回应，接着向另外一块磁盘发 I/O 指令。对于具有条带性的 RAID（LUN），对其进行的 I/O 操作是并发的，例如：raid 0+1(1+0),raid5 等。反之则为顺序 I/O。\n吞吐量 = IOPS * I/O大小\n```\n\n##### 网络\n\n​\t网络吞吐量是指在某个时刻，在网络中的两个节点之间，提给给网络应用的剩余带宽。 即在没有帧丢失的状况下，设备能够接受的最大速率。\n\n```\n通常是以 4 个指标来衡量网络的性能，分别是带宽、延时、吞吐率、PPS（Packet Per Second），它们表示的意义如下\n带宽，表示链路的最大传输速率，单位是 b/s （比特 / 秒），带宽越大，其传输能力就越强。\n延时，表示请求数据包发送后，收到对端响应，所需要的时间延迟。不同的场景有着不同的含义，比如可以表示建立 TCP 连接所需的时间延迟，或一个数据包往返所需的时间延迟。\n吞吐率，表示单位时间内成功传输的数据量，单位是 b/s（比特 / 秒）或者 B/s（字节 / 秒），吞吐受带宽限制，带宽越大，吞吐率的上限才可能越高。\nPPS，全称是 Packet Per Second（包 / 秒），表示以网络包为单位的传输速率，一般用来评估系统对于网络的转发能力。\n当然，除了以上这四种基本的指标，还有一些其他常用的性能指标，比如：\n\n网络的可用性，表示网络能否正常通信；\n并发连接数，表示 TCP 连接数量；\n丢包率，表示所丢失数据包数量占所发送数据组的比率；\n重传率，表示重传网络包的比例；\n```\n\n## 工具集锦\n\n#### unixBench\n\nUnixBench的测试能力包含系统调用、读写、进程、2D、3D、管道、运算等系统基准性能，会对系统CPU、内存、磁盘、网络等各个方面进行一系列的测试。\n\n```\n./Run -c 1 -c 8 //表示执行两次，第一次单个copies,第二次8个copies的测试任务。\n```\n\n测试结果\n\n```\nmake all\nmake[1]: Entering directory '/path/to/test-tool/UnixBench5.1.3-1'\nChecking distribution of files\n./pgms  exists\n./src  exists\n./testdir  exists\n./results  exists\nmake[1]: Leaving directory '/path/to/test-tool/UnixBench5.1.3-1'\n\n   #    #  #    #  #  #    #          #####   ######  #    #   ####   #    #\n   #    #  ##   #  #   #  #           #    #  #       ##   #  #    #  #    #\n   #    #  # #  #  #    ##            #####   #####   # #  #  #       ######\n   #    #  #  # #  #    ##            #    #  #       #  # #  #       #    #\n   #    #  #   ##  #   #  #           #    #  #       #   ##  #    #  #    #\n    ####   #    #  #  #    #          #####   ######  #    #   ####   #    #\n\n   Version 5.1.3                      Based on the Byte Magazine Unix Benchmark\n\n   Multi-CPU version                  Version 5 revisions by Ian Smith,\n                                      Sunnyvale, CA, USA\n   January 13, 2011                   johantheghost at yahoo period com\n\n\n1 x Dhrystone 2 using register variables  1 2 3 4 5 6 7 8 9 10\n\n1 x Double-Precision Whetstone  1 2 3 4 5 6 7 8 9 10\n\n1 x Execl Throughput  1 2 3\n\n1 x File Copy 1024 bufsize 2000 maxblocks  1 2 3\n\n1 x File Copy 256 bufsize 500 maxblocks  1 2 3\n\n1 x File Copy 4096 bufsize 8000 maxblocks  1 2 3\n\n1 x Pipe Throughput  1 2 3 4 5 6 7 8 9 10\n\n1 x Pipe-based Context Switching  1 2 3 4 5 6 7 8 9 10\n\n1 x Process Creation  1 2 3\n\n1 x System Call Overhead  1 2 3 4 5 6 7 8 9 10\n\n1 x Shell Scripts (1 concurrent)  1 2 3\n\n1 x Shell Scripts (8 concurrent)  1 2 3\n\n8 x Dhrystone 2 using register variables  1 2 3 4 5 6 7 8 9 10\n\n8 x Double-Precision Whetstone  1 2 3 4 5 6 7 8 9 10\n\n8 x Execl Throughput  1 2 3\n\n8 x File Copy 1024 bufsize 2000 maxblocks  1 2 3\n\n8 x File Copy 256 bufsize 500 maxblocks  1 2 3\n\n8 x File Copy 4096 bufsize 8000 maxblocks  1 2 3\n\n8 x Pipe Throughput  1 2 3 4 5 6 7 8 9 10\n\n8 x Pipe-based Context Switching  1 2 3 4 5 6 7 8 9 10\n\n8 x Process Creation  1 2 3\n\n8 x System Call Overhead  1 2 3 4 5 6 7 8 9 10\n\n8 x Shell Scripts (1 concurrent)  1 2 3\n\n8 x Shell Scripts (8 concurrent)  1 2 3\n\n========================================================================\n   BYTE UNIX Benchmarks (Version 5.1.3)\n\n   System: wang-PC: GNU/Linux\n   OS: GNU/Linux -- 5.15.77-amd64-desktop -- #2 SMP Thu Jun 15 16:06:18 CST 2023\n   Machine: x86_64 (unknown)\n   Language: en_US.utf8 (charmap=\"UTF-8\", collate=\"UTF-8\")\n   CPU 0: Intel(R) Core(TM) i5-10210U CPU @ 1.60GHz (4199.9 bogomips)\n          Hyper-Threading, x86-64, MMX, Physical Address Ext, SYSENTER/SYSEXIT, SYSCALL/SYSRET, Intel virtualization\n   CPU 1: Intel(R) Core(TM) i5-10210U CPU @ 1.60GHz (4199.9 bogomips)\n          Hyper-Threading, x86-64, MMX, Physical Address Ext, SYSENTER/SYSEXIT, SYSCALL/SYSRET, Intel virtualization\n   CPU 2: Intel(R) Core(TM) i5-10210U CPU @ 1.60GHz (4199.9 bogomips)\n          Hyper-Threading, x86-64, MMX, Physical Address Ext, SYSENTER/SYSEXIT, SYSCALL/SYSRET, Intel virtualization\n   CPU 3: Intel(R) Core(TM) i5-10210U CPU @ 1.60GHz (4199.9 bogomips)\n          Hyper-Threading, x86-64, MMX, Physical Address Ext, SYSENTER/SYSEXIT, SYSCALL/SYSRET, Intel virtualization\n   CPU 4: Intel(R) Core(TM) i5-10210U CPU @ 1.60GHz (4199.9 bogomips)\n          Hyper-Threading, x86-64, MMX, Physical Address Ext, SYSENTER/SYSEXIT, SYSCALL/SYSRET, Intel virtualization\n   CPU 5: Intel(R) Core(TM) i5-10210U CPU @ 1.60GHz (4199.9 bogomips)\n          Hyper-Threading, x86-64, MMX, Physical Address Ext, SYSENTER/SYSEXIT, SYSCALL/SYSRET, Intel virtualization\n   CPU 6: Intel(R) Core(TM) i5-10210U CPU @ 1.60GHz (4199.9 bogomips)\n          Hyper-Threading, x86-64, MMX, Physical Address Ext, SYSENTER/SYSEXIT, SYSCALL/SYSRET, Intel virtualization\n   CPU 7: Intel(R) Core(TM) i5-10210U CPU @ 1.60GHz (4199.9 bogomips)\n          Hyper-Threading, x86-64, MMX, Physical Address Ext, SYSENTER/SYSEXIT, SYSCALL/SYSRET, Intel virtualization\n   14:50:41 up 11 days, 23:45,  1 user,  load average: 0.95, 1.32, 7.18; runlevel 5\n\n------------------------------------------------------------------------\nBenchmark Run: Wed Jan 24 2024 14:50:41 - 15:18:32\n8 CPUs in system; running 1 parallel copy of tests\n\nDhrystone 2 using register variables       47877041.4 lps   (10.0 s, 7 samples)\nDouble-Precision Whetstone                     7784.4 MWIPS (9.0 s, 7 samples)\nExecl Throughput                               5666.5 lps   (30.0 s, 2 samples)\nFile Copy 1024 bufsize 2000 maxblocks       1493924.1 KBps  (30.0 s, 2 samples)\nFile Copy 256 bufsize 500 maxblocks          426805.3 KBps  (30.0 s, 2 samples)\nFile Copy 4096 bufsize 8000 maxblocks       3119870.2 KBps  (30.0 s, 2 samples)\nPipe Throughput                             2577750.5 lps   (10.0 s, 7 samples)\nPipe-based Context Switching                 296557.3 lps   (10.0 s, 7 samples)\nProcess Creation                              13157.5 lps   (30.0 s, 2 samples)\nShell Scripts (1 concurrent)                  14761.5 lpm   (60.0 s, 2 samples)\nShell Scripts (8 concurrent)                   4321.8 lpm   (60.0 s, 2 samples)\nSystem Call Overhead                        2784511.9 lps   (10.0 s, 7 samples)\n\nSystem Benchmarks Index Values               BASELINE       RESULT    INDEX\nDhrystone 2 using register variables         116700.0   47877041.4   4102.6\nDouble-Precision Whetstone                       55.0       7784.4   1415.3\nExecl Throughput                                 43.0       5666.5   1317.8\nFile Copy 1024 bufsize 2000 maxblocks          3960.0    1493924.1   3772.5\nFile Copy 256 bufsize 500 maxblocks            1655.0     426805.3   2578.9\nFile Copy 4096 bufsize 8000 maxblocks          5800.0    3119870.2   5379.1\nPipe Throughput                               12440.0    2577750.5   2072.1\nPipe-based Context Switching                   4000.0     296557.3    741.4\nProcess Creation                                126.0      13157.5   1044.2\nShell Scripts (1 concurrent)                     42.4      14761.5   3481.5\nShell Scripts (8 concurrent)                      6.0       4321.8   7203.0\nSystem Call Overhead                          15000.0    2784511.9   1856.3\n                                                                   ========\nSystem Benchmarks Index Score                                        2360.4\n\n------------------------------------------------------------------------\nBenchmark Run: Wed Jan 24 2024 15:18:32 - 15:46:49\n8 CPUs in system; running 8 parallel copies of tests\n\nDhrystone 2 using register variables      176274670.8 lps   (10.0 s, 7 samples)\nDouble-Precision Whetstone                    46994.6 MWIPS (9.4 s, 7 samples)\nExecl Throughput                              20151.0 lps   (30.0 s, 2 samples)\nFile Copy 1024 bufsize 2000 maxblocks       1745833.5 KBps  (30.0 s, 2 samples)\nFile Copy 256 bufsize 500 maxblocks          478830.4 KBps  (30.0 s, 2 samples)\nFile Copy 4096 bufsize 8000 maxblocks       4568801.0 KBps  (30.0 s, 2 samples)\nPipe Throughput                             9157085.1 lps   (10.0 s, 7 samples)\nPipe-based Context Switching                1132991.1 lps   (10.0 s, 7 samples)\nProcess Creation                              44340.3 lps   (30.0 s, 2 samples)\nShell Scripts (1 concurrent)                  36537.4 lpm   (60.0 s, 2 samples)\nShell Scripts (8 concurrent)                   4653.2 lpm   (60.1 s, 2 samples)\nSystem Call Overhead                        8498217.7 lps   (10.0 s, 7 samples)\n\nSystem Benchmarks Index Values               BASELINE       RESULT    INDEX\nDhrystone 2 using register variables         116700.0  176274670.8  15104.9\nDouble-Precision Whetstone                       55.0      46994.6   8544.5\nExecl Throughput                                 43.0      20151.0   4686.3\nFile Copy 1024 bufsize 2000 maxblocks          3960.0    1745833.5   4408.7\nFile Copy 256 bufsize 500 maxblocks            1655.0     478830.4   2893.2\nFile Copy 4096 bufsize 8000 maxblocks          5800.0    4568801.0   7877.2\nPipe Throughput                               12440.0    9157085.1   7361.0\nPipe-based Context Switching                   4000.0    1132991.1   2832.5\nProcess Creation                                126.0      44340.3   3519.1\nShell Scripts (1 concurrent)                     42.4      36537.4   8617.3\nShell Scripts (8 concurrent)                      6.0       4653.2   7755.3\nSystem Call Overhead                          15000.0    8498217.7   5665.5\n                                                                   ========\nSystem Benchmarks Index Score                                        5874.3\n```\n\n测试项目\n\n![image-20240124153054135](/home/wang/.config/Typora/typora-user-images/image-20240124153054135.png)\n\n```\nDhrystone测试：\n\t测试聚焦在字符串处理，没有浮点运算操作。这个测试用于测试链接器编译、代码优化、内存缓存、等待状态、整数数据类型等。\nWhetstone测试：\n\t测试项目用于测试浮点运算效率和速度。含若干个科学计算的典型性能模块，包含大量的C语言函数,sin cos sqrt exp和日志以及使用整数和浮点的数学操作。包含数组访问、条件分支和过程调用。\nExecl Throughput测试：\n\t每秒钟可以执行的execl系统调用的次数。\nFile Copy测试：\n\t这项测试衡量文件数据从一个文件被传输到另外一个，使用大量的缓存。包括文件的读、写、复制测试，测试指标是一定时间内（默认是10秒）被重写、读、复制的字符数量。\nPipe Throughput(管道吞吐)测试:\n\t测试在一秒钟一个进程写512比特到一个管道中并且读回来的次数。管道吞吐测试和实际编程有差距。\nPipe-based Context Switching(基于管道的上下文交互)测试:\n\t测试衡量两个进程通过管道交换和整数倍的增加吞吐的次数。基于管道的上下文切换和真实程序很类似。测试程序产生一个双向管道通讯的子线程。\nProcess Creation(进程创建)测试:\n\t这项测试衡量一个进程能产生子线程并且立即退出的次数。新进程真的创建进程阻塞和内存占用，所以测试程序直接使用内存带宽。这项测试用于典型的比较大量的操作系统进程创建操作。\nShell Scripts测试:\n\tshell脚本测试用于衡量在一分钟内，一个进程可以启动并停止shell脚本的次数，通常会测试1，2， 3， 4， 8 个shell脚本的共同拷贝，shell脚本是一套转化数据文件的脚本。\nSystem Call Overhead （系统调用消耗）测试:\n\t测试衡量进入和离开系统内核的消耗，例如，系统调用的消耗。程序简单重复的执行getpid调用（返回调用的进程id）。消耗的指标是调用进入和离开内核的执行时间。\nGraphical Tests(图形)测试:\n\t测试非常粗的2D和3D图形性能，尤其是3D测试非常有限。测试结果和硬件，系统合适的驱动关系很大。\n```\n\n#### fio\n\nfio主要用来测试硬盘io性能。这个工具的可定制性非常强，可以根据测试者的想法进行各种混合io测试，它支持13种不同类型io引擎（libaio、sync、mmap、posixaio、network等等）。它可以测试块设备或文件，可以通过多线程或进程模拟各种io操作，可以测试统计iops、带宽和时延等性能。我们主要使用fio工具进行存储性能测试。\n\n```\nfio -name=iouring_test -filename=/mnt/vdd/testfile -iodepth=128 -thread -rw=randread -ioengine=io_uring -sqthread_poll=1 -direct=1 -bs=4k -size=10G -numjobs=1 -runtime=120 -group_reporting\n```\n\n说明：\nfilename=/dev/sdb1    测试文件名称，通常选择需要测试的盘的data目录。\ndirect=1         测试过程绕过机器自带的buffer。使测试结果更真实。\nbs=4k          单次io的块文件大小为16k\nsize=5g  本次的测试文件大小为5g，以每次4k的io进行测试。\nnumjobs=1        本次的测试线程为30.\nruntime=120       测试时间为120秒，如果不写则一直将5g文件分4k每次写完为止。\nioengine=io_uring      io引擎使用io_uring方式\ngroup_reporting     关于显示结果的，汇总每个进程的信息。\n\n此外\nrwmixwrite=30      在混合读写的模式下，写占30%\nlockmem=1g        只使用1g内存进行测试。\nzero_buffers       用0初始化系统buffer。\nnrfiles=8        每个进程生成文件的数量。\nread 顺序读\nwrite 顺序写\nrw,readwrite 顺序混合读写\nrandwrite 随机写\nrandread 随机读\nrandrw 随机混合读写\n\n```\nuring -sqthread_poll=1 -direct=1 -bs=4k -size=10G -numjobs=1 -runtime=120 -group_reporting\niouring_test: (g=0): rw=randread, bs=(R) 4096B-4096B, (W) 4096B-4096B, (T) 4096B-4096B, ioengine=io_uring, iodepth=128\nfio-3.22\nStarting 1 thread\nJobs: 1 (f=1): [r(1)][3.2%][eta 01h:01m:42s]                        \niouring_test: (groupid=0, jobs=1): err= 0: pid=63227: Wed Jan 24 15:55:58 2024\n  read: IOPS=682, BW=2729KiB/s (2795kB/s)(330MiB/123713msec)  //读操作的iops(每秒输入输出量)和bw(带宽)\n    clat (usec): min=506, max=11807k, avg=187540.47, stdev=846840.59\n     lat (usec): min=507, max=11807k, avg=187541.31, stdev=846840.60\n    clat percentiles (usec):\n     |  1.00th=[    1188],  5.00th=[    5800], 10.00th=[    8160],\n     | 20.00th=[   11469], 30.00th=[   15008], 40.00th=[   19792],\n     | 50.00th=[   26084], 60.00th=[   36439], 70.00th=[   56361],\n     | 80.00th=[  104334], 90.00th=[  238027], 95.00th=[  425722],\n     | 99.00th=[ 5804917], 99.50th=[ 7214203], 99.90th=[ 8422163],\n     | 99.95th=[ 8657044], 99.99th=[10804528]\n   bw (  KiB/s): min= 1357, max= 5397, per=100.00%, avg=2806.35, stdev=636.20, samples=240\n   iops        : min=  339, max= 1349, avg=701.40, stdev=159.08, samples=240\n  lat (usec)   : 750=0.13%, 1000=0.50%\n  lat (msec)   : 2=0.93%, 4=1.25%, 10=12.60%, 20=25.15%, 50=27.08%\n  lat (msec)   : 100=11.79%, 250=11.16%, 500=5.21%, 750=1.25%, 1000=0.54%\n  lat (msec)   : 2000=0.58%, >=2000=1.83%\n  cpu          : usr=99.85%, sys=0.08%, ctx=94, majf=0, minf=0\n  IO depths    : 1=0.1%, 2=0.1%, 4=0.1%, 8=0.1%, 16=0.1%, 32=0.1%, >=64=99.9%\n     submit    : 0=0.0%, 4=0.0%, 8=0.0%, 16=0.0%, 32=0.0%, 64=0.0%, >=64=0.0%\n     complete  : 0=0.0%, 4=100.0%, 8=0.0%, 16=0.0%, 32=0.0%, 64=0.0%, >=64=0.1%\n     issued rwts: total=84415,0,0,0 short=0,0,0,0 dropped=0,0,0,0\n     latency   : target=0, window=0, percentile=100.00%, depth=128\n\nRun status group 0 (all jobs):\n   READ: bw=2729KiB/s (2795kB/s), 2729KiB/s-2729KiB/s (2795kB/s-2795kB/s), io=330MiB (346MB), run=123713-123713msec\n\nDisk stats (read/write):\n    dm-0: ios=84415/17, merge=0/0, ticks=15416332/27284, in_queue=15443616, util=100.00%, aggrios=84414/15, aggrmerge=1/2, aggrticks=15402295/25881, aggrin_queue=15260184, aggrutil=100.00%\n  vda: ios=84414/15, merge=1/2, ticks=15402295/25881, in_queue=15260184, util=100.00%\n```\n\n#### lmbench\n\n`Lmbench` 是一款简易可以移植的内存测试工具，其主要功能有，带宽测评（读取缓存文件、拷贝内存、读/写内存、管道、TCP），延时测评（上下文切换、网络、文件系统的建立和删除、进程创建、[信号处理](https://so.csdn.net/so/search?q=信号处理&spm=1001.2101.3001.7020)、上层系统调用、内存读入反应时间）等功能。\n\n#### Stream\n\nStream内存带宽性能测试基准工具。\n\nstream通过生成四种不同模式下的内存读写操作，用于测试内存带宽。\n\nCopy操作最为简单，它先访问一个内存单元读出其中的值，再将值写入到另一个内存单元。\n\nScale操作先从内存单元读出其中的值，作一个乘法运算，再将结果写入到另一个内存单元。\n\nAdd操作先从内存单元读出两个值，做加法运算， 再将结果写入到另一个内存单元。\n\nTriad的中文含义是将三个组合起来，在本测试中表示的意思是将Copy、Scale、Add三种操作组合起来进行测试。具体操作方式是：先从内存数组中读两个值a、b，对其进行乘加混合运算（a+因子* b），将运算结果写入到另一个内存单元。 \n\n#### iozone\n\nIOzone是文件系统性能测试工具。可以测试不同的操作系统中文件系统的读写性能。可以测试 Read, write, re-read,re-write, read backwards, read strided, fread, fwrite, random read, pread, mmap, aio_read, aio_write 等等不同的模式下的硬盘的性能。\n\n| Write          | 测试向一个新文件写入的性能。当一个新文件被写入时，不仅仅是那些文件中的数据需要被存储，还包括那些用于定位数据存储在存储介质的具体位置的额外信息。这些额外信息被称作 “元数据”。它包括目录信息，所分配的空间和一些与该文件有关但又并非该文件所含数据的其他数据。拜这些额外信息所赐，Write 的性能通常会比 Re-write 的性能低。 |\n| -------------- | ------------------------------------------------------------ |\n| Re-write       | 测试向一个已存在的文件写入的性能。当一个已存在的文件被写入时，所需工作量较少，因为此时元数据已经存在。Re-write 的性能通常比 Write 的性能高。 |\n| Read           | 测试读一个已存在的文件的性能。                               |\n| Re-Read        | 测试读一个最近读过的文件的性能。Re-Read 性能会高些，因为操作系统通常会缓存最近读过的文件数据。这个缓存可以被用于读以提高性能。 |\n| Random Read    | 测试读一个文件中的随机偏移量的性能。许多因素可能影响这种情况下的系统性能，例如：操作系统缓存的大小，磁盘数量，寻道延迟和其他。 |\n| Random Write   | 测试写一个文件中的随机偏移量的性能。同样，许多因素可能影响这种情况下的系统性能，例如：操作系统缓存的大小，磁盘数量，寻道延迟和其他。 |\n| Random Mix     | 测试读写一个文件中的随机偏移量的性能。同样，许多因素可能影响这种情况下的系统性能，例如：操作系统缓存的大小，磁盘数量，寻道延迟和其他。这个测试只有在吞吐量测试模式下才能进行。每个线程 / 进程运行读或写测试。这种分布式读 / 写测试是基于 round robin 模式的。最好使用多于一个线程 / 进程执行此测试。 |\n| Backwards Read | 测试使用倒序读一个文件的性能。这种读文件方法可能看起来很可笑，事实上，有些应用确实这么干。MSC Nastran 是一个使用倒序读文件的应用程序的一个例子。它所读的文件都十分大（大小从 G 级别到 T 级别）。尽管许多操作系统使用一些特殊实现来优化顺序读文件的速度，很少有操作系统注意到并增强倒序读文件的性能。 |\n| Record Rewrite | 测试写与覆盖写一个文件中的特定块的性能。这个块可能会发生一些很有趣的事。如果这个块足够小（比 CPU 数据缓存小），测出来的性能将会非常高。如果比 CPU 数据缓存大而比 TLB 小，测出来的是另一个阶段的性能。如果比此二者都大，但比操作系统缓存小，得到的性能又是一个阶段。若大到超过操作系统缓存，又是另一番结果。 |\n| Strided Read   | 测试跳跃读一个文件的性能。举例如下：在 0 偏移量处读 4Kbytes，然后间隔 200Kbytes, 读 4Kbytes，再间隔 200Kbytes，如此反复。此时的模式是读 4Kbytes，间隔 200Kbytes 并重复这个模式。这又是一个典型的应用行为，文件中使用了数据结构并且访问这个数据结构的特定区域的应用程序常常这样做。许多操作系统并没注意到这种行为或者针对这种类型的访问做一些优化。同样，这种访问行为也可能导致一些有趣的性能异常。一个例子是在一个数据片化的文件系统里，应用程序的跳跃导致某一个特定的磁盘成为性能瓶颈。 |\n| Fwrite         | 测试调用库函数 fwrite () 来写文件的性能。这是一个执行缓存与阻塞写操作的库例程。缓存在用户空间之内。如果一个应用程序想要写很小的传输块，fwrite () 函数中的缓存与阻塞 I/O 功能能通过减少实际操作系统调用并在操作系统调用时增加传输块的大小来增强应用程序的性能。这个测试是写一个新文件，所以元数据的写入也是要的。 |\n| Frewrite       | 测试调用库函数 fwrite () 来写文件的性能。这是一个执行缓存与阻塞写操作的库例程。缓存在用户空间之内。如果一个应用程序想要写很小的传输块，fwrite () 函数中的缓存与阻塞 I/O 功能能通过减少实际操作系统调用并在操作系统调用时增加传输块的大小来增强应用程序的性能。 |\n\n#### iperf3\n\niperf3是基于Client/Server的网络性能测试工具，通常用于测试网络上可达到的最大带宽，它能够测试TCP、UDP及SCTP的带宽质量，可以提供网络吞吐量、网络波动、网络丢包率以及最大传输单元大小等信息，能够帮助我们测试网络性能，定位网络瓶颈。\n\n#### netperf\n\nNetperf是一种网络性能的测量工具，可以测试基于TCP或UDP吞吐、响应速率。Netperf包括Clien和Server端，Server端主要用来实现监听工作，Client端进行测试。\n\n#### ltp\n\nLTP测试套件是测试Linux内核和内核相关特性的工具的集合。该工具的目的是通过把测试自动化引入到Linux内核测试，提高Linux的内核质量。通过功能测试、压力测试和回归测试来验证 Linux 系统的可靠性、稳定性和健壮性。整个项目约4000个测试用例。\n","slug":"常用性能测试小工具集锦","published":1,"updated":"2024-06-03T02:46:44.639Z","_id":"clwycz7q20003fzigau0z7ejc","layout":"post","photos":[],"link":"","content":"<h1 id=\"常用性能测试小工具集锦\"><a href=\"#常用性能测试小工具集锦\" class=\"headerlink\" title=\"常用性能测试小工具集锦\"></a>常用性能测试小工具集锦</h1><h2 id=\"性能测试\"><a href=\"#性能测试\" class=\"headerlink\" title=\"性能测试\"></a>性能测试</h2><p>​\t基于工作中做的性能测试，收纳整理出《常用性能测试小工具集锦》。主要从性能测试和工具集锦两个方面分享。</p>\n<h3 id=\"性能测试-1\"><a href=\"#性能测试-1\" class=\"headerlink\" title=\"性能测试\"></a>性能测试</h3><p>​\t\t性能测试是一种评估系统性能的方法，它可以检测系统的可扩展性、吞吐量、响应时间、负载能力、稳定性和安全性等指标。性能测试可以帮助开发人员、系统管理员和业务用户了解系统的实际运行情况，并找出可能存在的瓶颈和问题。</p>\n<h4 id=\"性能测试指标\"><a href=\"#性能测试指标\" class=\"headerlink\" title=\"性能测试指标\"></a>性能测试指标</h4><p>​\t\t衡量系统性能的评价标准。</p>\n<h5 id=\"系统性能测试指标\"><a href=\"#系统性能测试指标\" class=\"headerlink\" title=\"系统性能测试指标\"></a><strong>系统性能测试指标</strong></h5><p>​\t\t响应时间、系统处理能力，吞吐量，并发用户数，错误率等。</p>\n<h5 id=\"响应时间\"><a href=\"#响应时间\" class=\"headerlink\" title=\"响应时间\"></a>响应时间</h5><p>​\t\t简称RT，指的是客户发出请求到得到系统响应的整个过程的时间。也就是用户从客户端发起一个请求开始，到客户端接收到从服务器端返回的响应结束，整个过程所耗费的时间。</p>\n<h5 id=\"系统处理能力\"><a href=\"#系统处理能力\" class=\"headerlink\" title=\"系统处理能力\"></a>系统处理能力</h5><p>​\t\t系统在利用系统硬件平台和软件平台进行信息处理的能力。系统处理能力通过系统每秒钟能够处理的交易数量来评价。交易有两种理解：一是业务人员角度的一笔业务过程；二是系统角度的一次交易申请和响应过程。前者称为业务交易过程，后者称为事务。系统处理能力又用HPS(每秒点击次数)，TPS(系统每秒处理交易次数)，QPS(系统每秒处理查询次数)指标来度量。</p>\n<h5 id=\"吞吐量\"><a href=\"#吞吐量\" class=\"headerlink\" title=\"吞吐量\"></a>吞吐量</h5><p>​\t\t吞吐量是指系统在单位时间内处理请求的数量。尤其对于并发系统，通常需要用吞吐量作为性能指标。</p>\n<h5 id=\"并发用户数\"><a href=\"#并发用户数\" class=\"headerlink\" title=\"并发用户数\"></a>并发用户数</h5><p>​\t\t并发用户数指在同一时刻内，登录系统并进行业务操作的用户数量。</p>\n<h5 id=\"错误率\"><a href=\"#错误率\" class=\"headerlink\" title=\"错误率\"></a>错误率</h5><p>​\t\t简称FR，指系统在负载情况下，失败交易的概率。错误率＝(失败交易数&#x2F;交易总数)*100%。</p>\n<h4 id=\"资源性能指标\"><a href=\"#资源性能指标\" class=\"headerlink\" title=\"资源性能指标\"></a><strong>资源性能指标</strong></h4><p>CPU、内存、磁盘吞吐量、网络吞吐量等。</p>\n<h5 id=\"CPU\"><a href=\"#CPU\" class=\"headerlink\" title=\"CPU\"></a>CPU</h5><p>​\t\tCPU指标主要指的CPU利用率。单位时间内服务器CPU的使用统计，可以用除CPU空闲时间外其他时间占总CPU时间的百分比来表示。即：CPU使用率&#x3D;1-CPU空闲时间&#x2F;总CPU时间。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">字段说明：</span><br><span class=\"line\">us (user)：用户态的CPU使用时间比例，是用户运行程序的真正时间，它不包括后面的ni时间。</span><br><span class=\"line\">sy (system): 内核态的CPU使用时间比例，是操作系统的运行时间，操作系统运行时，用户运行程序往往处于等待状态。</span><br><span class=\"line\">ni (nice): 表示低优先级用户态的CPU时间比例，取值范围为[-20,19]，数值越大，则优先级越低。</span><br><span class=\"line\">id (idle): 表示空闲的CPU时间比例，值越大，CPU空闲时间比例越高，利用率越低。</span><br><span class=\"line\">wa (iowait): 表示处于IO等待状态的CPU时间比例。</span><br><span class=\"line\">hi (hard interrupt): 表示处理硬中断的CPU时间比例。硬中断，也叫异步中断。硬中断是由硬件设备依照CPU时钟信号产生的，即意味着中断发生具备随机性和突发性，可以在指令正在执行时发生。</span><br><span class=\"line\">si (soft interrupt): 与hi相反，表示处理软中断的CPU时间比例。软中断，也叫同步中断。软中断是由CPU执行中断产生指令时产生，是由程序预先实现好的，不是随机的。</span><br><span class=\"line\">st (steal): 表示当前系统运行在虚拟机中被其他虚拟机占用的CPU时间比例。这体现为物理 CPU 没有办法为当前系统服务，通常正在为另一个系统服务。 在虚拟机超卖比较严重的场景，这个数值非常明显。 这部分时间显然不是当前系统所用，而是被其他系统占用了。</span><br></pre></td></tr></table></figure>\n\n<p>​\t\t当us很高时，说明CPU时间主要消耗在用户代码上，可以从用户代码角度考虑优化性能；当sy很高时，说明CPU时间主要消耗在内核上，可以从是否系统调用频繁、CPU进程或线程切换频繁角度考虑性能的优化；当wa很高时，说明有进程在进行频繁的IO操作，可能是磁盘IO或者网络IO。一般情况下，如果%us+%sy&lt;&#x3D;70%，我们可以认为系统的运行状态良好。</p>\n<h5 id=\"内存\"><a href=\"#内存\" class=\"headerlink\" title=\"内存\"></a>内存</h5><p>​\t\ttotal(内存总量),free(空闲内存),used(已使用内存),buffer&#x2F;cache(缓存)。buffers与cached都是内存操作，用来保存系统曾经打开过的文件以及文件属性信息，这样当操作系统需要读取某些文件时，会优先从buffers与cached内存区查找，然后才从磁盘读取。通过缓存，能够大大提高了操作系统的性能。因此，对于linux系统来说，可用于分配的内存不止free的内存，同时还包括cached的内存（其实还包括buffers的内存）。cached和buffers都属于缓存，它们的区别主要在于cached主要用来缓冲频繁读取的文件，它可以直接记忆我们打开的文件内容；而buffers主要用来给块设备做的缓冲大小，只记录文件系统的元数据(metadata)以及缓存文件(tracking in-flight pages)信息，比如存储目录里面的内容，权限等。</p>\n<p>在性能测试中，经常会用到系统已用内存、物理已用内存、系统内存占用率以及物理内存占用率这几个指标，它们的计算公式如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">物理已用内存 = 实际已用内存 - 缓冲 - 缓存 </span><br><span class=\"line\">物理空闲内存 = 总物理内存 - 实际已用内存 + 缓冲 + 缓存 </span><br><span class=\"line\">应用程序可用空闲内存 = 总物理内存 - 实际已用内存 </span><br><span class=\"line\">应用程序已用内存 = 实际已用内存 - 缓冲 - 缓存</span><br><span class=\"line\">total = used + free + buffer/cache</span><br><span class=\"line\">avaiable = free + buffer/cache</span><br></pre></td></tr></table></figure>\n\n<p>​\t\t一般情况下，系统内存占用率&lt;&#x3D;70%，我们可以认为系统的内存使用情况良好，如果超出则说明系统内存资源紧张。</p>\n<h5 id=\"磁盘\"><a href=\"#磁盘\" class=\"headerlink\" title=\"磁盘\"></a>磁盘</h5><ul>\n<li>磁盘I&#x2F;O：I&#x2F;O，即input&#x2F;output，磁盘的输入输出，输入指的是对磁盘写入数据，输出指的是从磁盘读出数据，磁盘I&#x2F;O可以理解为读写。应用发起的一次或多次数据请求，I&#x2F;O请求的数据量又称I&#x2F;O大小，单位为KiB，例如4KiB、256KiB、1024KiB等；</li>\n<li>磁盘IOPS：磁盘IOPS是指一秒内磁盘进行多少次I&#x2F;O读写；</li>\n<li>磁盘吞吐量：每秒磁盘I&#x2F;O的流量，即磁盘写入加上读出的数据的大小。</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">I/O 读写的类型，大体上可以分为：</span><br><span class=\"line\">读 / 写 I/O：存数据时候对应的是写操作，取数据的时候对应的是是读操作。</span><br><span class=\"line\">大 / 小块 I/O：这个数值指的是控制器指令中给出的连续读出扇区数目的多少。</span><br><span class=\"line\">连续 / 随机 I/O：连续 I/O 指的是本次 I/O 给出的初始扇区地址和上一次 I/O 的结束扇区地址是完全连续或者相隔不多的。反之，如果相差很大，则算作一次随机 I/O。连续 I/O 比随机 I/O 效率高，因为在做连续 I/O 的时候，磁头几乎不用换道，或者换道的时间很短；而对于随机 I/O，如果这个 I/O 很多的话，会导致磁头不停地换道，造成效率的极大降低。</span><br><span class=\"line\">顺序 / 并发 I/O：从概念上讲，并发 I/O 就是指向一块磁盘发出一条 I/O 指令后，不必等待它回应，接着向另外一块磁盘发 I/O 指令。对于具有条带性的 RAID（LUN），对其进行的 I/O 操作是并发的，例如：raid 0+1(1+0),raid5 等。反之则为顺序 I/O。</span><br><span class=\"line\">吞吐量 = IOPS * I/O大小</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"网络\"><a href=\"#网络\" class=\"headerlink\" title=\"网络\"></a>网络</h5><p>​\t网络吞吐量是指在某个时刻，在网络中的两个节点之间，提给给网络应用的剩余带宽。 即在没有帧丢失的状况下，设备能够接受的最大速率。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">通常是以 4 个指标来衡量网络的性能，分别是带宽、延时、吞吐率、PPS（Packet Per Second），它们表示的意义如下</span><br><span class=\"line\">带宽，表示链路的最大传输速率，单位是 b/s （比特 / 秒），带宽越大，其传输能力就越强。</span><br><span class=\"line\">延时，表示请求数据包发送后，收到对端响应，所需要的时间延迟。不同的场景有着不同的含义，比如可以表示建立 TCP 连接所需的时间延迟，或一个数据包往返所需的时间延迟。</span><br><span class=\"line\">吞吐率，表示单位时间内成功传输的数据量，单位是 b/s（比特 / 秒）或者 B/s（字节 / 秒），吞吐受带宽限制，带宽越大，吞吐率的上限才可能越高。</span><br><span class=\"line\">PPS，全称是 Packet Per Second（包 / 秒），表示以网络包为单位的传输速率，一般用来评估系统对于网络的转发能力。</span><br><span class=\"line\">当然，除了以上这四种基本的指标，还有一些其他常用的性能指标，比如：</span><br><span class=\"line\"></span><br><span class=\"line\">网络的可用性，表示网络能否正常通信；</span><br><span class=\"line\">并发连接数，表示 TCP 连接数量；</span><br><span class=\"line\">丢包率，表示所丢失数据包数量占所发送数据组的比率；</span><br><span class=\"line\">重传率，表示重传网络包的比例；</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"工具集锦\"><a href=\"#工具集锦\" class=\"headerlink\" title=\"工具集锦\"></a>工具集锦</h2><h4 id=\"unixBench\"><a href=\"#unixBench\" class=\"headerlink\" title=\"unixBench\"></a>unixBench</h4><p>UnixBench的测试能力包含系统调用、读写、进程、2D、3D、管道、运算等系统基准性能，会对系统CPU、内存、磁盘、网络等各个方面进行一系列的测试。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./Run -c 1 -c 8 //表示执行两次，第一次单个copies,第二次8个copies的测试任务。</span><br></pre></td></tr></table></figure>\n\n<p>测试结果</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make all</span><br><span class=\"line\">make[1]: Entering directory &#x27;/path/to/test-tool/UnixBench5.1.3-1&#x27;</span><br><span class=\"line\">Checking distribution of files</span><br><span class=\"line\">./pgms  exists</span><br><span class=\"line\">./src  exists</span><br><span class=\"line\">./testdir  exists</span><br><span class=\"line\">./results  exists</span><br><span class=\"line\">make[1]: Leaving directory &#x27;/path/to/test-tool/UnixBench5.1.3-1&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">   #    #  #    #  #  #    #          #####   ######  #    #   ####   #    #</span><br><span class=\"line\">   #    #  ##   #  #   #  #           #    #  #       ##   #  #    #  #    #</span><br><span class=\"line\">   #    #  # #  #  #    ##            #####   #####   # #  #  #       ######</span><br><span class=\"line\">   #    #  #  # #  #    ##            #    #  #       #  # #  #       #    #</span><br><span class=\"line\">   #    #  #   ##  #   #  #           #    #  #       #   ##  #    #  #    #</span><br><span class=\"line\">    ####   #    #  #  #    #          #####   ######  #    #   ####   #    #</span><br><span class=\"line\"></span><br><span class=\"line\">   Version 5.1.3                      Based on the Byte Magazine Unix Benchmark</span><br><span class=\"line\"></span><br><span class=\"line\">   Multi-CPU version                  Version 5 revisions by Ian Smith,</span><br><span class=\"line\">                                      Sunnyvale, CA, USA</span><br><span class=\"line\">   January 13, 2011                   johantheghost at yahoo period com</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">1 x Dhrystone 2 using register variables  1 2 3 4 5 6 7 8 9 10</span><br><span class=\"line\"></span><br><span class=\"line\">1 x Double-Precision Whetstone  1 2 3 4 5 6 7 8 9 10</span><br><span class=\"line\"></span><br><span class=\"line\">1 x Execl Throughput  1 2 3</span><br><span class=\"line\"></span><br><span class=\"line\">1 x File Copy 1024 bufsize 2000 maxblocks  1 2 3</span><br><span class=\"line\"></span><br><span class=\"line\">1 x File Copy 256 bufsize 500 maxblocks  1 2 3</span><br><span class=\"line\"></span><br><span class=\"line\">1 x File Copy 4096 bufsize 8000 maxblocks  1 2 3</span><br><span class=\"line\"></span><br><span class=\"line\">1 x Pipe Throughput  1 2 3 4 5 6 7 8 9 10</span><br><span class=\"line\"></span><br><span class=\"line\">1 x Pipe-based Context Switching  1 2 3 4 5 6 7 8 9 10</span><br><span class=\"line\"></span><br><span class=\"line\">1 x Process Creation  1 2 3</span><br><span class=\"line\"></span><br><span class=\"line\">1 x System Call Overhead  1 2 3 4 5 6 7 8 9 10</span><br><span class=\"line\"></span><br><span class=\"line\">1 x Shell Scripts (1 concurrent)  1 2 3</span><br><span class=\"line\"></span><br><span class=\"line\">1 x Shell Scripts (8 concurrent)  1 2 3</span><br><span class=\"line\"></span><br><span class=\"line\">8 x Dhrystone 2 using register variables  1 2 3 4 5 6 7 8 9 10</span><br><span class=\"line\"></span><br><span class=\"line\">8 x Double-Precision Whetstone  1 2 3 4 5 6 7 8 9 10</span><br><span class=\"line\"></span><br><span class=\"line\">8 x Execl Throughput  1 2 3</span><br><span class=\"line\"></span><br><span class=\"line\">8 x File Copy 1024 bufsize 2000 maxblocks  1 2 3</span><br><span class=\"line\"></span><br><span class=\"line\">8 x File Copy 256 bufsize 500 maxblocks  1 2 3</span><br><span class=\"line\"></span><br><span class=\"line\">8 x File Copy 4096 bufsize 8000 maxblocks  1 2 3</span><br><span class=\"line\"></span><br><span class=\"line\">8 x Pipe Throughput  1 2 3 4 5 6 7 8 9 10</span><br><span class=\"line\"></span><br><span class=\"line\">8 x Pipe-based Context Switching  1 2 3 4 5 6 7 8 9 10</span><br><span class=\"line\"></span><br><span class=\"line\">8 x Process Creation  1 2 3</span><br><span class=\"line\"></span><br><span class=\"line\">8 x System Call Overhead  1 2 3 4 5 6 7 8 9 10</span><br><span class=\"line\"></span><br><span class=\"line\">8 x Shell Scripts (1 concurrent)  1 2 3</span><br><span class=\"line\"></span><br><span class=\"line\">8 x Shell Scripts (8 concurrent)  1 2 3</span><br><span class=\"line\"></span><br><span class=\"line\">========================================================================</span><br><span class=\"line\">   BYTE UNIX Benchmarks (Version 5.1.3)</span><br><span class=\"line\"></span><br><span class=\"line\">   System: wang-PC: GNU/Linux</span><br><span class=\"line\">   OS: GNU/Linux -- 5.15.77-amd64-desktop -- #2 SMP Thu Jun 15 16:06:18 CST 2023</span><br><span class=\"line\">   Machine: x86_64 (unknown)</span><br><span class=\"line\">   Language: en_US.utf8 (charmap=&quot;UTF-8&quot;, collate=&quot;UTF-8&quot;)</span><br><span class=\"line\">   CPU 0: Intel(R) Core(TM) i5-10210U CPU @ 1.60GHz (4199.9 bogomips)</span><br><span class=\"line\">          Hyper-Threading, x86-64, MMX, Physical Address Ext, SYSENTER/SYSEXIT, SYSCALL/SYSRET, Intel virtualization</span><br><span class=\"line\">   CPU 1: Intel(R) Core(TM) i5-10210U CPU @ 1.60GHz (4199.9 bogomips)</span><br><span class=\"line\">          Hyper-Threading, x86-64, MMX, Physical Address Ext, SYSENTER/SYSEXIT, SYSCALL/SYSRET, Intel virtualization</span><br><span class=\"line\">   CPU 2: Intel(R) Core(TM) i5-10210U CPU @ 1.60GHz (4199.9 bogomips)</span><br><span class=\"line\">          Hyper-Threading, x86-64, MMX, Physical Address Ext, SYSENTER/SYSEXIT, SYSCALL/SYSRET, Intel virtualization</span><br><span class=\"line\">   CPU 3: Intel(R) Core(TM) i5-10210U CPU @ 1.60GHz (4199.9 bogomips)</span><br><span class=\"line\">          Hyper-Threading, x86-64, MMX, Physical Address Ext, SYSENTER/SYSEXIT, SYSCALL/SYSRET, Intel virtualization</span><br><span class=\"line\">   CPU 4: Intel(R) Core(TM) i5-10210U CPU @ 1.60GHz (4199.9 bogomips)</span><br><span class=\"line\">          Hyper-Threading, x86-64, MMX, Physical Address Ext, SYSENTER/SYSEXIT, SYSCALL/SYSRET, Intel virtualization</span><br><span class=\"line\">   CPU 5: Intel(R) Core(TM) i5-10210U CPU @ 1.60GHz (4199.9 bogomips)</span><br><span class=\"line\">          Hyper-Threading, x86-64, MMX, Physical Address Ext, SYSENTER/SYSEXIT, SYSCALL/SYSRET, Intel virtualization</span><br><span class=\"line\">   CPU 6: Intel(R) Core(TM) i5-10210U CPU @ 1.60GHz (4199.9 bogomips)</span><br><span class=\"line\">          Hyper-Threading, x86-64, MMX, Physical Address Ext, SYSENTER/SYSEXIT, SYSCALL/SYSRET, Intel virtualization</span><br><span class=\"line\">   CPU 7: Intel(R) Core(TM) i5-10210U CPU @ 1.60GHz (4199.9 bogomips)</span><br><span class=\"line\">          Hyper-Threading, x86-64, MMX, Physical Address Ext, SYSENTER/SYSEXIT, SYSCALL/SYSRET, Intel virtualization</span><br><span class=\"line\">   14:50:41 up 11 days, 23:45,  1 user,  load average: 0.95, 1.32, 7.18; runlevel 5</span><br><span class=\"line\"></span><br><span class=\"line\">------------------------------------------------------------------------</span><br><span class=\"line\">Benchmark Run: Wed Jan 24 2024 14:50:41 - 15:18:32</span><br><span class=\"line\">8 CPUs in system; running 1 parallel copy of tests</span><br><span class=\"line\"></span><br><span class=\"line\">Dhrystone 2 using register variables       47877041.4 lps   (10.0 s, 7 samples)</span><br><span class=\"line\">Double-Precision Whetstone                     7784.4 MWIPS (9.0 s, 7 samples)</span><br><span class=\"line\">Execl Throughput                               5666.5 lps   (30.0 s, 2 samples)</span><br><span class=\"line\">File Copy 1024 bufsize 2000 maxblocks       1493924.1 KBps  (30.0 s, 2 samples)</span><br><span class=\"line\">File Copy 256 bufsize 500 maxblocks          426805.3 KBps  (30.0 s, 2 samples)</span><br><span class=\"line\">File Copy 4096 bufsize 8000 maxblocks       3119870.2 KBps  (30.0 s, 2 samples)</span><br><span class=\"line\">Pipe Throughput                             2577750.5 lps   (10.0 s, 7 samples)</span><br><span class=\"line\">Pipe-based Context Switching                 296557.3 lps   (10.0 s, 7 samples)</span><br><span class=\"line\">Process Creation                              13157.5 lps   (30.0 s, 2 samples)</span><br><span class=\"line\">Shell Scripts (1 concurrent)                  14761.5 lpm   (60.0 s, 2 samples)</span><br><span class=\"line\">Shell Scripts (8 concurrent)                   4321.8 lpm   (60.0 s, 2 samples)</span><br><span class=\"line\">System Call Overhead                        2784511.9 lps   (10.0 s, 7 samples)</span><br><span class=\"line\"></span><br><span class=\"line\">System Benchmarks Index Values               BASELINE       RESULT    INDEX</span><br><span class=\"line\">Dhrystone 2 using register variables         116700.0   47877041.4   4102.6</span><br><span class=\"line\">Double-Precision Whetstone                       55.0       7784.4   1415.3</span><br><span class=\"line\">Execl Throughput                                 43.0       5666.5   1317.8</span><br><span class=\"line\">File Copy 1024 bufsize 2000 maxblocks          3960.0    1493924.1   3772.5</span><br><span class=\"line\">File Copy 256 bufsize 500 maxblocks            1655.0     426805.3   2578.9</span><br><span class=\"line\">File Copy 4096 bufsize 8000 maxblocks          5800.0    3119870.2   5379.1</span><br><span class=\"line\">Pipe Throughput                               12440.0    2577750.5   2072.1</span><br><span class=\"line\">Pipe-based Context Switching                   4000.0     296557.3    741.4</span><br><span class=\"line\">Process Creation                                126.0      13157.5   1044.2</span><br><span class=\"line\">Shell Scripts (1 concurrent)                     42.4      14761.5   3481.5</span><br><span class=\"line\">Shell Scripts (8 concurrent)                      6.0       4321.8   7203.0</span><br><span class=\"line\">System Call Overhead                          15000.0    2784511.9   1856.3</span><br><span class=\"line\">                                                                   ========</span><br><span class=\"line\">System Benchmarks Index Score                                        2360.4</span><br><span class=\"line\"></span><br><span class=\"line\">------------------------------------------------------------------------</span><br><span class=\"line\">Benchmark Run: Wed Jan 24 2024 15:18:32 - 15:46:49</span><br><span class=\"line\">8 CPUs in system; running 8 parallel copies of tests</span><br><span class=\"line\"></span><br><span class=\"line\">Dhrystone 2 using register variables      176274670.8 lps   (10.0 s, 7 samples)</span><br><span class=\"line\">Double-Precision Whetstone                    46994.6 MWIPS (9.4 s, 7 samples)</span><br><span class=\"line\">Execl Throughput                              20151.0 lps   (30.0 s, 2 samples)</span><br><span class=\"line\">File Copy 1024 bufsize 2000 maxblocks       1745833.5 KBps  (30.0 s, 2 samples)</span><br><span class=\"line\">File Copy 256 bufsize 500 maxblocks          478830.4 KBps  (30.0 s, 2 samples)</span><br><span class=\"line\">File Copy 4096 bufsize 8000 maxblocks       4568801.0 KBps  (30.0 s, 2 samples)</span><br><span class=\"line\">Pipe Throughput                             9157085.1 lps   (10.0 s, 7 samples)</span><br><span class=\"line\">Pipe-based Context Switching                1132991.1 lps   (10.0 s, 7 samples)</span><br><span class=\"line\">Process Creation                              44340.3 lps   (30.0 s, 2 samples)</span><br><span class=\"line\">Shell Scripts (1 concurrent)                  36537.4 lpm   (60.0 s, 2 samples)</span><br><span class=\"line\">Shell Scripts (8 concurrent)                   4653.2 lpm   (60.1 s, 2 samples)</span><br><span class=\"line\">System Call Overhead                        8498217.7 lps   (10.0 s, 7 samples)</span><br><span class=\"line\"></span><br><span class=\"line\">System Benchmarks Index Values               BASELINE       RESULT    INDEX</span><br><span class=\"line\">Dhrystone 2 using register variables         116700.0  176274670.8  15104.9</span><br><span class=\"line\">Double-Precision Whetstone                       55.0      46994.6   8544.5</span><br><span class=\"line\">Execl Throughput                                 43.0      20151.0   4686.3</span><br><span class=\"line\">File Copy 1024 bufsize 2000 maxblocks          3960.0    1745833.5   4408.7</span><br><span class=\"line\">File Copy 256 bufsize 500 maxblocks            1655.0     478830.4   2893.2</span><br><span class=\"line\">File Copy 4096 bufsize 8000 maxblocks          5800.0    4568801.0   7877.2</span><br><span class=\"line\">Pipe Throughput                               12440.0    9157085.1   7361.0</span><br><span class=\"line\">Pipe-based Context Switching                   4000.0    1132991.1   2832.5</span><br><span class=\"line\">Process Creation                                126.0      44340.3   3519.1</span><br><span class=\"line\">Shell Scripts (1 concurrent)                     42.4      36537.4   8617.3</span><br><span class=\"line\">Shell Scripts (8 concurrent)                      6.0       4653.2   7755.3</span><br><span class=\"line\">System Call Overhead                          15000.0    8498217.7   5665.5</span><br><span class=\"line\">                                                                   ========</span><br><span class=\"line\">System Benchmarks Index Score                                        5874.3</span><br></pre></td></tr></table></figure>\n\n<p>测试项目</p>\n<p><img src=\"/home/wang/.config/Typora/typora-user-images/image-20240124153054135.png\" alt=\"image-20240124153054135\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Dhrystone测试：</span><br><span class=\"line\">\t测试聚焦在字符串处理，没有浮点运算操作。这个测试用于测试链接器编译、代码优化、内存缓存、等待状态、整数数据类型等。</span><br><span class=\"line\">Whetstone测试：</span><br><span class=\"line\">\t测试项目用于测试浮点运算效率和速度。含若干个科学计算的典型性能模块，包含大量的C语言函数,sin cos sqrt exp和日志以及使用整数和浮点的数学操作。包含数组访问、条件分支和过程调用。</span><br><span class=\"line\">Execl Throughput测试：</span><br><span class=\"line\">\t每秒钟可以执行的execl系统调用的次数。</span><br><span class=\"line\">File Copy测试：</span><br><span class=\"line\">\t这项测试衡量文件数据从一个文件被传输到另外一个，使用大量的缓存。包括文件的读、写、复制测试，测试指标是一定时间内（默认是10秒）被重写、读、复制的字符数量。</span><br><span class=\"line\">Pipe Throughput(管道吞吐)测试:</span><br><span class=\"line\">\t测试在一秒钟一个进程写512比特到一个管道中并且读回来的次数。管道吞吐测试和实际编程有差距。</span><br><span class=\"line\">Pipe-based Context Switching(基于管道的上下文交互)测试:</span><br><span class=\"line\">\t测试衡量两个进程通过管道交换和整数倍的增加吞吐的次数。基于管道的上下文切换和真实程序很类似。测试程序产生一个双向管道通讯的子线程。</span><br><span class=\"line\">Process Creation(进程创建)测试:</span><br><span class=\"line\">\t这项测试衡量一个进程能产生子线程并且立即退出的次数。新进程真的创建进程阻塞和内存占用，所以测试程序直接使用内存带宽。这项测试用于典型的比较大量的操作系统进程创建操作。</span><br><span class=\"line\">Shell Scripts测试:</span><br><span class=\"line\">\tshell脚本测试用于衡量在一分钟内，一个进程可以启动并停止shell脚本的次数，通常会测试1，2， 3， 4， 8 个shell脚本的共同拷贝，shell脚本是一套转化数据文件的脚本。</span><br><span class=\"line\">System Call Overhead （系统调用消耗）测试:</span><br><span class=\"line\">\t测试衡量进入和离开系统内核的消耗，例如，系统调用的消耗。程序简单重复的执行getpid调用（返回调用的进程id）。消耗的指标是调用进入和离开内核的执行时间。</span><br><span class=\"line\">Graphical Tests(图形)测试:</span><br><span class=\"line\">\t测试非常粗的2D和3D图形性能，尤其是3D测试非常有限。测试结果和硬件，系统合适的驱动关系很大。</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"fio\"><a href=\"#fio\" class=\"headerlink\" title=\"fio\"></a>fio</h4><p>fio主要用来测试硬盘io性能。这个工具的可定制性非常强，可以根据测试者的想法进行各种混合io测试，它支持13种不同类型io引擎（libaio、sync、mmap、posixaio、network等等）。它可以测试块设备或文件，可以通过多线程或进程模拟各种io操作，可以测试统计iops、带宽和时延等性能。我们主要使用fio工具进行存储性能测试。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fio -name=iouring_test -filename=/mnt/vdd/testfile -iodepth=128 -thread -rw=randread -ioengine=io_uring -sqthread_poll=1 -direct=1 -bs=4k -size=10G -numjobs=1 -runtime=120 -group_reporting</span><br></pre></td></tr></table></figure>\n\n<p>说明：<br>filename&#x3D;&#x2F;dev&#x2F;sdb1    测试文件名称，通常选择需要测试的盘的data目录。<br>direct&#x3D;1         测试过程绕过机器自带的buffer。使测试结果更真实。<br>bs&#x3D;4k          单次io的块文件大小为16k<br>size&#x3D;5g  本次的测试文件大小为5g，以每次4k的io进行测试。<br>numjobs&#x3D;1        本次的测试线程为30.<br>runtime&#x3D;120       测试时间为120秒，如果不写则一直将5g文件分4k每次写完为止。<br>ioengine&#x3D;io_uring      io引擎使用io_uring方式<br>group_reporting     关于显示结果的，汇总每个进程的信息。</p>\n<p>此外<br>rwmixwrite&#x3D;30      在混合读写的模式下，写占30%<br>lockmem&#x3D;1g        只使用1g内存进行测试。<br>zero_buffers       用0初始化系统buffer。<br>nrfiles&#x3D;8        每个进程生成文件的数量。<br>read 顺序读<br>write 顺序写<br>rw,readwrite 顺序混合读写<br>randwrite 随机写<br>randread 随机读<br>randrw 随机混合读写</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uring -sqthread_poll=1 -direct=1 -bs=4k -size=10G -numjobs=1 -runtime=120 -group_reporting</span><br><span class=\"line\">iouring_test: (g=0): rw=randread, bs=(R) 4096B-4096B, (W) 4096B-4096B, (T) 4096B-4096B, ioengine=io_uring, iodepth=128</span><br><span class=\"line\">fio-3.22</span><br><span class=\"line\">Starting 1 thread</span><br><span class=\"line\">Jobs: 1 (f=1): [r(1)][3.2%][eta 01h:01m:42s]                        </span><br><span class=\"line\">iouring_test: (groupid=0, jobs=1): err= 0: pid=63227: Wed Jan 24 15:55:58 2024</span><br><span class=\"line\">  read: IOPS=682, BW=2729KiB/s (2795kB/s)(330MiB/123713msec)  //读操作的iops(每秒输入输出量)和bw(带宽)</span><br><span class=\"line\">    clat (usec): min=506, max=11807k, avg=187540.47, stdev=846840.59</span><br><span class=\"line\">     lat (usec): min=507, max=11807k, avg=187541.31, stdev=846840.60</span><br><span class=\"line\">    clat percentiles (usec):</span><br><span class=\"line\">     |  1.00th=[    1188],  5.00th=[    5800], 10.00th=[    8160],</span><br><span class=\"line\">     | 20.00th=[   11469], 30.00th=[   15008], 40.00th=[   19792],</span><br><span class=\"line\">     | 50.00th=[   26084], 60.00th=[   36439], 70.00th=[   56361],</span><br><span class=\"line\">     | 80.00th=[  104334], 90.00th=[  238027], 95.00th=[  425722],</span><br><span class=\"line\">     | 99.00th=[ 5804917], 99.50th=[ 7214203], 99.90th=[ 8422163],</span><br><span class=\"line\">     | 99.95th=[ 8657044], 99.99th=[10804528]</span><br><span class=\"line\">   bw (  KiB/s): min= 1357, max= 5397, per=100.00%, avg=2806.35, stdev=636.20, samples=240</span><br><span class=\"line\">   iops        : min=  339, max= 1349, avg=701.40, stdev=159.08, samples=240</span><br><span class=\"line\">  lat (usec)   : 750=0.13%, 1000=0.50%</span><br><span class=\"line\">  lat (msec)   : 2=0.93%, 4=1.25%, 10=12.60%, 20=25.15%, 50=27.08%</span><br><span class=\"line\">  lat (msec)   : 100=11.79%, 250=11.16%, 500=5.21%, 750=1.25%, 1000=0.54%</span><br><span class=\"line\">  lat (msec)   : 2000=0.58%, &gt;=2000=1.83%</span><br><span class=\"line\">  cpu          : usr=99.85%, sys=0.08%, ctx=94, majf=0, minf=0</span><br><span class=\"line\">  IO depths    : 1=0.1%, 2=0.1%, 4=0.1%, 8=0.1%, 16=0.1%, 32=0.1%, &gt;=64=99.9%</span><br><span class=\"line\">     submit    : 0=0.0%, 4=0.0%, 8=0.0%, 16=0.0%, 32=0.0%, 64=0.0%, &gt;=64=0.0%</span><br><span class=\"line\">     complete  : 0=0.0%, 4=100.0%, 8=0.0%, 16=0.0%, 32=0.0%, 64=0.0%, &gt;=64=0.1%</span><br><span class=\"line\">     issued rwts: total=84415,0,0,0 short=0,0,0,0 dropped=0,0,0,0</span><br><span class=\"line\">     latency   : target=0, window=0, percentile=100.00%, depth=128</span><br><span class=\"line\"></span><br><span class=\"line\">Run status group 0 (all jobs):</span><br><span class=\"line\">   READ: bw=2729KiB/s (2795kB/s), 2729KiB/s-2729KiB/s (2795kB/s-2795kB/s), io=330MiB (346MB), run=123713-123713msec</span><br><span class=\"line\"></span><br><span class=\"line\">Disk stats (read/write):</span><br><span class=\"line\">    dm-0: ios=84415/17, merge=0/0, ticks=15416332/27284, in_queue=15443616, util=100.00%, aggrios=84414/15, aggrmerge=1/2, aggrticks=15402295/25881, aggrin_queue=15260184, aggrutil=100.00%</span><br><span class=\"line\">  vda: ios=84414/15, merge=1/2, ticks=15402295/25881, in_queue=15260184, util=100.00%</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"lmbench\"><a href=\"#lmbench\" class=\"headerlink\" title=\"lmbench\"></a>lmbench</h4><p><code>Lmbench</code> 是一款简易可以移植的内存测试工具，其主要功能有，带宽测评（读取缓存文件、拷贝内存、读&#x2F;写内存、管道、TCP），延时测评（上下文切换、网络、文件系统的建立和删除、进程创建、<a href=\"https://so.csdn.net/so/search?q=%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86&spm=1001.2101.3001.7020\">信号处理</a>、上层系统调用、内存读入反应时间）等功能。</p>\n<h4 id=\"Stream\"><a href=\"#Stream\" class=\"headerlink\" title=\"Stream\"></a>Stream</h4><p>Stream内存带宽性能测试基准工具。</p>\n<p>stream通过生成四种不同模式下的内存读写操作，用于测试内存带宽。</p>\n<p>Copy操作最为简单，它先访问一个内存单元读出其中的值，再将值写入到另一个内存单元。</p>\n<p>Scale操作先从内存单元读出其中的值，作一个乘法运算，再将结果写入到另一个内存单元。</p>\n<p>Add操作先从内存单元读出两个值，做加法运算， 再将结果写入到另一个内存单元。</p>\n<p>Triad的中文含义是将三个组合起来，在本测试中表示的意思是将Copy、Scale、Add三种操作组合起来进行测试。具体操作方式是：先从内存数组中读两个值a、b，对其进行乘加混合运算（a+因子* b），将运算结果写入到另一个内存单元。 </p>\n<h4 id=\"iozone\"><a href=\"#iozone\" class=\"headerlink\" title=\"iozone\"></a>iozone</h4><p>IOzone是文件系统性能测试工具。可以测试不同的操作系统中文件系统的读写性能。可以测试 Read, write, re-read,re-write, read backwards, read strided, fread, fwrite, random read, pread, mmap, aio_read, aio_write 等等不同的模式下的硬盘的性能。</p>\n<table>\n<thead>\n<tr>\n<th>Write</th>\n<th>测试向一个新文件写入的性能。当一个新文件被写入时，不仅仅是那些文件中的数据需要被存储，还包括那些用于定位数据存储在存储介质的具体位置的额外信息。这些额外信息被称作 “元数据”。它包括目录信息，所分配的空间和一些与该文件有关但又并非该文件所含数据的其他数据。拜这些额外信息所赐，Write 的性能通常会比 Re-write 的性能低。</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Re-write</td>\n<td>测试向一个已存在的文件写入的性能。当一个已存在的文件被写入时，所需工作量较少，因为此时元数据已经存在。Re-write 的性能通常比 Write 的性能高。</td>\n</tr>\n<tr>\n<td>Read</td>\n<td>测试读一个已存在的文件的性能。</td>\n</tr>\n<tr>\n<td>Re-Read</td>\n<td>测试读一个最近读过的文件的性能。Re-Read 性能会高些，因为操作系统通常会缓存最近读过的文件数据。这个缓存可以被用于读以提高性能。</td>\n</tr>\n<tr>\n<td>Random Read</td>\n<td>测试读一个文件中的随机偏移量的性能。许多因素可能影响这种情况下的系统性能，例如：操作系统缓存的大小，磁盘数量，寻道延迟和其他。</td>\n</tr>\n<tr>\n<td>Random Write</td>\n<td>测试写一个文件中的随机偏移量的性能。同样，许多因素可能影响这种情况下的系统性能，例如：操作系统缓存的大小，磁盘数量，寻道延迟和其他。</td>\n</tr>\n<tr>\n<td>Random Mix</td>\n<td>测试读写一个文件中的随机偏移量的性能。同样，许多因素可能影响这种情况下的系统性能，例如：操作系统缓存的大小，磁盘数量，寻道延迟和其他。这个测试只有在吞吐量测试模式下才能进行。每个线程 &#x2F; 进程运行读或写测试。这种分布式读 &#x2F; 写测试是基于 round robin 模式的。最好使用多于一个线程 &#x2F; 进程执行此测试。</td>\n</tr>\n<tr>\n<td>Backwards Read</td>\n<td>测试使用倒序读一个文件的性能。这种读文件方法可能看起来很可笑，事实上，有些应用确实这么干。MSC Nastran 是一个使用倒序读文件的应用程序的一个例子。它所读的文件都十分大（大小从 G 级别到 T 级别）。尽管许多操作系统使用一些特殊实现来优化顺序读文件的速度，很少有操作系统注意到并增强倒序读文件的性能。</td>\n</tr>\n<tr>\n<td>Record Rewrite</td>\n<td>测试写与覆盖写一个文件中的特定块的性能。这个块可能会发生一些很有趣的事。如果这个块足够小（比 CPU 数据缓存小），测出来的性能将会非常高。如果比 CPU 数据缓存大而比 TLB 小，测出来的是另一个阶段的性能。如果比此二者都大，但比操作系统缓存小，得到的性能又是一个阶段。若大到超过操作系统缓存，又是另一番结果。</td>\n</tr>\n<tr>\n<td>Strided Read</td>\n<td>测试跳跃读一个文件的性能。举例如下：在 0 偏移量处读 4Kbytes，然后间隔 200Kbytes, 读 4Kbytes，再间隔 200Kbytes，如此反复。此时的模式是读 4Kbytes，间隔 200Kbytes 并重复这个模式。这又是一个典型的应用行为，文件中使用了数据结构并且访问这个数据结构的特定区域的应用程序常常这样做。许多操作系统并没注意到这种行为或者针对这种类型的访问做一些优化。同样，这种访问行为也可能导致一些有趣的性能异常。一个例子是在一个数据片化的文件系统里，应用程序的跳跃导致某一个特定的磁盘成为性能瓶颈。</td>\n</tr>\n<tr>\n<td>Fwrite</td>\n<td>测试调用库函数 fwrite () 来写文件的性能。这是一个执行缓存与阻塞写操作的库例程。缓存在用户空间之内。如果一个应用程序想要写很小的传输块，fwrite () 函数中的缓存与阻塞 I&#x2F;O 功能能通过减少实际操作系统调用并在操作系统调用时增加传输块的大小来增强应用程序的性能。这个测试是写一个新文件，所以元数据的写入也是要的。</td>\n</tr>\n<tr>\n<td>Frewrite</td>\n<td>测试调用库函数 fwrite () 来写文件的性能。这是一个执行缓存与阻塞写操作的库例程。缓存在用户空间之内。如果一个应用程序想要写很小的传输块，fwrite () 函数中的缓存与阻塞 I&#x2F;O 功能能通过减少实际操作系统调用并在操作系统调用时增加传输块的大小来增强应用程序的性能。</td>\n</tr>\n</tbody></table>\n<h4 id=\"iperf3\"><a href=\"#iperf3\" class=\"headerlink\" title=\"iperf3\"></a>iperf3</h4><p>iperf3是基于Client&#x2F;Server的网络性能测试工具，通常用于测试网络上可达到的最大带宽，它能够测试TCP、UDP及SCTP的带宽质量，可以提供网络吞吐量、网络波动、网络丢包率以及最大传输单元大小等信息，能够帮助我们测试网络性能，定位网络瓶颈。</p>\n<h4 id=\"netperf\"><a href=\"#netperf\" class=\"headerlink\" title=\"netperf\"></a>netperf</h4><p>Netperf是一种网络性能的测量工具，可以测试基于TCP或UDP吞吐、响应速率。Netperf包括Clien和Server端，Server端主要用来实现监听工作，Client端进行测试。</p>\n<h4 id=\"ltp\"><a href=\"#ltp\" class=\"headerlink\" title=\"ltp\"></a>ltp</h4><p>LTP测试套件是测试Linux内核和内核相关特性的工具的集合。该工具的目的是通过把测试自动化引入到Linux内核测试，提高Linux的内核质量。通过功能测试、压力测试和回归测试来验证 Linux 系统的可靠性、稳定性和健壮性。整个项目约4000个测试用例。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"常用性能测试小工具集锦\"><a href=\"#常用性能测试小工具集锦\" class=\"headerlink\" title=\"常用性能测试小工具集锦\"></a>常用性能测试小工具集锦</h1><h2 id=\"性能测试\"><a href=\"#性能测试\" class=\"headerlink\" title=\"性能测试\"></a>性能测试</h2><p>​\t基于工作中做的性能测试，收纳整理出《常用性能测试小工具集锦》。主要从性能测试和工具集锦两个方面分享。</p>\n<h3 id=\"性能测试-1\"><a href=\"#性能测试-1\" class=\"headerlink\" title=\"性能测试\"></a>性能测试</h3><p>​\t\t性能测试是一种评估系统性能的方法，它可以检测系统的可扩展性、吞吐量、响应时间、负载能力、稳定性和安全性等指标。性能测试可以帮助开发人员、系统管理员和业务用户了解系统的实际运行情况，并找出可能存在的瓶颈和问题。</p>\n<h4 id=\"性能测试指标\"><a href=\"#性能测试指标\" class=\"headerlink\" title=\"性能测试指标\"></a>性能测试指标</h4><p>​\t\t衡量系统性能的评价标准。</p>\n<h5 id=\"系统性能测试指标\"><a href=\"#系统性能测试指标\" class=\"headerlink\" title=\"系统性能测试指标\"></a><strong>系统性能测试指标</strong></h5><p>​\t\t响应时间、系统处理能力，吞吐量，并发用户数，错误率等。</p>\n<h5 id=\"响应时间\"><a href=\"#响应时间\" class=\"headerlink\" title=\"响应时间\"></a>响应时间</h5><p>​\t\t简称RT，指的是客户发出请求到得到系统响应的整个过程的时间。也就是用户从客户端发起一个请求开始，到客户端接收到从服务器端返回的响应结束，整个过程所耗费的时间。</p>\n<h5 id=\"系统处理能力\"><a href=\"#系统处理能力\" class=\"headerlink\" title=\"系统处理能力\"></a>系统处理能力</h5><p>​\t\t系统在利用系统硬件平台和软件平台进行信息处理的能力。系统处理能力通过系统每秒钟能够处理的交易数量来评价。交易有两种理解：一是业务人员角度的一笔业务过程；二是系统角度的一次交易申请和响应过程。前者称为业务交易过程，后者称为事务。系统处理能力又用HPS(每秒点击次数)，TPS(系统每秒处理交易次数)，QPS(系统每秒处理查询次数)指标来度量。</p>\n<h5 id=\"吞吐量\"><a href=\"#吞吐量\" class=\"headerlink\" title=\"吞吐量\"></a>吞吐量</h5><p>​\t\t吞吐量是指系统在单位时间内处理请求的数量。尤其对于并发系统，通常需要用吞吐量作为性能指标。</p>\n<h5 id=\"并发用户数\"><a href=\"#并发用户数\" class=\"headerlink\" title=\"并发用户数\"></a>并发用户数</h5><p>​\t\t并发用户数指在同一时刻内，登录系统并进行业务操作的用户数量。</p>\n<h5 id=\"错误率\"><a href=\"#错误率\" class=\"headerlink\" title=\"错误率\"></a>错误率</h5><p>​\t\t简称FR，指系统在负载情况下，失败交易的概率。错误率＝(失败交易数&#x2F;交易总数)*100%。</p>\n<h4 id=\"资源性能指标\"><a href=\"#资源性能指标\" class=\"headerlink\" title=\"资源性能指标\"></a><strong>资源性能指标</strong></h4><p>CPU、内存、磁盘吞吐量、网络吞吐量等。</p>\n<h5 id=\"CPU\"><a href=\"#CPU\" class=\"headerlink\" title=\"CPU\"></a>CPU</h5><p>​\t\tCPU指标主要指的CPU利用率。单位时间内服务器CPU的使用统计，可以用除CPU空闲时间外其他时间占总CPU时间的百分比来表示。即：CPU使用率&#x3D;1-CPU空闲时间&#x2F;总CPU时间。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">字段说明：</span><br><span class=\"line\">us (user)：用户态的CPU使用时间比例，是用户运行程序的真正时间，它不包括后面的ni时间。</span><br><span class=\"line\">sy (system): 内核态的CPU使用时间比例，是操作系统的运行时间，操作系统运行时，用户运行程序往往处于等待状态。</span><br><span class=\"line\">ni (nice): 表示低优先级用户态的CPU时间比例，取值范围为[-20,19]，数值越大，则优先级越低。</span><br><span class=\"line\">id (idle): 表示空闲的CPU时间比例，值越大，CPU空闲时间比例越高，利用率越低。</span><br><span class=\"line\">wa (iowait): 表示处于IO等待状态的CPU时间比例。</span><br><span class=\"line\">hi (hard interrupt): 表示处理硬中断的CPU时间比例。硬中断，也叫异步中断。硬中断是由硬件设备依照CPU时钟信号产生的，即意味着中断发生具备随机性和突发性，可以在指令正在执行时发生。</span><br><span class=\"line\">si (soft interrupt): 与hi相反，表示处理软中断的CPU时间比例。软中断，也叫同步中断。软中断是由CPU执行中断产生指令时产生，是由程序预先实现好的，不是随机的。</span><br><span class=\"line\">st (steal): 表示当前系统运行在虚拟机中被其他虚拟机占用的CPU时间比例。这体现为物理 CPU 没有办法为当前系统服务，通常正在为另一个系统服务。 在虚拟机超卖比较严重的场景，这个数值非常明显。 这部分时间显然不是当前系统所用，而是被其他系统占用了。</span><br></pre></td></tr></table></figure>\n\n<p>​\t\t当us很高时，说明CPU时间主要消耗在用户代码上，可以从用户代码角度考虑优化性能；当sy很高时，说明CPU时间主要消耗在内核上，可以从是否系统调用频繁、CPU进程或线程切换频繁角度考虑性能的优化；当wa很高时，说明有进程在进行频繁的IO操作，可能是磁盘IO或者网络IO。一般情况下，如果%us+%sy&lt;&#x3D;70%，我们可以认为系统的运行状态良好。</p>\n<h5 id=\"内存\"><a href=\"#内存\" class=\"headerlink\" title=\"内存\"></a>内存</h5><p>​\t\ttotal(内存总量),free(空闲内存),used(已使用内存),buffer&#x2F;cache(缓存)。buffers与cached都是内存操作，用来保存系统曾经打开过的文件以及文件属性信息，这样当操作系统需要读取某些文件时，会优先从buffers与cached内存区查找，然后才从磁盘读取。通过缓存，能够大大提高了操作系统的性能。因此，对于linux系统来说，可用于分配的内存不止free的内存，同时还包括cached的内存（其实还包括buffers的内存）。cached和buffers都属于缓存，它们的区别主要在于cached主要用来缓冲频繁读取的文件，它可以直接记忆我们打开的文件内容；而buffers主要用来给块设备做的缓冲大小，只记录文件系统的元数据(metadata)以及缓存文件(tracking in-flight pages)信息，比如存储目录里面的内容，权限等。</p>\n<p>在性能测试中，经常会用到系统已用内存、物理已用内存、系统内存占用率以及物理内存占用率这几个指标，它们的计算公式如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">物理已用内存 = 实际已用内存 - 缓冲 - 缓存 </span><br><span class=\"line\">物理空闲内存 = 总物理内存 - 实际已用内存 + 缓冲 + 缓存 </span><br><span class=\"line\">应用程序可用空闲内存 = 总物理内存 - 实际已用内存 </span><br><span class=\"line\">应用程序已用内存 = 实际已用内存 - 缓冲 - 缓存</span><br><span class=\"line\">total = used + free + buffer/cache</span><br><span class=\"line\">avaiable = free + buffer/cache</span><br></pre></td></tr></table></figure>\n\n<p>​\t\t一般情况下，系统内存占用率&lt;&#x3D;70%，我们可以认为系统的内存使用情况良好，如果超出则说明系统内存资源紧张。</p>\n<h5 id=\"磁盘\"><a href=\"#磁盘\" class=\"headerlink\" title=\"磁盘\"></a>磁盘</h5><ul>\n<li>磁盘I&#x2F;O：I&#x2F;O，即input&#x2F;output，磁盘的输入输出，输入指的是对磁盘写入数据，输出指的是从磁盘读出数据，磁盘I&#x2F;O可以理解为读写。应用发起的一次或多次数据请求，I&#x2F;O请求的数据量又称I&#x2F;O大小，单位为KiB，例如4KiB、256KiB、1024KiB等；</li>\n<li>磁盘IOPS：磁盘IOPS是指一秒内磁盘进行多少次I&#x2F;O读写；</li>\n<li>磁盘吞吐量：每秒磁盘I&#x2F;O的流量，即磁盘写入加上读出的数据的大小。</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">I/O 读写的类型，大体上可以分为：</span><br><span class=\"line\">读 / 写 I/O：存数据时候对应的是写操作，取数据的时候对应的是是读操作。</span><br><span class=\"line\">大 / 小块 I/O：这个数值指的是控制器指令中给出的连续读出扇区数目的多少。</span><br><span class=\"line\">连续 / 随机 I/O：连续 I/O 指的是本次 I/O 给出的初始扇区地址和上一次 I/O 的结束扇区地址是完全连续或者相隔不多的。反之，如果相差很大，则算作一次随机 I/O。连续 I/O 比随机 I/O 效率高，因为在做连续 I/O 的时候，磁头几乎不用换道，或者换道的时间很短；而对于随机 I/O，如果这个 I/O 很多的话，会导致磁头不停地换道，造成效率的极大降低。</span><br><span class=\"line\">顺序 / 并发 I/O：从概念上讲，并发 I/O 就是指向一块磁盘发出一条 I/O 指令后，不必等待它回应，接着向另外一块磁盘发 I/O 指令。对于具有条带性的 RAID（LUN），对其进行的 I/O 操作是并发的，例如：raid 0+1(1+0),raid5 等。反之则为顺序 I/O。</span><br><span class=\"line\">吞吐量 = IOPS * I/O大小</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"网络\"><a href=\"#网络\" class=\"headerlink\" title=\"网络\"></a>网络</h5><p>​\t网络吞吐量是指在某个时刻，在网络中的两个节点之间，提给给网络应用的剩余带宽。 即在没有帧丢失的状况下，设备能够接受的最大速率。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">通常是以 4 个指标来衡量网络的性能，分别是带宽、延时、吞吐率、PPS（Packet Per Second），它们表示的意义如下</span><br><span class=\"line\">带宽，表示链路的最大传输速率，单位是 b/s （比特 / 秒），带宽越大，其传输能力就越强。</span><br><span class=\"line\">延时，表示请求数据包发送后，收到对端响应，所需要的时间延迟。不同的场景有着不同的含义，比如可以表示建立 TCP 连接所需的时间延迟，或一个数据包往返所需的时间延迟。</span><br><span class=\"line\">吞吐率，表示单位时间内成功传输的数据量，单位是 b/s（比特 / 秒）或者 B/s（字节 / 秒），吞吐受带宽限制，带宽越大，吞吐率的上限才可能越高。</span><br><span class=\"line\">PPS，全称是 Packet Per Second（包 / 秒），表示以网络包为单位的传输速率，一般用来评估系统对于网络的转发能力。</span><br><span class=\"line\">当然，除了以上这四种基本的指标，还有一些其他常用的性能指标，比如：</span><br><span class=\"line\"></span><br><span class=\"line\">网络的可用性，表示网络能否正常通信；</span><br><span class=\"line\">并发连接数，表示 TCP 连接数量；</span><br><span class=\"line\">丢包率，表示所丢失数据包数量占所发送数据组的比率；</span><br><span class=\"line\">重传率，表示重传网络包的比例；</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"工具集锦\"><a href=\"#工具集锦\" class=\"headerlink\" title=\"工具集锦\"></a>工具集锦</h2><h4 id=\"unixBench\"><a href=\"#unixBench\" class=\"headerlink\" title=\"unixBench\"></a>unixBench</h4><p>UnixBench的测试能力包含系统调用、读写、进程、2D、3D、管道、运算等系统基准性能，会对系统CPU、内存、磁盘、网络等各个方面进行一系列的测试。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./Run -c 1 -c 8 //表示执行两次，第一次单个copies,第二次8个copies的测试任务。</span><br></pre></td></tr></table></figure>\n\n<p>测试结果</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make all</span><br><span class=\"line\">make[1]: Entering directory &#x27;/path/to/test-tool/UnixBench5.1.3-1&#x27;</span><br><span class=\"line\">Checking distribution of files</span><br><span class=\"line\">./pgms  exists</span><br><span class=\"line\">./src  exists</span><br><span class=\"line\">./testdir  exists</span><br><span class=\"line\">./results  exists</span><br><span class=\"line\">make[1]: Leaving directory &#x27;/path/to/test-tool/UnixBench5.1.3-1&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">   #    #  #    #  #  #    #          #####   ######  #    #   ####   #    #</span><br><span class=\"line\">   #    #  ##   #  #   #  #           #    #  #       ##   #  #    #  #    #</span><br><span class=\"line\">   #    #  # #  #  #    ##            #####   #####   # #  #  #       ######</span><br><span class=\"line\">   #    #  #  # #  #    ##            #    #  #       #  # #  #       #    #</span><br><span class=\"line\">   #    #  #   ##  #   #  #           #    #  #       #   ##  #    #  #    #</span><br><span class=\"line\">    ####   #    #  #  #    #          #####   ######  #    #   ####   #    #</span><br><span class=\"line\"></span><br><span class=\"line\">   Version 5.1.3                      Based on the Byte Magazine Unix Benchmark</span><br><span class=\"line\"></span><br><span class=\"line\">   Multi-CPU version                  Version 5 revisions by Ian Smith,</span><br><span class=\"line\">                                      Sunnyvale, CA, USA</span><br><span class=\"line\">   January 13, 2011                   johantheghost at yahoo period com</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">1 x Dhrystone 2 using register variables  1 2 3 4 5 6 7 8 9 10</span><br><span class=\"line\"></span><br><span class=\"line\">1 x Double-Precision Whetstone  1 2 3 4 5 6 7 8 9 10</span><br><span class=\"line\"></span><br><span class=\"line\">1 x Execl Throughput  1 2 3</span><br><span class=\"line\"></span><br><span class=\"line\">1 x File Copy 1024 bufsize 2000 maxblocks  1 2 3</span><br><span class=\"line\"></span><br><span class=\"line\">1 x File Copy 256 bufsize 500 maxblocks  1 2 3</span><br><span class=\"line\"></span><br><span class=\"line\">1 x File Copy 4096 bufsize 8000 maxblocks  1 2 3</span><br><span class=\"line\"></span><br><span class=\"line\">1 x Pipe Throughput  1 2 3 4 5 6 7 8 9 10</span><br><span class=\"line\"></span><br><span class=\"line\">1 x Pipe-based Context Switching  1 2 3 4 5 6 7 8 9 10</span><br><span class=\"line\"></span><br><span class=\"line\">1 x Process Creation  1 2 3</span><br><span class=\"line\"></span><br><span class=\"line\">1 x System Call Overhead  1 2 3 4 5 6 7 8 9 10</span><br><span class=\"line\"></span><br><span class=\"line\">1 x Shell Scripts (1 concurrent)  1 2 3</span><br><span class=\"line\"></span><br><span class=\"line\">1 x Shell Scripts (8 concurrent)  1 2 3</span><br><span class=\"line\"></span><br><span class=\"line\">8 x Dhrystone 2 using register variables  1 2 3 4 5 6 7 8 9 10</span><br><span class=\"line\"></span><br><span class=\"line\">8 x Double-Precision Whetstone  1 2 3 4 5 6 7 8 9 10</span><br><span class=\"line\"></span><br><span class=\"line\">8 x Execl Throughput  1 2 3</span><br><span class=\"line\"></span><br><span class=\"line\">8 x File Copy 1024 bufsize 2000 maxblocks  1 2 3</span><br><span class=\"line\"></span><br><span class=\"line\">8 x File Copy 256 bufsize 500 maxblocks  1 2 3</span><br><span class=\"line\"></span><br><span class=\"line\">8 x File Copy 4096 bufsize 8000 maxblocks  1 2 3</span><br><span class=\"line\"></span><br><span class=\"line\">8 x Pipe Throughput  1 2 3 4 5 6 7 8 9 10</span><br><span class=\"line\"></span><br><span class=\"line\">8 x Pipe-based Context Switching  1 2 3 4 5 6 7 8 9 10</span><br><span class=\"line\"></span><br><span class=\"line\">8 x Process Creation  1 2 3</span><br><span class=\"line\"></span><br><span class=\"line\">8 x System Call Overhead  1 2 3 4 5 6 7 8 9 10</span><br><span class=\"line\"></span><br><span class=\"line\">8 x Shell Scripts (1 concurrent)  1 2 3</span><br><span class=\"line\"></span><br><span class=\"line\">8 x Shell Scripts (8 concurrent)  1 2 3</span><br><span class=\"line\"></span><br><span class=\"line\">========================================================================</span><br><span class=\"line\">   BYTE UNIX Benchmarks (Version 5.1.3)</span><br><span class=\"line\"></span><br><span class=\"line\">   System: wang-PC: GNU/Linux</span><br><span class=\"line\">   OS: GNU/Linux -- 5.15.77-amd64-desktop -- #2 SMP Thu Jun 15 16:06:18 CST 2023</span><br><span class=\"line\">   Machine: x86_64 (unknown)</span><br><span class=\"line\">   Language: en_US.utf8 (charmap=&quot;UTF-8&quot;, collate=&quot;UTF-8&quot;)</span><br><span class=\"line\">   CPU 0: Intel(R) Core(TM) i5-10210U CPU @ 1.60GHz (4199.9 bogomips)</span><br><span class=\"line\">          Hyper-Threading, x86-64, MMX, Physical Address Ext, SYSENTER/SYSEXIT, SYSCALL/SYSRET, Intel virtualization</span><br><span class=\"line\">   CPU 1: Intel(R) Core(TM) i5-10210U CPU @ 1.60GHz (4199.9 bogomips)</span><br><span class=\"line\">          Hyper-Threading, x86-64, MMX, Physical Address Ext, SYSENTER/SYSEXIT, SYSCALL/SYSRET, Intel virtualization</span><br><span class=\"line\">   CPU 2: Intel(R) Core(TM) i5-10210U CPU @ 1.60GHz (4199.9 bogomips)</span><br><span class=\"line\">          Hyper-Threading, x86-64, MMX, Physical Address Ext, SYSENTER/SYSEXIT, SYSCALL/SYSRET, Intel virtualization</span><br><span class=\"line\">   CPU 3: Intel(R) Core(TM) i5-10210U CPU @ 1.60GHz (4199.9 bogomips)</span><br><span class=\"line\">          Hyper-Threading, x86-64, MMX, Physical Address Ext, SYSENTER/SYSEXIT, SYSCALL/SYSRET, Intel virtualization</span><br><span class=\"line\">   CPU 4: Intel(R) Core(TM) i5-10210U CPU @ 1.60GHz (4199.9 bogomips)</span><br><span class=\"line\">          Hyper-Threading, x86-64, MMX, Physical Address Ext, SYSENTER/SYSEXIT, SYSCALL/SYSRET, Intel virtualization</span><br><span class=\"line\">   CPU 5: Intel(R) Core(TM) i5-10210U CPU @ 1.60GHz (4199.9 bogomips)</span><br><span class=\"line\">          Hyper-Threading, x86-64, MMX, Physical Address Ext, SYSENTER/SYSEXIT, SYSCALL/SYSRET, Intel virtualization</span><br><span class=\"line\">   CPU 6: Intel(R) Core(TM) i5-10210U CPU @ 1.60GHz (4199.9 bogomips)</span><br><span class=\"line\">          Hyper-Threading, x86-64, MMX, Physical Address Ext, SYSENTER/SYSEXIT, SYSCALL/SYSRET, Intel virtualization</span><br><span class=\"line\">   CPU 7: Intel(R) Core(TM) i5-10210U CPU @ 1.60GHz (4199.9 bogomips)</span><br><span class=\"line\">          Hyper-Threading, x86-64, MMX, Physical Address Ext, SYSENTER/SYSEXIT, SYSCALL/SYSRET, Intel virtualization</span><br><span class=\"line\">   14:50:41 up 11 days, 23:45,  1 user,  load average: 0.95, 1.32, 7.18; runlevel 5</span><br><span class=\"line\"></span><br><span class=\"line\">------------------------------------------------------------------------</span><br><span class=\"line\">Benchmark Run: Wed Jan 24 2024 14:50:41 - 15:18:32</span><br><span class=\"line\">8 CPUs in system; running 1 parallel copy of tests</span><br><span class=\"line\"></span><br><span class=\"line\">Dhrystone 2 using register variables       47877041.4 lps   (10.0 s, 7 samples)</span><br><span class=\"line\">Double-Precision Whetstone                     7784.4 MWIPS (9.0 s, 7 samples)</span><br><span class=\"line\">Execl Throughput                               5666.5 lps   (30.0 s, 2 samples)</span><br><span class=\"line\">File Copy 1024 bufsize 2000 maxblocks       1493924.1 KBps  (30.0 s, 2 samples)</span><br><span class=\"line\">File Copy 256 bufsize 500 maxblocks          426805.3 KBps  (30.0 s, 2 samples)</span><br><span class=\"line\">File Copy 4096 bufsize 8000 maxblocks       3119870.2 KBps  (30.0 s, 2 samples)</span><br><span class=\"line\">Pipe Throughput                             2577750.5 lps   (10.0 s, 7 samples)</span><br><span class=\"line\">Pipe-based Context Switching                 296557.3 lps   (10.0 s, 7 samples)</span><br><span class=\"line\">Process Creation                              13157.5 lps   (30.0 s, 2 samples)</span><br><span class=\"line\">Shell Scripts (1 concurrent)                  14761.5 lpm   (60.0 s, 2 samples)</span><br><span class=\"line\">Shell Scripts (8 concurrent)                   4321.8 lpm   (60.0 s, 2 samples)</span><br><span class=\"line\">System Call Overhead                        2784511.9 lps   (10.0 s, 7 samples)</span><br><span class=\"line\"></span><br><span class=\"line\">System Benchmarks Index Values               BASELINE       RESULT    INDEX</span><br><span class=\"line\">Dhrystone 2 using register variables         116700.0   47877041.4   4102.6</span><br><span class=\"line\">Double-Precision Whetstone                       55.0       7784.4   1415.3</span><br><span class=\"line\">Execl Throughput                                 43.0       5666.5   1317.8</span><br><span class=\"line\">File Copy 1024 bufsize 2000 maxblocks          3960.0    1493924.1   3772.5</span><br><span class=\"line\">File Copy 256 bufsize 500 maxblocks            1655.0     426805.3   2578.9</span><br><span class=\"line\">File Copy 4096 bufsize 8000 maxblocks          5800.0    3119870.2   5379.1</span><br><span class=\"line\">Pipe Throughput                               12440.0    2577750.5   2072.1</span><br><span class=\"line\">Pipe-based Context Switching                   4000.0     296557.3    741.4</span><br><span class=\"line\">Process Creation                                126.0      13157.5   1044.2</span><br><span class=\"line\">Shell Scripts (1 concurrent)                     42.4      14761.5   3481.5</span><br><span class=\"line\">Shell Scripts (8 concurrent)                      6.0       4321.8   7203.0</span><br><span class=\"line\">System Call Overhead                          15000.0    2784511.9   1856.3</span><br><span class=\"line\">                                                                   ========</span><br><span class=\"line\">System Benchmarks Index Score                                        2360.4</span><br><span class=\"line\"></span><br><span class=\"line\">------------------------------------------------------------------------</span><br><span class=\"line\">Benchmark Run: Wed Jan 24 2024 15:18:32 - 15:46:49</span><br><span class=\"line\">8 CPUs in system; running 8 parallel copies of tests</span><br><span class=\"line\"></span><br><span class=\"line\">Dhrystone 2 using register variables      176274670.8 lps   (10.0 s, 7 samples)</span><br><span class=\"line\">Double-Precision Whetstone                    46994.6 MWIPS (9.4 s, 7 samples)</span><br><span class=\"line\">Execl Throughput                              20151.0 lps   (30.0 s, 2 samples)</span><br><span class=\"line\">File Copy 1024 bufsize 2000 maxblocks       1745833.5 KBps  (30.0 s, 2 samples)</span><br><span class=\"line\">File Copy 256 bufsize 500 maxblocks          478830.4 KBps  (30.0 s, 2 samples)</span><br><span class=\"line\">File Copy 4096 bufsize 8000 maxblocks       4568801.0 KBps  (30.0 s, 2 samples)</span><br><span class=\"line\">Pipe Throughput                             9157085.1 lps   (10.0 s, 7 samples)</span><br><span class=\"line\">Pipe-based Context Switching                1132991.1 lps   (10.0 s, 7 samples)</span><br><span class=\"line\">Process Creation                              44340.3 lps   (30.0 s, 2 samples)</span><br><span class=\"line\">Shell Scripts (1 concurrent)                  36537.4 lpm   (60.0 s, 2 samples)</span><br><span class=\"line\">Shell Scripts (8 concurrent)                   4653.2 lpm   (60.1 s, 2 samples)</span><br><span class=\"line\">System Call Overhead                        8498217.7 lps   (10.0 s, 7 samples)</span><br><span class=\"line\"></span><br><span class=\"line\">System Benchmarks Index Values               BASELINE       RESULT    INDEX</span><br><span class=\"line\">Dhrystone 2 using register variables         116700.0  176274670.8  15104.9</span><br><span class=\"line\">Double-Precision Whetstone                       55.0      46994.6   8544.5</span><br><span class=\"line\">Execl Throughput                                 43.0      20151.0   4686.3</span><br><span class=\"line\">File Copy 1024 bufsize 2000 maxblocks          3960.0    1745833.5   4408.7</span><br><span class=\"line\">File Copy 256 bufsize 500 maxblocks            1655.0     478830.4   2893.2</span><br><span class=\"line\">File Copy 4096 bufsize 8000 maxblocks          5800.0    4568801.0   7877.2</span><br><span class=\"line\">Pipe Throughput                               12440.0    9157085.1   7361.0</span><br><span class=\"line\">Pipe-based Context Switching                   4000.0    1132991.1   2832.5</span><br><span class=\"line\">Process Creation                                126.0      44340.3   3519.1</span><br><span class=\"line\">Shell Scripts (1 concurrent)                     42.4      36537.4   8617.3</span><br><span class=\"line\">Shell Scripts (8 concurrent)                      6.0       4653.2   7755.3</span><br><span class=\"line\">System Call Overhead                          15000.0    8498217.7   5665.5</span><br><span class=\"line\">                                                                   ========</span><br><span class=\"line\">System Benchmarks Index Score                                        5874.3</span><br></pre></td></tr></table></figure>\n\n<p>测试项目</p>\n<p><img src=\"/home/wang/.config/Typora/typora-user-images/image-20240124153054135.png\" alt=\"image-20240124153054135\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Dhrystone测试：</span><br><span class=\"line\">\t测试聚焦在字符串处理，没有浮点运算操作。这个测试用于测试链接器编译、代码优化、内存缓存、等待状态、整数数据类型等。</span><br><span class=\"line\">Whetstone测试：</span><br><span class=\"line\">\t测试项目用于测试浮点运算效率和速度。含若干个科学计算的典型性能模块，包含大量的C语言函数,sin cos sqrt exp和日志以及使用整数和浮点的数学操作。包含数组访问、条件分支和过程调用。</span><br><span class=\"line\">Execl Throughput测试：</span><br><span class=\"line\">\t每秒钟可以执行的execl系统调用的次数。</span><br><span class=\"line\">File Copy测试：</span><br><span class=\"line\">\t这项测试衡量文件数据从一个文件被传输到另外一个，使用大量的缓存。包括文件的读、写、复制测试，测试指标是一定时间内（默认是10秒）被重写、读、复制的字符数量。</span><br><span class=\"line\">Pipe Throughput(管道吞吐)测试:</span><br><span class=\"line\">\t测试在一秒钟一个进程写512比特到一个管道中并且读回来的次数。管道吞吐测试和实际编程有差距。</span><br><span class=\"line\">Pipe-based Context Switching(基于管道的上下文交互)测试:</span><br><span class=\"line\">\t测试衡量两个进程通过管道交换和整数倍的增加吞吐的次数。基于管道的上下文切换和真实程序很类似。测试程序产生一个双向管道通讯的子线程。</span><br><span class=\"line\">Process Creation(进程创建)测试:</span><br><span class=\"line\">\t这项测试衡量一个进程能产生子线程并且立即退出的次数。新进程真的创建进程阻塞和内存占用，所以测试程序直接使用内存带宽。这项测试用于典型的比较大量的操作系统进程创建操作。</span><br><span class=\"line\">Shell Scripts测试:</span><br><span class=\"line\">\tshell脚本测试用于衡量在一分钟内，一个进程可以启动并停止shell脚本的次数，通常会测试1，2， 3， 4， 8 个shell脚本的共同拷贝，shell脚本是一套转化数据文件的脚本。</span><br><span class=\"line\">System Call Overhead （系统调用消耗）测试:</span><br><span class=\"line\">\t测试衡量进入和离开系统内核的消耗，例如，系统调用的消耗。程序简单重复的执行getpid调用（返回调用的进程id）。消耗的指标是调用进入和离开内核的执行时间。</span><br><span class=\"line\">Graphical Tests(图形)测试:</span><br><span class=\"line\">\t测试非常粗的2D和3D图形性能，尤其是3D测试非常有限。测试结果和硬件，系统合适的驱动关系很大。</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"fio\"><a href=\"#fio\" class=\"headerlink\" title=\"fio\"></a>fio</h4><p>fio主要用来测试硬盘io性能。这个工具的可定制性非常强，可以根据测试者的想法进行各种混合io测试，它支持13种不同类型io引擎（libaio、sync、mmap、posixaio、network等等）。它可以测试块设备或文件，可以通过多线程或进程模拟各种io操作，可以测试统计iops、带宽和时延等性能。我们主要使用fio工具进行存储性能测试。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fio -name=iouring_test -filename=/mnt/vdd/testfile -iodepth=128 -thread -rw=randread -ioengine=io_uring -sqthread_poll=1 -direct=1 -bs=4k -size=10G -numjobs=1 -runtime=120 -group_reporting</span><br></pre></td></tr></table></figure>\n\n<p>说明：<br>filename&#x3D;&#x2F;dev&#x2F;sdb1    测试文件名称，通常选择需要测试的盘的data目录。<br>direct&#x3D;1         测试过程绕过机器自带的buffer。使测试结果更真实。<br>bs&#x3D;4k          单次io的块文件大小为16k<br>size&#x3D;5g  本次的测试文件大小为5g，以每次4k的io进行测试。<br>numjobs&#x3D;1        本次的测试线程为30.<br>runtime&#x3D;120       测试时间为120秒，如果不写则一直将5g文件分4k每次写完为止。<br>ioengine&#x3D;io_uring      io引擎使用io_uring方式<br>group_reporting     关于显示结果的，汇总每个进程的信息。</p>\n<p>此外<br>rwmixwrite&#x3D;30      在混合读写的模式下，写占30%<br>lockmem&#x3D;1g        只使用1g内存进行测试。<br>zero_buffers       用0初始化系统buffer。<br>nrfiles&#x3D;8        每个进程生成文件的数量。<br>read 顺序读<br>write 顺序写<br>rw,readwrite 顺序混合读写<br>randwrite 随机写<br>randread 随机读<br>randrw 随机混合读写</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uring -sqthread_poll=1 -direct=1 -bs=4k -size=10G -numjobs=1 -runtime=120 -group_reporting</span><br><span class=\"line\">iouring_test: (g=0): rw=randread, bs=(R) 4096B-4096B, (W) 4096B-4096B, (T) 4096B-4096B, ioengine=io_uring, iodepth=128</span><br><span class=\"line\">fio-3.22</span><br><span class=\"line\">Starting 1 thread</span><br><span class=\"line\">Jobs: 1 (f=1): [r(1)][3.2%][eta 01h:01m:42s]                        </span><br><span class=\"line\">iouring_test: (groupid=0, jobs=1): err= 0: pid=63227: Wed Jan 24 15:55:58 2024</span><br><span class=\"line\">  read: IOPS=682, BW=2729KiB/s (2795kB/s)(330MiB/123713msec)  //读操作的iops(每秒输入输出量)和bw(带宽)</span><br><span class=\"line\">    clat (usec): min=506, max=11807k, avg=187540.47, stdev=846840.59</span><br><span class=\"line\">     lat (usec): min=507, max=11807k, avg=187541.31, stdev=846840.60</span><br><span class=\"line\">    clat percentiles (usec):</span><br><span class=\"line\">     |  1.00th=[    1188],  5.00th=[    5800], 10.00th=[    8160],</span><br><span class=\"line\">     | 20.00th=[   11469], 30.00th=[   15008], 40.00th=[   19792],</span><br><span class=\"line\">     | 50.00th=[   26084], 60.00th=[   36439], 70.00th=[   56361],</span><br><span class=\"line\">     | 80.00th=[  104334], 90.00th=[  238027], 95.00th=[  425722],</span><br><span class=\"line\">     | 99.00th=[ 5804917], 99.50th=[ 7214203], 99.90th=[ 8422163],</span><br><span class=\"line\">     | 99.95th=[ 8657044], 99.99th=[10804528]</span><br><span class=\"line\">   bw (  KiB/s): min= 1357, max= 5397, per=100.00%, avg=2806.35, stdev=636.20, samples=240</span><br><span class=\"line\">   iops        : min=  339, max= 1349, avg=701.40, stdev=159.08, samples=240</span><br><span class=\"line\">  lat (usec)   : 750=0.13%, 1000=0.50%</span><br><span class=\"line\">  lat (msec)   : 2=0.93%, 4=1.25%, 10=12.60%, 20=25.15%, 50=27.08%</span><br><span class=\"line\">  lat (msec)   : 100=11.79%, 250=11.16%, 500=5.21%, 750=1.25%, 1000=0.54%</span><br><span class=\"line\">  lat (msec)   : 2000=0.58%, &gt;=2000=1.83%</span><br><span class=\"line\">  cpu          : usr=99.85%, sys=0.08%, ctx=94, majf=0, minf=0</span><br><span class=\"line\">  IO depths    : 1=0.1%, 2=0.1%, 4=0.1%, 8=0.1%, 16=0.1%, 32=0.1%, &gt;=64=99.9%</span><br><span class=\"line\">     submit    : 0=0.0%, 4=0.0%, 8=0.0%, 16=0.0%, 32=0.0%, 64=0.0%, &gt;=64=0.0%</span><br><span class=\"line\">     complete  : 0=0.0%, 4=100.0%, 8=0.0%, 16=0.0%, 32=0.0%, 64=0.0%, &gt;=64=0.1%</span><br><span class=\"line\">     issued rwts: total=84415,0,0,0 short=0,0,0,0 dropped=0,0,0,0</span><br><span class=\"line\">     latency   : target=0, window=0, percentile=100.00%, depth=128</span><br><span class=\"line\"></span><br><span class=\"line\">Run status group 0 (all jobs):</span><br><span class=\"line\">   READ: bw=2729KiB/s (2795kB/s), 2729KiB/s-2729KiB/s (2795kB/s-2795kB/s), io=330MiB (346MB), run=123713-123713msec</span><br><span class=\"line\"></span><br><span class=\"line\">Disk stats (read/write):</span><br><span class=\"line\">    dm-0: ios=84415/17, merge=0/0, ticks=15416332/27284, in_queue=15443616, util=100.00%, aggrios=84414/15, aggrmerge=1/2, aggrticks=15402295/25881, aggrin_queue=15260184, aggrutil=100.00%</span><br><span class=\"line\">  vda: ios=84414/15, merge=1/2, ticks=15402295/25881, in_queue=15260184, util=100.00%</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"lmbench\"><a href=\"#lmbench\" class=\"headerlink\" title=\"lmbench\"></a>lmbench</h4><p><code>Lmbench</code> 是一款简易可以移植的内存测试工具，其主要功能有，带宽测评（读取缓存文件、拷贝内存、读&#x2F;写内存、管道、TCP），延时测评（上下文切换、网络、文件系统的建立和删除、进程创建、<a href=\"https://so.csdn.net/so/search?q=%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86&spm=1001.2101.3001.7020\">信号处理</a>、上层系统调用、内存读入反应时间）等功能。</p>\n<h4 id=\"Stream\"><a href=\"#Stream\" class=\"headerlink\" title=\"Stream\"></a>Stream</h4><p>Stream内存带宽性能测试基准工具。</p>\n<p>stream通过生成四种不同模式下的内存读写操作，用于测试内存带宽。</p>\n<p>Copy操作最为简单，它先访问一个内存单元读出其中的值，再将值写入到另一个内存单元。</p>\n<p>Scale操作先从内存单元读出其中的值，作一个乘法运算，再将结果写入到另一个内存单元。</p>\n<p>Add操作先从内存单元读出两个值，做加法运算， 再将结果写入到另一个内存单元。</p>\n<p>Triad的中文含义是将三个组合起来，在本测试中表示的意思是将Copy、Scale、Add三种操作组合起来进行测试。具体操作方式是：先从内存数组中读两个值a、b，对其进行乘加混合运算（a+因子* b），将运算结果写入到另一个内存单元。 </p>\n<h4 id=\"iozone\"><a href=\"#iozone\" class=\"headerlink\" title=\"iozone\"></a>iozone</h4><p>IOzone是文件系统性能测试工具。可以测试不同的操作系统中文件系统的读写性能。可以测试 Read, write, re-read,re-write, read backwards, read strided, fread, fwrite, random read, pread, mmap, aio_read, aio_write 等等不同的模式下的硬盘的性能。</p>\n<table>\n<thead>\n<tr>\n<th>Write</th>\n<th>测试向一个新文件写入的性能。当一个新文件被写入时，不仅仅是那些文件中的数据需要被存储，还包括那些用于定位数据存储在存储介质的具体位置的额外信息。这些额外信息被称作 “元数据”。它包括目录信息，所分配的空间和一些与该文件有关但又并非该文件所含数据的其他数据。拜这些额外信息所赐，Write 的性能通常会比 Re-write 的性能低。</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Re-write</td>\n<td>测试向一个已存在的文件写入的性能。当一个已存在的文件被写入时，所需工作量较少，因为此时元数据已经存在。Re-write 的性能通常比 Write 的性能高。</td>\n</tr>\n<tr>\n<td>Read</td>\n<td>测试读一个已存在的文件的性能。</td>\n</tr>\n<tr>\n<td>Re-Read</td>\n<td>测试读一个最近读过的文件的性能。Re-Read 性能会高些，因为操作系统通常会缓存最近读过的文件数据。这个缓存可以被用于读以提高性能。</td>\n</tr>\n<tr>\n<td>Random Read</td>\n<td>测试读一个文件中的随机偏移量的性能。许多因素可能影响这种情况下的系统性能，例如：操作系统缓存的大小，磁盘数量，寻道延迟和其他。</td>\n</tr>\n<tr>\n<td>Random Write</td>\n<td>测试写一个文件中的随机偏移量的性能。同样，许多因素可能影响这种情况下的系统性能，例如：操作系统缓存的大小，磁盘数量，寻道延迟和其他。</td>\n</tr>\n<tr>\n<td>Random Mix</td>\n<td>测试读写一个文件中的随机偏移量的性能。同样，许多因素可能影响这种情况下的系统性能，例如：操作系统缓存的大小，磁盘数量，寻道延迟和其他。这个测试只有在吞吐量测试模式下才能进行。每个线程 &#x2F; 进程运行读或写测试。这种分布式读 &#x2F; 写测试是基于 round robin 模式的。最好使用多于一个线程 &#x2F; 进程执行此测试。</td>\n</tr>\n<tr>\n<td>Backwards Read</td>\n<td>测试使用倒序读一个文件的性能。这种读文件方法可能看起来很可笑，事实上，有些应用确实这么干。MSC Nastran 是一个使用倒序读文件的应用程序的一个例子。它所读的文件都十分大（大小从 G 级别到 T 级别）。尽管许多操作系统使用一些特殊实现来优化顺序读文件的速度，很少有操作系统注意到并增强倒序读文件的性能。</td>\n</tr>\n<tr>\n<td>Record Rewrite</td>\n<td>测试写与覆盖写一个文件中的特定块的性能。这个块可能会发生一些很有趣的事。如果这个块足够小（比 CPU 数据缓存小），测出来的性能将会非常高。如果比 CPU 数据缓存大而比 TLB 小，测出来的是另一个阶段的性能。如果比此二者都大，但比操作系统缓存小，得到的性能又是一个阶段。若大到超过操作系统缓存，又是另一番结果。</td>\n</tr>\n<tr>\n<td>Strided Read</td>\n<td>测试跳跃读一个文件的性能。举例如下：在 0 偏移量处读 4Kbytes，然后间隔 200Kbytes, 读 4Kbytes，再间隔 200Kbytes，如此反复。此时的模式是读 4Kbytes，间隔 200Kbytes 并重复这个模式。这又是一个典型的应用行为，文件中使用了数据结构并且访问这个数据结构的特定区域的应用程序常常这样做。许多操作系统并没注意到这种行为或者针对这种类型的访问做一些优化。同样，这种访问行为也可能导致一些有趣的性能异常。一个例子是在一个数据片化的文件系统里，应用程序的跳跃导致某一个特定的磁盘成为性能瓶颈。</td>\n</tr>\n<tr>\n<td>Fwrite</td>\n<td>测试调用库函数 fwrite () 来写文件的性能。这是一个执行缓存与阻塞写操作的库例程。缓存在用户空间之内。如果一个应用程序想要写很小的传输块，fwrite () 函数中的缓存与阻塞 I&#x2F;O 功能能通过减少实际操作系统调用并在操作系统调用时增加传输块的大小来增强应用程序的性能。这个测试是写一个新文件，所以元数据的写入也是要的。</td>\n</tr>\n<tr>\n<td>Frewrite</td>\n<td>测试调用库函数 fwrite () 来写文件的性能。这是一个执行缓存与阻塞写操作的库例程。缓存在用户空间之内。如果一个应用程序想要写很小的传输块，fwrite () 函数中的缓存与阻塞 I&#x2F;O 功能能通过减少实际操作系统调用并在操作系统调用时增加传输块的大小来增强应用程序的性能。</td>\n</tr>\n</tbody></table>\n<h4 id=\"iperf3\"><a href=\"#iperf3\" class=\"headerlink\" title=\"iperf3\"></a>iperf3</h4><p>iperf3是基于Client&#x2F;Server的网络性能测试工具，通常用于测试网络上可达到的最大带宽，它能够测试TCP、UDP及SCTP的带宽质量，可以提供网络吞吐量、网络波动、网络丢包率以及最大传输单元大小等信息，能够帮助我们测试网络性能，定位网络瓶颈。</p>\n<h4 id=\"netperf\"><a href=\"#netperf\" class=\"headerlink\" title=\"netperf\"></a>netperf</h4><p>Netperf是一种网络性能的测量工具，可以测试基于TCP或UDP吞吐、响应速率。Netperf包括Clien和Server端，Server端主要用来实现监听工作，Client端进行测试。</p>\n<h4 id=\"ltp\"><a href=\"#ltp\" class=\"headerlink\" title=\"ltp\"></a>ltp</h4><p>LTP测试套件是测试Linux内核和内核相关特性的工具的集合。该工具的目的是通过把测试自动化引入到Linux内核测试，提高Linux的内核质量。通过功能测试、压力测试和回归测试来验证 Linux 系统的可靠性、稳定性和健壮性。整个项目约4000个测试用例。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"clt6vkpha0003evig4akh1u83","category_id":"clt6vkphc0005evig8maw1azb","_id":"clt6vkphq000uevig41kf3xad"},{"post_id":"clt6vkpha0003evig4akh1u83","category_id":"clt6vkphm000kevig7rim7bxz","_id":"clt6vkphs000yevig7k6a656k"},{"post_id":"clt6vkphb0004evigd8lj9xmo","category_id":"clt6vkphg000aevigd7vna27a","_id":"clt6vkphv001bevig6q64ati0"},{"post_id":"clt6vkphb0004evigd8lj9xmo","category_id":"clt6vkpho000qevig73juf3u6","_id":"clt6vkphw001feviggdnraxxy"},{"post_id":"clt6vkphk000gevig8p1lcy6g","category_id":"clt6vkphk000eevigf8ued8e3","_id":"clt6vkphx001kevigd3ztaobq"},{"post_id":"clt6vkphk000gevig8p1lcy6g","category_id":"clt6vkphv001aevigcsfrbjqd","_id":"clt6vkphy001oevig4egy8gmi"},{"post_id":"clt6vkphp000tevigarxs6id2","category_id":"clt6vkphk000eevigf8ued8e3","_id":"clt6vkpi2002devig4sqe0o58"},{"post_id":"clt6vkphp000tevigarxs6id2","category_id":"clt6vkphv001aevigcsfrbjqd","_id":"clt6vkpi3002gevigbkxnbnmc"},{"post_id":"clt6vkphu0019evig6m7m47xa","category_id":"clt6vkphk000eevigf8ued8e3","_id":"clt6vkpi4002revigdy3q19hb"},{"post_id":"clt6vkphu0019evig6m7m47xa","category_id":"clt6vkpi3002kevighyokamlh","_id":"clt6vkpi4002tevigdv8b2mzt"},{"post_id":"clt6vkphl000ieviga59j9x5g","category_id":"clt6vkphk000eevigf8ued8e3","_id":"clt6vkpi5002zevigb5yjbczq"},{"post_id":"clt6vkphl000ieviga59j9x5g","category_id":"clt6vkphx001mevig540w7pyv","_id":"clt6vkpi50032evig94ea6dl3"},{"post_id":"clt6vkphl000ieviga59j9x5g","category_id":"clt6vkpi4002qevig0jj2f4b8","_id":"clt6vkpi50034evigbz6k43zi"},{"post_id":"clt6vkphq000vevigav77f7xp","category_id":"clt6vkphk000eevigf8ued8e3","_id":"clt6vkpi6003cevig7y5k445w"},{"post_id":"clt6vkphq000vevigav77f7xp","category_id":"clt6vkphx001mevig540w7pyv","_id":"clt6vkpi6003devig55i5c0i6"},{"post_id":"clt6vkphq000vevigav77f7xp","category_id":"clt6vkpi50036evig35la1f3a","_id":"clt6vkpi7003fevig5eci9q64"},{"post_id":"clt6vkpht0012eviggp5v5hpy","category_id":"clt6vkphz001vevig33tf5nqs","_id":"clt6vkpi7003gevig4sudgska"},{"post_id":"clt6vkpht0012eviggp5v5hpy","category_id":"clt6vkpi60038evigep3mag3n","_id":"clt6vkpi7003ievigd6y496m0"},{"post_id":"clt6vkphv001eevigeoul2ve1","category_id":"clt6vkphz001vevig33tf5nqs","_id":"clt6vkpi7003levig7305748t"},{"post_id":"clt6vkphv001eevigeoul2ve1","category_id":"clt6vkpi5002wevig28lsbp8j","_id":"clt6vkpi7003mevig8byx0n01"},{"post_id":"clt6vkphn000oevig0zwehm1r","category_id":"clt6vkphz001vevig33tf5nqs","_id":"clt6vkpi7003nevig66fqesaf"},{"post_id":"clt6vkphn000oevig0zwehm1r","category_id":"clt6vkpi5002wevig28lsbp8j","_id":"clt6vkpi7003oevig8j7a9ke1"},{"post_id":"clt6vkphn000oevig0zwehm1r","category_id":"clt6vkpi7003hevig2kkuajfk","_id":"clt6vkpi7003pevig4gnfbpxz"},{"post_id":"clt6vkphd0007evigflo3e5no","category_id":"clt6vkphk000eevigf8ued8e3","_id":"clt6vn1dj003sevigdtij8fmp"},{"post_id":"clt6vkphd0007evigflo3e5no","category_id":"clt6vkphx001mevig540w7pyv","_id":"clt6vn1dj003tevigb2z3a1jo"},{"post_id":"clt6vkphd0007evigflo3e5no","category_id":"clt6vno4r003wevigh2j81rua","_id":"clt6vno4s003yevig3ufx42zm"},{"post_id":"clt6vqles004aevig61ij95k4","category_id":"clt6vkphz001vevig33tf5nqs","_id":"clt6vqlet004devighcnm3luk"},{"post_id":"clt6vqles004aevig61ij95k4","category_id":"clt6vkpi60038evigep3mag3n","_id":"clt6vqlet004eevig4r4ia635"},{"post_id":"clt6vr6x3004gevig4a2iaw38","category_id":"clt6vkphg000aevigd7vna27a","_id":"clt6vr6x4004ievigegd54e59"},{"post_id":"clt6vr6x3004gevig4a2iaw38","category_id":"clt6vkpho000qevig73juf3u6","_id":"clt6vr6x4004jeviggjsc6r1i"},{"post_id":"clt6vrdru004kevig0qw6cgz4","category_id":"clt6vkphg000aevigd7vna27a","_id":"clt6vrdru004meviggpu5ayl5"},{"post_id":"clt6vrdru004kevig0qw6cgz4","category_id":"clt6vkpho000qevig73juf3u6","_id":"clt6vrdrv004nevig77jza8rv"},{"post_id":"clt6vrger004oevig8ts0calg","category_id":"clt6vkphk000eevigf8ued8e3","_id":"clt6vrges004revigerlhe9x0"},{"post_id":"clt6vrger004oevig8ts0calg","category_id":"clt6voq6y0045evig7b2qbbo3","_id":"clt6vrges004sevigeao6c6ka"},{"post_id":"clt6vrjeb004tevig1ha0fdce","category_id":"clt6vkphg000aevigd7vna27a","_id":"clt6vrjec004wevigb72w0f4q"},{"post_id":"clt6vrjeb004tevig1ha0fdce","category_id":"clt6vkphz0020evig2h30gtfz","_id":"clt6vrjec004xevig05tkc7mo"},{"post_id":"clt6vrjeb004tevig1ha0fdce","category_id":"clt6vkpi50031evig4ogmhc91","_id":"clt6vrjec004yevig81i40ahm"},{"post_id":"clt6vrspu0054evig1m3pbzm5","category_id":"clt6vkphg000aevigd7vna27a","_id":"clt6vrspw0056evig6v968vga"},{"post_id":"clt6vrspu0054evig1m3pbzm5","category_id":"clt6vkpho000qevig73juf3u6","_id":"clt6vrspw0057evigat72h7yq"},{"post_id":"clwycz7py0001fzigeangfgvi","category_id":"clt6vkphk000eevigf8ued8e3","_id":"clwycz7q70007fzighmtrevuo"},{"post_id":"clwycz7py0001fzigeangfgvi","category_id":"clt6vkphx001ievigbmcte21g","_id":"clwycz7q70009fzig3kw5674r"},{"post_id":"clwycz7q20003fzigau0z7ejc","category_id":"clt6vkphk000eevigf8ued8e3","_id":"clwycz7q8000cfzig8vr77luh"},{"post_id":"clwycz7q20003fzigau0z7ejc","category_id":"clt6vkphx001mevig540w7pyv","_id":"clwycz7q8000efzig22lm5mt8"},{"post_id":"clwycz7q20003fzigau0z7ejc","category_id":"clt6vno4r003wevigh2j81rua","_id":"clwycz7q8000gfzig5gd0grar"},{"post_id":"clwycz7pu0000fzigdgd6406d","category_id":"clt6vkphk000eevigf8ued8e3","_id":"clwycz7q8000ifzigcwwfg700"},{"post_id":"clwycz7pu0000fzigdgd6406d","category_id":"clwycz7q20004fzig5rpo0dpe","_id":"clwycz7q8000jfziggh740gee"},{"post_id":"clwycz7pu0000fzigdgd6406d","category_id":"clwycz7q7000afzigda7410rf","_id":"clwycz7q8000kfzig9v2n8pyr"}],"PostTag":[{"post_id":"clt6vkpha0003evig4akh1u83","tag_id":"clt6vkphd0006evig96uz22n1","_id":"clt6vkphl000hevigeiob7jyi"},{"post_id":"clt6vkpha0003evig4akh1u83","tag_id":"clt6vkphh000bevigfxgi67zn","_id":"clt6vkphm000jevigbcz7f531"},{"post_id":"clt6vkphb0004evigd8lj9xmo","tag_id":"clt6vkphk000fevig65fdc7rb","_id":"clt6vkphn000nevigdb7601wa"},{"post_id":"clt6vkphk000gevig8p1lcy6g","tag_id":"clt6vkphm000levig33a45c7v","_id":"clt6vkphy001nevig446o39l6"},{"post_id":"clt6vkphk000gevig8p1lcy6g","tag_id":"clt6vkphw001hevig3d5j2a0f","_id":"clt6vkphy001pevig30ip6z3u"},{"post_id":"clt6vkphl000ieviga59j9x5g","tag_id":"clt6vkphm000levig33a45c7v","_id":"clt6vkphz001wevig82ot4f6g"},{"post_id":"clt6vkphl000ieviga59j9x5g","tag_id":"clt6vkphy001qevigaej3d92x","_id":"clt6vkphz001xevig86wjcnae"},{"post_id":"clt6vkphn000oevig0zwehm1r","tag_id":"clt6vkphm000levig33a45c7v","_id":"clt6vkpi00021evig0y04bs75"},{"post_id":"clt6vkphn000oevig0zwehm1r","tag_id":"clt6vkphz001uevig916u49jn","_id":"clt6vkpi00023evig6qn1gp94"},{"post_id":"clt6vkphp000tevigarxs6id2","tag_id":"clt6vkphm000levig33a45c7v","_id":"clt6vkpi2002aevighen2gb47"},{"post_id":"clt6vkphp000tevigarxs6id2","tag_id":"clt6vkphw001hevig3d5j2a0f","_id":"clt6vkpi2002bevig3hq6ex1n"},{"post_id":"clt6vkphq000vevigav77f7xp","tag_id":"clt6vkphm000levig33a45c7v","_id":"clt6vkpi3002fevigexnu3pw4"},{"post_id":"clt6vkphq000vevigav77f7xp","tag_id":"clt6vkpi10028evigavay95qx","_id":"clt6vkpi3002hevigczsh4fh6"},{"post_id":"clt6vkpht0012eviggp5v5hpy","tag_id":"clt6vkpi2002eevigcz0x8xog","_id":"clt6vkpi3002mevigdj7kajzm"},{"post_id":"clt6vkpht0012eviggp5v5hpy","tag_id":"clt6vkpi3002jevigabm142wq","_id":"clt6vkpi4002oevig324zgvut"},{"post_id":"clt6vkphu0019evig6m7m47xa","tag_id":"clt6vkphm000levig33a45c7v","_id":"clt6vkpi5002yevig6hnygjim"},{"post_id":"clt6vkphu0019evig6m7m47xa","tag_id":"clt6vkpi4002sevigd4o0hnm7","_id":"clt6vkpi50030evig7xlg3rj9"},{"post_id":"clt6vkphv001eevigeoul2ve1","tag_id":"clt6vkphm000levig33a45c7v","_id":"clt6vkpi50033evigh4mfd5p2"},{"post_id":"clt6vkphv001eevigeoul2ve1","tag_id":"clt6vkpi5002xevigdudqadjq","_id":"clt6vkpi50035evig8ixf12hj"},{"post_id":"clt6vkphd0007evigflo3e5no","tag_id":"clt6vkphm000levig33a45c7v","_id":"clt6vn1di003qevigfla6ffxa"},{"post_id":"clt6vkphd0007evigflo3e5no","tag_id":"clt6vno4r003vevig09ymg4pb","_id":"clt6vno4s003xevigcqxs90zm"},{"post_id":"clt6vqles004aevig61ij95k4","tag_id":"clt6vkpi2002eevigcz0x8xog","_id":"clt6vqlet004bevig7hktau0i"},{"post_id":"clt6vqles004aevig61ij95k4","tag_id":"clt6vkpi3002jevigabm142wq","_id":"clt6vqlet004cevig3in1ez0s"},{"post_id":"clt6vr6x3004gevig4a2iaw38","tag_id":"clt6vkphk000fevig65fdc7rb","_id":"clt6vr6x4004hevig9z3fd28b"},{"post_id":"clt6vrdru004kevig0qw6cgz4","tag_id":"clt6vkphk000fevig65fdc7rb","_id":"clt6vrdru004leviggnrr6mnk"},{"post_id":"clt6vrger004oevig8ts0calg","tag_id":"clt6vkphm000levig33a45c7v","_id":"clt6vrges004peviggm3vayrb"},{"post_id":"clt6vrger004oevig8ts0calg","tag_id":"clt6vordp0048evig59k5etj1","_id":"clt6vrges004qevigevq3f7um"},{"post_id":"clt6vrjeb004tevig1ha0fdce","tag_id":"clt6vkphk000fevig65fdc7rb","_id":"clt6vrjec004uevigfpb2hj78"},{"post_id":"clt6vrjeb004tevig1ha0fdce","tag_id":"clt6vkphz001zevig4fif9ma1","_id":"clt6vrjec004vevig7g1q6pmz"},{"post_id":"clt6vrspu0054evig1m3pbzm5","tag_id":"clt6vkphk000fevig65fdc7rb","_id":"clt6vrspv0055evig0u35fi9v"},{"post_id":"clwycz7py0001fzigeangfgvi","tag_id":"clt6vkphm000levig33a45c7v","_id":"clwycz7q40005fzigfo76dou9"},{"post_id":"clwycz7py0001fzigeangfgvi","tag_id":"clt6vkpho000revig9dns18f8","_id":"clwycz7q60006fzigcmke7x0x"},{"post_id":"clwycz7q20003fzigau0z7ejc","tag_id":"clt6vkphm000levig33a45c7v","_id":"clwycz7q70008fzig1nix6xih"},{"post_id":"clwycz7q20003fzigau0z7ejc","tag_id":"clt6vno4r003vevig09ymg4pb","_id":"clwycz7q7000bfzigab8c1rl9"},{"post_id":"clwycz7pu0000fzigdgd6406d","tag_id":"clt6vkphm000levig33a45c7v","_id":"clwycz7q8000dfzigbyby1n0a"},{"post_id":"clwycz7pu0000fzigdgd6406d","tag_id":"clt6vkphz001uevig916u49jn","_id":"clwycz7q8000ffzig3rpfbvz0"},{"post_id":"clwycz7pu0000fzigdgd6406d","tag_id":"clwycz7q00002fzighi5lhnj6","_id":"clwycz7q8000hfzig8d7t4z51"}],"Tag":[{"name":"标签1","_id":"clt6vkphd0006evig96uz22n1"},{"name":"标签2","_id":"clt6vkphh000bevigfxgi67zn"},{"name":"openstack","_id":"clt6vkphk000fevig65fdc7rb"},{"name":"Linux","_id":"clt6vkphm000levig33a45c7v"},{"name":"Java","_id":"clt6vkpho000revig9dns18f8"},{"name":"Python","_id":"clt6vkphw001hevig3d5j2a0f"},{"name":"Git","_id":"clt6vkphy001qevigaej3d92x"},{"name":"Rpm","_id":"clt6vkphz001uevig916u49jn"},{"name":"nova","_id":"clt6vkphz001zevig4fif9ma1"},{"name":"Docker","_id":"clt6vkpi10028evigavay95qx"},{"name":"nodejs","_id":"clt6vkpi2002eevigcz0x8xog"},{"name":"Blog","_id":"clt6vkpi3002jevigabm142wq"},{"name":"Mysql","_id":"clt6vkpi4002sevigd4o0hnm7"},{"name":"磁盘","_id":"clt6vkpi5002xevigdudqadjq"},{"name":"Test","_id":"clt6vno4r003vevig09ymg4pb"},{"name":"TeOpenstackst","_id":"clt6voq6y0044evig75iq1n0g"},{"name":"Openstack","_id":"clt6vordp0048evig59k5etj1"},{"name":"OpenEuler","_id":"clwycz7q00002fzighi5lhnj6"}]}}
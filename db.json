{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/maupassant/source/css/copyright.scss","path":"css/copyright.scss","modified":0,"renderable":1},{"_id":"themes/maupassant/source/css/copycode.scss","path":"css/copycode.scss","modified":0,"renderable":1},{"_id":"themes/maupassant/source/css/search.scss","path":"css/search.scss","modified":0,"renderable":1},{"_id":"themes/maupassant/source/css/donate.scss","path":"css/donate.scss","modified":0,"renderable":1},{"_id":"themes/maupassant/source/css/style.scss","path":"css/style.scss","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/alipay.svg","path":"img/alipay.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/bitcoin.svg","path":"img/bitcoin.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/github.svg","path":"img/github.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/like.svg","path":"img/like.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/wechat.svg","path":"img/wechat.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/paypal.svg","path":"img/paypal.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/copycode.js","path":"js/copycode.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","path":"js/codeblock-resizer.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/copyright.js","path":"js/copyright.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/donate.js","path":"js/donate.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/fancybox.js","path":"js/fancybox.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/love.js","path":"js/love.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/recent-comments.js","path":"js/recent-comments.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/share.js","path":"js/share.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/smartresize.js","path":"js/smartresize.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/totop.js","path":"js/totop.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_drafts/euler编包.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1743037021331},{"_id":"source/_drafts/Opensyack-v部署.md","hash":"e5ac4a385575560dfb655f50639e34347db147fa","modified":1743037021331},{"_id":"source/_drafts/Openstack-VNC分辨率控制调研.md","hash":"2b01c87349a0d21561619b1586079cab924d84e4","modified":1743037021329},{"_id":"source/_drafts/Openstack-实例网络联通性调研测试.md","hash":"cd1acb0a53188abbeb74450ad969d62e9f78419c","modified":1743037021330},{"_id":"source/_drafts/Openstack开发环境部署.md","hash":"d84b1c2efb4b256920f5667975ec77ce66ddec1e","modified":1743037021330},{"_id":"source/_drafts/hello-world.md","hash":"0f0401c1b4e6bc821ad75860ea896ec09d2ddf1a","modified":1743037021332},{"_id":"source/_drafts/kolla-ansible部署Openstack.md","hash":"cd01fdf81a8ee7603a5ea7ad1c8efbd23d8a9a83","modified":1747136338262},{"_id":"source/_drafts/kolla编译Openstack 容器镜像.md","hash":"3e5a74ac3c9690119de2f9d48758b4604a0728a4","modified":1743037021333},{"_id":"source/_drafts/nova源码解析.md","hash":"c24d0847170ec1908541da9f262a01e9e8ad7c5f","modified":1743037021333},{"_id":"source/_drafts/基于Nova开发Usb.md","hash":"8de257983cd99b0c7d409860d04db543189438c7","modified":1743037021334},{"_id":"source/_drafts/搭建Trojan.md","hash":"1689eefdcba87aaac03b6bc8abed52989c65d6df","modified":1743037021335},{"_id":"source/_drafts/npm配置部署.md","hash":"bf217f4c73a9c2559239d3cca331edad0d4bd79c","modified":1743037021334},{"_id":"source/_drafts/配电网.md","hash":"e775db2496572aa5e0819765964d32fc6eaf1923","modified":1747136338262},{"_id":"source/_posts/Fio测试磁盘读写性能.md","hash":"2459de981a11060e47a09c41c1df89ad0340e94b","modified":1743037021336},{"_id":"source/_drafts/基于openEuler使用oos编包.md","hash":"bebe539404873818972cdbb7364cabc0eeb324d8","modified":1743037021335},{"_id":"source/_posts/Java环境相关配置.md","hash":"89bc302ac4beff8f771fd1ce701f52c6deb299b5","modified":1743037021337},{"_id":"source/_posts/Python相关环境配置.md","hash":"275fe97ca79a3790682ab78a49f80ad7b1925923","modified":1747136338262},{"_id":"source/_posts/git使用.md","hash":"b4c9ae8029bb51a9753e619d8d70d86cebb9fc3c","modified":1743037021338},{"_id":"source/_posts/kolla构建镜像.md","hash":"9b6944d2fee84755f26da19195e2175552489626","modified":1747136338262},{"_id":"source/_posts/mock编译rpm软件包.md","hash":"918aaf46ee88ef5aaa41cf198e6a13aeb01533cd","modified":1747064362645},{"_id":"source/_posts/nova开发usb进程.md","hash":"d3857606848c1edf2949a940ae30870ec685c6db","modified":1747136338262},{"_id":"source/_posts/openstack操作及状态.md","hash":"d702f62954f7828830e5b5868b3676c1a3def71a","modified":1747064362645},{"_id":"source/_posts/创建windows的qcow2镜像.md","hash":"5955ef600efdeb37a4488eaf733a5445cacd127e","modified":1743037021340},{"_id":"source/_posts/基于Debian使用docker.md","hash":"08f2b7d7e7741c1a29501975fd3985817cde3a07","modified":1747136338277},{"_id":"source/_posts/常用性能测试小工具集锦.md","hash":"394a3dd4dd42f6f7d30583120dda414d15b7800c","modified":1743037021341},{"_id":"source/_posts/搭建Blog.md","hash":"318fb6890f0bc4b9f532755b9c4944533a109051","modified":1747136338277},{"_id":"source/_posts/数据库配置.md","hash":"63c95223cb061bd2f1fa71684b8642a833936f91","modified":1743037021342},{"_id":"source/_posts/磁盘扩容根分区.md","hash":"2e992a48991b5cfbe8abaea13613ed72438363e9","modified":1743037021343},{"_id":"source/about/index.md","hash":"98cdbf59ad21ce38c4aae7abf71ef484abf35b44","modified":1743037021344},{"_id":"source/archive/index.md","hash":"dcbeaff6ed66afd67ce743ec808dec1634964359","modified":1743037021344},{"_id":"source/_posts/OpenEuler-24.03-LTS-SP1-Antelope.md","hash":"ae54de183de599c60c87e5074737a1b164b39e2c","modified":1747136338262},{"_id":"themes/maupassant/LICENSE","hash":"0663fd3a7ea9fc4f4c634b4d73e2da426b536f86","modified":1747138257662},{"_id":"themes/maupassant/.travis.yml","hash":"f8da426b97088e4caa5226cff219a5d95087961f","modified":1747138257662},{"_id":"themes/maupassant/_config.yml","hash":"03b16f07fdf96a2a1d3a5a41cb98330ee538b143","modified":1747145164003},{"_id":"themes/maupassant/package.json","hash":"5328c4c435cd4a5fe47caae31b9975013cdca5bb","modified":1747138257677},{"_id":"themes/maupassant/README.md","hash":"ee2117bc55007760de60c0e854b58eee6429557e","modified":1747145163999},{"_id":"themes/maupassant/languages/en.yml","hash":"def65da84b131be40c090928ffd8186c71cf99a1","modified":1747138257662},{"_id":"themes/maupassant/languages/de-DE.yml","hash":"25d1d8cd8113045a7603c14af1ea1539fc6456ed","modified":1747138257662},{"_id":"themes/maupassant/languages/es-ES.yml","hash":"3cc9312fbdba4a8f8e8254804121e4724c719bcc","modified":1747138257662},{"_id":"themes/maupassant/languages/fr-FR.yml","hash":"3a50568f200b9c1258415b53727e42c6b6c7ea0b","modified":1747138257662},{"_id":"themes/maupassant/languages/ko.yml","hash":"a454bcec60113507bc1d593a699849822386c196","modified":1747138257662},{"_id":"themes/maupassant/languages/nb-NO.yml","hash":"1812e3f7b22d3fe85238f3f61ab06efa755c7cc1","modified":1747138257662},{"_id":"themes/maupassant/languages/ru.yml","hash":"36edc014c6aaef367d58929089bf7915375e71a6","modified":1747138257662},{"_id":"themes/maupassant/languages/zh-CN.yml","hash":"17eec161e4dad1569890ad4a6af17ea7b13ea588","modified":1747138257662},{"_id":"themes/maupassant/languages/zh-TW.yml","hash":"c2064b65b4326d1ac8924405bad7f037e4ea2cf4","modified":1747138257662},{"_id":"themes/maupassant/layout/archive.pug","hash":"8582db9eeebad1478db36f996292e2536b677694","modified":1747138257677},{"_id":"themes/maupassant/layout/base-without-sidebar.pug","hash":"c03e722ee31cd464cf2e6e39467bcdf398f4151f","modified":1747138257677},{"_id":"themes/maupassant/layout/base.pug","hash":"de21fa6e7ac20ef86c6ee93fc776f9ad5b164f21","modified":1747138257677},{"_id":"themes/maupassant/layout/blogroll.pug","hash":"f440c812d4a05c541fc1db9de1b6c9ae23f065c7","modified":1747138257677},{"_id":"themes/maupassant/layout/index.pug","hash":"a9459d749cc2ac6ac22275689856a370d6d278c9","modified":1747138257677},{"_id":"themes/maupassant/layout/page.pug","hash":"cb0aed2ea7892cdbc2f2ed7e3771e6a8229a31b8","modified":1747138257677},{"_id":"themes/maupassant/layout/post.pug","hash":"89724d1a1fa71feb55b4e75de6b8f1404267b7e7","modified":1747138257677},{"_id":"themes/maupassant/layout/_widget/category.pug","hash":"e6bfc74e613f515dea534c22e4a9e1213c4db772","modified":1747138257675},{"_id":"themes/maupassant/layout/_widget/copyright.pug","hash":"4ee90ed25c0fb10d57ce3c58f8e4f725702637ef","modified":1747138257675},{"_id":"themes/maupassant/layout/_widget/donate.pug","hash":"e29fa0b74b8b01f6fe5ee827ab6d7dd25bb0accb","modified":1747138257677},{"_id":"themes/maupassant/layout/single-column.pug","hash":"8b4b731cdf86379d526821a1fa950bf15ed61f15","modified":1747138257677},{"_id":"themes/maupassant/layout/tagcloud.pug","hash":"30e0191597d25ea88eb2f077f278caea61a47534","modified":1747138257677},{"_id":"themes/maupassant/layout/timeline.pug","hash":"b041b77a941b788fad78d522d013bc158efe168c","modified":1747138257677},{"_id":"themes/maupassant/layout/_widget/recent_comments.pug","hash":"5aa5864bc86bd8c43c11cbec025456f8f123997c","modified":1747138257677},{"_id":"themes/maupassant/layout/_widget/links.pug","hash":"2452cb2ffa159304a0d34c117250a4d12bd1b63f","modified":1747138257677},{"_id":"themes/maupassant/layout/_widget/recent_posts.pug","hash":"b717c372c8ff1285bcb87a4c28b318e9392bfbcc","modified":1747138257677},{"_id":"themes/maupassant/layout/_widget/info.pug","hash":"55dd19e50bf78b90aa4013b38e676d1821cc7258","modified":1747138257677},{"_id":"themes/maupassant/layout/_widget/tag.pug","hash":"6d82d3c0def86d8f9445c9542f52033d2378956e","modified":1747138257677},{"_id":"themes/maupassant/layout/_widget/search.pug","hash":"89ce6c4e34ab003662913aca3158a9e078feb6d5","modified":1747138257677},{"_id":"themes/maupassant/layout/_partial/comments.pug","hash":"edc667840eb6f2c2175465a2081fbef701c6c50c","modified":1747145164003},{"_id":"themes/maupassant/layout/_partial/darkmode.pug","hash":"8a4c53229394ba6cf63afd427b4e6b1dc1156526","modified":1747138257662},{"_id":"themes/maupassant/layout/_partial/footer.pug","hash":"a359089901feb454f94a1067736096bbc7075915","modified":1747145164003},{"_id":"themes/maupassant/layout/_partial/head.pug","hash":"8bbf0a87d1ec6f99a260fe6dc34e21c436a419ee","modified":1747145164003},{"_id":"themes/maupassant/layout/_partial/helpers.pug","hash":"9e44f6d32f2449b4109c33118f8285fa2fc7b023","modified":1747138257675},{"_id":"themes/maupassant/layout/_partial/mathjax.pug","hash":"ac6e3a92bf18ab6bbd0e041b6796b295bae963ee","modified":1747138257675},{"_id":"themes/maupassant/layout/_partial/mathjax2.pug","hash":"de4515948d7cf10d3cca0e20e310c8b6cbb5d438","modified":1747138257675},{"_id":"themes/maupassant/layout/_partial/paginator.pug","hash":"03ad0c49ae6f8a999ae35b38d08e25775f51f52a","modified":1747138257675},{"_id":"themes/maupassant/layout/_partial/after_footer.pug","hash":"6acda0dc695aebfdbc0d8d5d9c7d4b95ad983ba3","modified":1747145164003},{"_id":"themes/maupassant/layout/_partial/tag.pug","hash":"c24f59230b18854daf847d39ce54c131b2f716c9","modified":1747138257675},{"_id":"themes/maupassant/layout/_partial/totop.pug","hash":"eb91a3baf9411188c7c8130f63a674f541ca9c81","modified":1747138257675},{"_id":"themes/maupassant/source/css/copyright.scss","hash":"ad420043e1d0518bfbf3b2a2d87fb5b104587c6f","modified":1747138257677},{"_id":"themes/maupassant/layout/_partial/post_nav.pug","hash":"b11d9e6000449838b17f508429f29ffb60f53096","modified":1747138257675},{"_id":"themes/maupassant/source/css/copycode.scss","hash":"23fefb18f1d4dc7bde33e29d6ae737570277d943","modified":1747138257677},{"_id":"themes/maupassant/layout/_partial/wordcount.pug","hash":"d7ebbdcee193e345e3f92539ddffd291a870b5f9","modified":1747138257675},{"_id":"themes/maupassant/source/css/search.scss","hash":"a1720a63170ff4ae9048f634e8e1900e7a3cc45a","modified":1747138257677},{"_id":"themes/maupassant/source/css/donate.scss","hash":"d9ef1520e136198c0ae13acef7da22a275fb4dbf","modified":1747138257677},{"_id":"themes/maupassant/source/css/style.scss","hash":"27286a50bf4431147196fbf346fb7af8aa182ca1","modified":1747138257682},{"_id":"themes/maupassant/source/img/AccessOK.png","hash":"f99bf1003acca3631543629496ab1b678f36cde6","modified":1747138257682},{"_id":"themes/maupassant/source/img/alipay.svg","hash":"3d94d2f9b09e352802628c9225578e1086f5fef3","modified":1747138257682},{"_id":"themes/maupassant/source/img/avatar.png","hash":"2f701dadc2dc8eb637f48b5eedf9bca7fb5fd031","modified":1747138257682},{"_id":"themes/maupassant/source/img/github.svg","hash":"277798d16cb6106e45ef74f6b9972011fa43401b","modified":1747138257682},{"_id":"themes/maupassant/source/img/bitcoin.svg","hash":"590b6b6462896168d08b30dfe2de5f08950d5553","modified":1747138257682},{"_id":"themes/maupassant/source/js/copycode.js","hash":"6df3139581744e7bcd47243e4587f5397c2a24c3","modified":1747138257682},{"_id":"themes/maupassant/source/img/like.svg","hash":"e6e4bd1af076be9358316cac89efdc22ef4a5064","modified":1747138257682},{"_id":"themes/maupassant/source/img/wechat.svg","hash":"19c1f68ec8c0b8e9f7855e7a6e78077f70a1aedc","modified":1747138257682},{"_id":"themes/maupassant/source/img/paypal.svg","hash":"09786c983a10bc570dcd05b87cec601e9d01eb00","modified":1747138257682},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","hash":"c77270e684a60babc1abb7353e700ecdc5a66d30","modified":1747138257682},{"_id":"themes/maupassant/source/js/copyright.js","hash":"0e9a845ae05d2f00721ff6ee910c8c3cace26043","modified":1747138257682},{"_id":"themes/maupassant/source/js/donate.js","hash":"82f06bd69782c1138c98b4276771a41e3a54c061","modified":1747138257682},{"_id":"themes/maupassant/source/js/fancybox.js","hash":"a00bfca15808d4951fcedfd48d753cb55f3de23f","modified":1747145164016},{"_id":"themes/maupassant/source/js/love.js","hash":"60df5dc3d09c8f33d1d02f54cbc73bf8d62f52fb","modified":1747138257682},{"_id":"themes/maupassant/source/js/search.js","hash":"65d8e6d6c46fa060ce5b0d89e2fd778b6b2967d5","modified":1747138257682},{"_id":"themes/maupassant/source/js/share.js","hash":"514e726c1efae9f6566600fa0e945b4b9e620f2e","modified":1747138257682},{"_id":"themes/maupassant/source/js/recent-comments.js","hash":"b09acdd54126290268e1ab554433afa1d8f64aaf","modified":1747138257682},{"_id":"themes/maupassant/source/js/smartresize.js","hash":"150ab1cad40d7ae081b0896b13f7d7cbac4e6338","modified":1747138257682},{"_id":"themes/maupassant/source/js/totop.js","hash":"15de186b089c245fe60766d509b587919f05ff23","modified":1747138257682},{"_id":"themes/maupassant/package-lock.json","hash":"cb5b5bf0f87a378eb15bfa46ebcba07f960341da","modified":1747143832262},{"_id":"themes/maupassant/.gitignore","hash":"d7d27e5a9bcffe7f90dc2f4f0752e19020e40f40","modified":1747145163999},{"_id":"public/atom.xml","hash":"c36a0e14092600211a6d6519bebdf8f3bc3c56d0","modified":1747145342815},{"_id":"public/search.xml","hash":"88dfd8acf13ba61292f84b7ebdfcf1bda48e1a10","modified":1747145342815},{"_id":"public/about/index.html","hash":"cd19cb374efbf136251322665c77986113daa003","modified":1747145342815},{"_id":"public/archive/index.html","hash":"0b8ac882a960c04218760d57dafe0dbfcbf710f9","modified":1747145342815},{"_id":"public/2025/05/13/OpenEuler-24.03-LTS-SP1-Antelope/index.html","hash":"516e9928c31e73584991ac296bbc7e94ca2bc9b8","modified":1747145342815},{"_id":"public/2025/05/13/kolla构建镜像/index.html","hash":"c028fceda9b3e2677aeab8b5da657ef3c3ef6ec6","modified":1747145342815},{"_id":"public/2025/05/13/nova开发usb进程/index.html","hash":"e5272530dd3ccca4cb78edbe859ad223c683b6d3","modified":1747145342815},{"_id":"public/2024/07/07/openstack操作及状态/index.html","hash":"1434984cb6e6ce82f24d93f27f3420deed7e3430","modified":1747145342815},{"_id":"public/2024/01/10/创建windows的qcow2镜像/index.html","hash":"5013a3a2c4c539df3edb8b5da839325e54a9777d","modified":1747145342815},{"_id":"public/2023/12/25/Fio测试磁盘读写性能/index.html","hash":"1f2f5f29877b0d608e6020cfc2122906b133ce49","modified":1747145342815},{"_id":"public/2023/12/25/基于Debian使用docker/index.html","hash":"b73d695814beb3c28157076c6e66830a0652a7f0","modified":1747145342815},{"_id":"public/2023/12/25/常用性能测试小工具集锦/index.html","hash":"946e7b21c4fba08279dd3e0d204db4ecbb3a2b5d","modified":1747145342815},{"_id":"public/2023/12/15/Java环境相关配置/index.html","hash":"6a57ae629a5d1fc3a2f6882a32e747751db1d4a6","modified":1747145342815},{"_id":"public/2023/12/15/Python相关环境配置/index.html","hash":"02ffcad8e15d4bc6baa8fb8a8b8b4aa32e0fcb03","modified":1747145342815},{"_id":"public/2023/12/15/git使用/index.html","hash":"73b7845bf25cdb7bc2d3f6e20e18adb04c6966c7","modified":1747145342815},{"_id":"public/2023/12/15/mock编译rpm软件包/index.html","hash":"7465f338840d2f5db8ca3c3ec6fa9fbbeba25170","modified":1747145342815},{"_id":"public/2023/12/15/数据库配置/index.html","hash":"44a22248bd4a3e7a68b9dfc32ad3a5fe64d2838b","modified":1747145342815},{"_id":"public/2023/12/15/磁盘扩容根分区/index.html","hash":"afbc74c95c4206b6bb5802ad317e7dce927a3319","modified":1747145342815},{"_id":"public/2023/12/14/搭建Blog/index.html","hash":"e40cf436cab60164b82ec4461ac01c31e0796027","modified":1747145342815},{"_id":"public/archives/index.html","hash":"9a2aec5231fd79372642f4f52fd084e5ba347971","modified":1747145342815},{"_id":"public/archives/page/2/index.html","hash":"aa292fc6ece16c3325cbc0a939510992464b61c2","modified":1747145342815},{"_id":"public/archives/2023/index.html","hash":"9ad7d320bade8e43a6553107eb359425ee46e4e9","modified":1747145342815},{"_id":"public/archives/2023/12/index.html","hash":"9ad7d320bade8e43a6553107eb359425ee46e4e9","modified":1747145342815},{"_id":"public/archives/2024/index.html","hash":"9a3f38f60eb765e44ae04f85c2970a4e2fe1680d","modified":1747145342815},{"_id":"public/archives/2024/01/index.html","hash":"34ec5b740ca2bd3866c745c3dcbb666d3e5159c5","modified":1747145342815},{"_id":"public/archives/2024/07/index.html","hash":"9728169389e972d15165eb39c5f3e4f5782d25c3","modified":1747145342815},{"_id":"public/archives/2025/index.html","hash":"0bca1c34696c3ab318240a418ed3dbe4345d27a5","modified":1747145342815},{"_id":"public/archives/2025/05/index.html","hash":"0bca1c34696c3ab318240a418ed3dbe4345d27a5","modified":1747145342815},{"_id":"public/categories/Linux/index.html","hash":"a25357266a40e879907f55dc554c7e689c6569f3","modified":1747145342815},{"_id":"public/categories/Openstack/index.html","hash":"1b0850f2cb988b422467e3238a2429adbbeeb994","modified":1747145342815},{"_id":"public/categories/Learning-Tools/index.html","hash":"80b38eb92f928ec63e89970a0192d450347e03d7","modified":1747145342815},{"_id":"public/categories/Linux/Tools/index.html","hash":"b42ee6ee0f290f6e61a1a50b11e89d7c35b62d54","modified":1747145342815},{"_id":"public/categories/Linux/Java/index.html","hash":"921e190e63afbc02d95b2c4dfefa8243a1799bbc","modified":1747145342815},{"_id":"public/categories/Linux/Python/index.html","hash":"426471f1d00d0b9da12d5a186a85b56d0878c816","modified":1747145342815},{"_id":"public/categories/Openstack/Actions/index.html","hash":"617efd427549e7f520b96b44b492d60fa2af5d35","modified":1747145342815},{"_id":"public/categories/Learning-Tools/Hexo/index.html","hash":"be916e19365e8dca0da6e0e9c2a43325bb41e87e","modified":1747145342815},{"_id":"public/categories/Linux/Tools/Test/index.html","hash":"741a141fc4dbc11bcf6ba0e51afdc08c55cf861b","modified":1747145342815},{"_id":"public/categories/Linux/Tools/Git/index.html","hash":"6aa0acc49a6d4bab9ecb426799885abb93e7a3bb","modified":1747145342815},{"_id":"public/categories/Learning-Tools/Linux/index.html","hash":"c2887527247e9a613deb7a9fcf0de342f2304552","modified":1747145342815},{"_id":"public/categories/Openstack/Actions/Status/index.html","hash":"52f5498f4e1acbf6da426f23532dc4c683202f8e","modified":1747145342815},{"_id":"public/categories/Linux/Tools/Docker/index.html","hash":"8400c2b993912b2c155d95167a3dcc682c74bb6e","modified":1747145342815},{"_id":"public/categories/Learning-Tools/Linux/Rpm/index.html","hash":"9b83403cbb574ab022be42d3abb9880090436a8b","modified":1747145342815},{"_id":"public/categories/Linux/Mysql/index.html","hash":"e12ab2d0360c85226bd789e6d00c6dc27cc5f5f2","modified":1747145342815},{"_id":"public/index.html","hash":"a62da5cfc4c40c3283f87e6bb4da097323ddefb7","modified":1747145342815},{"_id":"public/page/2/index.html","hash":"4044f91e1197a7a6469ded85fa46573817181bc6","modified":1747145342815},{"_id":"public/tags/Linux/index.html","hash":"9a8031bb531612939244a26f6f01a1903fce4fd1","modified":1747145342815},{"_id":"public/tags/openstack/index.html","hash":"7465f6b9833c1d3a9f43781b84542ea11bff9db4","modified":1747145342815},{"_id":"public/tags/nodejs/index.html","hash":"e283e842a0520d40ef30a58e8778a931bcb4fc07","modified":1747145342815},{"_id":"public/tags/Rpm/index.html","hash":"9b83403cbb574ab022be42d3abb9880090436a8b","modified":1747145342815},{"_id":"public/tags/Blog/index.html","hash":"b517f7f44bcfe2f00828f98f728d791ce922f6bf","modified":1747145342815},{"_id":"public/tags/Test/index.html","hash":"741a141fc4dbc11bcf6ba0e51afdc08c55cf861b","modified":1747145342815},{"_id":"public/tags/Java/index.html","hash":"921e190e63afbc02d95b2c4dfefa8243a1799bbc","modified":1747145342815},{"_id":"public/tags/Python/index.html","hash":"426471f1d00d0b9da12d5a186a85b56d0878c816","modified":1747145342815},{"_id":"public/tags/Git/index.html","hash":"6aa0acc49a6d4bab9ecb426799885abb93e7a3bb","modified":1747145342815},{"_id":"public/tags/Docker/index.html","hash":"8400c2b993912b2c155d95167a3dcc682c74bb6e","modified":1747145342815},{"_id":"public/tags/Mysql/index.html","hash":"e12ab2d0360c85226bd789e6d00c6dc27cc5f5f2","modified":1747145342815},{"_id":"public/tags/磁盘/index.html","hash":"0333f3a1c2c357b58fbf6c1bec685eba9475d303","modified":1747145342815},{"_id":"public/img/avatar.png","hash":"2f701dadc2dc8eb637f48b5eedf9bca7fb5fd031","modified":1747145342815},{"_id":"public/img/alipay.svg","hash":"3d94d2f9b09e352802628c9225578e1086f5fef3","modified":1747145342815},{"_id":"public/img/github.svg","hash":"277798d16cb6106e45ef74f6b9972011fa43401b","modified":1747145342815},{"_id":"public/img/bitcoin.svg","hash":"590b6b6462896168d08b30dfe2de5f08950d5553","modified":1747145342815},{"_id":"public/img/wechat.svg","hash":"19c1f68ec8c0b8e9f7855e7a6e78077f70a1aedc","modified":1747145342815},{"_id":"public/img/like.svg","hash":"e6e4bd1af076be9358316cac89efdc22ef4a5064","modified":1747145342815},{"_id":"public/img/paypal.svg","hash":"09786c983a10bc570dcd05b87cec601e9d01eb00","modified":1747145342815},{"_id":"public/css/copyright.css","hash":"e857156bd1f971fe6abdc22d2b8c82e495387438","modified":1747145342815},{"_id":"public/css/search.css","hash":"0d0f73b357c3bc5077ef657c73f679b22bea93fb","modified":1747145342815},{"_id":"public/css/copycode.css","hash":"803d8bf898f47c3929665eb7af97da22f11efacd","modified":1747145342815},{"_id":"public/js/copycode.js","hash":"fde1f153bab1f00ae8930668094c00aa9ff3c7a3","modified":1747145342815},{"_id":"public/css/donate.css","hash":"d631def20dfb661439c506f28dc791f331d506f8","modified":1747145342815},{"_id":"public/js/copyright.js","hash":"7b1bd775ea22abf33d57f78628f436bf656e439a","modified":1747145342815},{"_id":"public/css/style.css","hash":"b8bd7e1fcd5abf50d3c11028d1da3b6f0b4cf5c8","modified":1747145342815},{"_id":"public/js/donate.js","hash":"bdddd8d9847462d020f7a511e7e12c046223195d","modified":1747145342815},{"_id":"public/js/codeblock-resizer.js","hash":"5d0b786d60bf225d9eabcc9cece2719ff4d9b6cd","modified":1747145342815},{"_id":"public/js/search.js","hash":"6fdfd143646d12b8dbef9b5809cea768192f08aa","modified":1747145342815},{"_id":"public/js/love.js","hash":"5cf89f622bf891cf1986845eb92eadef6f358eb7","modified":1747145342815},{"_id":"public/js/share.js","hash":"a2f9de374523dc7f2ddb90ed5f24b668c20d9272","modified":1747145342815},{"_id":"public/js/fancybox.js","hash":"b13d12f1c3753921228b34bf8c1f501e14a24720","modified":1747145342815},{"_id":"public/js/smartresize.js","hash":"3ef157fd877167e3290f42c67a624ea375a46c24","modified":1747145342815},{"_id":"public/js/totop.js","hash":"7dbf8fcf582a4fb6eb9b2c60d6de9f9c2091ec4c","modified":1747145342815},{"_id":"public/js/recent-comments.js","hash":"78708f86aa1fdcc003a056b1f91aac62d31bb012","modified":1747145342815}],"Category":[{"name":"Linux","_id":"cmamklq6q0004fkd1446bggjw"},{"name":"Openstack","_id":"cmamklq6s0009fkd1gzh575w2"},{"name":"Openstack","parent":"cmamklq6q0004fkd1446bggjw","_id":"cmamklq6v000jfkd13l77b6bc"},{"name":"分类","_id":"cmamklq6z000ufkd182cvcjr3"},{"name":"Deploy","parent":"cmamklq6s0009fkd1gzh575w2","_id":"cmamklq700011fkd1h6i8d9yu"},{"name":"Nova","parent":"cmamklq6s0009fkd1gzh575w2","_id":"cmamklq72001jfkd1fi854q8t"},{"name":"Web","parent":"cmamklq6q0004fkd1446bggjw","_id":"cmamklq73001rfkd1b5a27agm"},{"name":"Rpm","parent":"cmamklq6q0004fkd1446bggjw","_id":"cmamklq74001xfkd14c17gfqb"},{"name":"Learning Tools","_id":"cmamklq760027fkd13tsc9qrn"},{"name":"子分类","parent":"cmamklq6z000ufkd182cvcjr3","_id":"cmamklq76002bfkd1h9lq201q"},{"name":"Tools","parent":"cmamklq6q0004fkd1446bggjw","_id":"cmamklq76002gfkd10e2fcst3"},{"name":"Java","parent":"cmamklq6q0004fkd1446bggjw","_id":"cmamklq77002kfkd1fi48d6cz"},{"name":"Python","parent":"cmamklq6q0004fkd1446bggjw","_id":"cmamklq77002pfkd14jzy90qf"},{"name":"Actions","parent":"cmamklq6s0009fkd1gzh575w2","_id":"cmamklq790035fkd19vfxacit"},{"name":"Development","parent":"cmamklq72001jfkd1fi854q8t","_id":"cmamklq790039fkd10jp10mx0"},{"name":"OpenEuler","parent":"cmamklq74001xfkd14c17gfqb","_id":"cmamklq7b003vfkd15iuxfg90"},{"name":"Hexo","parent":"cmamklq760027fkd13tsc9qrn","_id":"cmamklq7b003wfkd1a67bergj"},{"name":"Test","parent":"cmamklq76002gfkd10e2fcst3","_id":"cmamklq7b003yfkd14xesc2jh"},{"name":"Git","parent":"cmamklq76002gfkd10e2fcst3","_id":"cmamklq7b0041fkd1gk6xgpgg"},{"name":"Linux","parent":"cmamklq760027fkd13tsc9qrn","_id":"cmamklq7b0044fkd1c1tdcnlf"},{"name":"Status","parent":"cmamklq790035fkd19vfxacit","_id":"cmamklq7c0047fkd18elides9"},{"name":"Docker","parent":"cmamklq76002gfkd10e2fcst3","_id":"cmamklq7c004bfkd152szcijw"},{"name":"Rpm","parent":"cmamklq7b0044fkd1c1tdcnlf","_id":"cmamklq7c004kfkd1hv7ofj6f"},{"name":"Mysql","parent":"cmamklq6q0004fkd1446bggjw","_id":"cmamklq7f004xfkd174280kpr"}],"Data":[],"Page":[{"title":"AccessOK's About","date":"2023-12-15T09:00:09.000Z","layout":"true","_content":"## reading\n\n## writing","source":"about/index.md","raw":"---\ntitle: AccessOK's About\ndate: 2023-12-15 17:00:09\nlayout: true\n---\n## reading\n\n## writing","updated":"2025-03-27T00:57:01.344Z","path":"about/index.html","comments":1,"_id":"cmamklq6l0000fkd18lw5hkrt","content":"<h2 id=\"reading\"><a href=\"#reading\" class=\"headerlink\" title=\"reading\"></a>reading</h2><h2 id=\"writing\"><a href=\"#writing\" class=\"headerlink\" title=\"writing\"></a>writing</h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"reading\"><a href=\"#reading\" class=\"headerlink\" title=\"reading\"></a>reading</h2><h2 id=\"writing\"><a href=\"#writing\" class=\"headerlink\" title=\"writing\"></a>writing</h2>"},{"title":"archive","date":"2023-12-26T05:46:28.000Z","_content":"","source":"archive/index.md","raw":"---\ntitle: archive\ndate: 2023-12-26 13:46:28\n---\n","updated":"2025-03-27T00:57:01.344Z","path":"archive/index.html","comments":1,"layout":"page","_id":"cmamklq6o0002fkd14458hvxi","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Openstack-如何虚拟机图像清晰","date":"2023-12-25T02:27:28.000Z","description":"Openstack-如何虚拟机图像清晰","type":"tags","comments":1,"_content":"# Openstack-如何虚拟机图像清晰","source":"_drafts/Openstack-VNC分辨率控制调研.md","raw":"---\ntitle: Openstack-如何虚拟机图像清晰\ndate: 2023-12-25 10:27:28\ndescription: Openstack-如何虚拟机图像清晰\ntype: \"tags\"\ncomments: true\ncategories:\n- Linux\n- Openstack\ntags:\n- Linux\n- Openstack\n---\n# Openstack-如何虚拟机图像清晰","slug":"Openstack-VNC分辨率控制调研","published":0,"updated":"2025-03-27T00:57:01.329Z","layout":"post","photos":[],"link":"","_id":"cmamklq6m0001fkd10vx78ic2","content":"<h1 id=\"Openstack-如何虚拟机图像清晰\"><a href=\"#Openstack-如何虚拟机图像清晰\" class=\"headerlink\" title=\"Openstack-如何虚拟机图像清晰\"></a>Openstack-如何虚拟机图像清晰</h1>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Openstack-如何虚拟机图像清晰\"><a href=\"#Openstack-如何虚拟机图像清晰\" class=\"headerlink\" title=\"Openstack-如何虚拟机图像清晰\"></a>Openstack-如何虚拟机图像清晰</h1>"},{"_content":"# Openstack-实例网络联通性调研测试\n\n环境：Openstack-v \n\n先删除所有网络，子网，端口，路由。\n\n## 测试步骤\n\n- 新建selfservice网络并创建实例，测试网络的封闭性。\n- 在selfservice网路创建实例，测试局域网的连通性。\n- 创建provider 网络，并通过路由连接到selfservice网络。连接实例与外部机器。测试路由有效。\n- 删除路由，创建浮动ip。浮动ip绑定实例，通过实例连接外部机器，外部机器通过浮动ip连接实例，测试浮动ip有效。\n\n## 云管平台验证\n\n1.创建私有网络。\n\n![image-20231228184850234](/home/wang/UOS/AccessOK/blog/source/images/image-20231228184850234.png)\n\n![image-20231228185457722](/home/wang/UOS/AccessOK/blog/source/images/image-20231228185457722.png)\n\n2.创建私有网络子网。\n\n![image-20231228185607415](/home/wang/.config/Typora/typora-user-images/image-20231228185607415.png)\n\n![image-20231228185958149](/home/wang/.config/Typora/typora-user-images/image-20231228185958149.png)\n\n3.通过私有网络创建实例。\n\n创建实例失败。\n\n![image-20231228191201350](/home/wang/UOS/AccessOK/blog/source/images/image-20231228191201350.png)\n\n4.选中之后批量删除实例，实例假删除。但是回收站中没有刚删除的实例。\n\n![image-20231228191755526](/home/wang/UOS/AccessOK/blog/source/images/image-20231228191755526.png)\n\n但是后台实例并没有删除。\n\n![image-20231228191834263](/home/wang/UOS/AccessOK/blog/source/images/image-20231228191834263.png)\n\nBUG：批量删除没有删除到回收站，数据库进行了删除操作，但是个人回收站无法查询到刚删除的实例。\n\n5.关闭“新建卷”创建实例成功，但是实例里面没有ip。\n\n![image-20231228201621724](/home/wang/UOS/AccessOK/blog/source/images/image-20231228201621724.png)\n\n![image-20231228203258610](/home/wang/UOS/AccessOK/blog/source/images/image-20231228203258610.png)\n\n6.同样的方式再创建一个实例。\n\n![image-20231228202958546](/home/wang/UOS/AccessOK/blog/source/images/image-20231228202958546.png)\n\n![image-20231228203329441](/home/wang/UOS/AccessOK/blog/source/images/image-20231228203329441.png)\n\nBUG：实例端口显示两个相同的ip\n\n![image-20231228203146416](/home/wang/UOS/AccessOK/blog/source/images/image-20231228203146416.png)\n\n7.通过dashboard 创建实例，查看ip状态。同样没有ip。\n![image-20231228212703017](/home/wang/UOS/AccessOK/blog/source/images/image-20231228212703017.png)\n\n8.更新148环境的iptables版本。并重启148环境，创建实例之后，有ip:10.100.10.20。\n\n![image-20231228223002957](/home/wang/UOS/AccessOK/blog/source/images/image-20231228223002957.png)\n\n9.在次创建实例，测试实例互通性。由此可知vxlan网络内实例互通。\n\n![image-20231229135018445](/home/wang/UOS/AccessOK/blog/source/images/image-20231229135018445.png)\n\n10.创建新的vxlan网络和子网。\n\n![image-20231229141136199](/home/wang/UOS/AccessOK/blog/source/images/image-20231229141136199.png)\n\n![image-20231229141435188](/home/wang/UOS/AccessOK/blog/source/images/image-20231229141435188.png)\n\n11.用不同局域网创建实例，测试不同局域网的连通性。预估结果，不同局域网之间实例链接失败。\n\n![image-20231229151744918](/home/wang/UOS/AccessOK/blog/source/images/image-20231229151744918.png)\n\n12.创建路由，链接两个局域网。\n\n![image-20231229151952217](/home/wang/UOS/AccessOK/blog/source/images/image-20231229151952217.png)\n\n![image-20231229152313834](/home/wang/UOS/AccessOK/blog/source/images/image-20231229152313834.png)\n\n![image-20231229152826265](/home/wang/UOS/AccessOK/blog/source/images/image-20231229152826265.png)\n\n13.再次连通两个实例，实例链接成功。\n\n![image-20231229153048490](/home/wang/UOS/AccessOK/blog/source/images/image-20231229153048490.png)\n\n14.创建provider网络。\n\n![image-20231229153845717](/home/wang/UOS/AccessOK/blog/source/images/image-20231229153845717.png)\n\n15.创建provider子网\n\n![image-20231229154121220](/home/wang/UOS/AccessOK/blog/source/images/image-20231229154121220.png)\n\n![image-20231229155051281](/home/wang/UOS/AccessOK/blog/source/images/image-20231229155051281.png)\n\n16.验证实例不能连通外部网络。\n\n![image-20231229155148823](/home/wang/UOS/AccessOK/blog/source/images/image-20231229155148823.png)\n\n17.使用provider网络创建实例，并测试实例的外网连通性。\n\n![image-20231229160925504](/home/wang/UOS/AccessOK/blog/source/images/image-20231229160925504.png)\n\n18.外部连通失败。执行如下脚本，关闭环境宿主机端口。嵌套openstack环境，所以需要关闭所有网络的端口安全。\n\n```bash\nserver_id=$1\n\nsource /root/admin-openrc.sh\nport_ids=`openstack port list --server $server_id -f value -c ID`\n\nfor i in ${port_ids[@]}; \ndo\n    echo \"disable security for port $i\";\n    openstack port set --disable-port-security --no-security-group $i;\ndone\n```\n\n\n\n## 问题反馈\n\nwlw：删除快照失败。","source":"_drafts/Openstack-实例网络联通性调研测试.md","raw":"# Openstack-实例网络联通性调研测试\n\n环境：Openstack-v \n\n先删除所有网络，子网，端口，路由。\n\n## 测试步骤\n\n- 新建selfservice网络并创建实例，测试网络的封闭性。\n- 在selfservice网路创建实例，测试局域网的连通性。\n- 创建provider 网络，并通过路由连接到selfservice网络。连接实例与外部机器。测试路由有效。\n- 删除路由，创建浮动ip。浮动ip绑定实例，通过实例连接外部机器，外部机器通过浮动ip连接实例，测试浮动ip有效。\n\n## 云管平台验证\n\n1.创建私有网络。\n\n![image-20231228184850234](/home/wang/UOS/AccessOK/blog/source/images/image-20231228184850234.png)\n\n![image-20231228185457722](/home/wang/UOS/AccessOK/blog/source/images/image-20231228185457722.png)\n\n2.创建私有网络子网。\n\n![image-20231228185607415](/home/wang/.config/Typora/typora-user-images/image-20231228185607415.png)\n\n![image-20231228185958149](/home/wang/.config/Typora/typora-user-images/image-20231228185958149.png)\n\n3.通过私有网络创建实例。\n\n创建实例失败。\n\n![image-20231228191201350](/home/wang/UOS/AccessOK/blog/source/images/image-20231228191201350.png)\n\n4.选中之后批量删除实例，实例假删除。但是回收站中没有刚删除的实例。\n\n![image-20231228191755526](/home/wang/UOS/AccessOK/blog/source/images/image-20231228191755526.png)\n\n但是后台实例并没有删除。\n\n![image-20231228191834263](/home/wang/UOS/AccessOK/blog/source/images/image-20231228191834263.png)\n\nBUG：批量删除没有删除到回收站，数据库进行了删除操作，但是个人回收站无法查询到刚删除的实例。\n\n5.关闭“新建卷”创建实例成功，但是实例里面没有ip。\n\n![image-20231228201621724](/home/wang/UOS/AccessOK/blog/source/images/image-20231228201621724.png)\n\n![image-20231228203258610](/home/wang/UOS/AccessOK/blog/source/images/image-20231228203258610.png)\n\n6.同样的方式再创建一个实例。\n\n![image-20231228202958546](/home/wang/UOS/AccessOK/blog/source/images/image-20231228202958546.png)\n\n![image-20231228203329441](/home/wang/UOS/AccessOK/blog/source/images/image-20231228203329441.png)\n\nBUG：实例端口显示两个相同的ip\n\n![image-20231228203146416](/home/wang/UOS/AccessOK/blog/source/images/image-20231228203146416.png)\n\n7.通过dashboard 创建实例，查看ip状态。同样没有ip。\n![image-20231228212703017](/home/wang/UOS/AccessOK/blog/source/images/image-20231228212703017.png)\n\n8.更新148环境的iptables版本。并重启148环境，创建实例之后，有ip:10.100.10.20。\n\n![image-20231228223002957](/home/wang/UOS/AccessOK/blog/source/images/image-20231228223002957.png)\n\n9.在次创建实例，测试实例互通性。由此可知vxlan网络内实例互通。\n\n![image-20231229135018445](/home/wang/UOS/AccessOK/blog/source/images/image-20231229135018445.png)\n\n10.创建新的vxlan网络和子网。\n\n![image-20231229141136199](/home/wang/UOS/AccessOK/blog/source/images/image-20231229141136199.png)\n\n![image-20231229141435188](/home/wang/UOS/AccessOK/blog/source/images/image-20231229141435188.png)\n\n11.用不同局域网创建实例，测试不同局域网的连通性。预估结果，不同局域网之间实例链接失败。\n\n![image-20231229151744918](/home/wang/UOS/AccessOK/blog/source/images/image-20231229151744918.png)\n\n12.创建路由，链接两个局域网。\n\n![image-20231229151952217](/home/wang/UOS/AccessOK/blog/source/images/image-20231229151952217.png)\n\n![image-20231229152313834](/home/wang/UOS/AccessOK/blog/source/images/image-20231229152313834.png)\n\n![image-20231229152826265](/home/wang/UOS/AccessOK/blog/source/images/image-20231229152826265.png)\n\n13.再次连通两个实例，实例链接成功。\n\n![image-20231229153048490](/home/wang/UOS/AccessOK/blog/source/images/image-20231229153048490.png)\n\n14.创建provider网络。\n\n![image-20231229153845717](/home/wang/UOS/AccessOK/blog/source/images/image-20231229153845717.png)\n\n15.创建provider子网\n\n![image-20231229154121220](/home/wang/UOS/AccessOK/blog/source/images/image-20231229154121220.png)\n\n![image-20231229155051281](/home/wang/UOS/AccessOK/blog/source/images/image-20231229155051281.png)\n\n16.验证实例不能连通外部网络。\n\n![image-20231229155148823](/home/wang/UOS/AccessOK/blog/source/images/image-20231229155148823.png)\n\n17.使用provider网络创建实例，并测试实例的外网连通性。\n\n![image-20231229160925504](/home/wang/UOS/AccessOK/blog/source/images/image-20231229160925504.png)\n\n18.外部连通失败。执行如下脚本，关闭环境宿主机端口。嵌套openstack环境，所以需要关闭所有网络的端口安全。\n\n```bash\nserver_id=$1\n\nsource /root/admin-openrc.sh\nport_ids=`openstack port list --server $server_id -f value -c ID`\n\nfor i in ${port_ids[@]}; \ndo\n    echo \"disable security for port $i\";\n    openstack port set --disable-port-security --no-security-group $i;\ndone\n```\n\n\n\n## 问题反馈\n\nwlw：删除快照失败。","slug":"Openstack-实例网络联通性调研测试","published":0,"date":"2025-03-27T00:57:01.330Z","updated":"2025-03-27T00:57:01.330Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cmamklq6p0003fkd1e6p74zz2","content":"<h1 id=\"Openstack-实例网络联通性调研测试\"><a href=\"#Openstack-实例网络联通性调研测试\" class=\"headerlink\" title=\"Openstack-实例网络联通性调研测试\"></a>Openstack-实例网络联通性调研测试</h1><p>环境：Openstack-v </p>\n<p>先删除所有网络，子网，端口，路由。</p>\n<h2 id=\"测试步骤\"><a href=\"#测试步骤\" class=\"headerlink\" title=\"测试步骤\"></a>测试步骤</h2><ul>\n<li>新建selfservice网络并创建实例，测试网络的封闭性。</li>\n<li>在selfservice网路创建实例，测试局域网的连通性。</li>\n<li>创建provider 网络，并通过路由连接到selfservice网络。连接实例与外部机器。测试路由有效。</li>\n<li>删除路由，创建浮动ip。浮动ip绑定实例，通过实例连接外部机器，外部机器通过浮动ip连接实例，测试浮动ip有效。</li>\n</ul>\n<h2 id=\"云管平台验证\"><a href=\"#云管平台验证\" class=\"headerlink\" title=\"云管平台验证\"></a>云管平台验证</h2><p>1.创建私有网络。</p>\n<p><img src=\"/home/wang/UOS/AccessOK/blog/source/images/image-20231228184850234.png\" alt=\"image-20231228184850234\"></p>\n<p><img src=\"/home/wang/UOS/AccessOK/blog/source/images/image-20231228185457722.png\" alt=\"image-20231228185457722\"></p>\n<p>2.创建私有网络子网。</p>\n<p><img src=\"/home/wang/.config/Typora/typora-user-images/image-20231228185607415.png\" alt=\"image-20231228185607415\"></p>\n<p><img src=\"/home/wang/.config/Typora/typora-user-images/image-20231228185958149.png\" alt=\"image-20231228185958149\"></p>\n<p>3.通过私有网络创建实例。</p>\n<p>创建实例失败。</p>\n<p><img src=\"/home/wang/UOS/AccessOK/blog/source/images/image-20231228191201350.png\" alt=\"image-20231228191201350\"></p>\n<p>4.选中之后批量删除实例，实例假删除。但是回收站中没有刚删除的实例。</p>\n<p><img src=\"/home/wang/UOS/AccessOK/blog/source/images/image-20231228191755526.png\" alt=\"image-20231228191755526\"></p>\n<p>但是后台实例并没有删除。</p>\n<p><img src=\"/home/wang/UOS/AccessOK/blog/source/images/image-20231228191834263.png\" alt=\"image-20231228191834263\"></p>\n<p>BUG：批量删除没有删除到回收站，数据库进行了删除操作，但是个人回收站无法查询到刚删除的实例。</p>\n<p>5.关闭“新建卷”创建实例成功，但是实例里面没有ip。</p>\n<p><img src=\"/home/wang/UOS/AccessOK/blog/source/images/image-20231228201621724.png\" alt=\"image-20231228201621724\"></p>\n<p><img src=\"/home/wang/UOS/AccessOK/blog/source/images/image-20231228203258610.png\" alt=\"image-20231228203258610\"></p>\n<p>6.同样的方式再创建一个实例。</p>\n<p><img src=\"/home/wang/UOS/AccessOK/blog/source/images/image-20231228202958546.png\" alt=\"image-20231228202958546\"></p>\n<p><img src=\"/home/wang/UOS/AccessOK/blog/source/images/image-20231228203329441.png\" alt=\"image-20231228203329441\"></p>\n<p>BUG：实例端口显示两个相同的ip</p>\n<p><img src=\"/home/wang/UOS/AccessOK/blog/source/images/image-20231228203146416.png\" alt=\"image-20231228203146416\"></p>\n<p>7.通过dashboard 创建实例，查看ip状态。同样没有ip。<br><img src=\"/home/wang/UOS/AccessOK/blog/source/images/image-20231228212703017.png\" alt=\"image-20231228212703017\"></p>\n<p>8.更新148环境的iptables版本。并重启148环境，创建实例之后，有ip:10.100.10.20。</p>\n<p><img src=\"/home/wang/UOS/AccessOK/blog/source/images/image-20231228223002957.png\" alt=\"image-20231228223002957\"></p>\n<p>9.在次创建实例，测试实例互通性。由此可知vxlan网络内实例互通。</p>\n<p><img src=\"/home/wang/UOS/AccessOK/blog/source/images/image-20231229135018445.png\" alt=\"image-20231229135018445\"></p>\n<p>10.创建新的vxlan网络和子网。</p>\n<p><img src=\"/home/wang/UOS/AccessOK/blog/source/images/image-20231229141136199.png\" alt=\"image-20231229141136199\"></p>\n<p><img src=\"/home/wang/UOS/AccessOK/blog/source/images/image-20231229141435188.png\" alt=\"image-20231229141435188\"></p>\n<p>11.用不同局域网创建实例，测试不同局域网的连通性。预估结果，不同局域网之间实例链接失败。</p>\n<p><img src=\"/home/wang/UOS/AccessOK/blog/source/images/image-20231229151744918.png\" alt=\"image-20231229151744918\"></p>\n<p>12.创建路由，链接两个局域网。</p>\n<p><img src=\"/home/wang/UOS/AccessOK/blog/source/images/image-20231229151952217.png\" alt=\"image-20231229151952217\"></p>\n<p><img src=\"/home/wang/UOS/AccessOK/blog/source/images/image-20231229152313834.png\" alt=\"image-20231229152313834\"></p>\n<p><img src=\"/home/wang/UOS/AccessOK/blog/source/images/image-20231229152826265.png\" alt=\"image-20231229152826265\"></p>\n<p>13.再次连通两个实例，实例链接成功。</p>\n<p><img src=\"/home/wang/UOS/AccessOK/blog/source/images/image-20231229153048490.png\" alt=\"image-20231229153048490\"></p>\n<p>14.创建provider网络。</p>\n<p><img src=\"/home/wang/UOS/AccessOK/blog/source/images/image-20231229153845717.png\" alt=\"image-20231229153845717\"></p>\n<p>15.创建provider子网</p>\n<p><img src=\"/home/wang/UOS/AccessOK/blog/source/images/image-20231229154121220.png\" alt=\"image-20231229154121220\"></p>\n<p><img src=\"/home/wang/UOS/AccessOK/blog/source/images/image-20231229155051281.png\" alt=\"image-20231229155051281\"></p>\n<p>16.验证实例不能连通外部网络。</p>\n<p><img src=\"/home/wang/UOS/AccessOK/blog/source/images/image-20231229155148823.png\" alt=\"image-20231229155148823\"></p>\n<p>17.使用provider网络创建实例，并测试实例的外网连通性。</p>\n<p><img src=\"/home/wang/UOS/AccessOK/blog/source/images/image-20231229160925504.png\" alt=\"image-20231229160925504\"></p>\n<p>18.外部连通失败。执行如下脚本，关闭环境宿主机端口。嵌套openstack环境，所以需要关闭所有网络的端口安全。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server_id=<span class=\"variable\">$1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">source</span> /root/admin-openrc.sh</span><br><span class=\"line\">port_ids=`openstack port list --server <span class=\"variable\">$server_id</span> -f value -c ID`</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"variable\">$&#123;port_ids[@]&#125;</span>; </span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;disable security for port <span class=\"variable\">$i</span>&quot;</span>;</span><br><span class=\"line\">    openstack port <span class=\"built_in\">set</span> --disable-port-security --no-security-group <span class=\"variable\">$i</span>;</span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"问题反馈\"><a href=\"#问题反馈\" class=\"headerlink\" title=\"问题反馈\"></a>问题反馈</h2><p>wlw：删除快照失败。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Openstack-实例网络联通性调研测试\"><a href=\"#Openstack-实例网络联通性调研测试\" class=\"headerlink\" title=\"Openstack-实例网络联通性调研测试\"></a>Openstack-实例网络联通性调研测试</h1><p>环境：Openstack-v </p>\n<p>先删除所有网络，子网，端口，路由。</p>\n<h2 id=\"测试步骤\"><a href=\"#测试步骤\" class=\"headerlink\" title=\"测试步骤\"></a>测试步骤</h2><ul>\n<li>新建selfservice网络并创建实例，测试网络的封闭性。</li>\n<li>在selfservice网路创建实例，测试局域网的连通性。</li>\n<li>创建provider 网络，并通过路由连接到selfservice网络。连接实例与外部机器。测试路由有效。</li>\n<li>删除路由，创建浮动ip。浮动ip绑定实例，通过实例连接外部机器，外部机器通过浮动ip连接实例，测试浮动ip有效。</li>\n</ul>\n<h2 id=\"云管平台验证\"><a href=\"#云管平台验证\" class=\"headerlink\" title=\"云管平台验证\"></a>云管平台验证</h2><p>1.创建私有网络。</p>\n<p><img src=\"/home/wang/UOS/AccessOK/blog/source/images/image-20231228184850234.png\" alt=\"image-20231228184850234\"></p>\n<p><img src=\"/home/wang/UOS/AccessOK/blog/source/images/image-20231228185457722.png\" alt=\"image-20231228185457722\"></p>\n<p>2.创建私有网络子网。</p>\n<p><img src=\"/home/wang/.config/Typora/typora-user-images/image-20231228185607415.png\" alt=\"image-20231228185607415\"></p>\n<p><img src=\"/home/wang/.config/Typora/typora-user-images/image-20231228185958149.png\" alt=\"image-20231228185958149\"></p>\n<p>3.通过私有网络创建实例。</p>\n<p>创建实例失败。</p>\n<p><img src=\"/home/wang/UOS/AccessOK/blog/source/images/image-20231228191201350.png\" alt=\"image-20231228191201350\"></p>\n<p>4.选中之后批量删除实例，实例假删除。但是回收站中没有刚删除的实例。</p>\n<p><img src=\"/home/wang/UOS/AccessOK/blog/source/images/image-20231228191755526.png\" alt=\"image-20231228191755526\"></p>\n<p>但是后台实例并没有删除。</p>\n<p><img src=\"/home/wang/UOS/AccessOK/blog/source/images/image-20231228191834263.png\" alt=\"image-20231228191834263\"></p>\n<p>BUG：批量删除没有删除到回收站，数据库进行了删除操作，但是个人回收站无法查询到刚删除的实例。</p>\n<p>5.关闭“新建卷”创建实例成功，但是实例里面没有ip。</p>\n<p><img src=\"/home/wang/UOS/AccessOK/blog/source/images/image-20231228201621724.png\" alt=\"image-20231228201621724\"></p>\n<p><img src=\"/home/wang/UOS/AccessOK/blog/source/images/image-20231228203258610.png\" alt=\"image-20231228203258610\"></p>\n<p>6.同样的方式再创建一个实例。</p>\n<p><img src=\"/home/wang/UOS/AccessOK/blog/source/images/image-20231228202958546.png\" alt=\"image-20231228202958546\"></p>\n<p><img src=\"/home/wang/UOS/AccessOK/blog/source/images/image-20231228203329441.png\" alt=\"image-20231228203329441\"></p>\n<p>BUG：实例端口显示两个相同的ip</p>\n<p><img src=\"/home/wang/UOS/AccessOK/blog/source/images/image-20231228203146416.png\" alt=\"image-20231228203146416\"></p>\n<p>7.通过dashboard 创建实例，查看ip状态。同样没有ip。<br><img src=\"/home/wang/UOS/AccessOK/blog/source/images/image-20231228212703017.png\" alt=\"image-20231228212703017\"></p>\n<p>8.更新148环境的iptables版本。并重启148环境，创建实例之后，有ip:10.100.10.20。</p>\n<p><img src=\"/home/wang/UOS/AccessOK/blog/source/images/image-20231228223002957.png\" alt=\"image-20231228223002957\"></p>\n<p>9.在次创建实例，测试实例互通性。由此可知vxlan网络内实例互通。</p>\n<p><img src=\"/home/wang/UOS/AccessOK/blog/source/images/image-20231229135018445.png\" alt=\"image-20231229135018445\"></p>\n<p>10.创建新的vxlan网络和子网。</p>\n<p><img src=\"/home/wang/UOS/AccessOK/blog/source/images/image-20231229141136199.png\" alt=\"image-20231229141136199\"></p>\n<p><img src=\"/home/wang/UOS/AccessOK/blog/source/images/image-20231229141435188.png\" alt=\"image-20231229141435188\"></p>\n<p>11.用不同局域网创建实例，测试不同局域网的连通性。预估结果，不同局域网之间实例链接失败。</p>\n<p><img src=\"/home/wang/UOS/AccessOK/blog/source/images/image-20231229151744918.png\" alt=\"image-20231229151744918\"></p>\n<p>12.创建路由，链接两个局域网。</p>\n<p><img src=\"/home/wang/UOS/AccessOK/blog/source/images/image-20231229151952217.png\" alt=\"image-20231229151952217\"></p>\n<p><img src=\"/home/wang/UOS/AccessOK/blog/source/images/image-20231229152313834.png\" alt=\"image-20231229152313834\"></p>\n<p><img src=\"/home/wang/UOS/AccessOK/blog/source/images/image-20231229152826265.png\" alt=\"image-20231229152826265\"></p>\n<p>13.再次连通两个实例，实例链接成功。</p>\n<p><img src=\"/home/wang/UOS/AccessOK/blog/source/images/image-20231229153048490.png\" alt=\"image-20231229153048490\"></p>\n<p>14.创建provider网络。</p>\n<p><img src=\"/home/wang/UOS/AccessOK/blog/source/images/image-20231229153845717.png\" alt=\"image-20231229153845717\"></p>\n<p>15.创建provider子网</p>\n<p><img src=\"/home/wang/UOS/AccessOK/blog/source/images/image-20231229154121220.png\" alt=\"image-20231229154121220\"></p>\n<p><img src=\"/home/wang/UOS/AccessOK/blog/source/images/image-20231229155051281.png\" alt=\"image-20231229155051281\"></p>\n<p>16.验证实例不能连通外部网络。</p>\n<p><img src=\"/home/wang/UOS/AccessOK/blog/source/images/image-20231229155148823.png\" alt=\"image-20231229155148823\"></p>\n<p>17.使用provider网络创建实例，并测试实例的外网连通性。</p>\n<p><img src=\"/home/wang/UOS/AccessOK/blog/source/images/image-20231229160925504.png\" alt=\"image-20231229160925504\"></p>\n<p>18.外部连通失败。执行如下脚本，关闭环境宿主机端口。嵌套openstack环境，所以需要关闭所有网络的端口安全。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server_id=<span class=\"variable\">$1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">source</span> /root/admin-openrc.sh</span><br><span class=\"line\">port_ids=`openstack port list --server <span class=\"variable\">$server_id</span> -f value -c ID`</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"variable\">$&#123;port_ids[@]&#125;</span>; </span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;disable security for port <span class=\"variable\">$i</span>&quot;</span>;</span><br><span class=\"line\">    openstack port <span class=\"built_in\">set</span> --disable-port-security --no-security-group <span class=\"variable\">$i</span>;</span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"问题反馈\"><a href=\"#问题反馈\" class=\"headerlink\" title=\"问题反馈\"></a>问题反馈</h2><p>wlw：删除快照失败。</p>\n"},{"title":"Openstack开发环境部署","date":"2023-12-15T02:27:28.000Z","description":"Openstack开发环境部署","type":"tags","comments":1,"_content":"kolla-ansible\n参考文档：\n<https://docs.openstack.org/kolla-ansible/latest/user/quickstart.html>\n<https://docs.openstack.org/kolla-ansible/latest/user/troubleshooting.html>\n<https://docs.openstack.org/kolla-ansible/latest/contributor/kolla-for-openstack-development.html>\n\nGateway\npdb\n查看容器挂载情况\ndocker inspect container_name | grep Mounts -A 20","source":"_drafts/Openstack开发环境部署.md","raw":"---\ntitle: Openstack开发环境部署\ndate: 2023-12-15 10:27:28\ndescription: Openstack开发环境部署\ntype: \"tags\"\ncomments: true\ncategories:\n- Openstack\n- Deploy\ntags:\n- openstack\n---\nkolla-ansible\n参考文档：\n<https://docs.openstack.org/kolla-ansible/latest/user/quickstart.html>\n<https://docs.openstack.org/kolla-ansible/latest/user/troubleshooting.html>\n<https://docs.openstack.org/kolla-ansible/latest/contributor/kolla-for-openstack-development.html>\n\nGateway\npdb\n查看容器挂载情况\ndocker inspect container_name | grep Mounts -A 20","slug":"Openstack开发环境部署","published":0,"updated":"2025-03-27T00:57:01.330Z","layout":"post","photos":[],"link":"","_id":"cmamklq6r0006fkd13upk2x10","content":"<p>kolla-ansible<br>参考文档：<br><a href=\"https://docs.openstack.org/kolla-ansible/latest/user/quickstart.html\">https://docs.openstack.org/kolla-ansible/latest/user/quickstart.html</a><br><a href=\"https://docs.openstack.org/kolla-ansible/latest/user/troubleshooting.html\">https://docs.openstack.org/kolla-ansible/latest/user/troubleshooting.html</a><br><a href=\"https://docs.openstack.org/kolla-ansible/latest/contributor/kolla-for-openstack-development.html\">https://docs.openstack.org/kolla-ansible/latest/contributor/kolla-for-openstack-development.html</a></p>\n<p>Gateway<br>pdb<br>查看容器挂载情况<br>docker inspect container_name | grep Mounts -A 20</p>\n","site":{"data":{}},"excerpt":"","more":"<p>kolla-ansible<br>参考文档：<br><a href=\"https://docs.openstack.org/kolla-ansible/latest/user/quickstart.html\">https://docs.openstack.org/kolla-ansible/latest/user/quickstart.html</a><br><a href=\"https://docs.openstack.org/kolla-ansible/latest/user/troubleshooting.html\">https://docs.openstack.org/kolla-ansible/latest/user/troubleshooting.html</a><br><a href=\"https://docs.openstack.org/kolla-ansible/latest/contributor/kolla-for-openstack-development.html\">https://docs.openstack.org/kolla-ansible/latest/contributor/kolla-for-openstack-development.html</a></p>\n<p>Gateway<br>pdb<br>查看容器挂载情况<br>docker inspect container_name | grep Mounts -A 20</p>\n"},{"title":"Openstack-V部署","date":"2023-12-15T02:27:28.000Z","description":"Openstack-V部署流程及脚本","type":"tags","comments":1,"_content":"","source":"_drafts/Opensyack-v部署.md","raw":"---\ntitle: Openstack-V部署\ndate: 2023-12-15 10:27:28\ndescription: Openstack-V部署流程及脚本\ntype: \"tags\"\ncomments: true\ncategories:\n- Openstack\n- Deploy\ntags:\n- openstack\n---\n","slug":"Opensyack-v部署","published":0,"updated":"2025-03-27T00:57:01.331Z","layout":"post","photos":[],"link":"","_id":"cmamklq6r0007fkd1b9gwfkoq","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"kolla-ansible部署Openstack","date":"2023-12-15T02:27:28.000Z","description":"kolla-ansible部署Openstack","type":"tags","comments":1,"_content":"","source":"_drafts/kolla-ansible部署Openstack.md","raw":"---\ntitle: kolla-ansible部署Openstack\ndate: 2023-12-15 10:27:28\ndescription: kolla-ansible部署Openstack\ntype: \"tags\"\ncomments: true\ncategories:\n- Openstack\n- Deploy\ntags:\n- openstack\n---","slug":"kolla-ansible部署Openstack","published":0,"updated":"2025-05-13T11:38:58.262Z","layout":"post","photos":[],"link":"","_id":"cmamklq6s0008fkd19btfaoph","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"这里是文章的标题","date":"2025-03-27T00:57:01.332Z","description":"这里填写摘要。也可以把摘要这一段删去，在文章中想要截断的地方加入<!--more-->，这样在首页就只显示开头到截断的内容，而不会显示全文","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_drafts/hello-world.md","raw":"---\ntitle: 这里是文章的标题\ndate: 这里是发表时间，如：2021-08-15 08:15:16\ndescription: 这里填写摘要。也可以把摘要这一段删去，在文章中想要截断的地方加入<!--more-->，这样在首页就只显示开头到截断的内容，而不会显示全文\ncategories:\n- 分类\n- 子分类\ntags:\n- 标签1\n- 标签2\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":0,"updated":"2025-03-27T00:57:01.332Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmamklq6t000bfkd1c7qi8i3d","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"_content":"","source":"_drafts/euler编包.md","raw":"","slug":"euler编包","published":0,"date":"2025-03-27T00:57:01.331Z","updated":"2025-03-27T00:57:01.331Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cmamklq6t000cfkd19q6rgh2y","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"kolla编译Openstack容器镜像","date":"2023-12-15T02:27:28.000Z","description":"kolla编译Openstack容器镜像","type":"tags","comments":1,"_content":"\nkolla提供编译镜像的功能，kolla-ansible具有部署openstack的功能。\n### 系统配置\n#### 关闭防火墙\n```bash\nsystemctl disable --now firewalld\n```\n#### 配置域名\n```bash\n#增加域名解析\necho \"10.30.38.116 harbor.chinauos.com\" >> /etc/hosts\n```\n注：\n“registry.uniontech.com”和“harbor.chinauos.com” 是两个容器镜像仓库。\n其中“harbor.chinauos.com”是对外仓库，“registry.uniontech.com”是研发仓库。\n### 搭建编译环境\n#### 安装配置docker\n安装docker和openstack-kolla包\n```bash\nyum install moby-engine  git -y python3-devel\n```\n配置docker\n```bash\nsystemctl enable --now  docker.service\n```\n修改docker配置文件:/etc/docker/daemon.json\n```bash\n{\n    \"insecure-registries\": [\n        \"registry.uniontech.com\", \"harbor.chinauos.com\"\n    ]\n}\n```\n注：配置docker拉取容器镜像的仓库，配置此域名之后要配置相应的域名。\n“registry.uniontech.com”账户和密码：\n“harbor.chinauos.com”账户和密码：\n为docker配置不安全仓库之后重新启动docker服务。\n```bash\nsystemctl daemon-reload \nsystemctl restart docker.service \n```\n#### 安装openstack-kolla\n```bash\n#拉起openstack-kolla源码\ngit clone -b victoria-source \\\n\"http://gerrit-dev.uniontech.com/openstack/openstack-kolla\"\n#切换到响应的分支安装\n#使用pip3安装/卸载源码\npip3 install openstack-kolla/\npip3 uninstall openstack-kolla/\n```\n注：\n\n1. 安装后所有容器镜像的Dockerfile都在/usr/local/share/kolla/docker对应名称目录下。\n2. 若需要修改容器镜像找到对应的目录，更改模板文件即可。\n3. 更新sql文件，请将sql文件重新命名为ustack.sql.j2。\n#### 登录harbor仓库\n```bash\ndocker login harbor.chinauos.com\n```\nUsername: ustack\nPassword: Ustack12#$\n参考：[https://ivanzz1001.github.io/records/post/docker/2018/04/11/docker-harbor-uage](https://ivanzz1001.github.io/records/post/docker/2018/04/11/docker-harbor-uage)\nharbor是镜像管理平台，登录用户之后，则可根据用户角色权限操作镜像。\n### 编译镜像\n```bash\nkolla-build \\\n--base-image harbor.chinauos.com/ren-test/uniontechos-server-20-1060a-x86  \\\n--config-file kolla-build.conf \\\n-t source \\\n--base uniontechos \\\n--tag victoria \\\nnova\n```\n参数说明: \n--base-image 使用指定的基础镜像\n--base 构建uniontechos镜像\n--tag 构建镜像生成镜像的tag\n--base-image 根据不架构修改-x86/-arm \n--config-file 指定特定的源码地址构建镜像。\n--template-only 不制作镜像，仅仅生成 Dockerfile文件。\n注：openstack上搭建环境时，建议采用外部网络直连的方式配置虚拟机网络，采用xlan网络配置浮动ip时，在构建容器镜像时会导致安装依赖失败，拉取不到容器里的依赖，亲测有效。\n注：部分参数可以使用kolla-build --help查询，image和tag等变量信息可以登录harbor进行查看。例如当前镜像在harbor.chinauos.com域名下的ren-test项目下的uniontechos-server-20-1060a-x86镜像。点击镜像即可查询tag名称。\nkolla-build.conf 格式参考如下：\n```bash\n[nova-base]\ntype = git\nlocation = http://gerrit-dev.uniontech.com/openstack/openstack-nova\nreference = victoria-source\n\n[cinder-base]\ntype = git\nlocation = http://gerrit-dev.uniontech.com/openstack/openstack-cinder\nreference = victoria-source\n```\n容器镜像仓库配置。可根据自身想要的安装包，配置源地址，此处的源地址是指构建容器镜像时安装依赖的rpm包的仓库地址。\n构建镜像 x86的源为:/usr/local/share/kolla/docker/base/UniontechOS.repo\n```bash\n[UniontechOS-$releasever-AppStream]\nname = UniontechOS $releasever AppStream\n#baseurl = https://cdimage.uniontech.com/server-dev/1060/a/release/compose/AppStream/x86_64/os/\nbaseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/AppStream/x86_64/os/\nenabled = 1\ngpgcheck = 0\nmodule_hotfixes=true\n\n[UniontechOS-$releasever-BaseOS]\nname = UniontechOS $releasever BaseOS\n#baseurl = http://10.30.38.131/kojifiles/repos/kongzi-build/latest/x86_64/\nbaseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/BaseOS/x86_64/os/\n#baseurl = https://cdimage.uniontech.com/server-dev/1060/a/release/compose/BaseOS/x86_64/os/\nenabled = 1\ngpgcheck = 0\nmodule_hotfixes=true\n\n[UnionTechOS-$releasever-openstack]\nname = UnionTechOS $releasever openstack\nbaseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/OpenStack-Victoria/x86_64/os/\n#baseurl = http://10.30.38.131/kojifiles/repos/kongzi-openstack-victoria-build/latest/x86_64/\nenabled = 1\ngpgcheck = 0\n\n[ceph]\nname=ceph\nbaseurl=https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/Storage/x86_64/\ngpgcheck=0\nenabled=0\nmodule_hotfixes=true\n\n[Tools]\nname = Tools\nbaseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/PowerTools/x86_64/os/\nenabled = 0\ngpgcheck = 0\n\n[PLUS]\nname = plus\nbaseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/Plus/x86_64/os/\nenabled = 0\ngpgcheck = 0\n```\n构建镜像 arm的源为:/usr/local/share/kolla/docker/base/Ustack_aarch64.repo\n```bash\n[UniontechOS-$releasever-AppStream]\nname = UniontechOS $releasever AppStream\n#https://cdimage.uniontech.com/server-dev/1060/e/release-0606/arm64/OS/\nbaseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/AppStream/aarch64/os/\n#baseurl = http://pools.uniontech.com/server-enterprise-c/kongzi/1020/AppStream/x86_64/\nenabled = 1\ngpgcheck = 0\n#module_hotfixes=true\n\n[UniontechOS-$releasever-BaseOS]\nname = UniontechOS $releasever BaseOS\n#baseurl = https://cdimage.uniontech.com/server-dev/1060/e/release-0606/arm64/everything/\nbaserurl = http://10.30.38.131/kojifiles/repos/kongzi-build/latest/aarch64/\n#baseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/BaseOS/aarch64/os/\nenabled = 1\ngpgcheck = 0\n#module_hotfixes=true\n\n[UnionTechOS-$releasever-openstack]\nname = UnionTechOS $releasever openstack\n#baseurl = https://cdimage.uniontech.com/server-dev/1060/e/release-0606/arm64/OpenStack-V/\nbaseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/OpenStack-Victoria/aarch64/os/\nenabled = 1\ngpgcheck = 0\n\n[ceph]\nname=ceph\nbaseurl=https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/Storage/aarch64/\ngpgcheck=0\nenabled=1\nmodule_hotfixes=true\n\n[Tools]\nname = Tools\nbaseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/PowerTools/aarch64/os/\nenabled = 1\ngpgcheck = 0\n\n[PLUS]\nname = plus\nbaseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/Plus/aarch64/os/\nenabled = 1\ngpgcheck = 0\n```\n注：制作ustack-web需要修改start.sh 如下:/usr/local/share/kolla/docker/base/start.sh\n![image.png](https://cdn.nlark.com/yuque/0/2023/png/26098815/1695277271879-efa44824-2de4-48af-86b1-8d348c42d10c.png#averageHue=%2314172a&clientId=u4d0409ea-d20d-4&from=paste&height=74&id=u8dd3bc39&originHeight=93&originWidth=591&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=9779&status=done&style=none&taskId=u8ca6c926-8137-456f-acc7-eeef95147c0&title=&width=472.8)\n### 推送镜像到harbor\n执行如下脚本前请先根据操作环境修改变量。\n```bash\nset -o errexit\n\nTAG=victoria\nKOLLA_NAMESPECE=kolla\nUOS_REGISTRY=harbor.chinauos.com\nUOS_NAMESPACE=kolla-ustack-v-x86\n#ren-test项目中的镜像为基础镜像，kolla-ustack-v-x86项目中的镜像为持续更新的研发镜像。\n\nKOLLA_SOURCE=$(docker images | awk /kolla/'{print $1}'| xargs -I {} echo -e {}':'${TAG})\nfor i in ${KOLLA_SOURCE}; do\n        DOCKER_IMAGE_LINE=$(echo $i | tr ' ' '\\n')\n        UOS_TEST=${DOCKER_IMAGE_LINE#${KOLLA_NAMESPECE}}\n        UOS_TAG=${UOS_REGISTRY}/${UOS_NAMESPACE}${UOS_TEST}\n        echo ${UOS_TAG}\n        docker tag ${DOCKER_IMAGE_LINE} ${UOS_TAG}\n        docker push ${UOS_TAG}\n        docker rmi -f ${UOS_TAG}\ndone\n```\n","source":"_drafts/kolla编译Openstack 容器镜像.md","raw":"---\ntitle: kolla编译Openstack容器镜像\ndate: 2023-12-15 10:27:28\ndescription: kolla编译Openstack容器镜像\ntype: \"tags\"\ncomments: true\ncategories:\n- Openstack\n- Deploy\ntags:\n- openstack\n---\n\nkolla提供编译镜像的功能，kolla-ansible具有部署openstack的功能。\n### 系统配置\n#### 关闭防火墙\n```bash\nsystemctl disable --now firewalld\n```\n#### 配置域名\n```bash\n#增加域名解析\necho \"10.30.38.116 harbor.chinauos.com\" >> /etc/hosts\n```\n注：\n“registry.uniontech.com”和“harbor.chinauos.com” 是两个容器镜像仓库。\n其中“harbor.chinauos.com”是对外仓库，“registry.uniontech.com”是研发仓库。\n### 搭建编译环境\n#### 安装配置docker\n安装docker和openstack-kolla包\n```bash\nyum install moby-engine  git -y python3-devel\n```\n配置docker\n```bash\nsystemctl enable --now  docker.service\n```\n修改docker配置文件:/etc/docker/daemon.json\n```bash\n{\n    \"insecure-registries\": [\n        \"registry.uniontech.com\", \"harbor.chinauos.com\"\n    ]\n}\n```\n注：配置docker拉取容器镜像的仓库，配置此域名之后要配置相应的域名。\n“registry.uniontech.com”账户和密码：\n“harbor.chinauos.com”账户和密码：\n为docker配置不安全仓库之后重新启动docker服务。\n```bash\nsystemctl daemon-reload \nsystemctl restart docker.service \n```\n#### 安装openstack-kolla\n```bash\n#拉起openstack-kolla源码\ngit clone -b victoria-source \\\n\"http://gerrit-dev.uniontech.com/openstack/openstack-kolla\"\n#切换到响应的分支安装\n#使用pip3安装/卸载源码\npip3 install openstack-kolla/\npip3 uninstall openstack-kolla/\n```\n注：\n\n1. 安装后所有容器镜像的Dockerfile都在/usr/local/share/kolla/docker对应名称目录下。\n2. 若需要修改容器镜像找到对应的目录，更改模板文件即可。\n3. 更新sql文件，请将sql文件重新命名为ustack.sql.j2。\n#### 登录harbor仓库\n```bash\ndocker login harbor.chinauos.com\n```\nUsername: ustack\nPassword: Ustack12#$\n参考：[https://ivanzz1001.github.io/records/post/docker/2018/04/11/docker-harbor-uage](https://ivanzz1001.github.io/records/post/docker/2018/04/11/docker-harbor-uage)\nharbor是镜像管理平台，登录用户之后，则可根据用户角色权限操作镜像。\n### 编译镜像\n```bash\nkolla-build \\\n--base-image harbor.chinauos.com/ren-test/uniontechos-server-20-1060a-x86  \\\n--config-file kolla-build.conf \\\n-t source \\\n--base uniontechos \\\n--tag victoria \\\nnova\n```\n参数说明: \n--base-image 使用指定的基础镜像\n--base 构建uniontechos镜像\n--tag 构建镜像生成镜像的tag\n--base-image 根据不架构修改-x86/-arm \n--config-file 指定特定的源码地址构建镜像。\n--template-only 不制作镜像，仅仅生成 Dockerfile文件。\n注：openstack上搭建环境时，建议采用外部网络直连的方式配置虚拟机网络，采用xlan网络配置浮动ip时，在构建容器镜像时会导致安装依赖失败，拉取不到容器里的依赖，亲测有效。\n注：部分参数可以使用kolla-build --help查询，image和tag等变量信息可以登录harbor进行查看。例如当前镜像在harbor.chinauos.com域名下的ren-test项目下的uniontechos-server-20-1060a-x86镜像。点击镜像即可查询tag名称。\nkolla-build.conf 格式参考如下：\n```bash\n[nova-base]\ntype = git\nlocation = http://gerrit-dev.uniontech.com/openstack/openstack-nova\nreference = victoria-source\n\n[cinder-base]\ntype = git\nlocation = http://gerrit-dev.uniontech.com/openstack/openstack-cinder\nreference = victoria-source\n```\n容器镜像仓库配置。可根据自身想要的安装包，配置源地址，此处的源地址是指构建容器镜像时安装依赖的rpm包的仓库地址。\n构建镜像 x86的源为:/usr/local/share/kolla/docker/base/UniontechOS.repo\n```bash\n[UniontechOS-$releasever-AppStream]\nname = UniontechOS $releasever AppStream\n#baseurl = https://cdimage.uniontech.com/server-dev/1060/a/release/compose/AppStream/x86_64/os/\nbaseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/AppStream/x86_64/os/\nenabled = 1\ngpgcheck = 0\nmodule_hotfixes=true\n\n[UniontechOS-$releasever-BaseOS]\nname = UniontechOS $releasever BaseOS\n#baseurl = http://10.30.38.131/kojifiles/repos/kongzi-build/latest/x86_64/\nbaseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/BaseOS/x86_64/os/\n#baseurl = https://cdimage.uniontech.com/server-dev/1060/a/release/compose/BaseOS/x86_64/os/\nenabled = 1\ngpgcheck = 0\nmodule_hotfixes=true\n\n[UnionTechOS-$releasever-openstack]\nname = UnionTechOS $releasever openstack\nbaseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/OpenStack-Victoria/x86_64/os/\n#baseurl = http://10.30.38.131/kojifiles/repos/kongzi-openstack-victoria-build/latest/x86_64/\nenabled = 1\ngpgcheck = 0\n\n[ceph]\nname=ceph\nbaseurl=https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/Storage/x86_64/\ngpgcheck=0\nenabled=0\nmodule_hotfixes=true\n\n[Tools]\nname = Tools\nbaseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/PowerTools/x86_64/os/\nenabled = 0\ngpgcheck = 0\n\n[PLUS]\nname = plus\nbaseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/Plus/x86_64/os/\nenabled = 0\ngpgcheck = 0\n```\n构建镜像 arm的源为:/usr/local/share/kolla/docker/base/Ustack_aarch64.repo\n```bash\n[UniontechOS-$releasever-AppStream]\nname = UniontechOS $releasever AppStream\n#https://cdimage.uniontech.com/server-dev/1060/e/release-0606/arm64/OS/\nbaseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/AppStream/aarch64/os/\n#baseurl = http://pools.uniontech.com/server-enterprise-c/kongzi/1020/AppStream/x86_64/\nenabled = 1\ngpgcheck = 0\n#module_hotfixes=true\n\n[UniontechOS-$releasever-BaseOS]\nname = UniontechOS $releasever BaseOS\n#baseurl = https://cdimage.uniontech.com/server-dev/1060/e/release-0606/arm64/everything/\nbaserurl = http://10.30.38.131/kojifiles/repos/kongzi-build/latest/aarch64/\n#baseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/BaseOS/aarch64/os/\nenabled = 1\ngpgcheck = 0\n#module_hotfixes=true\n\n[UnionTechOS-$releasever-openstack]\nname = UnionTechOS $releasever openstack\n#baseurl = https://cdimage.uniontech.com/server-dev/1060/e/release-0606/arm64/OpenStack-V/\nbaseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/OpenStack-Victoria/aarch64/os/\nenabled = 1\ngpgcheck = 0\n\n[ceph]\nname=ceph\nbaseurl=https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/Storage/aarch64/\ngpgcheck=0\nenabled=1\nmodule_hotfixes=true\n\n[Tools]\nname = Tools\nbaseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/PowerTools/aarch64/os/\nenabled = 1\ngpgcheck = 0\n\n[PLUS]\nname = plus\nbaseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/Plus/aarch64/os/\nenabled = 1\ngpgcheck = 0\n```\n注：制作ustack-web需要修改start.sh 如下:/usr/local/share/kolla/docker/base/start.sh\n![image.png](https://cdn.nlark.com/yuque/0/2023/png/26098815/1695277271879-efa44824-2de4-48af-86b1-8d348c42d10c.png#averageHue=%2314172a&clientId=u4d0409ea-d20d-4&from=paste&height=74&id=u8dd3bc39&originHeight=93&originWidth=591&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=9779&status=done&style=none&taskId=u8ca6c926-8137-456f-acc7-eeef95147c0&title=&width=472.8)\n### 推送镜像到harbor\n执行如下脚本前请先根据操作环境修改变量。\n```bash\nset -o errexit\n\nTAG=victoria\nKOLLA_NAMESPECE=kolla\nUOS_REGISTRY=harbor.chinauos.com\nUOS_NAMESPACE=kolla-ustack-v-x86\n#ren-test项目中的镜像为基础镜像，kolla-ustack-v-x86项目中的镜像为持续更新的研发镜像。\n\nKOLLA_SOURCE=$(docker images | awk /kolla/'{print $1}'| xargs -I {} echo -e {}':'${TAG})\nfor i in ${KOLLA_SOURCE}; do\n        DOCKER_IMAGE_LINE=$(echo $i | tr ' ' '\\n')\n        UOS_TEST=${DOCKER_IMAGE_LINE#${KOLLA_NAMESPECE}}\n        UOS_TAG=${UOS_REGISTRY}/${UOS_NAMESPACE}${UOS_TEST}\n        echo ${UOS_TAG}\n        docker tag ${DOCKER_IMAGE_LINE} ${UOS_TAG}\n        docker push ${UOS_TAG}\n        docker rmi -f ${UOS_TAG}\ndone\n```\n","slug":"kolla编译Openstack 容器镜像","published":0,"updated":"2025-03-27T00:57:01.333Z","layout":"post","photos":[],"link":"","_id":"cmamklq6u000ffkd1an6fc8ia","content":"<p>kolla提供编译镜像的功能，kolla-ansible具有部署openstack的功能。</p>\n<h3 id=\"系统配置\"><a href=\"#系统配置\" class=\"headerlink\" title=\"系统配置\"></a>系统配置</h3><h4 id=\"关闭防火墙\"><a href=\"#关闭防火墙\" class=\"headerlink\" title=\"关闭防火墙\"></a>关闭防火墙</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl <span class=\"built_in\">disable</span> --now firewalld</span><br></pre></td></tr></table></figure>\n<h4 id=\"配置域名\"><a href=\"#配置域名\" class=\"headerlink\" title=\"配置域名\"></a>配置域名</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#增加域名解析</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;10.30.38.116 harbor.chinauos.com&quot;</span> &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure>\n<p>注：<br>“registry.uniontech.com”和“harbor.chinauos.com” 是两个容器镜像仓库。<br>其中“harbor.chinauos.com”是对外仓库，“registry.uniontech.com”是研发仓库。</p>\n<h3 id=\"搭建编译环境\"><a href=\"#搭建编译环境\" class=\"headerlink\" title=\"搭建编译环境\"></a>搭建编译环境</h3><h4 id=\"安装配置docker\"><a href=\"#安装配置docker\" class=\"headerlink\" title=\"安装配置docker\"></a>安装配置docker</h4><p>安装docker和openstack-kolla包</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install moby-engine  git -y python3-devel</span><br></pre></td></tr></table></figure>\n<p>配置docker</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl <span class=\"built_in\">enable</span> --now  docker.service</span><br></pre></td></tr></table></figure>\n<p>修改docker配置文件:&#x2F;etc&#x2F;docker&#x2F;daemon.json</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;insecure-registries&quot;</span>: [</span><br><span class=\"line\">        <span class=\"string\">&quot;registry.uniontech.com&quot;</span>, <span class=\"string\">&quot;harbor.chinauos.com&quot;</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注：配置docker拉取容器镜像的仓库，配置此域名之后要配置相应的域名。<br>“registry.uniontech.com”账户和密码：<br>“harbor.chinauos.com”账户和密码：<br>为docker配置不安全仓库之后重新启动docker服务。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl daemon-reload </span><br><span class=\"line\">systemctl restart docker.service </span><br></pre></td></tr></table></figure>\n<h4 id=\"安装openstack-kolla\"><a href=\"#安装openstack-kolla\" class=\"headerlink\" title=\"安装openstack-kolla\"></a>安装openstack-kolla</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#拉起openstack-kolla源码</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> -b victoria-source \\</span><br><span class=\"line\"><span class=\"string\">&quot;http://gerrit-dev.uniontech.com/openstack/openstack-kolla&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#切换到响应的分支安装</span></span><br><span class=\"line\"><span class=\"comment\">#使用pip3安装/卸载源码</span></span><br><span class=\"line\">pip3 install openstack-kolla/</span><br><span class=\"line\">pip3 uninstall openstack-kolla/</span><br></pre></td></tr></table></figure>\n<p>注：</p>\n<ol>\n<li>安装后所有容器镜像的Dockerfile都在&#x2F;usr&#x2F;local&#x2F;share&#x2F;kolla&#x2F;docker对应名称目录下。</li>\n<li>若需要修改容器镜像找到对应的目录，更改模板文件即可。</li>\n<li>更新sql文件，请将sql文件重新命名为ustack.sql.j2。</li>\n</ol>\n<h4 id=\"登录harbor仓库\"><a href=\"#登录harbor仓库\" class=\"headerlink\" title=\"登录harbor仓库\"></a>登录harbor仓库</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker login harbor.chinauos.com</span><br></pre></td></tr></table></figure>\n<p>Username: ustack<br>Password: Ustack12#$<br>参考：<a href=\"https://ivanzz1001.github.io/records/post/docker/2018/04/11/docker-harbor-uage\">https://ivanzz1001.github.io/records/post/docker/2018/04/11/docker-harbor-uage</a><br>harbor是镜像管理平台，登录用户之后，则可根据用户角色权限操作镜像。</p>\n<h3 id=\"编译镜像\"><a href=\"#编译镜像\" class=\"headerlink\" title=\"编译镜像\"></a>编译镜像</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kolla-build \\</span><br><span class=\"line\">--base-image harbor.chinauos.com/ren-test/uniontechos-server-20-1060a-x86  \\</span><br><span class=\"line\">--config-file kolla-build.conf \\</span><br><span class=\"line\">-t <span class=\"built_in\">source</span> \\</span><br><span class=\"line\">--base uniontechos \\</span><br><span class=\"line\">--tag victoria \\</span><br><span class=\"line\">nova</span><br></pre></td></tr></table></figure>\n<p>参数说明:<br>–base-image 使用指定的基础镜像<br>–base 构建uniontechos镜像<br>–tag 构建镜像生成镜像的tag<br>–base-image 根据不架构修改-x86&#x2F;-arm<br>–config-file 指定特定的源码地址构建镜像。<br>–template-only 不制作镜像，仅仅生成 Dockerfile文件。<br>注：openstack上搭建环境时，建议采用外部网络直连的方式配置虚拟机网络，采用xlan网络配置浮动ip时，在构建容器镜像时会导致安装依赖失败，拉取不到容器里的依赖，亲测有效。<br>注：部分参数可以使用kolla-build –help查询，image和tag等变量信息可以登录harbor进行查看。例如当前镜像在harbor.chinauos.com域名下的ren-test项目下的uniontechos-server-20-1060a-x86镜像。点击镜像即可查询tag名称。<br>kolla-build.conf 格式参考如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[nova-base]</span><br><span class=\"line\"><span class=\"built_in\">type</span> = git</span><br><span class=\"line\">location = http://gerrit-dev.uniontech.com/openstack/openstack-nova</span><br><span class=\"line\">reference = victoria-source</span><br><span class=\"line\"></span><br><span class=\"line\">[cinder-base]</span><br><span class=\"line\"><span class=\"built_in\">type</span> = git</span><br><span class=\"line\">location = http://gerrit-dev.uniontech.com/openstack/openstack-cinder</span><br><span class=\"line\">reference = victoria-source</span><br></pre></td></tr></table></figure>\n<p>容器镜像仓库配置。可根据自身想要的安装包，配置源地址，此处的源地址是指构建容器镜像时安装依赖的rpm包的仓库地址。<br>构建镜像 x86的源为:&#x2F;usr&#x2F;local&#x2F;share&#x2F;kolla&#x2F;docker&#x2F;base&#x2F;UniontechOS.repo</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[UniontechOS-<span class=\"variable\">$releasever</span>-AppStream]</span><br><span class=\"line\">name = UniontechOS <span class=\"variable\">$releasever</span> AppStream</span><br><span class=\"line\"><span class=\"comment\">#baseurl = https://cdimage.uniontech.com/server-dev/1060/a/release/compose/AppStream/x86_64/os/</span></span><br><span class=\"line\">baseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/AppStream/x86_64/os/</span><br><span class=\"line\">enabled = 1</span><br><span class=\"line\">gpgcheck = 0</span><br><span class=\"line\">module_hotfixes=<span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">[UniontechOS-<span class=\"variable\">$releasever</span>-BaseOS]</span><br><span class=\"line\">name = UniontechOS <span class=\"variable\">$releasever</span> BaseOS</span><br><span class=\"line\"><span class=\"comment\">#baseurl = http://10.30.38.131/kojifiles/repos/kongzi-build/latest/x86_64/</span></span><br><span class=\"line\">baseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/BaseOS/x86_64/os/</span><br><span class=\"line\"><span class=\"comment\">#baseurl = https://cdimage.uniontech.com/server-dev/1060/a/release/compose/BaseOS/x86_64/os/</span></span><br><span class=\"line\">enabled = 1</span><br><span class=\"line\">gpgcheck = 0</span><br><span class=\"line\">module_hotfixes=<span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">[UnionTechOS-<span class=\"variable\">$releasever</span>-openstack]</span><br><span class=\"line\">name = UnionTechOS <span class=\"variable\">$releasever</span> openstack</span><br><span class=\"line\">baseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/OpenStack-Victoria/x86_64/os/</span><br><span class=\"line\"><span class=\"comment\">#baseurl = http://10.30.38.131/kojifiles/repos/kongzi-openstack-victoria-build/latest/x86_64/</span></span><br><span class=\"line\">enabled = 1</span><br><span class=\"line\">gpgcheck = 0</span><br><span class=\"line\"></span><br><span class=\"line\">[ceph]</span><br><span class=\"line\">name=ceph</span><br><span class=\"line\">baseurl=https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/Storage/x86_64/</span><br><span class=\"line\">gpgcheck=0</span><br><span class=\"line\">enabled=0</span><br><span class=\"line\">module_hotfixes=<span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">[Tools]</span><br><span class=\"line\">name = Tools</span><br><span class=\"line\">baseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/PowerTools/x86_64/os/</span><br><span class=\"line\">enabled = 0</span><br><span class=\"line\">gpgcheck = 0</span><br><span class=\"line\"></span><br><span class=\"line\">[PLUS]</span><br><span class=\"line\">name = plus</span><br><span class=\"line\">baseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/Plus/x86_64/os/</span><br><span class=\"line\">enabled = 0</span><br><span class=\"line\">gpgcheck = 0</span><br></pre></td></tr></table></figure>\n<p>构建镜像 arm的源为:&#x2F;usr&#x2F;local&#x2F;share&#x2F;kolla&#x2F;docker&#x2F;base&#x2F;Ustack_aarch64.repo</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[UniontechOS-<span class=\"variable\">$releasever</span>-AppStream]</span><br><span class=\"line\">name = UniontechOS <span class=\"variable\">$releasever</span> AppStream</span><br><span class=\"line\"><span class=\"comment\">#https://cdimage.uniontech.com/server-dev/1060/e/release-0606/arm64/OS/</span></span><br><span class=\"line\">baseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/AppStream/aarch64/os/</span><br><span class=\"line\"><span class=\"comment\">#baseurl = http://pools.uniontech.com/server-enterprise-c/kongzi/1020/AppStream/x86_64/</span></span><br><span class=\"line\">enabled = 1</span><br><span class=\"line\">gpgcheck = 0</span><br><span class=\"line\"><span class=\"comment\">#module_hotfixes=true</span></span><br><span class=\"line\"></span><br><span class=\"line\">[UniontechOS-<span class=\"variable\">$releasever</span>-BaseOS]</span><br><span class=\"line\">name = UniontechOS <span class=\"variable\">$releasever</span> BaseOS</span><br><span class=\"line\"><span class=\"comment\">#baseurl = https://cdimage.uniontech.com/server-dev/1060/e/release-0606/arm64/everything/</span></span><br><span class=\"line\">baserurl = http://10.30.38.131/kojifiles/repos/kongzi-build/latest/aarch64/</span><br><span class=\"line\"><span class=\"comment\">#baseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/BaseOS/aarch64/os/</span></span><br><span class=\"line\">enabled = 1</span><br><span class=\"line\">gpgcheck = 0</span><br><span class=\"line\"><span class=\"comment\">#module_hotfixes=true</span></span><br><span class=\"line\"></span><br><span class=\"line\">[UnionTechOS-<span class=\"variable\">$releasever</span>-openstack]</span><br><span class=\"line\">name = UnionTechOS <span class=\"variable\">$releasever</span> openstack</span><br><span class=\"line\"><span class=\"comment\">#baseurl = https://cdimage.uniontech.com/server-dev/1060/e/release-0606/arm64/OpenStack-V/</span></span><br><span class=\"line\">baseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/OpenStack-Victoria/aarch64/os/</span><br><span class=\"line\">enabled = 1</span><br><span class=\"line\">gpgcheck = 0</span><br><span class=\"line\"></span><br><span class=\"line\">[ceph]</span><br><span class=\"line\">name=ceph</span><br><span class=\"line\">baseurl=https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/Storage/aarch64/</span><br><span class=\"line\">gpgcheck=0</span><br><span class=\"line\">enabled=1</span><br><span class=\"line\">module_hotfixes=<span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">[Tools]</span><br><span class=\"line\">name = Tools</span><br><span class=\"line\">baseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/PowerTools/aarch64/os/</span><br><span class=\"line\">enabled = 1</span><br><span class=\"line\">gpgcheck = 0</span><br><span class=\"line\"></span><br><span class=\"line\">[PLUS]</span><br><span class=\"line\">name = plus</span><br><span class=\"line\">baseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/Plus/aarch64/os/</span><br><span class=\"line\">enabled = 1</span><br><span class=\"line\">gpgcheck = 0</span><br></pre></td></tr></table></figure>\n<p>注：制作ustack-web需要修改start.sh 如下:&#x2F;usr&#x2F;local&#x2F;share&#x2F;kolla&#x2F;docker&#x2F;base&#x2F;start.sh<br><img src=\"https://cdn.nlark.com/yuque/0/2023/png/26098815/1695277271879-efa44824-2de4-48af-86b1-8d348c42d10c.png#averageHue=%2314172a&clientId=u4d0409ea-d20d-4&from=paste&height=74&id=u8dd3bc39&originHeight=93&originWidth=591&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=9779&status=done&style=none&taskId=u8ca6c926-8137-456f-acc7-eeef95147c0&title=&width=472.8\" alt=\"image.png\"></p>\n<h3 id=\"推送镜像到harbor\"><a href=\"#推送镜像到harbor\" class=\"headerlink\" title=\"推送镜像到harbor\"></a>推送镜像到harbor</h3><p>执行如下脚本前请先根据操作环境修改变量。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">set</span> -o errexit</span><br><span class=\"line\"></span><br><span class=\"line\">TAG=victoria</span><br><span class=\"line\">KOLLA_NAMESPECE=kolla</span><br><span class=\"line\">UOS_REGISTRY=harbor.chinauos.com</span><br><span class=\"line\">UOS_NAMESPACE=kolla-ustack-v-x86</span><br><span class=\"line\"><span class=\"comment\">#ren-test项目中的镜像为基础镜像，kolla-ustack-v-x86项目中的镜像为持续更新的研发镜像。</span></span><br><span class=\"line\"></span><br><span class=\"line\">KOLLA_SOURCE=$(docker images | awk /kolla/<span class=\"string\">&#x27;&#123;print $1&#125;&#x27;</span>| xargs -I &#123;&#125; <span class=\"built_in\">echo</span> -e &#123;&#125;<span class=\"string\">&#x27;:&#x27;</span><span class=\"variable\">$&#123;TAG&#125;</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"variable\">$&#123;KOLLA_SOURCE&#125;</span>; <span class=\"keyword\">do</span></span><br><span class=\"line\">        DOCKER_IMAGE_LINE=$(<span class=\"built_in\">echo</span> <span class=\"variable\">$i</span> | <span class=\"built_in\">tr</span> <span class=\"string\">&#x27; &#x27;</span> <span class=\"string\">&#x27;\\n&#x27;</span>)</span><br><span class=\"line\">        UOS_TEST=<span class=\"variable\">$&#123;DOCKER_IMAGE_LINE#<span class=\"variable\">$&#123;KOLLA_NAMESPECE&#125;</span>&#125;</span></span><br><span class=\"line\">        UOS_TAG=<span class=\"variable\">$&#123;UOS_REGISTRY&#125;</span>/<span class=\"variable\">$&#123;UOS_NAMESPACE&#125;</span><span class=\"variable\">$&#123;UOS_TEST&#125;</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;UOS_TAG&#125;</span></span><br><span class=\"line\">        docker tag <span class=\"variable\">$&#123;DOCKER_IMAGE_LINE&#125;</span> <span class=\"variable\">$&#123;UOS_TAG&#125;</span></span><br><span class=\"line\">        docker push <span class=\"variable\">$&#123;UOS_TAG&#125;</span></span><br><span class=\"line\">        docker rmi -f <span class=\"variable\">$&#123;UOS_TAG&#125;</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>kolla提供编译镜像的功能，kolla-ansible具有部署openstack的功能。</p>\n<h3 id=\"系统配置\"><a href=\"#系统配置\" class=\"headerlink\" title=\"系统配置\"></a>系统配置</h3><h4 id=\"关闭防火墙\"><a href=\"#关闭防火墙\" class=\"headerlink\" title=\"关闭防火墙\"></a>关闭防火墙</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl <span class=\"built_in\">disable</span> --now firewalld</span><br></pre></td></tr></table></figure>\n<h4 id=\"配置域名\"><a href=\"#配置域名\" class=\"headerlink\" title=\"配置域名\"></a>配置域名</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#增加域名解析</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;10.30.38.116 harbor.chinauos.com&quot;</span> &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure>\n<p>注：<br>“registry.uniontech.com”和“harbor.chinauos.com” 是两个容器镜像仓库。<br>其中“harbor.chinauos.com”是对外仓库，“registry.uniontech.com”是研发仓库。</p>\n<h3 id=\"搭建编译环境\"><a href=\"#搭建编译环境\" class=\"headerlink\" title=\"搭建编译环境\"></a>搭建编译环境</h3><h4 id=\"安装配置docker\"><a href=\"#安装配置docker\" class=\"headerlink\" title=\"安装配置docker\"></a>安装配置docker</h4><p>安装docker和openstack-kolla包</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install moby-engine  git -y python3-devel</span><br></pre></td></tr></table></figure>\n<p>配置docker</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl <span class=\"built_in\">enable</span> --now  docker.service</span><br></pre></td></tr></table></figure>\n<p>修改docker配置文件:&#x2F;etc&#x2F;docker&#x2F;daemon.json</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;insecure-registries&quot;</span>: [</span><br><span class=\"line\">        <span class=\"string\">&quot;registry.uniontech.com&quot;</span>, <span class=\"string\">&quot;harbor.chinauos.com&quot;</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注：配置docker拉取容器镜像的仓库，配置此域名之后要配置相应的域名。<br>“registry.uniontech.com”账户和密码：<br>“harbor.chinauos.com”账户和密码：<br>为docker配置不安全仓库之后重新启动docker服务。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl daemon-reload </span><br><span class=\"line\">systemctl restart docker.service </span><br></pre></td></tr></table></figure>\n<h4 id=\"安装openstack-kolla\"><a href=\"#安装openstack-kolla\" class=\"headerlink\" title=\"安装openstack-kolla\"></a>安装openstack-kolla</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#拉起openstack-kolla源码</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> -b victoria-source \\</span><br><span class=\"line\"><span class=\"string\">&quot;http://gerrit-dev.uniontech.com/openstack/openstack-kolla&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#切换到响应的分支安装</span></span><br><span class=\"line\"><span class=\"comment\">#使用pip3安装/卸载源码</span></span><br><span class=\"line\">pip3 install openstack-kolla/</span><br><span class=\"line\">pip3 uninstall openstack-kolla/</span><br></pre></td></tr></table></figure>\n<p>注：</p>\n<ol>\n<li>安装后所有容器镜像的Dockerfile都在&#x2F;usr&#x2F;local&#x2F;share&#x2F;kolla&#x2F;docker对应名称目录下。</li>\n<li>若需要修改容器镜像找到对应的目录，更改模板文件即可。</li>\n<li>更新sql文件，请将sql文件重新命名为ustack.sql.j2。</li>\n</ol>\n<h4 id=\"登录harbor仓库\"><a href=\"#登录harbor仓库\" class=\"headerlink\" title=\"登录harbor仓库\"></a>登录harbor仓库</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker login harbor.chinauos.com</span><br></pre></td></tr></table></figure>\n<p>Username: ustack<br>Password: Ustack12#$<br>参考：<a href=\"https://ivanzz1001.github.io/records/post/docker/2018/04/11/docker-harbor-uage\">https://ivanzz1001.github.io/records/post/docker/2018/04/11/docker-harbor-uage</a><br>harbor是镜像管理平台，登录用户之后，则可根据用户角色权限操作镜像。</p>\n<h3 id=\"编译镜像\"><a href=\"#编译镜像\" class=\"headerlink\" title=\"编译镜像\"></a>编译镜像</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kolla-build \\</span><br><span class=\"line\">--base-image harbor.chinauos.com/ren-test/uniontechos-server-20-1060a-x86  \\</span><br><span class=\"line\">--config-file kolla-build.conf \\</span><br><span class=\"line\">-t <span class=\"built_in\">source</span> \\</span><br><span class=\"line\">--base uniontechos \\</span><br><span class=\"line\">--tag victoria \\</span><br><span class=\"line\">nova</span><br></pre></td></tr></table></figure>\n<p>参数说明:<br>–base-image 使用指定的基础镜像<br>–base 构建uniontechos镜像<br>–tag 构建镜像生成镜像的tag<br>–base-image 根据不架构修改-x86&#x2F;-arm<br>–config-file 指定特定的源码地址构建镜像。<br>–template-only 不制作镜像，仅仅生成 Dockerfile文件。<br>注：openstack上搭建环境时，建议采用外部网络直连的方式配置虚拟机网络，采用xlan网络配置浮动ip时，在构建容器镜像时会导致安装依赖失败，拉取不到容器里的依赖，亲测有效。<br>注：部分参数可以使用kolla-build –help查询，image和tag等变量信息可以登录harbor进行查看。例如当前镜像在harbor.chinauos.com域名下的ren-test项目下的uniontechos-server-20-1060a-x86镜像。点击镜像即可查询tag名称。<br>kolla-build.conf 格式参考如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[nova-base]</span><br><span class=\"line\"><span class=\"built_in\">type</span> = git</span><br><span class=\"line\">location = http://gerrit-dev.uniontech.com/openstack/openstack-nova</span><br><span class=\"line\">reference = victoria-source</span><br><span class=\"line\"></span><br><span class=\"line\">[cinder-base]</span><br><span class=\"line\"><span class=\"built_in\">type</span> = git</span><br><span class=\"line\">location = http://gerrit-dev.uniontech.com/openstack/openstack-cinder</span><br><span class=\"line\">reference = victoria-source</span><br></pre></td></tr></table></figure>\n<p>容器镜像仓库配置。可根据自身想要的安装包，配置源地址，此处的源地址是指构建容器镜像时安装依赖的rpm包的仓库地址。<br>构建镜像 x86的源为:&#x2F;usr&#x2F;local&#x2F;share&#x2F;kolla&#x2F;docker&#x2F;base&#x2F;UniontechOS.repo</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[UniontechOS-<span class=\"variable\">$releasever</span>-AppStream]</span><br><span class=\"line\">name = UniontechOS <span class=\"variable\">$releasever</span> AppStream</span><br><span class=\"line\"><span class=\"comment\">#baseurl = https://cdimage.uniontech.com/server-dev/1060/a/release/compose/AppStream/x86_64/os/</span></span><br><span class=\"line\">baseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/AppStream/x86_64/os/</span><br><span class=\"line\">enabled = 1</span><br><span class=\"line\">gpgcheck = 0</span><br><span class=\"line\">module_hotfixes=<span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">[UniontechOS-<span class=\"variable\">$releasever</span>-BaseOS]</span><br><span class=\"line\">name = UniontechOS <span class=\"variable\">$releasever</span> BaseOS</span><br><span class=\"line\"><span class=\"comment\">#baseurl = http://10.30.38.131/kojifiles/repos/kongzi-build/latest/x86_64/</span></span><br><span class=\"line\">baseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/BaseOS/x86_64/os/</span><br><span class=\"line\"><span class=\"comment\">#baseurl = https://cdimage.uniontech.com/server-dev/1060/a/release/compose/BaseOS/x86_64/os/</span></span><br><span class=\"line\">enabled = 1</span><br><span class=\"line\">gpgcheck = 0</span><br><span class=\"line\">module_hotfixes=<span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">[UnionTechOS-<span class=\"variable\">$releasever</span>-openstack]</span><br><span class=\"line\">name = UnionTechOS <span class=\"variable\">$releasever</span> openstack</span><br><span class=\"line\">baseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/OpenStack-Victoria/x86_64/os/</span><br><span class=\"line\"><span class=\"comment\">#baseurl = http://10.30.38.131/kojifiles/repos/kongzi-openstack-victoria-build/latest/x86_64/</span></span><br><span class=\"line\">enabled = 1</span><br><span class=\"line\">gpgcheck = 0</span><br><span class=\"line\"></span><br><span class=\"line\">[ceph]</span><br><span class=\"line\">name=ceph</span><br><span class=\"line\">baseurl=https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/Storage/x86_64/</span><br><span class=\"line\">gpgcheck=0</span><br><span class=\"line\">enabled=0</span><br><span class=\"line\">module_hotfixes=<span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">[Tools]</span><br><span class=\"line\">name = Tools</span><br><span class=\"line\">baseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/PowerTools/x86_64/os/</span><br><span class=\"line\">enabled = 0</span><br><span class=\"line\">gpgcheck = 0</span><br><span class=\"line\"></span><br><span class=\"line\">[PLUS]</span><br><span class=\"line\">name = plus</span><br><span class=\"line\">baseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/Plus/x86_64/os/</span><br><span class=\"line\">enabled = 0</span><br><span class=\"line\">gpgcheck = 0</span><br></pre></td></tr></table></figure>\n<p>构建镜像 arm的源为:&#x2F;usr&#x2F;local&#x2F;share&#x2F;kolla&#x2F;docker&#x2F;base&#x2F;Ustack_aarch64.repo</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[UniontechOS-<span class=\"variable\">$releasever</span>-AppStream]</span><br><span class=\"line\">name = UniontechOS <span class=\"variable\">$releasever</span> AppStream</span><br><span class=\"line\"><span class=\"comment\">#https://cdimage.uniontech.com/server-dev/1060/e/release-0606/arm64/OS/</span></span><br><span class=\"line\">baseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/AppStream/aarch64/os/</span><br><span class=\"line\"><span class=\"comment\">#baseurl = http://pools.uniontech.com/server-enterprise-c/kongzi/1020/AppStream/x86_64/</span></span><br><span class=\"line\">enabled = 1</span><br><span class=\"line\">gpgcheck = 0</span><br><span class=\"line\"><span class=\"comment\">#module_hotfixes=true</span></span><br><span class=\"line\"></span><br><span class=\"line\">[UniontechOS-<span class=\"variable\">$releasever</span>-BaseOS]</span><br><span class=\"line\">name = UniontechOS <span class=\"variable\">$releasever</span> BaseOS</span><br><span class=\"line\"><span class=\"comment\">#baseurl = https://cdimage.uniontech.com/server-dev/1060/e/release-0606/arm64/everything/</span></span><br><span class=\"line\">baserurl = http://10.30.38.131/kojifiles/repos/kongzi-build/latest/aarch64/</span><br><span class=\"line\"><span class=\"comment\">#baseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/BaseOS/aarch64/os/</span></span><br><span class=\"line\">enabled = 1</span><br><span class=\"line\">gpgcheck = 0</span><br><span class=\"line\"><span class=\"comment\">#module_hotfixes=true</span></span><br><span class=\"line\"></span><br><span class=\"line\">[UnionTechOS-<span class=\"variable\">$releasever</span>-openstack]</span><br><span class=\"line\">name = UnionTechOS <span class=\"variable\">$releasever</span> openstack</span><br><span class=\"line\"><span class=\"comment\">#baseurl = https://cdimage.uniontech.com/server-dev/1060/e/release-0606/arm64/OpenStack-V/</span></span><br><span class=\"line\">baseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/OpenStack-Victoria/aarch64/os/</span><br><span class=\"line\">enabled = 1</span><br><span class=\"line\">gpgcheck = 0</span><br><span class=\"line\"></span><br><span class=\"line\">[ceph]</span><br><span class=\"line\">name=ceph</span><br><span class=\"line\">baseurl=https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/Storage/aarch64/</span><br><span class=\"line\">gpgcheck=0</span><br><span class=\"line\">enabled=1</span><br><span class=\"line\">module_hotfixes=<span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">[Tools]</span><br><span class=\"line\">name = Tools</span><br><span class=\"line\">baseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/PowerTools/aarch64/os/</span><br><span class=\"line\">enabled = 1</span><br><span class=\"line\">gpgcheck = 0</span><br><span class=\"line\"></span><br><span class=\"line\">[PLUS]</span><br><span class=\"line\">name = plus</span><br><span class=\"line\">baseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/Plus/aarch64/os/</span><br><span class=\"line\">enabled = 1</span><br><span class=\"line\">gpgcheck = 0</span><br></pre></td></tr></table></figure>\n<p>注：制作ustack-web需要修改start.sh 如下:&#x2F;usr&#x2F;local&#x2F;share&#x2F;kolla&#x2F;docker&#x2F;base&#x2F;start.sh<br><img src=\"https://cdn.nlark.com/yuque/0/2023/png/26098815/1695277271879-efa44824-2de4-48af-86b1-8d348c42d10c.png#averageHue=%2314172a&clientId=u4d0409ea-d20d-4&from=paste&height=74&id=u8dd3bc39&originHeight=93&originWidth=591&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=9779&status=done&style=none&taskId=u8ca6c926-8137-456f-acc7-eeef95147c0&title=&width=472.8\" alt=\"image.png\"></p>\n<h3 id=\"推送镜像到harbor\"><a href=\"#推送镜像到harbor\" class=\"headerlink\" title=\"推送镜像到harbor\"></a>推送镜像到harbor</h3><p>执行如下脚本前请先根据操作环境修改变量。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">set</span> -o errexit</span><br><span class=\"line\"></span><br><span class=\"line\">TAG=victoria</span><br><span class=\"line\">KOLLA_NAMESPECE=kolla</span><br><span class=\"line\">UOS_REGISTRY=harbor.chinauos.com</span><br><span class=\"line\">UOS_NAMESPACE=kolla-ustack-v-x86</span><br><span class=\"line\"><span class=\"comment\">#ren-test项目中的镜像为基础镜像，kolla-ustack-v-x86项目中的镜像为持续更新的研发镜像。</span></span><br><span class=\"line\"></span><br><span class=\"line\">KOLLA_SOURCE=$(docker images | awk /kolla/<span class=\"string\">&#x27;&#123;print $1&#125;&#x27;</span>| xargs -I &#123;&#125; <span class=\"built_in\">echo</span> -e &#123;&#125;<span class=\"string\">&#x27;:&#x27;</span><span class=\"variable\">$&#123;TAG&#125;</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"variable\">$&#123;KOLLA_SOURCE&#125;</span>; <span class=\"keyword\">do</span></span><br><span class=\"line\">        DOCKER_IMAGE_LINE=$(<span class=\"built_in\">echo</span> <span class=\"variable\">$i</span> | <span class=\"built_in\">tr</span> <span class=\"string\">&#x27; &#x27;</span> <span class=\"string\">&#x27;\\n&#x27;</span>)</span><br><span class=\"line\">        UOS_TEST=<span class=\"variable\">$&#123;DOCKER_IMAGE_LINE#<span class=\"variable\">$&#123;KOLLA_NAMESPECE&#125;</span>&#125;</span></span><br><span class=\"line\">        UOS_TAG=<span class=\"variable\">$&#123;UOS_REGISTRY&#125;</span>/<span class=\"variable\">$&#123;UOS_NAMESPACE&#125;</span><span class=\"variable\">$&#123;UOS_TEST&#125;</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;UOS_TAG&#125;</span></span><br><span class=\"line\">        docker tag <span class=\"variable\">$&#123;DOCKER_IMAGE_LINE&#125;</span> <span class=\"variable\">$&#123;UOS_TAG&#125;</span></span><br><span class=\"line\">        docker push <span class=\"variable\">$&#123;UOS_TAG&#125;</span></span><br><span class=\"line\">        docker rmi -f <span class=\"variable\">$&#123;UOS_TAG&#125;</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n"},{"title":"nova源码解析","date":"2023-12-15T02:27:28.000Z","description":"nova源码解析","type":"tags","comments":1,"_content":"","source":"_drafts/nova源码解析.md","raw":"---\ntitle: nova源码解析\ndate: 2023-12-15 10:27:28\ndescription: nova源码解析\ntype: \"tags\"\ncomments: true\ncategories:\n- Openstack\n- Nova\n- Development\ntags:\n- openstack\n- nova\n---","slug":"nova源码解析","published":0,"updated":"2025-03-27T00:57:01.333Z","layout":"post","photos":[],"link":"","_id":"cmamklq6v000hfkd14t51aylw","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"前端项目配置部署","date":"2024-02-29T07:32:16.000Z","description":"前端项目配置部署","_content":"前端项目配置\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_drafts/npm配置部署.md","raw":"---\ntitle: 前端项目配置部署\ndate: 2024-02-29 15:32:16\ndescription: 前端项目配置部署\ncategories:\n- Linux\n- Web\ntags:\n- web\n- npm\n- nodejs\n---\n前端项目配置\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"npm配置部署","published":0,"updated":"2025-03-27T00:57:01.334Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmamklq6w000lfkd1hrbs1dpo","content":"<p>前端项目配置</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>前端项目配置</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"_content":"# 基于Nova开发Usb\n\n## 初识Nova\n\n​\tNova（OpenStack Compute Service）是 OpenStack 最核心的服务，负责维护和管理云环境的计算资源，同时管理虚拟机生命周期。\n\n- Nova-Api服务\n\n  主要用于接收和响应外部请求。\n\n  - nova-api组件实现了RESTful API功能，是外部访问Nova的唯一途径。\n  - 接收外部的请求并通过Message Queue将请求发送给其他的服务组件，同时也兼容EC2 API，所以也可以用EC2的管理工具对nova进行日常管理。\n\n- Nova-Cert服务\n\n  是Nova的证书管理服务，用来为EC2服务提供身份验证，仅仅是在EC2 API的请求中使用。\n\n- Nova-Scheduler服务\n\n  用于Nova的调度工作，在创建虚拟机时，由它选择将虚拟机创建在哪台计算节点上。\n\n- Nova-Conductor服务\n\n  这个是服务是计算节点访问数据库时的一个中间层，它出现的作用是防止计算节点的Nova-Compute服务直接访问数据库。\n\n- Nova-Console服务\n\n  Nova增强了它的控制台服务。控制台服务允许用户可以通过代理服务器访问虚拟化实例。这就涉及了一对新的守护进程（nova-console和nova-consoleauth).\n\n- Nova-Consoleauth服务\n\n  主要用于控制台的用户访问授权\n\n- Nova-Novncproxy服务\n\n  用于为用户访问虚拟机提供了一个VNC的代理。通过VNC协议，可以支持基于浏览器的novnc客户端，后面你在网页打开的console界面就是依靠这个服务提供的。\n\n- Nova-Compute\n\n  Nova-compute是Nova最重要的组件之一。\n\n  - nova-compute 一般运行在计算节点上，通过Message Queue接收并管理VM的生命周期。\n  - Nova-compute 通过Libvirt管理KVM，通过XenAPI管理Xen等。\n\n## nova源码目录结构\n\n```\naccelerator/    # Cyborg 加速器\napi/            # Nova API 服务\n\t__init__.py\n    auth.py             # 身份认证中间件\n    compute_req_id.py   # x-compute-request-id 中间件（oslo_middleware）\n    metadata/           # Metadata API\n    openstack/          # Nova v2.1 API\n        __init__.py\n        api_version_request.py  # 版本验证\n        auth.py                 # noauth 中间件\n        common.py               # 信息查询的工具函数\n        compute/                # 每个 API 的入口点\n        \tfrom nova.api.openstack.compute.routes import APIRouterV21\n        \troutes.py\t\t\t# 路由文件\n        identity.py             # 验证项目是否存在\n        requestlog.py           # 请求日志中间件\n        urlmap.py               # url 映射\n        versioned_method.py     # 版本信息\n        wsgi.py                 # WSGI 相关抽象类\n        wsgi_app.py             # WSGI 应用程序初始化方法\n    validation/         # 请求体验证\n    wsgi.py             # WSGI 原语（请求、应用、中间件、路由、加载器）\n    \ncmd/            # 各个 Nova 服务的入口程序\ncompute/        # Nova Compute 服务\nconductor/      # Nova Conductor 服务 *** 处理需要协调的请求（构建/调整）、充当数据库代理或处理对象转换。***\nconf/           # 所有的配置选项\nconsole/        # nova-console 服务\ndb/             # 封装数据库操作\nhacking/        # 编码规范检查\nimage/          # 封装镜像操作，Glance 接口抽象\nkeymgr/         # 密钥管理器实现\nlocale/         # 国际化相关文件\nnetwork/        # nova-network 服务\nnotifications/  # 通知相关功能\nobjects/        # 封装实体对象的 CURD 操作\npci/            # PCI/SR-IOV 支持\npolicies/       # 所有 Policy 的默认规则\nprivsep/        # oslo_privsep 相关\nscheduler/      # Nova Scheduler 服务\nservicegroup/   # 成员服务（membership），服务组\nstorage/        # Ceph 存储支持\ntests/          # 单元测试\nvirt/           # 支持的 hypervisor 驱动\nvolume/         # 封装卷访问接口，Cinder 接口抽象\n\n# 文件\n__init__.py\navailability_zones.py   # 区域设置的工具函数\nbaserpc.py              # 基础 RPC 客户端/服务端实现\nblock_device.py         # 块设备映射\ncache_utils.py          # oslo_cache 封装\nconfig.py               # 解析命令行参数\ncontext.py              # 贯穿 Nova 的所有请求的上下文\ncrypto.py               # 包装标准加密数据元素\ndebugger.py             # pydev 调试\nexception.py            # 基础异常类\nexception_wrapper.py    # 封装异常类\nfilters.py              # 基础过滤器\ni18n.py                 # 集成 oslo_i18n\nloadables.py            # 可加载类\nmanager.py              # 基础 Manager 类\nmiddleware.py           # 更新 oslo_middleware 的默认配置选项\nmonkey_patch.py         # eventlet 猴子补丁\npolicy.py               # 策略引擎\nprofiler.py             # 调用 OSProfiler\nquota.py                # 每个项目的资源配额\nrpc.py                  # RPC 操作相关的工具函数\nsafe_utils.py           # 不会导致循环导入的工具函数\nservice.py              # 通用节点基类，用于在主机上运行的所有工作者\nservice_auth.py         # 身份认证插件\ntest.py                 # 单元测试基础类\nutils.py                # 工具函数\nversion.py              # 版本号管理\nweights.py              # 权重插件\nwsgi.py                 # 管理 WSGI 应用的服务器类\n```\n\n## rpci\n\nhttps://jckling.github.io/2021/05/23/OpenStack/OpenStack%20Nova/index.html\n\n\n\n## 数据库\n\nhttps://xcodest.me/nova-cell-v2.html\n\n![image-20231113201456185](/home/wang/.config/Typora/typora-user-images/image-20231113201456185.png)\n\n\n\nnova主要有三个数据库，分别时nova，nova_api,nova_cell0。Nova Cell 模块以树型结构为基础，主要包括 API-Cell（根 Cell）与 Child-Cell 两种形式。API-Cell 运行 nova-api 服务，每个 Child-Cell 运行除 nova-api 外的所有 nova-*服务，且每个 Child-Cell 运行自己的消息队列、数据库及 nova-cells 服务。\n\ncell的两种架构模式及工作原理\n单cell部署 架构模式：\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/202012311730081.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpaHVpaHVpMDA2,size_16,color_FFFFFF,t_70#pic_center)\n\n多cell部署 架构模式：\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201231173031550.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpaHVpaHVpMDA2,size_16,color_FFFFFF,t_70#pic_center)\n\n下图整个有三部分组成，cell0， , cell1. cell2 位于最上层的cell0，也就是api-cell， 而下层的cell1与cell2则是平行对等的关系，他们之间无交互，相互独立，还可以继续增加cell3,cell4 。 而上层的api cell主要包括了\nNova API, Nova Scheduler, Nova Conductor 这3个 Nova 服务 ,同时在 API Cell 中还需要 MQ 提供组件内的通信服务。API Cell 中的 DB 包含两个数据库，分别是 api数据库 和 cell数据库，api 数据库保存了全局数据，比如 flavor 信息。此外 api 数据库中还有一部分表是用于 placement 服务的；而 cell数据库则是用于保存创建失败且还没有确定位于哪个 cell 的虚机数据，比如当虚拟机调度失败时，该虚拟机数据就会被保存到cell数据库中。也就是cell0数据库中。\n\n\n\n在每个 Cell 中，都有自己独立使用的数据库、消息队列和 Nova Conductor 服务，当前 Cell 中的所有计算节点，全部将数据发送到当前 Cell 中的消息队列，由 Nova Conductor 服务获取后，保存至当前 Cell 的 Nova 数据库中。整个过程都不会涉及到 API Cell 中的消息队列。因此通过对计算节点进行 Cell 划分，可以有效降低 API Cell 中消息队列和数据库的压力。假如一个 MQ 能支持200个计算节点，则在划分 Cell 以后，每个 Cell 都可以支持200个计算节点，有 N 个 Cell 就可以支持 N X 200 个计算节点，因此可以极大提升单个 OpenStack 的集群管理规模。\n\n3 ， Cell v2实现的原理\n在大致了解了 Cell V2 架构的基本组成后，接下来介绍一下在 Nova 组件中，究竟是如何实现 Cell 划分的。多 Cell 的实现涉及 nova_api 数据库中的3个表，分别是 cell_mappings, host_mappings, instance_mappings 表。这3个表之间的关系如下图所示：\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201231173050257.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpaHVpaHVpMDA2,size_16,color_FFFFFF,t_70#pic_center)\n\ncell_mappings 表记录了每个 Cell 的名字和其消息队列连接地址与数据库连接地址，通过该表中记录的信息，API Cell 中的 Nova API 服务和 Nova Conductor 服务就知道该如何连接到 Cell 中的消息队列和数据库了，并进一步将消息发送到 Cell 中的消息队列，或者直接访问 Cell 中的 Nova 数据库。\n\n在 host_mappings 表记录了计算节点和 Cell 之间的对应关系，而instance_mappings 表则记录了 instance 和 Cell 之间的对应关系。通过这两个表的映射关系，API Cell 中的服务就可以轻易知道计算节点或者虚拟机所处的 Cell，并通过 cell_mappings 数据表中提供的链接对其进行操作。\n\n\n## 开发环境部署\n\n### 部署环境\n\n- 使用kolla-ansible快速部署搭建all-in-one：\n\nubuntu搭建参考链接：https://docs.openstack.org/kolla-ansible/2023.1/user/quickstart.html\n\n- 使用kolla-dev-mode=true部署，将会拉取源码并挂载到容器,可实现直接修改源码之后重启容器即可生效。\n\n参考链接：https://docs.openstack.org/kolla-ansible/latest/contributor/kolla-for-openstack-development.html\n\n- 可在kolla-ansible源码中，修改{{ kolla_dev_repos_git  }}和{ nova_source_version }重新定义拉取源码的仓库和分支。拉取仓库依赖git，请提前安装。\n\n### 接口测试\n\n#### 获取token\n\n1.openstackclient 命令行获取\n\n```plain\n# openstack token issue\n```\n\n参考： https://blog.csdn.net/qq_30657195/article/details/108055043\n\n2.异地curl获取\n\n```plain\n# curl -i   -H \"Content-Type: application/json\"   -d '\n{ \"auth\": {\n    \"identity\": {\n      \"methods\": [\"password\"],\n      \"password\": {\n        \"user\": {\n          \"name\": \"admin\",\n          \"domain\": { \"id\": \"default\" },\n          \"password\": \"admin12#$\"\n        }\n      }\n    }\n  }\n}'   \"http://10.10.15.184:5000/v3/auth/tokens\" ; echo\n```\n\nhttps://docs.openstack.org/keystone/pike/api_curl_examples.html\n\n3.工具posttman获取\n\n根据curl命令修改postman参数，根据-H修改header参数，-d修改body参数。\n\nheader修改如图所示:\n\n![img](https://cdn.nlark.com/yuque/0/2023/png/26098815/1694746908100-354fb3bb-08f5-4965-9813-3f72a3ef0ec3.png)\n\nbody修改如图所示：\n\n![img](https://cdn.nlark.com/yuque/0/2023/png/26098815/1694746941243-c32f94bd-c1e5-4344-b37a-f5a449e548b5.png)\n\ntoken值如图所示：\n\n![img](https://cdn.nlark.com/yuque/0/2023/png/26098815/1694746997062-460d6c18-1591-4a42-b8a2-3570bb5c7c4c.png)\n\n#### 调用api\n\n1. 使用curl命令调用\n\n```plain\ncurl -s http://10.10.15.184:9292/images -H 'X-Auth-Token:gAAAAABlA8lIs87kbEYq85mnARenwHlLt_Nv_XflgQXJNBAM4tFcNAf8kG9fmXDRQCHZFaLu4u9cDNCLKADIwpkSSqNWDTI2lVLd02OD74NNG3tdUCSFs1KC6JAW0Bsv9LXnokrema_nwshrXcBwGvsBCb0RnNA60g'\n```\n\n参考：https://www.linux.com/training-tutorials/spinning-server-openstack-api/\n\n1. 使用postman调试\n\n![img](https://cdn.nlark.com/yuque/0/2023/png/26098815/1694749070795-8bc5bf37-7a04-4d1d-b844-92ca9f15a762.png)\n\n注：X-Auth-Token是发送请求时使用，X-Subject-Token是服务器响应请求时传回的参数。\n\nhttps://support.huaweicloud.com/intl/en-us/devg-roma/apic-dev-190216017.html\n\n#### LOG\n\n1. 可以使用pdb 等工具进行调试。\n\n参考：https://docs.openstack.org/oslotest/queens/user/features.html\n\n1. 或者LOG.info LOG.debug等输出日志。log文件输出的信息等级需要配置，只有符合配置文件/etc/nova/nova.conf中的日志等级的日志才会被输出。\n\n参考：https://docs.openstack.org/nova/pike/admin/manage-logs.html\n","source":"_drafts/基于Nova开发Usb.md","raw":"# 基于Nova开发Usb\n\n## 初识Nova\n\n​\tNova（OpenStack Compute Service）是 OpenStack 最核心的服务，负责维护和管理云环境的计算资源，同时管理虚拟机生命周期。\n\n- Nova-Api服务\n\n  主要用于接收和响应外部请求。\n\n  - nova-api组件实现了RESTful API功能，是外部访问Nova的唯一途径。\n  - 接收外部的请求并通过Message Queue将请求发送给其他的服务组件，同时也兼容EC2 API，所以也可以用EC2的管理工具对nova进行日常管理。\n\n- Nova-Cert服务\n\n  是Nova的证书管理服务，用来为EC2服务提供身份验证，仅仅是在EC2 API的请求中使用。\n\n- Nova-Scheduler服务\n\n  用于Nova的调度工作，在创建虚拟机时，由它选择将虚拟机创建在哪台计算节点上。\n\n- Nova-Conductor服务\n\n  这个是服务是计算节点访问数据库时的一个中间层，它出现的作用是防止计算节点的Nova-Compute服务直接访问数据库。\n\n- Nova-Console服务\n\n  Nova增强了它的控制台服务。控制台服务允许用户可以通过代理服务器访问虚拟化实例。这就涉及了一对新的守护进程（nova-console和nova-consoleauth).\n\n- Nova-Consoleauth服务\n\n  主要用于控制台的用户访问授权\n\n- Nova-Novncproxy服务\n\n  用于为用户访问虚拟机提供了一个VNC的代理。通过VNC协议，可以支持基于浏览器的novnc客户端，后面你在网页打开的console界面就是依靠这个服务提供的。\n\n- Nova-Compute\n\n  Nova-compute是Nova最重要的组件之一。\n\n  - nova-compute 一般运行在计算节点上，通过Message Queue接收并管理VM的生命周期。\n  - Nova-compute 通过Libvirt管理KVM，通过XenAPI管理Xen等。\n\n## nova源码目录结构\n\n```\naccelerator/    # Cyborg 加速器\napi/            # Nova API 服务\n\t__init__.py\n    auth.py             # 身份认证中间件\n    compute_req_id.py   # x-compute-request-id 中间件（oslo_middleware）\n    metadata/           # Metadata API\n    openstack/          # Nova v2.1 API\n        __init__.py\n        api_version_request.py  # 版本验证\n        auth.py                 # noauth 中间件\n        common.py               # 信息查询的工具函数\n        compute/                # 每个 API 的入口点\n        \tfrom nova.api.openstack.compute.routes import APIRouterV21\n        \troutes.py\t\t\t# 路由文件\n        identity.py             # 验证项目是否存在\n        requestlog.py           # 请求日志中间件\n        urlmap.py               # url 映射\n        versioned_method.py     # 版本信息\n        wsgi.py                 # WSGI 相关抽象类\n        wsgi_app.py             # WSGI 应用程序初始化方法\n    validation/         # 请求体验证\n    wsgi.py             # WSGI 原语（请求、应用、中间件、路由、加载器）\n    \ncmd/            # 各个 Nova 服务的入口程序\ncompute/        # Nova Compute 服务\nconductor/      # Nova Conductor 服务 *** 处理需要协调的请求（构建/调整）、充当数据库代理或处理对象转换。***\nconf/           # 所有的配置选项\nconsole/        # nova-console 服务\ndb/             # 封装数据库操作\nhacking/        # 编码规范检查\nimage/          # 封装镜像操作，Glance 接口抽象\nkeymgr/         # 密钥管理器实现\nlocale/         # 国际化相关文件\nnetwork/        # nova-network 服务\nnotifications/  # 通知相关功能\nobjects/        # 封装实体对象的 CURD 操作\npci/            # PCI/SR-IOV 支持\npolicies/       # 所有 Policy 的默认规则\nprivsep/        # oslo_privsep 相关\nscheduler/      # Nova Scheduler 服务\nservicegroup/   # 成员服务（membership），服务组\nstorage/        # Ceph 存储支持\ntests/          # 单元测试\nvirt/           # 支持的 hypervisor 驱动\nvolume/         # 封装卷访问接口，Cinder 接口抽象\n\n# 文件\n__init__.py\navailability_zones.py   # 区域设置的工具函数\nbaserpc.py              # 基础 RPC 客户端/服务端实现\nblock_device.py         # 块设备映射\ncache_utils.py          # oslo_cache 封装\nconfig.py               # 解析命令行参数\ncontext.py              # 贯穿 Nova 的所有请求的上下文\ncrypto.py               # 包装标准加密数据元素\ndebugger.py             # pydev 调试\nexception.py            # 基础异常类\nexception_wrapper.py    # 封装异常类\nfilters.py              # 基础过滤器\ni18n.py                 # 集成 oslo_i18n\nloadables.py            # 可加载类\nmanager.py              # 基础 Manager 类\nmiddleware.py           # 更新 oslo_middleware 的默认配置选项\nmonkey_patch.py         # eventlet 猴子补丁\npolicy.py               # 策略引擎\nprofiler.py             # 调用 OSProfiler\nquota.py                # 每个项目的资源配额\nrpc.py                  # RPC 操作相关的工具函数\nsafe_utils.py           # 不会导致循环导入的工具函数\nservice.py              # 通用节点基类，用于在主机上运行的所有工作者\nservice_auth.py         # 身份认证插件\ntest.py                 # 单元测试基础类\nutils.py                # 工具函数\nversion.py              # 版本号管理\nweights.py              # 权重插件\nwsgi.py                 # 管理 WSGI 应用的服务器类\n```\n\n## rpci\n\nhttps://jckling.github.io/2021/05/23/OpenStack/OpenStack%20Nova/index.html\n\n\n\n## 数据库\n\nhttps://xcodest.me/nova-cell-v2.html\n\n![image-20231113201456185](/home/wang/.config/Typora/typora-user-images/image-20231113201456185.png)\n\n\n\nnova主要有三个数据库，分别时nova，nova_api,nova_cell0。Nova Cell 模块以树型结构为基础，主要包括 API-Cell（根 Cell）与 Child-Cell 两种形式。API-Cell 运行 nova-api 服务，每个 Child-Cell 运行除 nova-api 外的所有 nova-*服务，且每个 Child-Cell 运行自己的消息队列、数据库及 nova-cells 服务。\n\ncell的两种架构模式及工作原理\n单cell部署 架构模式：\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/202012311730081.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpaHVpaHVpMDA2,size_16,color_FFFFFF,t_70#pic_center)\n\n多cell部署 架构模式：\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201231173031550.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpaHVpaHVpMDA2,size_16,color_FFFFFF,t_70#pic_center)\n\n下图整个有三部分组成，cell0， , cell1. cell2 位于最上层的cell0，也就是api-cell， 而下层的cell1与cell2则是平行对等的关系，他们之间无交互，相互独立，还可以继续增加cell3,cell4 。 而上层的api cell主要包括了\nNova API, Nova Scheduler, Nova Conductor 这3个 Nova 服务 ,同时在 API Cell 中还需要 MQ 提供组件内的通信服务。API Cell 中的 DB 包含两个数据库，分别是 api数据库 和 cell数据库，api 数据库保存了全局数据，比如 flavor 信息。此外 api 数据库中还有一部分表是用于 placement 服务的；而 cell数据库则是用于保存创建失败且还没有确定位于哪个 cell 的虚机数据，比如当虚拟机调度失败时，该虚拟机数据就会被保存到cell数据库中。也就是cell0数据库中。\n\n\n\n在每个 Cell 中，都有自己独立使用的数据库、消息队列和 Nova Conductor 服务，当前 Cell 中的所有计算节点，全部将数据发送到当前 Cell 中的消息队列，由 Nova Conductor 服务获取后，保存至当前 Cell 的 Nova 数据库中。整个过程都不会涉及到 API Cell 中的消息队列。因此通过对计算节点进行 Cell 划分，可以有效降低 API Cell 中消息队列和数据库的压力。假如一个 MQ 能支持200个计算节点，则在划分 Cell 以后，每个 Cell 都可以支持200个计算节点，有 N 个 Cell 就可以支持 N X 200 个计算节点，因此可以极大提升单个 OpenStack 的集群管理规模。\n\n3 ， Cell v2实现的原理\n在大致了解了 Cell V2 架构的基本组成后，接下来介绍一下在 Nova 组件中，究竟是如何实现 Cell 划分的。多 Cell 的实现涉及 nova_api 数据库中的3个表，分别是 cell_mappings, host_mappings, instance_mappings 表。这3个表之间的关系如下图所示：\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201231173050257.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpaHVpaHVpMDA2,size_16,color_FFFFFF,t_70#pic_center)\n\ncell_mappings 表记录了每个 Cell 的名字和其消息队列连接地址与数据库连接地址，通过该表中记录的信息，API Cell 中的 Nova API 服务和 Nova Conductor 服务就知道该如何连接到 Cell 中的消息队列和数据库了，并进一步将消息发送到 Cell 中的消息队列，或者直接访问 Cell 中的 Nova 数据库。\n\n在 host_mappings 表记录了计算节点和 Cell 之间的对应关系，而instance_mappings 表则记录了 instance 和 Cell 之间的对应关系。通过这两个表的映射关系，API Cell 中的服务就可以轻易知道计算节点或者虚拟机所处的 Cell，并通过 cell_mappings 数据表中提供的链接对其进行操作。\n\n\n## 开发环境部署\n\n### 部署环境\n\n- 使用kolla-ansible快速部署搭建all-in-one：\n\nubuntu搭建参考链接：https://docs.openstack.org/kolla-ansible/2023.1/user/quickstart.html\n\n- 使用kolla-dev-mode=true部署，将会拉取源码并挂载到容器,可实现直接修改源码之后重启容器即可生效。\n\n参考链接：https://docs.openstack.org/kolla-ansible/latest/contributor/kolla-for-openstack-development.html\n\n- 可在kolla-ansible源码中，修改{{ kolla_dev_repos_git  }}和{ nova_source_version }重新定义拉取源码的仓库和分支。拉取仓库依赖git，请提前安装。\n\n### 接口测试\n\n#### 获取token\n\n1.openstackclient 命令行获取\n\n```plain\n# openstack token issue\n```\n\n参考： https://blog.csdn.net/qq_30657195/article/details/108055043\n\n2.异地curl获取\n\n```plain\n# curl -i   -H \"Content-Type: application/json\"   -d '\n{ \"auth\": {\n    \"identity\": {\n      \"methods\": [\"password\"],\n      \"password\": {\n        \"user\": {\n          \"name\": \"admin\",\n          \"domain\": { \"id\": \"default\" },\n          \"password\": \"admin12#$\"\n        }\n      }\n    }\n  }\n}'   \"http://10.10.15.184:5000/v3/auth/tokens\" ; echo\n```\n\nhttps://docs.openstack.org/keystone/pike/api_curl_examples.html\n\n3.工具posttman获取\n\n根据curl命令修改postman参数，根据-H修改header参数，-d修改body参数。\n\nheader修改如图所示:\n\n![img](https://cdn.nlark.com/yuque/0/2023/png/26098815/1694746908100-354fb3bb-08f5-4965-9813-3f72a3ef0ec3.png)\n\nbody修改如图所示：\n\n![img](https://cdn.nlark.com/yuque/0/2023/png/26098815/1694746941243-c32f94bd-c1e5-4344-b37a-f5a449e548b5.png)\n\ntoken值如图所示：\n\n![img](https://cdn.nlark.com/yuque/0/2023/png/26098815/1694746997062-460d6c18-1591-4a42-b8a2-3570bb5c7c4c.png)\n\n#### 调用api\n\n1. 使用curl命令调用\n\n```plain\ncurl -s http://10.10.15.184:9292/images -H 'X-Auth-Token:gAAAAABlA8lIs87kbEYq85mnARenwHlLt_Nv_XflgQXJNBAM4tFcNAf8kG9fmXDRQCHZFaLu4u9cDNCLKADIwpkSSqNWDTI2lVLd02OD74NNG3tdUCSFs1KC6JAW0Bsv9LXnokrema_nwshrXcBwGvsBCb0RnNA60g'\n```\n\n参考：https://www.linux.com/training-tutorials/spinning-server-openstack-api/\n\n1. 使用postman调试\n\n![img](https://cdn.nlark.com/yuque/0/2023/png/26098815/1694749070795-8bc5bf37-7a04-4d1d-b844-92ca9f15a762.png)\n\n注：X-Auth-Token是发送请求时使用，X-Subject-Token是服务器响应请求时传回的参数。\n\nhttps://support.huaweicloud.com/intl/en-us/devg-roma/apic-dev-190216017.html\n\n#### LOG\n\n1. 可以使用pdb 等工具进行调试。\n\n参考：https://docs.openstack.org/oslotest/queens/user/features.html\n\n1. 或者LOG.info LOG.debug等输出日志。log文件输出的信息等级需要配置，只有符合配置文件/etc/nova/nova.conf中的日志等级的日志才会被输出。\n\n参考：https://docs.openstack.org/nova/pike/admin/manage-logs.html\n","slug":"基于Nova开发Usb","published":0,"date":"2025-03-27T00:57:01.334Z","updated":"2025-03-27T00:57:01.334Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cmamklq6x000nfkd156rkggsk","content":"<h1 id=\"基于Nova开发Usb\"><a href=\"#基于Nova开发Usb\" class=\"headerlink\" title=\"基于Nova开发Usb\"></a>基于Nova开发Usb</h1><h2 id=\"初识Nova\"><a href=\"#初识Nova\" class=\"headerlink\" title=\"初识Nova\"></a>初识Nova</h2><p>​\tNova（OpenStack Compute Service）是 OpenStack 最核心的服务，负责维护和管理云环境的计算资源，同时管理虚拟机生命周期。</p>\n<ul>\n<li><p>Nova-Api服务</p>\n<p>主要用于接收和响应外部请求。</p>\n<ul>\n<li>nova-api组件实现了RESTful API功能，是外部访问Nova的唯一途径。</li>\n<li>接收外部的请求并通过Message Queue将请求发送给其他的服务组件，同时也兼容EC2 API，所以也可以用EC2的管理工具对nova进行日常管理。</li>\n</ul>\n</li>\n<li><p>Nova-Cert服务</p>\n<p>是Nova的证书管理服务，用来为EC2服务提供身份验证，仅仅是在EC2 API的请求中使用。</p>\n</li>\n<li><p>Nova-Scheduler服务</p>\n<p>用于Nova的调度工作，在创建虚拟机时，由它选择将虚拟机创建在哪台计算节点上。</p>\n</li>\n<li><p>Nova-Conductor服务</p>\n<p>这个是服务是计算节点访问数据库时的一个中间层，它出现的作用是防止计算节点的Nova-Compute服务直接访问数据库。</p>\n</li>\n<li><p>Nova-Console服务</p>\n<p>Nova增强了它的控制台服务。控制台服务允许用户可以通过代理服务器访问虚拟化实例。这就涉及了一对新的守护进程（nova-console和nova-consoleauth).</p>\n</li>\n<li><p>Nova-Consoleauth服务</p>\n<p>主要用于控制台的用户访问授权</p>\n</li>\n<li><p>Nova-Novncproxy服务</p>\n<p>用于为用户访问虚拟机提供了一个VNC的代理。通过VNC协议，可以支持基于浏览器的novnc客户端，后面你在网页打开的console界面就是依靠这个服务提供的。</p>\n</li>\n<li><p>Nova-Compute</p>\n<p>Nova-compute是Nova最重要的组件之一。</p>\n<ul>\n<li>nova-compute 一般运行在计算节点上，通过Message Queue接收并管理VM的生命周期。</li>\n<li>Nova-compute 通过Libvirt管理KVM，通过XenAPI管理Xen等。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"nova源码目录结构\"><a href=\"#nova源码目录结构\" class=\"headerlink\" title=\"nova源码目录结构\"></a>nova源码目录结构</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">accelerator/    # Cyborg 加速器</span><br><span class=\"line\">api/            # Nova API 服务</span><br><span class=\"line\">\t__init__.py</span><br><span class=\"line\">    auth.py             # 身份认证中间件</span><br><span class=\"line\">    compute_req_id.py   # x-compute-request-id 中间件（oslo_middleware）</span><br><span class=\"line\">    metadata/           # Metadata API</span><br><span class=\"line\">    openstack/          # Nova v2.1 API</span><br><span class=\"line\">        __init__.py</span><br><span class=\"line\">        api_version_request.py  # 版本验证</span><br><span class=\"line\">        auth.py                 # noauth 中间件</span><br><span class=\"line\">        common.py               # 信息查询的工具函数</span><br><span class=\"line\">        compute/                # 每个 API 的入口点</span><br><span class=\"line\">        \tfrom nova.api.openstack.compute.routes import APIRouterV21</span><br><span class=\"line\">        \troutes.py\t\t\t# 路由文件</span><br><span class=\"line\">        identity.py             # 验证项目是否存在</span><br><span class=\"line\">        requestlog.py           # 请求日志中间件</span><br><span class=\"line\">        urlmap.py               # url 映射</span><br><span class=\"line\">        versioned_method.py     # 版本信息</span><br><span class=\"line\">        wsgi.py                 # WSGI 相关抽象类</span><br><span class=\"line\">        wsgi_app.py             # WSGI 应用程序初始化方法</span><br><span class=\"line\">    validation/         # 请求体验证</span><br><span class=\"line\">    wsgi.py             # WSGI 原语（请求、应用、中间件、路由、加载器）</span><br><span class=\"line\">    </span><br><span class=\"line\">cmd/            # 各个 Nova 服务的入口程序</span><br><span class=\"line\">compute/        # Nova Compute 服务</span><br><span class=\"line\">conductor/      # Nova Conductor 服务 *** 处理需要协调的请求（构建/调整）、充当数据库代理或处理对象转换。***</span><br><span class=\"line\">conf/           # 所有的配置选项</span><br><span class=\"line\">console/        # nova-console 服务</span><br><span class=\"line\">db/             # 封装数据库操作</span><br><span class=\"line\">hacking/        # 编码规范检查</span><br><span class=\"line\">image/          # 封装镜像操作，Glance 接口抽象</span><br><span class=\"line\">keymgr/         # 密钥管理器实现</span><br><span class=\"line\">locale/         # 国际化相关文件</span><br><span class=\"line\">network/        # nova-network 服务</span><br><span class=\"line\">notifications/  # 通知相关功能</span><br><span class=\"line\">objects/        # 封装实体对象的 CURD 操作</span><br><span class=\"line\">pci/            # PCI/SR-IOV 支持</span><br><span class=\"line\">policies/       # 所有 Policy 的默认规则</span><br><span class=\"line\">privsep/        # oslo_privsep 相关</span><br><span class=\"line\">scheduler/      # Nova Scheduler 服务</span><br><span class=\"line\">servicegroup/   # 成员服务（membership），服务组</span><br><span class=\"line\">storage/        # Ceph 存储支持</span><br><span class=\"line\">tests/          # 单元测试</span><br><span class=\"line\">virt/           # 支持的 hypervisor 驱动</span><br><span class=\"line\">volume/         # 封装卷访问接口，Cinder 接口抽象</span><br><span class=\"line\"></span><br><span class=\"line\"># 文件</span><br><span class=\"line\">__init__.py</span><br><span class=\"line\">availability_zones.py   # 区域设置的工具函数</span><br><span class=\"line\">baserpc.py              # 基础 RPC 客户端/服务端实现</span><br><span class=\"line\">block_device.py         # 块设备映射</span><br><span class=\"line\">cache_utils.py          # oslo_cache 封装</span><br><span class=\"line\">config.py               # 解析命令行参数</span><br><span class=\"line\">context.py              # 贯穿 Nova 的所有请求的上下文</span><br><span class=\"line\">crypto.py               # 包装标准加密数据元素</span><br><span class=\"line\">debugger.py             # pydev 调试</span><br><span class=\"line\">exception.py            # 基础异常类</span><br><span class=\"line\">exception_wrapper.py    # 封装异常类</span><br><span class=\"line\">filters.py              # 基础过滤器</span><br><span class=\"line\">i18n.py                 # 集成 oslo_i18n</span><br><span class=\"line\">loadables.py            # 可加载类</span><br><span class=\"line\">manager.py              # 基础 Manager 类</span><br><span class=\"line\">middleware.py           # 更新 oslo_middleware 的默认配置选项</span><br><span class=\"line\">monkey_patch.py         # eventlet 猴子补丁</span><br><span class=\"line\">policy.py               # 策略引擎</span><br><span class=\"line\">profiler.py             # 调用 OSProfiler</span><br><span class=\"line\">quota.py                # 每个项目的资源配额</span><br><span class=\"line\">rpc.py                  # RPC 操作相关的工具函数</span><br><span class=\"line\">safe_utils.py           # 不会导致循环导入的工具函数</span><br><span class=\"line\">service.py              # 通用节点基类，用于在主机上运行的所有工作者</span><br><span class=\"line\">service_auth.py         # 身份认证插件</span><br><span class=\"line\">test.py                 # 单元测试基础类</span><br><span class=\"line\">utils.py                # 工具函数</span><br><span class=\"line\">version.py              # 版本号管理</span><br><span class=\"line\">weights.py              # 权重插件</span><br><span class=\"line\">wsgi.py                 # 管理 WSGI 应用的服务器类</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"rpci\"><a href=\"#rpci\" class=\"headerlink\" title=\"rpci\"></a>rpci</h2><p><a href=\"https://jckling.github.io/2021/05/23/OpenStack/OpenStack%20Nova/index.html\">https://jckling.github.io/2021/05/23/OpenStack/OpenStack%20Nova/index.html</a></p>\n<h2 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h2><p><a href=\"https://xcodest.me/nova-cell-v2.html\">https://xcodest.me/nova-cell-v2.html</a></p>\n<p><img src=\"/home/wang/.config/Typora/typora-user-images/image-20231113201456185.png\" alt=\"image-20231113201456185\"></p>\n<p>nova主要有三个数据库，分别时nova，nova_api,nova_cell0。Nova Cell 模块以树型结构为基础，主要包括 API-Cell（根 Cell）与 Child-Cell 两种形式。API-Cell 运行 nova-api 服务，每个 Child-Cell 运行除 nova-api 外的所有 nova-*服务，且每个 Child-Cell 运行自己的消息队列、数据库及 nova-cells 服务。</p>\n<p>cell的两种架构模式及工作原理<br>单cell部署 架构模式：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/202012311730081.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpaHVpaHVpMDA2,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<p>多cell部署 架构模式：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20201231173031550.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpaHVpaHVpMDA2,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<p>下图整个有三部分组成，cell0， , cell1. cell2 位于最上层的cell0，也就是api-cell， 而下层的cell1与cell2则是平行对等的关系，他们之间无交互，相互独立，还可以继续增加cell3,cell4 。 而上层的api cell主要包括了<br>Nova API, Nova Scheduler, Nova Conductor 这3个 Nova 服务 ,同时在 API Cell 中还需要 MQ 提供组件内的通信服务。API Cell 中的 DB 包含两个数据库，分别是 api数据库 和 cell数据库，api 数据库保存了全局数据，比如 flavor 信息。此外 api 数据库中还有一部分表是用于 placement 服务的；而 cell数据库则是用于保存创建失败且还没有确定位于哪个 cell 的虚机数据，比如当虚拟机调度失败时，该虚拟机数据就会被保存到cell数据库中。也就是cell0数据库中。</p>\n<p>在每个 Cell 中，都有自己独立使用的数据库、消息队列和 Nova Conductor 服务，当前 Cell 中的所有计算节点，全部将数据发送到当前 Cell 中的消息队列，由 Nova Conductor 服务获取后，保存至当前 Cell 的 Nova 数据库中。整个过程都不会涉及到 API Cell 中的消息队列。因此通过对计算节点进行 Cell 划分，可以有效降低 API Cell 中消息队列和数据库的压力。假如一个 MQ 能支持200个计算节点，则在划分 Cell 以后，每个 Cell 都可以支持200个计算节点，有 N 个 Cell 就可以支持 N X 200 个计算节点，因此可以极大提升单个 OpenStack 的集群管理规模。</p>\n<p>3 ， Cell v2实现的原理<br>在大致了解了 Cell V2 架构的基本组成后，接下来介绍一下在 Nova 组件中，究竟是如何实现 Cell 划分的。多 Cell 的实现涉及 nova_api 数据库中的3个表，分别是 cell_mappings, host_mappings, instance_mappings 表。这3个表之间的关系如下图所示：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20201231173050257.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpaHVpaHVpMDA2,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<p>cell_mappings 表记录了每个 Cell 的名字和其消息队列连接地址与数据库连接地址，通过该表中记录的信息，API Cell 中的 Nova API 服务和 Nova Conductor 服务就知道该如何连接到 Cell 中的消息队列和数据库了，并进一步将消息发送到 Cell 中的消息队列，或者直接访问 Cell 中的 Nova 数据库。</p>\n<p>在 host_mappings 表记录了计算节点和 Cell 之间的对应关系，而instance_mappings 表则记录了 instance 和 Cell 之间的对应关系。通过这两个表的映射关系，API Cell 中的服务就可以轻易知道计算节点或者虚拟机所处的 Cell，并通过 cell_mappings 数据表中提供的链接对其进行操作。</p>\n<h2 id=\"开发环境部署\"><a href=\"#开发环境部署\" class=\"headerlink\" title=\"开发环境部署\"></a>开发环境部署</h2><h3 id=\"部署环境\"><a href=\"#部署环境\" class=\"headerlink\" title=\"部署环境\"></a>部署环境</h3><ul>\n<li>使用kolla-ansible快速部署搭建all-in-one：</li>\n</ul>\n<p>ubuntu搭建参考链接：<a href=\"https://docs.openstack.org/kolla-ansible/2023.1/user/quickstart.html\">https://docs.openstack.org/kolla-ansible/2023.1/user/quickstart.html</a></p>\n<ul>\n<li>使用kolla-dev-mode&#x3D;true部署，将会拉取源码并挂载到容器,可实现直接修改源码之后重启容器即可生效。</li>\n</ul>\n<p>参考链接：<a href=\"https://docs.openstack.org/kolla-ansible/latest/contributor/kolla-for-openstack-development.html\">https://docs.openstack.org/kolla-ansible/latest/contributor/kolla-for-openstack-development.html</a></p>\n<ul>\n<li>可在kolla-ansible源码中，修改和{ nova_source_version }重新定义拉取源码的仓库和分支。拉取仓库依赖git，请提前安装。</li>\n</ul>\n<h3 id=\"接口测试\"><a href=\"#接口测试\" class=\"headerlink\" title=\"接口测试\"></a>接口测试</h3><h4 id=\"获取token\"><a href=\"#获取token\" class=\"headerlink\" title=\"获取token\"></a>获取token</h4><p>1.openstackclient 命令行获取</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># openstack token issue</span><br></pre></td></tr></table></figure>\n\n<p>参考： <a href=\"https://blog.csdn.net/qq_30657195/article/details/108055043\">https://blog.csdn.net/qq_30657195/article/details/108055043</a></p>\n<p>2.异地curl获取</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># curl -i   -H &quot;Content-Type: application/json&quot;   -d &#x27;</span><br><span class=\"line\">&#123; &quot;auth&quot;: &#123;</span><br><span class=\"line\">    &quot;identity&quot;: &#123;</span><br><span class=\"line\">      &quot;methods&quot;: [&quot;password&quot;],</span><br><span class=\"line\">      &quot;password&quot;: &#123;</span><br><span class=\"line\">        &quot;user&quot;: &#123;</span><br><span class=\"line\">          &quot;name&quot;: &quot;admin&quot;,</span><br><span class=\"line\">          &quot;domain&quot;: &#123; &quot;id&quot;: &quot;default&quot; &#125;,</span><br><span class=\"line\">          &quot;password&quot;: &quot;admin12#$&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;&#x27;   &quot;http://10.10.15.184:5000/v3/auth/tokens&quot; ; echo</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://docs.openstack.org/keystone/pike/api_curl_examples.html\">https://docs.openstack.org/keystone/pike/api_curl_examples.html</a></p>\n<p>3.工具posttman获取</p>\n<p>根据curl命令修改postman参数，根据-H修改header参数，-d修改body参数。</p>\n<p>header修改如图所示:</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/26098815/1694746908100-354fb3bb-08f5-4965-9813-3f72a3ef0ec3.png\" alt=\"img\"></p>\n<p>body修改如图所示：</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/26098815/1694746941243-c32f94bd-c1e5-4344-b37a-f5a449e548b5.png\" alt=\"img\"></p>\n<p>token值如图所示：</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/26098815/1694746997062-460d6c18-1591-4a42-b8a2-3570bb5c7c4c.png\" alt=\"img\"></p>\n<h4 id=\"调用api\"><a href=\"#调用api\" class=\"headerlink\" title=\"调用api\"></a>调用api</h4><ol>\n<li>使用curl命令调用</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -s http://10.10.15.184:9292/images -H &#x27;X-Auth-Token:gAAAAABlA8lIs87kbEYq85mnARenwHlLt_Nv_XflgQXJNBAM4tFcNAf8kG9fmXDRQCHZFaLu4u9cDNCLKADIwpkSSqNWDTI2lVLd02OD74NNG3tdUCSFs1KC6JAW0Bsv9LXnokrema_nwshrXcBwGvsBCb0RnNA60g&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>参考：<a href=\"https://www.linux.com/training-tutorials/spinning-server-openstack-api/\">https://www.linux.com/training-tutorials/spinning-server-openstack-api/</a></p>\n<ol>\n<li>使用postman调试</li>\n</ol>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/26098815/1694749070795-8bc5bf37-7a04-4d1d-b844-92ca9f15a762.png\" alt=\"img\"></p>\n<p>注：X-Auth-Token是发送请求时使用，X-Subject-Token是服务器响应请求时传回的参数。</p>\n<p><a href=\"https://support.huaweicloud.com/intl/en-us/devg-roma/apic-dev-190216017.html\">https://support.huaweicloud.com/intl/en-us/devg-roma/apic-dev-190216017.html</a></p>\n<h4 id=\"LOG\"><a href=\"#LOG\" class=\"headerlink\" title=\"LOG\"></a>LOG</h4><ol>\n<li>可以使用pdb 等工具进行调试。</li>\n</ol>\n<p>参考：<a href=\"https://docs.openstack.org/oslotest/queens/user/features.html\">https://docs.openstack.org/oslotest/queens/user/features.html</a></p>\n<ol>\n<li>或者LOG.info LOG.debug等输出日志。log文件输出的信息等级需要配置，只有符合配置文件&#x2F;etc&#x2F;nova&#x2F;nova.conf中的日志等级的日志才会被输出。</li>\n</ol>\n<p>参考：<a href=\"https://docs.openstack.org/nova/pike/admin/manage-logs.html\">https://docs.openstack.org/nova/pike/admin/manage-logs.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"基于Nova开发Usb\"><a href=\"#基于Nova开发Usb\" class=\"headerlink\" title=\"基于Nova开发Usb\"></a>基于Nova开发Usb</h1><h2 id=\"初识Nova\"><a href=\"#初识Nova\" class=\"headerlink\" title=\"初识Nova\"></a>初识Nova</h2><p>​\tNova（OpenStack Compute Service）是 OpenStack 最核心的服务，负责维护和管理云环境的计算资源，同时管理虚拟机生命周期。</p>\n<ul>\n<li><p>Nova-Api服务</p>\n<p>主要用于接收和响应外部请求。</p>\n<ul>\n<li>nova-api组件实现了RESTful API功能，是外部访问Nova的唯一途径。</li>\n<li>接收外部的请求并通过Message Queue将请求发送给其他的服务组件，同时也兼容EC2 API，所以也可以用EC2的管理工具对nova进行日常管理。</li>\n</ul>\n</li>\n<li><p>Nova-Cert服务</p>\n<p>是Nova的证书管理服务，用来为EC2服务提供身份验证，仅仅是在EC2 API的请求中使用。</p>\n</li>\n<li><p>Nova-Scheduler服务</p>\n<p>用于Nova的调度工作，在创建虚拟机时，由它选择将虚拟机创建在哪台计算节点上。</p>\n</li>\n<li><p>Nova-Conductor服务</p>\n<p>这个是服务是计算节点访问数据库时的一个中间层，它出现的作用是防止计算节点的Nova-Compute服务直接访问数据库。</p>\n</li>\n<li><p>Nova-Console服务</p>\n<p>Nova增强了它的控制台服务。控制台服务允许用户可以通过代理服务器访问虚拟化实例。这就涉及了一对新的守护进程（nova-console和nova-consoleauth).</p>\n</li>\n<li><p>Nova-Consoleauth服务</p>\n<p>主要用于控制台的用户访问授权</p>\n</li>\n<li><p>Nova-Novncproxy服务</p>\n<p>用于为用户访问虚拟机提供了一个VNC的代理。通过VNC协议，可以支持基于浏览器的novnc客户端，后面你在网页打开的console界面就是依靠这个服务提供的。</p>\n</li>\n<li><p>Nova-Compute</p>\n<p>Nova-compute是Nova最重要的组件之一。</p>\n<ul>\n<li>nova-compute 一般运行在计算节点上，通过Message Queue接收并管理VM的生命周期。</li>\n<li>Nova-compute 通过Libvirt管理KVM，通过XenAPI管理Xen等。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"nova源码目录结构\"><a href=\"#nova源码目录结构\" class=\"headerlink\" title=\"nova源码目录结构\"></a>nova源码目录结构</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">accelerator/    # Cyborg 加速器</span><br><span class=\"line\">api/            # Nova API 服务</span><br><span class=\"line\">\t__init__.py</span><br><span class=\"line\">    auth.py             # 身份认证中间件</span><br><span class=\"line\">    compute_req_id.py   # x-compute-request-id 中间件（oslo_middleware）</span><br><span class=\"line\">    metadata/           # Metadata API</span><br><span class=\"line\">    openstack/          # Nova v2.1 API</span><br><span class=\"line\">        __init__.py</span><br><span class=\"line\">        api_version_request.py  # 版本验证</span><br><span class=\"line\">        auth.py                 # noauth 中间件</span><br><span class=\"line\">        common.py               # 信息查询的工具函数</span><br><span class=\"line\">        compute/                # 每个 API 的入口点</span><br><span class=\"line\">        \tfrom nova.api.openstack.compute.routes import APIRouterV21</span><br><span class=\"line\">        \troutes.py\t\t\t# 路由文件</span><br><span class=\"line\">        identity.py             # 验证项目是否存在</span><br><span class=\"line\">        requestlog.py           # 请求日志中间件</span><br><span class=\"line\">        urlmap.py               # url 映射</span><br><span class=\"line\">        versioned_method.py     # 版本信息</span><br><span class=\"line\">        wsgi.py                 # WSGI 相关抽象类</span><br><span class=\"line\">        wsgi_app.py             # WSGI 应用程序初始化方法</span><br><span class=\"line\">    validation/         # 请求体验证</span><br><span class=\"line\">    wsgi.py             # WSGI 原语（请求、应用、中间件、路由、加载器）</span><br><span class=\"line\">    </span><br><span class=\"line\">cmd/            # 各个 Nova 服务的入口程序</span><br><span class=\"line\">compute/        # Nova Compute 服务</span><br><span class=\"line\">conductor/      # Nova Conductor 服务 *** 处理需要协调的请求（构建/调整）、充当数据库代理或处理对象转换。***</span><br><span class=\"line\">conf/           # 所有的配置选项</span><br><span class=\"line\">console/        # nova-console 服务</span><br><span class=\"line\">db/             # 封装数据库操作</span><br><span class=\"line\">hacking/        # 编码规范检查</span><br><span class=\"line\">image/          # 封装镜像操作，Glance 接口抽象</span><br><span class=\"line\">keymgr/         # 密钥管理器实现</span><br><span class=\"line\">locale/         # 国际化相关文件</span><br><span class=\"line\">network/        # nova-network 服务</span><br><span class=\"line\">notifications/  # 通知相关功能</span><br><span class=\"line\">objects/        # 封装实体对象的 CURD 操作</span><br><span class=\"line\">pci/            # PCI/SR-IOV 支持</span><br><span class=\"line\">policies/       # 所有 Policy 的默认规则</span><br><span class=\"line\">privsep/        # oslo_privsep 相关</span><br><span class=\"line\">scheduler/      # Nova Scheduler 服务</span><br><span class=\"line\">servicegroup/   # 成员服务（membership），服务组</span><br><span class=\"line\">storage/        # Ceph 存储支持</span><br><span class=\"line\">tests/          # 单元测试</span><br><span class=\"line\">virt/           # 支持的 hypervisor 驱动</span><br><span class=\"line\">volume/         # 封装卷访问接口，Cinder 接口抽象</span><br><span class=\"line\"></span><br><span class=\"line\"># 文件</span><br><span class=\"line\">__init__.py</span><br><span class=\"line\">availability_zones.py   # 区域设置的工具函数</span><br><span class=\"line\">baserpc.py              # 基础 RPC 客户端/服务端实现</span><br><span class=\"line\">block_device.py         # 块设备映射</span><br><span class=\"line\">cache_utils.py          # oslo_cache 封装</span><br><span class=\"line\">config.py               # 解析命令行参数</span><br><span class=\"line\">context.py              # 贯穿 Nova 的所有请求的上下文</span><br><span class=\"line\">crypto.py               # 包装标准加密数据元素</span><br><span class=\"line\">debugger.py             # pydev 调试</span><br><span class=\"line\">exception.py            # 基础异常类</span><br><span class=\"line\">exception_wrapper.py    # 封装异常类</span><br><span class=\"line\">filters.py              # 基础过滤器</span><br><span class=\"line\">i18n.py                 # 集成 oslo_i18n</span><br><span class=\"line\">loadables.py            # 可加载类</span><br><span class=\"line\">manager.py              # 基础 Manager 类</span><br><span class=\"line\">middleware.py           # 更新 oslo_middleware 的默认配置选项</span><br><span class=\"line\">monkey_patch.py         # eventlet 猴子补丁</span><br><span class=\"line\">policy.py               # 策略引擎</span><br><span class=\"line\">profiler.py             # 调用 OSProfiler</span><br><span class=\"line\">quota.py                # 每个项目的资源配额</span><br><span class=\"line\">rpc.py                  # RPC 操作相关的工具函数</span><br><span class=\"line\">safe_utils.py           # 不会导致循环导入的工具函数</span><br><span class=\"line\">service.py              # 通用节点基类，用于在主机上运行的所有工作者</span><br><span class=\"line\">service_auth.py         # 身份认证插件</span><br><span class=\"line\">test.py                 # 单元测试基础类</span><br><span class=\"line\">utils.py                # 工具函数</span><br><span class=\"line\">version.py              # 版本号管理</span><br><span class=\"line\">weights.py              # 权重插件</span><br><span class=\"line\">wsgi.py                 # 管理 WSGI 应用的服务器类</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"rpci\"><a href=\"#rpci\" class=\"headerlink\" title=\"rpci\"></a>rpci</h2><p><a href=\"https://jckling.github.io/2021/05/23/OpenStack/OpenStack%20Nova/index.html\">https://jckling.github.io/2021/05/23/OpenStack/OpenStack%20Nova/index.html</a></p>\n<h2 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h2><p><a href=\"https://xcodest.me/nova-cell-v2.html\">https://xcodest.me/nova-cell-v2.html</a></p>\n<p><img src=\"/home/wang/.config/Typora/typora-user-images/image-20231113201456185.png\" alt=\"image-20231113201456185\"></p>\n<p>nova主要有三个数据库，分别时nova，nova_api,nova_cell0。Nova Cell 模块以树型结构为基础，主要包括 API-Cell（根 Cell）与 Child-Cell 两种形式。API-Cell 运行 nova-api 服务，每个 Child-Cell 运行除 nova-api 外的所有 nova-*服务，且每个 Child-Cell 运行自己的消息队列、数据库及 nova-cells 服务。</p>\n<p>cell的两种架构模式及工作原理<br>单cell部署 架构模式：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/202012311730081.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpaHVpaHVpMDA2,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<p>多cell部署 架构模式：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20201231173031550.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpaHVpaHVpMDA2,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<p>下图整个有三部分组成，cell0， , cell1. cell2 位于最上层的cell0，也就是api-cell， 而下层的cell1与cell2则是平行对等的关系，他们之间无交互，相互独立，还可以继续增加cell3,cell4 。 而上层的api cell主要包括了<br>Nova API, Nova Scheduler, Nova Conductor 这3个 Nova 服务 ,同时在 API Cell 中还需要 MQ 提供组件内的通信服务。API Cell 中的 DB 包含两个数据库，分别是 api数据库 和 cell数据库，api 数据库保存了全局数据，比如 flavor 信息。此外 api 数据库中还有一部分表是用于 placement 服务的；而 cell数据库则是用于保存创建失败且还没有确定位于哪个 cell 的虚机数据，比如当虚拟机调度失败时，该虚拟机数据就会被保存到cell数据库中。也就是cell0数据库中。</p>\n<p>在每个 Cell 中，都有自己独立使用的数据库、消息队列和 Nova Conductor 服务，当前 Cell 中的所有计算节点，全部将数据发送到当前 Cell 中的消息队列，由 Nova Conductor 服务获取后，保存至当前 Cell 的 Nova 数据库中。整个过程都不会涉及到 API Cell 中的消息队列。因此通过对计算节点进行 Cell 划分，可以有效降低 API Cell 中消息队列和数据库的压力。假如一个 MQ 能支持200个计算节点，则在划分 Cell 以后，每个 Cell 都可以支持200个计算节点，有 N 个 Cell 就可以支持 N X 200 个计算节点，因此可以极大提升单个 OpenStack 的集群管理规模。</p>\n<p>3 ， Cell v2实现的原理<br>在大致了解了 Cell V2 架构的基本组成后，接下来介绍一下在 Nova 组件中，究竟是如何实现 Cell 划分的。多 Cell 的实现涉及 nova_api 数据库中的3个表，分别是 cell_mappings, host_mappings, instance_mappings 表。这3个表之间的关系如下图所示：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20201231173050257.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpaHVpaHVpMDA2,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<p>cell_mappings 表记录了每个 Cell 的名字和其消息队列连接地址与数据库连接地址，通过该表中记录的信息，API Cell 中的 Nova API 服务和 Nova Conductor 服务就知道该如何连接到 Cell 中的消息队列和数据库了，并进一步将消息发送到 Cell 中的消息队列，或者直接访问 Cell 中的 Nova 数据库。</p>\n<p>在 host_mappings 表记录了计算节点和 Cell 之间的对应关系，而instance_mappings 表则记录了 instance 和 Cell 之间的对应关系。通过这两个表的映射关系，API Cell 中的服务就可以轻易知道计算节点或者虚拟机所处的 Cell，并通过 cell_mappings 数据表中提供的链接对其进行操作。</p>\n<h2 id=\"开发环境部署\"><a href=\"#开发环境部署\" class=\"headerlink\" title=\"开发环境部署\"></a>开发环境部署</h2><h3 id=\"部署环境\"><a href=\"#部署环境\" class=\"headerlink\" title=\"部署环境\"></a>部署环境</h3><ul>\n<li>使用kolla-ansible快速部署搭建all-in-one：</li>\n</ul>\n<p>ubuntu搭建参考链接：<a href=\"https://docs.openstack.org/kolla-ansible/2023.1/user/quickstart.html\">https://docs.openstack.org/kolla-ansible/2023.1/user/quickstart.html</a></p>\n<ul>\n<li>使用kolla-dev-mode&#x3D;true部署，将会拉取源码并挂载到容器,可实现直接修改源码之后重启容器即可生效。</li>\n</ul>\n<p>参考链接：<a href=\"https://docs.openstack.org/kolla-ansible/latest/contributor/kolla-for-openstack-development.html\">https://docs.openstack.org/kolla-ansible/latest/contributor/kolla-for-openstack-development.html</a></p>\n<ul>\n<li>可在kolla-ansible源码中，修改和{ nova_source_version }重新定义拉取源码的仓库和分支。拉取仓库依赖git，请提前安装。</li>\n</ul>\n<h3 id=\"接口测试\"><a href=\"#接口测试\" class=\"headerlink\" title=\"接口测试\"></a>接口测试</h3><h4 id=\"获取token\"><a href=\"#获取token\" class=\"headerlink\" title=\"获取token\"></a>获取token</h4><p>1.openstackclient 命令行获取</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># openstack token issue</span><br></pre></td></tr></table></figure>\n\n<p>参考： <a href=\"https://blog.csdn.net/qq_30657195/article/details/108055043\">https://blog.csdn.net/qq_30657195/article/details/108055043</a></p>\n<p>2.异地curl获取</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># curl -i   -H &quot;Content-Type: application/json&quot;   -d &#x27;</span><br><span class=\"line\">&#123; &quot;auth&quot;: &#123;</span><br><span class=\"line\">    &quot;identity&quot;: &#123;</span><br><span class=\"line\">      &quot;methods&quot;: [&quot;password&quot;],</span><br><span class=\"line\">      &quot;password&quot;: &#123;</span><br><span class=\"line\">        &quot;user&quot;: &#123;</span><br><span class=\"line\">          &quot;name&quot;: &quot;admin&quot;,</span><br><span class=\"line\">          &quot;domain&quot;: &#123; &quot;id&quot;: &quot;default&quot; &#125;,</span><br><span class=\"line\">          &quot;password&quot;: &quot;admin12#$&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;&#x27;   &quot;http://10.10.15.184:5000/v3/auth/tokens&quot; ; echo</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://docs.openstack.org/keystone/pike/api_curl_examples.html\">https://docs.openstack.org/keystone/pike/api_curl_examples.html</a></p>\n<p>3.工具posttman获取</p>\n<p>根据curl命令修改postman参数，根据-H修改header参数，-d修改body参数。</p>\n<p>header修改如图所示:</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/26098815/1694746908100-354fb3bb-08f5-4965-9813-3f72a3ef0ec3.png\" alt=\"img\"></p>\n<p>body修改如图所示：</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/26098815/1694746941243-c32f94bd-c1e5-4344-b37a-f5a449e548b5.png\" alt=\"img\"></p>\n<p>token值如图所示：</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/26098815/1694746997062-460d6c18-1591-4a42-b8a2-3570bb5c7c4c.png\" alt=\"img\"></p>\n<h4 id=\"调用api\"><a href=\"#调用api\" class=\"headerlink\" title=\"调用api\"></a>调用api</h4><ol>\n<li>使用curl命令调用</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -s http://10.10.15.184:9292/images -H &#x27;X-Auth-Token:gAAAAABlA8lIs87kbEYq85mnARenwHlLt_Nv_XflgQXJNBAM4tFcNAf8kG9fmXDRQCHZFaLu4u9cDNCLKADIwpkSSqNWDTI2lVLd02OD74NNG3tdUCSFs1KC6JAW0Bsv9LXnokrema_nwshrXcBwGvsBCb0RnNA60g&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>参考：<a href=\"https://www.linux.com/training-tutorials/spinning-server-openstack-api/\">https://www.linux.com/training-tutorials/spinning-server-openstack-api/</a></p>\n<ol>\n<li>使用postman调试</li>\n</ol>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/26098815/1694749070795-8bc5bf37-7a04-4d1d-b844-92ca9f15a762.png\" alt=\"img\"></p>\n<p>注：X-Auth-Token是发送请求时使用，X-Subject-Token是服务器响应请求时传回的参数。</p>\n<p><a href=\"https://support.huaweicloud.com/intl/en-us/devg-roma/apic-dev-190216017.html\">https://support.huaweicloud.com/intl/en-us/devg-roma/apic-dev-190216017.html</a></p>\n<h4 id=\"LOG\"><a href=\"#LOG\" class=\"headerlink\" title=\"LOG\"></a>LOG</h4><ol>\n<li>可以使用pdb 等工具进行调试。</li>\n</ol>\n<p>参考：<a href=\"https://docs.openstack.org/oslotest/queens/user/features.html\">https://docs.openstack.org/oslotest/queens/user/features.html</a></p>\n<ol>\n<li>或者LOG.info LOG.debug等输出日志。log文件输出的信息等级需要配置，只有符合配置文件&#x2F;etc&#x2F;nova&#x2F;nova.conf中的日志等级的日志才会被输出。</li>\n</ol>\n<p>参考：<a href=\"https://docs.openstack.org/nova/pike/admin/manage-logs.html\">https://docs.openstack.org/nova/pike/admin/manage-logs.html</a></p>\n"},{"title":"基于openEuler使用oos编包","date":"2024-03-11T10:09:16.000Z","description":"基于openEuler使用oos编包<!--more-->OpenEuler社区贡献","_content":"基于Euller-22.03系统。\n## 系统配置\n## 安装依赖\n","source":"_drafts/基于openEuler使用oos编包.md","raw":"---\ntitle: 基于openEuler使用oos编包\ndate: 2024-03-11 18:09:16\ndescription: 基于openEuler使用oos编包<!--more-->OpenEuler社区贡献\ncategories:\n- Linux\n- Rpm\n- OpenEuler\ntags:\n- Linux\n- Rpm\n- OpenEuler\n---\n基于Euller-22.03系统。\n## 系统配置\n## 安装依赖\n","slug":"基于openEuler使用oos编包","published":0,"updated":"2025-03-27T00:57:01.335Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmamklq6y000rfkd18n030duf","content":"<p>基于Euller-22.03系统。</p>\n<h2 id=\"系统配置\"><a href=\"#系统配置\" class=\"headerlink\" title=\"系统配置\"></a>系统配置</h2><h2 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h2>","site":{"data":{}},"excerpt":"","more":"<p>基于Euller-22.03系统。</p>\n<h2 id=\"系统配置\"><a href=\"#系统配置\" class=\"headerlink\" title=\"系统配置\"></a>系统配置</h2><h2 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h2>"},{"title":"搭建Trojan","date":"2023-12-15T02:27:28.000Z","description":"搭建Trojan","type":"tags","comments":1,"_content":"参考文档：\n<https://www.yuque.com/accessac/pa1h2w/ysys8mram2cpdgmu>","source":"_drafts/搭建Trojan.md","raw":"---\ntitle: 搭建Trojan\ndate: 2023-12-15 10:27:28\ndescription: 搭建Trojan\ntype: \"tags\"\ncomments: true\ncategories:\n- Learning Tools\n- Hexo\ntags:\n- nodejs\n- Blog\n---\n参考文档：\n<https://www.yuque.com/accessac/pa1h2w/ysys8mram2cpdgmu>","slug":"搭建Trojan","published":0,"updated":"2025-03-27T00:57:01.335Z","layout":"post","photos":[],"link":"","_id":"cmamklq6y000tfkd189419kh7","content":"<p>参考文档：<br><a href=\"https://www.yuque.com/accessac/pa1h2w/ysys8mram2cpdgmu\">https://www.yuque.com/accessac/pa1h2w/ysys8mram2cpdgmu</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>参考文档：<br><a href=\"https://www.yuque.com/accessac/pa1h2w/ysys8mram2cpdgmu\">https://www.yuque.com/accessac/pa1h2w/ysys8mram2cpdgmu</a></p>\n"},{"_content":"# 配电网业务应用安全管理技术研究\n\n任务一：任亮\n\n3.4 配电网业务应用安全管理技术研究\n\n4.3 配电网业务应用安全管理技术研究\n\n- 业务应用安全动态管理模块开发\n  - 业务应用在线迁移技术研究\n  - 业务应用支撑资源弹性调度策略研究\n  - 业务应用自愈技术\n\n研究业务应用在线迁移、业务应用支撑资源弹性调度策略、业务应用自愈等技术，设计并开发业务应用安全动态管理模块，实现配电网多端业务应用动态调度，支撑配电管理与用电管理的智能化、自动化发展。\n\n# 安全高普适性配电网云操作系统研发\n\n任务二：王静\n\n3.5安全高普适性配电网云操作系统研发\n\n4.4安全高普适性配电网云操作系统研发\n\n- 资源配置模块开发\n- 服务编排模块开发\n- 安全管控模块开发\n- 开放服务模块开发\n- 配电网拓扑自动发现模块开发\n- 模块系统集成\n  \n研发安全高普适性配电网云操作系统，完成计算资源安全管理模块、网络资源安全管理模块、业务应用安全动态管理模块等关键模块系统集成，实现基础资源配置管理、服务编排、安全管控、台区拓扑自动发现，支撑配电网主站、通信系统、自动化监控终端设备的安全可控运行，实现中低压台区信息基础设施、智能融合终端的国产化替代与云化调度管理，实现配电网资源的抽象及云化，能对电网低压台区多维安全监控告警，在遭受断网、断电、存储损坏3类灾难时，可通过高可用调度机制实现节点自愈，全年系统稳定运行率达99.99%，实现配电网的安全调配和运行。\n\n实现基础资源配置、基础资源服务编排、资源安全管控、资源开放服务与台区拓扑自动发现，实现配电网信息基础设施的高弹性云化调度、资源安全服务、资源节点自愈，支撑配电网的安全调配与运行。\n\n- 安全高普适性配电网云操作系统集成\n\n  - 计算资源安全管理模块\n  - 网络资源安全管理模块\n  - 业务应用安全动态管理模块\n  - 云操作系统服务模块\n    - 资源配置服务模块开发\n    - 服务编排模块开发\n    - 安全管控模块开发\n    - 开放服务模块开发\n    - 配电网拓扑自动发现模块开发\n  \n# AI\n- 双重化冗余多机系统心跳部署模型\n```\n\n```\n- 混合系统可靠性测算模型\n```\n混合系统可靠性测算模型是用于评估同时包含多种组件（如机械、电气、软件等）的系统的可靠性的数学模型。在混合系统中，不同类型的组件之间可能存在相互作用和依赖关系，因此需要一种综合考虑各种组件及其相互关系的方法来计算系统的整体可靠性。\n\n这种模型通常会结合不同可靠性分析方法，如事件树分析、失效模式和效果分析（FMEA）、Markov模型等，以综合考虑各种可能的失效模式和相互影响，从而对混合系统的可靠性进行定量评估。\n\n这样的模型能够帮助工程师和决策者更好地了解混合系统的可靠性水平，识别潜在的风险和瓶颈，并制定合适的改进和维护策略，以确保系统在运行过程中能够达到要求的可靠性水平。\n```\n  \n- 配电网拓扑自动发现\n```\n拓扑自动发现是指通过自动化的方式，系统能够主动发现和绘制网络中各种设备、节点和通信连接之间的拓扑结构。这种技术通过扫描网络中的设备和通信信息，自动创建和更新网络拓扑图，有助于网络管理员或运维人员更好地了解整个网络结构，快速定位问题和故障，提高网络管理效率和可靠性。\n\n拓扑自动发现可以应用在各种网络环境中，包括企业网络、数据中心网络、电信网络等，对于大型复杂网络尤其有用。通过拓扑自动发现，网络管理员可以轻松地了解网络中设备的分布和连接关系，识别潜在的瓶颈和安全隐患，及时进行网络规划和优化。\n\n拓扑自动发现通常结合使用网络管理工具和技术，如网络扫描工具、SNMP协议、LLDP协议等，通过这些工具可以主动地发现网络中各种设备的信息，并在图形界面上呈现出网络拓扑图。这样的可视化展示有助于运维人员更直观地了解网络结构，快速识别问题，并进行快速、准确的故障排查和修复。\n```\n```\n实现拓扑自动发现可以通过以下步骤和方法来进行：\n\n使用网络扫描工具：网络扫描工具是实现拓扑自动发现的常用工具之一。这些工具可以扫描网络中各个子网的设备和连接信息，获取设备的IP地址、MAC地址、端口信息等，并根据扫描结果绘制网络拓扑图。\n\n使用SNMP（Simple Network Management Protocol）协议：SNMP协议是一种用于监控和管理网络设备的协议，通过使用SNMP协议，可以获取网络设备的各种信息，如设备类型、配置信息、运行状态等，从而实现拓扑自动发现。\n\n使用LLDP（Link Layer Discovery Protocol）协议：LLDP是一种用于发现和描述本地网络拓扑关系的协议，通过LLDP协议，网络设备可以发现相邻设备的信息，并建立网络拓扑图。\n\n结合设备日志和事件信息：设备日志和事件信息中包含了设备之间的通信和操作记录，结合这些信息可以帮助识别设备之间的关联性，从而更准确地构建网络拓扑结构。\n\n使用专业网络管理软件：有些专业的网络管理软件具有拓扑自动发现功能，可以帮助用户快速、准确地自动发现网络拓扑结构，并提供可视化的拓扑图展示。\n\n综合使用上述方法和工具，可以实现对网络拓扑结构的自动发现和绘制。在实施拓扑自动发现之前，需要确保网络设备支持相应的协议和功能，并合理配置网络扫描工具或网络管理软件，以实现准确、全面地收集和分析网络设备信息，从而建立完整的网络拓扑图。\n```\n```\n\n```\n- 配电网边缘侧应用纳管\n```\n配电网边缘侧业务应用纳管是指在配电网的边缘侧部署业务应用，并将其纳入到配电网管理系统中进行监控和管理。配电网边缘侧指的是离用户接入点较近、服务范围较小的区域，具有一定的自治性和分布式特点。\n\n配电网边缘侧业务应用包括但不限于分布式能源接入管理、储能系统控制、智能配电设备监控等。通过在边缘侧部署这些业务应用，可以实现对配电网的动态监测和调度，提高配电网的安全性、可靠性和效率。\n\n纳管则是指将这些边缘侧业务应用接入到配电网管理系统中，进行统一的监控和管理。通过纳管，可以实现对边缘侧业务应用的集中监控、远程调度和数据分析，从而更好地把握配电网运行状态，及时发现和处理问题，提高配电网的运行水平和管理效率。\n```\n```\n实现边缘侧业务应用纳管（Edge Computing）可以通过以下步骤和方法来进行：\n\n确定需求和目标：首先需要明确边缘侧业务应用纳管的具体需求和目标，包括要纳管的业务应用类型、规模、部署位置等信息，以及实现纳管的目的和期望效果。\n\n选取合适的边缘侧管理平台：选择适合自身业务需求的边缘侧管理平台是实现纳管的关键。这些平台通常提供边缘计算资源管理、监控、故障排除、安全管理等功能，帮助用户统一管理和监控边缘侧业务应用。\n\n部署和配置纳管系统：根据选取的边缘侧管理平台，进行系统部署和基础配置，确保系统正常运行。这包括配置边缘设备与管理平台的通信、建立纳管系统和应用程序之间的连接等。\n\n注册和认证边缘设备：将需要纳管的边缘设备注册到管理平台，进行认证和授权，以便管理平台能够对边缘设备进行监控、配置和管理。\n\n部署业务应用程序：将要纳管的业务应用程序部署到边缘设备中，确保应用程序能够正常运行，并与管理平台进行通信。\n\n监控和管理业务应用程序：通过边缘侧管理平台监控和管理业务应用程序的运行状态、性能指标、安全情况等，及时发现和解决问题，确保业务正常运行。\n\n完善安全保障措施：在实现边缘侧业务应用纳管的过程中，需注意加强安全管理工作，包括数据加密、访问控制、漏洞修复等，确保业务数据和系统安全。\n\n通过以上步骤和方法，可以有效实现对边缘侧业务应用的纳管，提高业务运行效率、减少故障发生，提升系统稳定性和安全性。\n```\n```\n终端节点：由各种物联网设备（如传感器、RFID标签、摄像头、智能手机等）组成，主要完成收集原始数据并上报的功能。在终端层中，只需提供各种物联网设备的感知能力，而不需要计算能力。\n边缘计算节点：边缘计算节点通过合理部署和调配网络边缘侧节点的计算和存储能力，实现基础服务响应。\n网络节点：负责将边缘计算节点处理后的有用数据上传至云计算节点进行分析处理。\n云计算节点：边缘计算层的上报数据将在云计算节点进行永久性存储，同时边缘计算节点无法处理的分析任务和综合全局信息的处理任务仍旧需要在云计算节点完成。除此之外，云计算节点还可以根据网络资源分布动态调整边缘计算层的部署策略和算法。\n```\n```\n在OpenStack中，资源管理是指对计算、存储、网络等各种资源进行有效管理和监控，以确保资源的高效利用和系统的稳定运行。OpenStack提供了一系列工具和服务，用于实现资源管理功能，包括但不限于以下几个方面：\n\n计算资源管理： 在OpenStack中，使用计算服务（Nova）可以管理和调度计算资源，包括虚拟机实例的创建、启动、停止、迁移等操作。计算资源管理涉及到资源的动态调度、负载均衡和故障恢复等功能，以确保计算资源的高可用性和性能。\n\n存储资源管理： OpenStack提供了存储服务（Cinder、Swift、Manila等），用户可以通过这些服务管理块存储、对象存储和文件存储等不同类型的存储资源。存储资源管理包括存储容量的分配、数据备份与恢复、存储策略的设置等操作。\n\n网络资源管理： 使用网络服务（Neutron）可以管理和配置网络资源，包括虚拟网络的创建、子网的划分、路由的配置等。网络资源管理涉及到网络拓扑的设计、安全组规则的设置、负载均衡的配置等功能，以确保网络资源的稳定和安全。\n\n身份认证和权限管理： OpenStack提供身份认证服务（Keystone），用户可以通过身份认证机制对资源进行访问控制和权限管理。身份认证和权限管理是保障资源安全的重要环节，可以实现对资源的精细化控制和监管。\n\n监控和报警： OpenStack提供监控和告警服务，用户可以监控各种资源的使用情况和性能表现，并设置告警规则，及时发现和处理资源的异常情况，保障系统的稳定运行。\n\n通过以上资源管理功能，OpenStack可以帮助用户有效管理和利用各种云计算资源，实现资源的高效分配、灵活调度和监控管理，为应用部署和运维提供支持和保障。资源管理是OpenStack中的一个核心功能，对于构建稳定、可靠的云计算环墋至关重要。\n```\n- 资源配置\n```\n资源配置管理指在系统中的基础资源进行管理和配置，以确保系统运行稳定、高效，并满足用户需求的过程。基础资源通常包括计算资源（CPU、内存、存储）、网络资源、操作系统和应用软件等。\n1）计算资源配置\n计算资源配置是指对计算系统中的各种关键资源进行合理分配和调整，以确保系统运行顺畅、性能优化、成本控制和资源利用率最大化的过程。可以使用计算服务管理和调度计算资源。计算资源管理涉及到资源的动态调度、负载均衡和故障恢复等功能，以确保计算资源的高可用性和性能。\n计算资源调度算法是云计算和分布式系统中的关键组成部分，用于有效地管理和调度计算资源，提高系统的性能和资源利用率。以下是一些常见的计算资源调度算法：\n\n先来先服务（First Come First Serve, FCFS）：\n\n最简单的调度算法，按照作业到达的先后顺序进行调度。适用于简单的任务调度场景，但可能导致长作业等待时间和低效的资源利用。\n短作业优先（Shortest Job First, SJF）：\n\n在每次调度时选择预期运行时间最短的作业进行调度。可以减少平均等待时间和提高系统吞吐量。\n最高响应比优先（Highest Response Ratio Next, HRRN）：\n\n结合作业的等待时间和预期运行时间，计算响应比（等待时间+预期运行时间/预期运行时间），选择响应比最高的作业进行调度。\n最短剩余时间（Shortest Remaining Time, SRT）：\n\n在作业运行过程中根据作业的剩余执行时间选择最短的作业进行调度，适用于动态作业的调度。\n最高优先级优先（Highest Priority First, HPF）：\n\n每个作业都有一个优先级，根据作业的优先级进行调度。高优先级作业先执行，适用于优先级任务调度场景。\n轮转调度（Round Robin）：\n\n将CPU时间分成时间片，每个作业在一个时间片内执行一定时间，然后切换到下一个作业。循环执行所有作业，适用于多道程序设计。\n负载均衡调度算法：\n\n通过监控系统负载情况，将任务均匀分配到各个计算节点上，保持系统资源的平衡利用。\n智能调度算法：\n\n基于机器学习、人工智能等技术，根据历史数据和实时情况进行智能化的资源调度，提高系统的自适应性和性能。\n这些计算资源调度算法可以根据不同的场景和需求进行选择和应用，帮助优化资源利用、提高系统性能和响应速度。综合考虑作业特性、系统负载和资源限制等因素，选择合适的调度算法对系统的效率和性能至关重要。\n\n2）网络资源配置\n使用网络服务（Neutron）可以管理和配置网络资源，包括虚拟网络的创建、子网的划分、路由的配置等。网络资源管理涉及到网络拓扑的设计、安全组规则的设置、负载均衡的配置等功能，以确保网络资源的稳定和安全。\n\n3）存储资源配置\n使用存储服务管理块存储、对象存储和文件存储等不同类型的存储资源。存储资源管理包括存储容量的分配、数据备份与恢复、存储策略的设置等操作。\n存储资源的配置和调度在云计算和虚拟化环境中起着至关重要的作用，对数据存储、访问和性能具有直接影响。以下是关于存储资源配置和调度的一些重要考虑因素和实践方法：\n\n存储资源类型：\n\n存储资源可以包括本地硬盘、网络附加存储（如网络文件系统、对象存储、块存储等）等不同类型。根据应用需求和数据访问模式选择合适的存储类型。\n存储卷管理：\n\n使用存储卷管理工具（如LVM、RAID）来管理和配置存储卷，实现数据的分区、备份和恢复，确保数据的安全性和可靠性。\n存储性能优化：\n\n针对不同的应用需求和数据访问模式，对存储资源进行性能优化，包括调整存储缓存、块大小、读写操作优化等，提高数据访问效率。\n存储虚拟化：\n\n使用存储虚拟化技术（如软件定义存储、存储虚拟化设备）将物理存储资源抽象为逻辑存储池，实现多个虚拟机实例共享同一存储资源，提高存储资源的利用率和灵活性。\n存储负载均衡：\n\n在多台服务器上分布存储资源，实现存储负载均衡，避免单点故障和瓶颈，提高系统的可靠性和性能。\n存储备份和恢复：\n\n实现存储资源的定期备份和恢复，保障数据的安全和完整性，应对意外数据丢失或损坏的情况。\n自动化存储调度：\n\n使用自动化存储调度工具（如存储管理系统、自动化存储平台）实现存储资源的动态调度和优化，根据实时需求分配存储资源，提高存储资源的利用率。\n数据迁移和迁移：\n\n对存储资源进行数据迁移和迁移，根据数据的访问频率和重要性进行合理的存储调度，优化存储资源的使用和管理。\n通过合理配置和调度存储资源，可以提高数据的安全性、可靠性和性能，确保系统在处理大量数据和高并发访问时能够高效运行，并满足用户需求。\n```\n\n\n- 服务编排\n```\n服务编排（Service Orchestration）是指将多个服务或应用程序按照一定的逻辑顺序和规则进行组合、配置和管理，以实现复杂的业务流程或系统任务。在服务编排中，不同的服务或应用程序之间会以一定的方式进行互动和协同工作，以达到特定的业务目标或系统运行需求。\n\n服务编排通常涉及到以下几个重要概念和过程：\n\n服务定义：将需要的服务或应用程序进行定义和描述，包括服务的输入参数、输出结果、执行逻辑、运行环境等信息。\n\n服务组合：将定义好的服务按照一定的组合规则进行组合，形成一个服务流程或任务流程。在服务编排中，可能涉及到顺序执行、并发执行、条件分支等方式来组合多个服务。\n\n服务配置：对组合好的服务流程进行配置和参数设置，以适应特定的场景或需求。这包括服务间的通信设置、数据传递、资源调度等配置。\n\n服务调度与执行：根据服务编排的规则和配置信息，将服务流程交给服务编排引擎或执行引擎来调度和执行。执行过程中，服务之间会相互调用、交换数据，并按照事先定义的流程进行处理。\n\n监控与管理：实时监控服务编排的执行过程，记录日志、收集指标，及时发现和处理异常情况。同时，根据监控数据和分析结果，可以对服务编排进行性能优化或资源调整。\n\n服务编排可以应用于诸多场景，如自动化工作流程、云原生应用开发、微服务架构等。通过服务编排，用户可以更加灵活、高效地管理和部署多个服务，实现复杂的业务逻辑和系统任务。\n```\n- 安全管控模块\n```\n在云计算环境中，安全管控是非常重要的，以确保系统和数据的安全性、保密性和完整性。以下是一些常见的安全管控措施和最佳实践：\n\n身份和访问管理：\n\n实施严格的身份验证和访问控制，确保只有经授权的用户可以访问和管理计算资源。使用多因素身份验证（MFA）以增强安全性。\n网络安全：\n\n配置网络防火墙、安全组和网络隔离策略，限制网络流量和通信，防止未经授权的访问和攻击。\n数据加密：\n\n对数据在存储和传输过程中进行加密，确保数据的保密性。使用加密算法保护数据，尤其是敏感信息。\n漏洞管理：\n\n定期进行安全漏洞扫描和漏洞管理，及时修复系统和应用程序中的漏洞，以减少系统面临的风险。\n日志和审核：\n\n设置日志记录和审核机制，跟踪系统和用户的活动，帮助及时检测和响应安全事件。\n灾难恢复和备份：\n\n制定灾难恢复计划，并定期进行数据备份，以应对系统故障、数据丢失或其他不可预见的情况。\n安全培训：\n\n对员工进行安全意识培训，教育他们如何识别和应对安全威胁，降低员工造成的安全风险。\n合规性和标准：\n\n遵守相关法规和标准，如GDPR、HIPAA等，确保系统设计和运营符合法律要求和行业标准。\n安全技术：\n\n使用安全工具和技术，如防火墙、入侵检测系统（IDS）、安全信息与事件管理（SIEM）等，增强系统的安全性。\n综合上述安全管控措施和最佳实践，用户可以构建安全可靠的云计算环境，有效保护系统和数据免受安全威胁和攻击。持续加强安全管理和监控，及时响应安全事件，是确保云计算环境安全的关键。\n```\n```\n将基础资源配置和管理、资源编排以及安全管控组合运用，在计算资源和数据安全方面具有以下优点：\n\n资源最佳利用：\n\n通过资源编排和基础资源配置的优化，可以实现对计算资源的灵活调度和配置，最大限度地提高资源利用率，提升系统性能和效率。\n安全性加强：\n\n结合安全管控机制，对资源访问、数据传输和存储进行加密和监控，防范安全威胁和数据泄露，保障计算资源和信息安全。\n风险降低：\n\n基础资源配置和管理可以确保系统的正常运行和稳定性，资源编排可以按需分配资源，安全管控可以预防和应对安全威胁，降低系统运行风险。\n自动化管理：\n\n结合资源编排技术，可以实现自动化的资源调度和管理，提高系统的自动化程度，减少人为错误和操作成本。\n合规性和可管理性：\n\n强化安全管控机制，确保系统和数据符合合规标准和法规要求，同时实现资源的有效管理和监控，保持系统的可管理性。\n响应灵活性：\n\n结合资源编排技术，可以根据不同的需求快速调整资源配置和部署，灵活应对系统负载变化和业务需求，提高系统的响应能力。\n综合应用基础资源配置和管理、资源编排，以及安全管控，可以有效提升系统的可靠性、安全性和效率，满足不同业务场景下的需求和挑战。持续优化资源管理和安全机制，是保障计算资源和数据安全的重要措施，为系统的稳定运行和业务发展提供有力支持。\n```\n-  研发配电云系统集成\n```\n云系统集成指的是将多个云服务、应用程序或系统进行连接和整合，以实现数据流畅、信息交换和协同工作的过程。在云计算环境下，云系统集成变得更加重要和复杂，因为企业通常会使用多个云服务提供商的服务，并需要将它们整合在一起以实现协作和数据共享。以下是一些常见的云系统集成方法和实践：\n\nAPI集成：\n使用应用程序编程接口（API）实现不同云服务和应用程序之间的通信和数据交换。通过调用API来实现系统之间的集成和数据传输。\n\n集成平台：\n使用集成平台和工具（如MuleSoft、Informatica、Boomi）来简化和加速系统集成的过程。这些平台提供了丰富的连接器和工作流程，可帮助企业构建复杂的集成方案。\n\n事件驱动集成：\n基于事件驱动架构（Event-Driven Architecture）实现系统之间的集成。通过订阅和发布事件来传递信息和触发行为，实现异步和实时的系统集成。\n\n数据同步和复制：\n使用数据同步和复制工具（如AWS Data Pipeline、Google Cloud Dataflow）将数据从一个云服务同步到另一个云服务，保持数据的一致性和可用性。\n\n身份和访问管理集成：\n集成身份和访问管理（IAM）系统，实现用户认证和授权在不同云服务和系统之间的一致性和安全性。\n\n业务流程集成：\n将不同云系统的业务流程进行集成和优化，实现跨系统的自动化工作流程和协同工作。\n\n监控和管理集成：\n集成监控和管理工具，实现对多个云系统的统一监控和管理，以便及时发现和解决问题。\n\n安全集成：\n实现安全事件和日志的集中管理和分析，确保在不同云系统之间的数据传输和存储安全可靠。\n\n综合利用上述云系统集成方法和实践，企业可以实现多个云服务和应用程序之间的无缝连接和协同工作，提高系统的效率和灵活性，实现数字化转型和业务创新。同时，云系统集成也需要考虑安全、可靠性和性能等方面，确保整个系统的正常运行和数据的安全保护。\n```\n-  展开配电网云操作系统十点应用部署方案\n```\n在云计算环境中，部署方案通常涉及到如何将应用程序和服务部署到云平台上，以便实现高可用性、可伸缩性和弹性的运行。以下是一般情况下的云计算部署方案：\n\n云服务器部署：\n使用云服务提供商（如AWS、Azure、Google Cloud等）提供的虚拟机实例部署应用程序。可以根据需求选择不同规格和配置的虚拟机，将应用程序和服务部署到这些虚拟机上。\n\n容器化部署：\n使用容器化技术（如Docker、Kubernetes）将应用程序打包为容器镜像，然后在云平台上部署和管理这些容器。容器化部署可以提供更高的灵活性和可移植性。\n\nServerless部署：\n使用Serverless架构（如AWS Lambda、Azure Functions）将应用程序拆分成小的函数，并按需在云平台上执行。Serverless部署无需管理服务器和基础设施，可以实现按需扩展和减少成本。\n\n多区域和跨区域部署：\n在多个云区域或跨多个云服务提供商的区域中部署应用程序，以提高系统的可用性和容错能力。跨区域部署可以减少因单一区域故障而导致的服务中断。\n\n自动化部署和持续集成：\n使用自动化部署工具（如Jenkins、GitLab CI/CD）实现持续集成和持续部署，自动化构建、测试和部署应用程序，提高部署效率和质量。\n\n监控和日志管理：\n部署监控和日志管理工具（如Prometheus、ELK Stack）来监视应用程序的性能和运行情况，及时发现和解决问题。\n\n安全和权限管理：\n部署安全措施（如防火墙、身份认证、加密）和权限管理机制，保障应用程序和数据的安全，防止安全漏洞和攻击。\n\n综合考虑上述云计算部署方案，可以根据具体的业务需求和情况选择适合的部署方式，并借助云计算的优势实现灵活、高效、安全的应用部署和运行。\n```\n```\n系统集成和部署是两个密切相关且互相依赖的概念，在软件开发和 IT 领域中起着至关重要的作用。以下是系统集成和部署之间的关系：\n\n系统集成：\n\n系统集成是将不同系统、软件、服务或组件整合在一起，使它们能够相互通信、协同工作和共享数据。集成的目标是实现系统之间的无缝连接和数据交流，以实现更高的效率、可靠性和灵活性。系统集成侧重于整合系统的功能和数据流程，确保系统间协作无缝。\n系统部署：\n\n系统部署是将经过集成的系统或软件部署到目标环境中，使其能够正常运行和提供服务。部署的目标是将开发完成的系统、应用程序或服务部署到生产环境中，并确保其稳定性、安全性和可用性。部署包括安装、配置、测试、启动和监控系统。\n关系及交互作用：\n\n前期准备：在系统部署之前，需要进行系统集成的工作，确保不同系统之间能够正常通信和协作。\n集成调试：在系统集成阶段，会对整合后的系统进行调试和测试，以确保系统的各个部分能够正常运行。\n部署环境：系统集成完成后，需要将整合后的系统部署到目标环境中，进行安装、配置和测试。\n监控和维护：部署完成后，需要对系统进行定期监控和维护，确保系统的稳定性和性能。\n总体而言，系统集成和部署是软件开发和 IT 管理中不可或缺的两个环节，它们紧密相连，相辅相成，共同确保系统的正常运行和服务的可靠提供。在软件开发和项目实施过程中，系统集成和部署都需要细致的规划、有序的执行和持续的跟踪监控，以确保项目的顺利完成和系统的有效运行。\n```\n\n- 私有云环境部署\n```\n\n选择适当的私有云平台\n选择适合自身需求的私有云平台，如OpenStack、VMware vSphere等，确保平台提供足够的计算、存储和网络资源来支持应用程序的部署和运行。\n\n创建应用程序镜像\n将应用程序打包为镜像（如Docker镜像），确保应用程序的依赖项和配置都包含在内，以便在私有云环境中快速部署和扩展。\n\n配置部署环境\n在私有云中创建虚拟机、容器集群或Serverless环境，配置所需的计算、存储和网络资源，确保部署环境能够满足应用程序的需求。\n\n部署应用程序\n将应用程序镜像部署到私有云环境中，可以通过虚拟机、容器或Serverless函数等方式进行部署，并设置适当的网络访问权限和资源配额。\n\n配置应用程序\n针对具体应用程序的需求，进行配置文件的定制和参数设置，如数据库连接信息、日志输出配置等，确保应用程序能够正常运行。\n\n监控和管理\n部署应用程序后，需要设置监控和日志管理系统，实时监测应用程序的运行状态和性能指标，及时发现并解决问题。\n\n安全加固\n在部署应用程序之前，要确保私有云环境的安全性，包括网络安全、身份认证、数据加密等措施，保护应用程序和数据的安全。\n\n持续优化\n定期对应用程序进行性能优化、资源调整和系统升级，保持应用程序的高可用性和稳定性。\n\n```\n```\n云操作系统部署是在云环境中创建和配置操作系统实例的过程。以下是一些常见的云操作系统部署方案和步骤：\n\n选择云服务提供商：\n\n选择适合自身需求的云服务提供商，如AWS、Azure、Google Cloud等。不同云服务提供商提供的操作系统镜像和部署方式可能有所不同。\n\n选择操作系统镜像：\n\n在云服务提供商的控制台中选择要部署的操作系统镜像，通常有多个选项可供选择，包括不同版本和发行版的操作系统。\n创建虚拟机实例：\n\n在云服务提供商的控制台中创建虚拟机实例，并选择相应的操作系统镜像作为实例的基础。设置实例的规格、区域、网络配置等参数。\n配置网络和安全组：\n\n配置虚拟机实例的网络设置，包括公有 IP 地址、子网、防火墙规则等。确保虚拟机能够与外部网络通信并受到安全保护。\n连接到虚拟机：\n\n使用SSH、RDP等远程连接工具连接到虚拟机实例，进行操作系统的初始化配置，如设置用户账号、密码、网络配置等。\n安装必要的软件和组件：\n\n根据应用程序的需求，在操作系统中安装所需的软件包、库文件和依赖项，以便后续部署应用程序。\n配置系统参数：\n\n针对具体应用场景和性能需求，调整操作系统的参数设置，如内存管理、磁盘配置、网络优化等，以提升系统性能和稳定性。\n部署应用程序：\n\n将应用程序部署到云操作系统实例中，并配置相应的服务端口、权限和访问控制，确保应用程序能够正常运行。\n监控和维护：\n\n设置监控和警报系统，实时监测云操作系统实例的状态和性能指标，及时发现并解决问题。定期进行系统更新和维护，确保系统安全和稳定性。\n云操作系统部署是云计算环境中非常基础和重要的一环，正确的部署方式和配置能够有效提高系统的安全性、可靠性和性能。在部署过程中要注意备份数据、遵循最佳实践和安全策略，以确保云操作系统的稳定运行和应用程序的正常服务。\n```\n```\n在不同区域之间设置数据复制和同步机制，以确保数据在不同区域之间的一致性和可用性。可以使用云服务提供商提供的数据库复制功能或者自行开发数据同步方案。\n\n负载均衡和流量管理：使用负载均衡器和流量管理工具来分发流量到不同区域的实例和服务中，以提高系统的性能和可用性。\n\n跨区域容灾设计：设计容灾方案，确保即使在一个区域发生故障时，系统依然可以继续提供服务。这可能涉及到备份实例、自动切换流量到其他区域、以及快速恢复服务的计划。\n\n全局服务发现和配置管理：采用全局服务发现和配置管理工具，确保不同区域的服务能够相互发现和通信，并且在配置更新时能够同步更新到所有区域。\n\n安全和身份验证：在跨区域部署中要特别注意安全和身份验证的设置，确保数据在不同区域之间的传输和存储是安全的，同时要对访问权限进行严格控制。\n\n监控和故障排除：建立跨区域的监控系统，及时发现并解决不同区域的故障和问题，确保系统的稳定性和可用性。\n```\n```\n自动更新设置：\n\n操作系统级别的设置：现代操作系统通常提供了自动更新功能，用户可以在设置中配置自动更新选项，包括自动下载更新、自动安装更新等。\n更新策略：用户可以根据需要选择更新策略，如自动更新所有可用更新、仅安全更新、仅重要更新等。\n安全更新机制：\n\n数字签名和验证：操作系统更新应该具有数字签名，以确保其完整性和来源的可信性。\n安全传输：更新应该通过加密和安全的传输协议进行传输，以防止中间人攻击和数据篡改。\n自动部署工具：\n\n配置管理工具：使用像Ansible、Chef、Puppet等配置管理工具来自动化操作系统的部署和配置。\n镜像化部署：将操作系统配置为镜像，通过自动化工具进行快速部署，如使用Docker和Kubernetes进行容器化部署。\n测试和回滚机制：\n\n自动化测试：在部署更新之前，应该进行自动化测试以确保更新不会引入新的问题或破坏系统的正常运行。\n回滚策略：在更新失败或导致问题时，应该有自动回滚机制，以快速恢复系统到之前的稳定状态。\n监控和报警：\n\n系统监控：设置监控系统来监视操作系统的运行状态和更新过程，及时发现问题并采取措施。\n异常报警：配置报警机制，以便在更新过程中出现异常时能够及时通知相关人员。\n用户参与和控制：\n\n通知机制：在自动更新和部署过程中，向用户提供通知和提示，让用户了解何时进行更新以及更新的内容。\n手动干预选项：为用户提供手动干预选项，允许他们暂停、延迟或手动触发更新过程。\n综上所述，操作系统的自动更新和部署是通过自动化工具和流程来确保系统安全和稳定性的重要措施。在实施过程中，需要考虑安全性、可靠性、用户参与等因素，以确保更新和部署过程的顺利进行。\n```\n\n```\n密码验证：\n\n用户名和密码：最基本的身份验证方式，用户使用唯一标识（用户名）和对应的密码进行登录验证。\n多因素认证（MFA）：结合多种验证因素，如密码、手机验证码、硬件令牌等，提高身份验证的安全性。\n公钥基础设施（PKI）：\n\n使用数字证书和公钥加密技术进行身份验证和通信加密，确保通信的机密性和完整性。\n单点登录（SSO）：\n\n用户只需一次登录，即可访问多个相关系统或应用程序，提高用户体验的同时减少了密码管理的复杂性。\n访问控制列表（ACL）：\n\n资源所有者定义允许或拒绝特定用户或用户组对资源的访问权限。\n角色 Based Access Control（RBAC）：\n\n将权限分配给角色，然后将用户分配到适当的角色上，简化权限管理。\n属性 Based Access Control（ABAC）：\n\n根据用户和资源的属性（如用户所在部门、访问时间等）来动态决定访问权限。\n访问审计：\n\n记录用户对系统资源的访问活动，以便事后审计和监控。\n生命周期管理：\n\n对用户账户和权限进行全面的生命周期管理，包括创建、修改、暂停、删除等操作，以确保及时撤销不必要的权限。\nAPI 访问控制：\n\n对外部应用程序或服务通过 API 访问系统资源进行访问控制，并根据需要进行身份验证和授权。\n安全标准和协议：\n\n使用安全标准和协议（如OAuth、OpenID Connect等）来实现身份验证和授权，确保安全的身份验证和访问控制流程。\n\n```\n\n```\n对称加密：\n\n在对称加密中，相同的密钥用于加密和解密数据。常见的对称加密算法包括 DES（数据加密标准）、AES（高级加密标准）等。\n非对称加密：\n\n非对称加密使用一对密钥，即公钥和私钥。公钥用于加密数据，私钥用于解密数据。常见的非对称加密算法包括 RSA、ECC（椭圆曲线加密）等。\n哈希函数：\n\n哈希函数将输入数据映射为固定长度的哈希值。哈希函数是单向的，不可逆的，因此通常用于验证数据的完整性而不是加密数据本身。常见的哈希函数包括 SHA-256、MD5 等。\n混合加密：\n\n混合加密是将对称加密和非对称加密结合使用的一种方式。通常使用非对称加密来传输对称加密所需的密钥，然后使用对称加密来加密实际的数据传输过程。\n量子加密：\n\n量子加密利用量子力学原理来保护数据的安全性，其中包括量子密钥分发（QKD）等技术，可以抵御量子计算的攻击。\n深度学习加密：\n\n最近出现的一些新兴技术利用深度学习方法来加密数据，如基于神经网络的加密算法，它们试图通过深度学习的方法提供更安全和更高效的加密解决方案。\n代理重加密：\n\n这是一种基于代理的加密技术，允许数据在经过一系列代理之后仍然保持加密状态，只有授权的用户才能解密数据。\n```\n```\n日志审计：\n\n审计系统日志记录，包括登录日志、操作日志、安全事件日志等，以便跟踪系统和用户活动，及时发现异常行为。\n网络流量监控：\n\n监控网络流量和数据包，识别异常流量模式或攻击行为，防范网络入侵和数据泄露。\n漏洞扫描：\n\n使用漏洞扫描工具对系统和应用程序进行定期扫描，识别系统中存在的安全漏洞，并及时采取修复措施。\n异常行为检测：\n\n借助行为分析技术，监控用户和系统的行为模式，识别异常行为，如未经授权的访问、大规模数据导出等。\n```\n```\n防火墙（Firewalls）：\n\n防火墙是网络安全的第一道防线，可根据预设的安全策略过滤和控制网络流量，阻止未经授权的访问和恶意流量。\n入侵检测与入侵防御系统（IDS/IPS）：\n\nIDS/IPS 可以监控网络流量和系统日志，检测可能的入侵行为，并根据预定义的规则阻止或响应潜在的攻击。\n虚拟专用网络（VPN）：\n\nVPN 可以通过加密和隧道技术确保远程访问和数据传输的安全性，防止敏感信息在公共网络中被窃听或篡改。\n\n```\n```\n完整备份：\n\n完整备份是指将整个数据集全部备份到备份介质中，可以快速恢复所有数据，但需要较大的存储空间和时间。\n增量备份：\n\n增量备份是在上一次完整备份后备份发生变化的数据，备份时间短，但恢复时需要依次恢复完整备份和增量备份。\n差异备份：\n\n差异备份是备份自上次完整备份以来发生变化的数据，恢复时只需恢复完整备份和最近一次差异备份即可。\n镜像备份：\n\n镜像备份是对整个系统或磁盘进行完整的拷贝，包括操作系统、应用程序和数据，恢复时可以还原到备份时的完全状态。\n远程备份：\n\n将备份数据传输至远程或云存储设备中，以防止本地备份数据遭受灾难性事件影响，提高数据的安全性和可靠性。\n数据库备份：\n\n针对数据库系统，可以使用数据库级别的备份工具进行备份，如SQL Server的备份和恢复、MySQL的mysqldump等。\n文件同步备份：\n\n利用文件同步工具实现实时或定时将指定目录下的文件同步备份到其他存储设备中，确保数据及时备份。\n虚拟化备份：\n\n针对虚拟化环境，可以使用专门的虚拟化备份软件对虚拟机进行备份，如VMware的vSphere Data Protection、Veeam Backup & Replication等。\n持续数据保护（CDP）：\n\nCDP 是一种实时备份技术，可以实现对数据的连续备份，几乎实时地恢复到任意时间点的数据状态。\n```\n```\n优势：\n灵活性和可扩展性：云操作系统集成和部署可以根据需求快速扩展或收缩计算资源，满足业务的变化和增长。\n\n成本效益：通过云服务提供商的按需付费模式，可以避免大量的固定成本，降低了IT基础设施的运营成本。\n\n高可用性和容错性：云平台提供了高可用性和容错性的特性，使得操作系统在云环境中更加稳定和可靠。\n\n自动化管理：利用云平台的自动化工具和服务，可以实现对操作系统的自动化部署、配置和管理，减少人工干预，提高效率。\n\n全球化覆盖：云服务提供商分布在全球各地，可以实现全球范围内的操作系统部署和访问，满足多地域的业务需求。\n\n安全性：云平台提供了多层次的安全措施，可以帮助用户保护操作系统和数据的安全。\n\n发展前景：\n深度整合：随着云计算、人工智能、大数据等新技术的发展，云操作系统将与这些技术深度整合，为用户提供更多智能化、高效化的解决方案。\n\n多云混合部署：未来云操作系统将更加支持多云混合部署，使用户能够更灵活地结合不同云服务商的优势，实现统一的管理和控制。\n\n边缘计算：随着边缘计算的兴起，云操作系统将更多地面向边缘设备，支持在边缘节点上部署和管理操作系统，满足边缘计算场景下的需求。\n\n安全与合规：随着数据安全和合规性要求的提高，云操作系统将更加注重安全和合规性，提供更加全面的安全解决方案和服务。\n\n总的来说，云操作系统集成和部署将继续在云计算领域发挥重要作用，并且随着新技术的不断涌现，其发展前景将更加广阔，为用户提供更多便利和价值。\n```\n\n```\n云操作系统的研究工作取得了许多成效，以下是一些常见的成效：\n\n性能优化：研究人员通过对云操作系统进行深入分析和优化，提出了许多性能优化的方法和技术，包括针对虚拟化、容器化、调度算法等方面的优化，从而提高了云操作系统的整体性能。\n\n安全性增强：针对云环境中的安全挑战，研究人员提出了许多安全增强的方法和技术，包括身份认证、访问控制、隔离技术等，加强了云操作系统的安全性。\n\n自动化管理：研究人员设计并实现了许多自动化管理的工具和系统，用于实现对云操作系统的自动化部署、配置和管理，提高了运维效率和可靠性。\n\n容器和微服务：随着容器和微服务的兴起，研究人员在云操作系统领域做了大量工作，提出了许多针对容器和微服务的优化和支持方案，推动了云原生应用的发展。\n\n混合云和多云管理：针对多云环境下的管理挑战，研究人员提出了许多混合云和多云管理的方案和工具，为用户提供了更便捷的管理和控制方式。\n\n边缘计算：随着边缘计算的兴起，研究人员致力于在边缘环境下进行云操作系统的研究，提出了许多适用于边缘计算场景的解决方案。\n\n这些成效使得云操作系统在性能、安全性、管理和适配新兴技术等方面都取得了显著进展，为云计算提供了更加强大和稳健的基础。未来，随着新技术的不断涌现和需求的不断变化，云操作系统的研究工作将继续发挥重要作用，为云计算的发展提供更多的支持和创新。\n```\n\n```\n研究网络拓扑自动发现是计算机网络领域的重要课题，取得了许多成效，以下是一些常见的成效：\n\n减少人工配置：通过自动发现网络拓扑，可以减少网络管理员的人工配置工作量，提高网络管理的效率和可靠性。\n\n实时更新：自动发现能够及时捕获网络拓扑的变化，帮助网络管理员及时调整网络结构，适应新设备接入、故障修复等场景。\n\n降低错误率：自动发现可以减少人为配置错误的发生，提高网络配置的准确性和稳定性，降低网络故障的风险。\n\n支持大规模网络：自动发现技术能够应对大规模复杂网络的拓扑发现需求，帮助管理大型企业网络、数据中心网络等复杂环境。\n\n与网络分析结合：自动发现与网络分析相结合，能够为网络故障诊断、性能优化等提供更加全面的数据支持，提高网络运维的效率。\n\n支持新型网络架构：自动发现技术也能够支持新型网络架构的部署和管理，如软件定义网络（SDN）、边缘计算网络等。\n\n总的来说，自动发现网络拓扑对于降低网络管理成本、提高网络管理效率、支持新型网络架构等方面都取得了显著成效。未来，随着网络规模的不断扩大、网络变化的不断加剧，自动发现网络拓扑的研究将继续发挥重要作用，为构建智能、自适应的网络管理系统提供更多支持和解决方案。\n```\n```\n研究边缘计算应用的管理和部署（Edge Application Orchestration）在近年来取得了一些重要成果，主要体现在以下几个方面：\n\n资源优化和负载均衡：边缘计算环境中，资源分布广泛，包括边缘设备、边缘节点和云端资源。研究取得的成效包括了对这些资源的有效管理和负载均衡技术，使得边缘计算应用能够充分利用资源，并在不同节点间实现负载均衡，提高性能和可靠性。\n\n自动化部署和扩展：研究工作还涉及自动化部署和扩展技术，使得边缘应用能够根据需求自动部署到最优节点，并能够根据负载情况动态扩展或收缩，以应对实时变化的工作负载。\n\n容器化和微服务架构：将边缘应用进行容器化和采用微服务架构，能够提高应用的灵活性和可移植性，同时降低部署和管理的复杂性。研究工作在此方面取得的成效包括了针对边缘环境的容器编排和管理技术，以及微服务架构下的边缘应用设计和优化。\n\n安全和隐私保护：边缘计算环境涉及大量敏感数据的处理，因此安全和隐私保护是至关重要的。研究工作在边缘应用的安全性和隐私保护方面取得了一些成果，包括边缘节点的安全认证、数据加密和访问控制等技术。\n\n智能管理和优化：研究工作还探索了智能管理和优化技术，包括基于机器学习和人工智能的边缘应用管理策略，以及面向边缘环境的自适应优化算法，从而实现对边缘应用的智能监控、调整和优化。\n\n综上所述，研究边缘计算应用纳管取得了一系列的成效，为边缘计算技术的发展和应用提供了重要支持和保障。随着边缘计算应用场景的不断拓展和深化，相信未来会有更多创新的成果涌现。\n```\n```\n研究基础资源配置对于提高资源利用率、降低成本，并且满足应用性能需求方面取得了一些重要成效。以下是一些常见的成果：\n\n自动化资源调度：研究工作在资源调度方面取得了重要进展，通过设计和开发智能调度算法和策略，实现了自动化的资源分配和调度。这些算法可以根据应用的特征和性能需求，以及资源的可用性和负载情况，动态地将任务分配到最适合的资源上，从而提高资源利用率和应用性能。\n\n负载均衡和弹性扩展：研究工作还涉及负载均衡和弹性扩展技术，使得系统能够根据负载变化自动调整资源配置。通过动态迁移任务或弹性地增加、减少资源，系统可以更好地应对负载波动，提高系统的可伸缩性和稳定性。\n\n混合云和多云环境：研究工作还关注了混合云和多云环境下的资源配置问题。通过制定资源调度策略，将任务合理地分配到私有云、公有云或边缘设备等不同资源上，以充分利用各个环境的优势，提高资源利用率和应用性能。\n\n能源效率和环境友好：研究工作还致力于提高资源配置的能源效率和环境友好性。通过考虑能源消耗和环境影响等因素，设计和优化资源调度策略，以减少能源浪费并改善能源利用效率。\n\n智能优化和自适应管理：研究工作还探索了基于机器学习和人工智能的智能优化和自适应管理技术。通过对历史数据进行分析和学习，系统可以自动识别规律和模式，并根据实时的资源需求和性能指标，调整资源配置，以实现快速响应和优化管理。\n\n总的来说，研究基础资源配置取得了一些重要成效，为提高资源利用率、降低成本，并满足应用性能需求提供了有效的解决方案。随着技术的不断发展和创新，相信未来会有更多的成果涌现，进一步提升资源配置的效率和效果。\n```\n```\n资源编排（Resource Orchestration）是指在分布式计算环境中有效地管理和调度各种资源，以满足应用程序的需求。研究资源编排在以下几个方面取得了一些重要成果：\n\n多资源协同调度：研究工作致力于实现多种资源（例如计算资源、存储资源、网络资源等）的协同调度，确保不同类型的资源能够有效配合，提高系统整体性能。这包括设计合适的调度算法和策略，实现资源之间的有效协同工作。\n\n动态资源调度与迁移：研究工作还关注了动态资源调度和迁移技术，使系统能够根据实时负载情况和应用需求，动态地调整资源配置。通过实时监测系统状态，并根据预设策略进行资源调度和迁移，系统可以更好地适应变化的工作负载，提高系统的灵活性和性能。\n\n容器编排和微服务架构：研究工作还涉及将资源编排与容器编排和微服务架构相结合，以提高应用的部署效率和弹性。通过利用容器技术和微服务架构，可以实现资源的快速部署和扩展，简化资源编排的复杂性，并提高系统的可维护性和可靠性。\n\n智能资源优化和管理：研究工作还探索了智能资源优化和管理技术，包括基于机器学习和人工智能的资源编排算法。这些算法可以通过学习系统的历史数据和行为模式，实现对资源的智能调度和优化，以提高系统的性能和效率。\n\n安全性和隐私保护：资源编排也需要考虑安全性和隐私保护等方面的问题。研究工作致力于设计安全可靠的资源编排策略，确保敏感数据和资源受到有效的保护，防止恶意攻击和数据泄露等安全问题。\n\n总的来说，研究资源编排取得了一些重要成果，为提高系统性能、灵活性和安全性提供了有效的技术支持。随着技术的不断进步和创新，相信资源编排领域将会有更多的发展和突破，为分布式计算环境带来更多的好处和机遇。\n```\n\n```\n研究安全管控方面取得了一些重要的成效，主要体现在以下几个方面：\n\n威胁检测和防范：研究工作在威胁检测和防范方面取得了重要进展。通过开发先进的威胁检测技术和安全防护系统，能够及时识别和应对各种网络安全威胁，包括恶意软件、网络攻击、数据泄露等，从而保护信息系统的安全性。\n\n身份认证和访问控制：研究工作还致力于提高身份认证和访问控制的技术水平。通过引入多因素身份认证、基于角色的访问控制（RBAC）、动态访问控制等技术手段，加强对用户身份和权限的管理，确保只有合法用户获得合法访问权限，从而保障系统的安全性。\n\n数据加密和隐私保护：研究工作还涉及数据加密和隐私保护方面的技术创新。通过设计高效的加密算法、安全的密钥管理机制和数据遮蔽技术，确保敏感数据在存储和传输过程中得到有效的保护，防止数据泄露和非法访问。\n\n安全合规和审计：研究工作还关注了安全合规和审计方面的问题。通过设计安全可追溯的系统架构和审计机制，确保系统操作和数据处理符合相关法规和标准，并且能够对系统的安全状态进行有效监控和审计，以便及时发现和应对安全问题。\n\n安全意识和培训：研究工作也包括安全意识和培训方面的工作。通过开展安全培训和教育活动，提高员工和用户对安全问题的认识和理解，增强整体安全意识，从而减少安全事件的发生和影响。\n\n总的来说，研究安全管控取得了一些重要成效，为提高信息系统的安全性和稳定性提供了有效的技术和管理支持。随着信息技术的不断发展和威胁形势的变化，安全管控领域仍然需要不断创新和进步，以适应新的挑战和需求。\n```\n```\n\n```\n\n```\n配电网资源配置，服务编排，安全管控对计算系统中的各种关键资源进行合理分配和调整，以确保计算服务管理和调度计算资源。云计算环境中对基础资源（如虚拟机、存储、网络等）进行合理配置和分配，以满足应用程序和服务的需求，并优化资源利用率、性能和成本。这一过程通常涉及以下几个方面：\n1.\n虚拟机配置：根据应用程序的需求，确定虚拟机的规格（CPU、内存、存储等）和数量，并进行虚拟机的创建、启动和停止管理。可以根据实际负载情况动态调整虚拟机的规模，实现弹性扩展或收缩。\n2.\n3.\n存储配置：配置存储资源，包括块存储、对象存储、文件存储等，以确保数据的安全性、可靠性和性能。可以根据应用程序的读写需求选择合适的存储类型和容量，并进行备份和恢复管理。\n4.\n5.\n网络配置：配置网络资源，包括虚拟网络、子网、路由器、负载均衡器等，以建立应用程序间的通信连接，并保障网络的安全性和稳定性。可以设置访问控制策略、网络隔离和流量控制等功能。\n6.\n7.\n自动化编排：利用自动化工具和编排系统，根据应用程序的部署需求和资源约束，自动进行资源的分配和调度。可以通过容器编排技术（如Kubernetes）、自动化配置管理工具（如Ansible）等实现自动化的资源编排。\n8.\n9.\n监控与优化：持续监控资源的使用情况和性能指标，及时发现和解决资源瓶颈和性能问题。可以利用监控系统（如Prometheus、Grafana）进行资源利用率分析，优化资源配置和调度策略。\n10.\n通过合理配置和编排基础资源，可以提高系统的灵活性、可靠性和性能，并实现资源的高效利用，从而为用户提供更好的云计算服务体验。\n```","source":"_drafts/配电网.md","raw":"# 配电网业务应用安全管理技术研究\n\n任务一：任亮\n\n3.4 配电网业务应用安全管理技术研究\n\n4.3 配电网业务应用安全管理技术研究\n\n- 业务应用安全动态管理模块开发\n  - 业务应用在线迁移技术研究\n  - 业务应用支撑资源弹性调度策略研究\n  - 业务应用自愈技术\n\n研究业务应用在线迁移、业务应用支撑资源弹性调度策略、业务应用自愈等技术，设计并开发业务应用安全动态管理模块，实现配电网多端业务应用动态调度，支撑配电管理与用电管理的智能化、自动化发展。\n\n# 安全高普适性配电网云操作系统研发\n\n任务二：王静\n\n3.5安全高普适性配电网云操作系统研发\n\n4.4安全高普适性配电网云操作系统研发\n\n- 资源配置模块开发\n- 服务编排模块开发\n- 安全管控模块开发\n- 开放服务模块开发\n- 配电网拓扑自动发现模块开发\n- 模块系统集成\n  \n研发安全高普适性配电网云操作系统，完成计算资源安全管理模块、网络资源安全管理模块、业务应用安全动态管理模块等关键模块系统集成，实现基础资源配置管理、服务编排、安全管控、台区拓扑自动发现，支撑配电网主站、通信系统、自动化监控终端设备的安全可控运行，实现中低压台区信息基础设施、智能融合终端的国产化替代与云化调度管理，实现配电网资源的抽象及云化，能对电网低压台区多维安全监控告警，在遭受断网、断电、存储损坏3类灾难时，可通过高可用调度机制实现节点自愈，全年系统稳定运行率达99.99%，实现配电网的安全调配和运行。\n\n实现基础资源配置、基础资源服务编排、资源安全管控、资源开放服务与台区拓扑自动发现，实现配电网信息基础设施的高弹性云化调度、资源安全服务、资源节点自愈，支撑配电网的安全调配与运行。\n\n- 安全高普适性配电网云操作系统集成\n\n  - 计算资源安全管理模块\n  - 网络资源安全管理模块\n  - 业务应用安全动态管理模块\n  - 云操作系统服务模块\n    - 资源配置服务模块开发\n    - 服务编排模块开发\n    - 安全管控模块开发\n    - 开放服务模块开发\n    - 配电网拓扑自动发现模块开发\n  \n# AI\n- 双重化冗余多机系统心跳部署模型\n```\n\n```\n- 混合系统可靠性测算模型\n```\n混合系统可靠性测算模型是用于评估同时包含多种组件（如机械、电气、软件等）的系统的可靠性的数学模型。在混合系统中，不同类型的组件之间可能存在相互作用和依赖关系，因此需要一种综合考虑各种组件及其相互关系的方法来计算系统的整体可靠性。\n\n这种模型通常会结合不同可靠性分析方法，如事件树分析、失效模式和效果分析（FMEA）、Markov模型等，以综合考虑各种可能的失效模式和相互影响，从而对混合系统的可靠性进行定量评估。\n\n这样的模型能够帮助工程师和决策者更好地了解混合系统的可靠性水平，识别潜在的风险和瓶颈，并制定合适的改进和维护策略，以确保系统在运行过程中能够达到要求的可靠性水平。\n```\n  \n- 配电网拓扑自动发现\n```\n拓扑自动发现是指通过自动化的方式，系统能够主动发现和绘制网络中各种设备、节点和通信连接之间的拓扑结构。这种技术通过扫描网络中的设备和通信信息，自动创建和更新网络拓扑图，有助于网络管理员或运维人员更好地了解整个网络结构，快速定位问题和故障，提高网络管理效率和可靠性。\n\n拓扑自动发现可以应用在各种网络环境中，包括企业网络、数据中心网络、电信网络等，对于大型复杂网络尤其有用。通过拓扑自动发现，网络管理员可以轻松地了解网络中设备的分布和连接关系，识别潜在的瓶颈和安全隐患，及时进行网络规划和优化。\n\n拓扑自动发现通常结合使用网络管理工具和技术，如网络扫描工具、SNMP协议、LLDP协议等，通过这些工具可以主动地发现网络中各种设备的信息，并在图形界面上呈现出网络拓扑图。这样的可视化展示有助于运维人员更直观地了解网络结构，快速识别问题，并进行快速、准确的故障排查和修复。\n```\n```\n实现拓扑自动发现可以通过以下步骤和方法来进行：\n\n使用网络扫描工具：网络扫描工具是实现拓扑自动发现的常用工具之一。这些工具可以扫描网络中各个子网的设备和连接信息，获取设备的IP地址、MAC地址、端口信息等，并根据扫描结果绘制网络拓扑图。\n\n使用SNMP（Simple Network Management Protocol）协议：SNMP协议是一种用于监控和管理网络设备的协议，通过使用SNMP协议，可以获取网络设备的各种信息，如设备类型、配置信息、运行状态等，从而实现拓扑自动发现。\n\n使用LLDP（Link Layer Discovery Protocol）协议：LLDP是一种用于发现和描述本地网络拓扑关系的协议，通过LLDP协议，网络设备可以发现相邻设备的信息，并建立网络拓扑图。\n\n结合设备日志和事件信息：设备日志和事件信息中包含了设备之间的通信和操作记录，结合这些信息可以帮助识别设备之间的关联性，从而更准确地构建网络拓扑结构。\n\n使用专业网络管理软件：有些专业的网络管理软件具有拓扑自动发现功能，可以帮助用户快速、准确地自动发现网络拓扑结构，并提供可视化的拓扑图展示。\n\n综合使用上述方法和工具，可以实现对网络拓扑结构的自动发现和绘制。在实施拓扑自动发现之前，需要确保网络设备支持相应的协议和功能，并合理配置网络扫描工具或网络管理软件，以实现准确、全面地收集和分析网络设备信息，从而建立完整的网络拓扑图。\n```\n```\n\n```\n- 配电网边缘侧应用纳管\n```\n配电网边缘侧业务应用纳管是指在配电网的边缘侧部署业务应用，并将其纳入到配电网管理系统中进行监控和管理。配电网边缘侧指的是离用户接入点较近、服务范围较小的区域，具有一定的自治性和分布式特点。\n\n配电网边缘侧业务应用包括但不限于分布式能源接入管理、储能系统控制、智能配电设备监控等。通过在边缘侧部署这些业务应用，可以实现对配电网的动态监测和调度，提高配电网的安全性、可靠性和效率。\n\n纳管则是指将这些边缘侧业务应用接入到配电网管理系统中，进行统一的监控和管理。通过纳管，可以实现对边缘侧业务应用的集中监控、远程调度和数据分析，从而更好地把握配电网运行状态，及时发现和处理问题，提高配电网的运行水平和管理效率。\n```\n```\n实现边缘侧业务应用纳管（Edge Computing）可以通过以下步骤和方法来进行：\n\n确定需求和目标：首先需要明确边缘侧业务应用纳管的具体需求和目标，包括要纳管的业务应用类型、规模、部署位置等信息，以及实现纳管的目的和期望效果。\n\n选取合适的边缘侧管理平台：选择适合自身业务需求的边缘侧管理平台是实现纳管的关键。这些平台通常提供边缘计算资源管理、监控、故障排除、安全管理等功能，帮助用户统一管理和监控边缘侧业务应用。\n\n部署和配置纳管系统：根据选取的边缘侧管理平台，进行系统部署和基础配置，确保系统正常运行。这包括配置边缘设备与管理平台的通信、建立纳管系统和应用程序之间的连接等。\n\n注册和认证边缘设备：将需要纳管的边缘设备注册到管理平台，进行认证和授权，以便管理平台能够对边缘设备进行监控、配置和管理。\n\n部署业务应用程序：将要纳管的业务应用程序部署到边缘设备中，确保应用程序能够正常运行，并与管理平台进行通信。\n\n监控和管理业务应用程序：通过边缘侧管理平台监控和管理业务应用程序的运行状态、性能指标、安全情况等，及时发现和解决问题，确保业务正常运行。\n\n完善安全保障措施：在实现边缘侧业务应用纳管的过程中，需注意加强安全管理工作，包括数据加密、访问控制、漏洞修复等，确保业务数据和系统安全。\n\n通过以上步骤和方法，可以有效实现对边缘侧业务应用的纳管，提高业务运行效率、减少故障发生，提升系统稳定性和安全性。\n```\n```\n终端节点：由各种物联网设备（如传感器、RFID标签、摄像头、智能手机等）组成，主要完成收集原始数据并上报的功能。在终端层中，只需提供各种物联网设备的感知能力，而不需要计算能力。\n边缘计算节点：边缘计算节点通过合理部署和调配网络边缘侧节点的计算和存储能力，实现基础服务响应。\n网络节点：负责将边缘计算节点处理后的有用数据上传至云计算节点进行分析处理。\n云计算节点：边缘计算层的上报数据将在云计算节点进行永久性存储，同时边缘计算节点无法处理的分析任务和综合全局信息的处理任务仍旧需要在云计算节点完成。除此之外，云计算节点还可以根据网络资源分布动态调整边缘计算层的部署策略和算法。\n```\n```\n在OpenStack中，资源管理是指对计算、存储、网络等各种资源进行有效管理和监控，以确保资源的高效利用和系统的稳定运行。OpenStack提供了一系列工具和服务，用于实现资源管理功能，包括但不限于以下几个方面：\n\n计算资源管理： 在OpenStack中，使用计算服务（Nova）可以管理和调度计算资源，包括虚拟机实例的创建、启动、停止、迁移等操作。计算资源管理涉及到资源的动态调度、负载均衡和故障恢复等功能，以确保计算资源的高可用性和性能。\n\n存储资源管理： OpenStack提供了存储服务（Cinder、Swift、Manila等），用户可以通过这些服务管理块存储、对象存储和文件存储等不同类型的存储资源。存储资源管理包括存储容量的分配、数据备份与恢复、存储策略的设置等操作。\n\n网络资源管理： 使用网络服务（Neutron）可以管理和配置网络资源，包括虚拟网络的创建、子网的划分、路由的配置等。网络资源管理涉及到网络拓扑的设计、安全组规则的设置、负载均衡的配置等功能，以确保网络资源的稳定和安全。\n\n身份认证和权限管理： OpenStack提供身份认证服务（Keystone），用户可以通过身份认证机制对资源进行访问控制和权限管理。身份认证和权限管理是保障资源安全的重要环节，可以实现对资源的精细化控制和监管。\n\n监控和报警： OpenStack提供监控和告警服务，用户可以监控各种资源的使用情况和性能表现，并设置告警规则，及时发现和处理资源的异常情况，保障系统的稳定运行。\n\n通过以上资源管理功能，OpenStack可以帮助用户有效管理和利用各种云计算资源，实现资源的高效分配、灵活调度和监控管理，为应用部署和运维提供支持和保障。资源管理是OpenStack中的一个核心功能，对于构建稳定、可靠的云计算环墋至关重要。\n```\n- 资源配置\n```\n资源配置管理指在系统中的基础资源进行管理和配置，以确保系统运行稳定、高效，并满足用户需求的过程。基础资源通常包括计算资源（CPU、内存、存储）、网络资源、操作系统和应用软件等。\n1）计算资源配置\n计算资源配置是指对计算系统中的各种关键资源进行合理分配和调整，以确保系统运行顺畅、性能优化、成本控制和资源利用率最大化的过程。可以使用计算服务管理和调度计算资源。计算资源管理涉及到资源的动态调度、负载均衡和故障恢复等功能，以确保计算资源的高可用性和性能。\n计算资源调度算法是云计算和分布式系统中的关键组成部分，用于有效地管理和调度计算资源，提高系统的性能和资源利用率。以下是一些常见的计算资源调度算法：\n\n先来先服务（First Come First Serve, FCFS）：\n\n最简单的调度算法，按照作业到达的先后顺序进行调度。适用于简单的任务调度场景，但可能导致长作业等待时间和低效的资源利用。\n短作业优先（Shortest Job First, SJF）：\n\n在每次调度时选择预期运行时间最短的作业进行调度。可以减少平均等待时间和提高系统吞吐量。\n最高响应比优先（Highest Response Ratio Next, HRRN）：\n\n结合作业的等待时间和预期运行时间，计算响应比（等待时间+预期运行时间/预期运行时间），选择响应比最高的作业进行调度。\n最短剩余时间（Shortest Remaining Time, SRT）：\n\n在作业运行过程中根据作业的剩余执行时间选择最短的作业进行调度，适用于动态作业的调度。\n最高优先级优先（Highest Priority First, HPF）：\n\n每个作业都有一个优先级，根据作业的优先级进行调度。高优先级作业先执行，适用于优先级任务调度场景。\n轮转调度（Round Robin）：\n\n将CPU时间分成时间片，每个作业在一个时间片内执行一定时间，然后切换到下一个作业。循环执行所有作业，适用于多道程序设计。\n负载均衡调度算法：\n\n通过监控系统负载情况，将任务均匀分配到各个计算节点上，保持系统资源的平衡利用。\n智能调度算法：\n\n基于机器学习、人工智能等技术，根据历史数据和实时情况进行智能化的资源调度，提高系统的自适应性和性能。\n这些计算资源调度算法可以根据不同的场景和需求进行选择和应用，帮助优化资源利用、提高系统性能和响应速度。综合考虑作业特性、系统负载和资源限制等因素，选择合适的调度算法对系统的效率和性能至关重要。\n\n2）网络资源配置\n使用网络服务（Neutron）可以管理和配置网络资源，包括虚拟网络的创建、子网的划分、路由的配置等。网络资源管理涉及到网络拓扑的设计、安全组规则的设置、负载均衡的配置等功能，以确保网络资源的稳定和安全。\n\n3）存储资源配置\n使用存储服务管理块存储、对象存储和文件存储等不同类型的存储资源。存储资源管理包括存储容量的分配、数据备份与恢复、存储策略的设置等操作。\n存储资源的配置和调度在云计算和虚拟化环境中起着至关重要的作用，对数据存储、访问和性能具有直接影响。以下是关于存储资源配置和调度的一些重要考虑因素和实践方法：\n\n存储资源类型：\n\n存储资源可以包括本地硬盘、网络附加存储（如网络文件系统、对象存储、块存储等）等不同类型。根据应用需求和数据访问模式选择合适的存储类型。\n存储卷管理：\n\n使用存储卷管理工具（如LVM、RAID）来管理和配置存储卷，实现数据的分区、备份和恢复，确保数据的安全性和可靠性。\n存储性能优化：\n\n针对不同的应用需求和数据访问模式，对存储资源进行性能优化，包括调整存储缓存、块大小、读写操作优化等，提高数据访问效率。\n存储虚拟化：\n\n使用存储虚拟化技术（如软件定义存储、存储虚拟化设备）将物理存储资源抽象为逻辑存储池，实现多个虚拟机实例共享同一存储资源，提高存储资源的利用率和灵活性。\n存储负载均衡：\n\n在多台服务器上分布存储资源，实现存储负载均衡，避免单点故障和瓶颈，提高系统的可靠性和性能。\n存储备份和恢复：\n\n实现存储资源的定期备份和恢复，保障数据的安全和完整性，应对意外数据丢失或损坏的情况。\n自动化存储调度：\n\n使用自动化存储调度工具（如存储管理系统、自动化存储平台）实现存储资源的动态调度和优化，根据实时需求分配存储资源，提高存储资源的利用率。\n数据迁移和迁移：\n\n对存储资源进行数据迁移和迁移，根据数据的访问频率和重要性进行合理的存储调度，优化存储资源的使用和管理。\n通过合理配置和调度存储资源，可以提高数据的安全性、可靠性和性能，确保系统在处理大量数据和高并发访问时能够高效运行，并满足用户需求。\n```\n\n\n- 服务编排\n```\n服务编排（Service Orchestration）是指将多个服务或应用程序按照一定的逻辑顺序和规则进行组合、配置和管理，以实现复杂的业务流程或系统任务。在服务编排中，不同的服务或应用程序之间会以一定的方式进行互动和协同工作，以达到特定的业务目标或系统运行需求。\n\n服务编排通常涉及到以下几个重要概念和过程：\n\n服务定义：将需要的服务或应用程序进行定义和描述，包括服务的输入参数、输出结果、执行逻辑、运行环境等信息。\n\n服务组合：将定义好的服务按照一定的组合规则进行组合，形成一个服务流程或任务流程。在服务编排中，可能涉及到顺序执行、并发执行、条件分支等方式来组合多个服务。\n\n服务配置：对组合好的服务流程进行配置和参数设置，以适应特定的场景或需求。这包括服务间的通信设置、数据传递、资源调度等配置。\n\n服务调度与执行：根据服务编排的规则和配置信息，将服务流程交给服务编排引擎或执行引擎来调度和执行。执行过程中，服务之间会相互调用、交换数据，并按照事先定义的流程进行处理。\n\n监控与管理：实时监控服务编排的执行过程，记录日志、收集指标，及时发现和处理异常情况。同时，根据监控数据和分析结果，可以对服务编排进行性能优化或资源调整。\n\n服务编排可以应用于诸多场景，如自动化工作流程、云原生应用开发、微服务架构等。通过服务编排，用户可以更加灵活、高效地管理和部署多个服务，实现复杂的业务逻辑和系统任务。\n```\n- 安全管控模块\n```\n在云计算环境中，安全管控是非常重要的，以确保系统和数据的安全性、保密性和完整性。以下是一些常见的安全管控措施和最佳实践：\n\n身份和访问管理：\n\n实施严格的身份验证和访问控制，确保只有经授权的用户可以访问和管理计算资源。使用多因素身份验证（MFA）以增强安全性。\n网络安全：\n\n配置网络防火墙、安全组和网络隔离策略，限制网络流量和通信，防止未经授权的访问和攻击。\n数据加密：\n\n对数据在存储和传输过程中进行加密，确保数据的保密性。使用加密算法保护数据，尤其是敏感信息。\n漏洞管理：\n\n定期进行安全漏洞扫描和漏洞管理，及时修复系统和应用程序中的漏洞，以减少系统面临的风险。\n日志和审核：\n\n设置日志记录和审核机制，跟踪系统和用户的活动，帮助及时检测和响应安全事件。\n灾难恢复和备份：\n\n制定灾难恢复计划，并定期进行数据备份，以应对系统故障、数据丢失或其他不可预见的情况。\n安全培训：\n\n对员工进行安全意识培训，教育他们如何识别和应对安全威胁，降低员工造成的安全风险。\n合规性和标准：\n\n遵守相关法规和标准，如GDPR、HIPAA等，确保系统设计和运营符合法律要求和行业标准。\n安全技术：\n\n使用安全工具和技术，如防火墙、入侵检测系统（IDS）、安全信息与事件管理（SIEM）等，增强系统的安全性。\n综合上述安全管控措施和最佳实践，用户可以构建安全可靠的云计算环境，有效保护系统和数据免受安全威胁和攻击。持续加强安全管理和监控，及时响应安全事件，是确保云计算环境安全的关键。\n```\n```\n将基础资源配置和管理、资源编排以及安全管控组合运用，在计算资源和数据安全方面具有以下优点：\n\n资源最佳利用：\n\n通过资源编排和基础资源配置的优化，可以实现对计算资源的灵活调度和配置，最大限度地提高资源利用率，提升系统性能和效率。\n安全性加强：\n\n结合安全管控机制，对资源访问、数据传输和存储进行加密和监控，防范安全威胁和数据泄露，保障计算资源和信息安全。\n风险降低：\n\n基础资源配置和管理可以确保系统的正常运行和稳定性，资源编排可以按需分配资源，安全管控可以预防和应对安全威胁，降低系统运行风险。\n自动化管理：\n\n结合资源编排技术，可以实现自动化的资源调度和管理，提高系统的自动化程度，减少人为错误和操作成本。\n合规性和可管理性：\n\n强化安全管控机制，确保系统和数据符合合规标准和法规要求，同时实现资源的有效管理和监控，保持系统的可管理性。\n响应灵活性：\n\n结合资源编排技术，可以根据不同的需求快速调整资源配置和部署，灵活应对系统负载变化和业务需求，提高系统的响应能力。\n综合应用基础资源配置和管理、资源编排，以及安全管控，可以有效提升系统的可靠性、安全性和效率，满足不同业务场景下的需求和挑战。持续优化资源管理和安全机制，是保障计算资源和数据安全的重要措施，为系统的稳定运行和业务发展提供有力支持。\n```\n-  研发配电云系统集成\n```\n云系统集成指的是将多个云服务、应用程序或系统进行连接和整合，以实现数据流畅、信息交换和协同工作的过程。在云计算环境下，云系统集成变得更加重要和复杂，因为企业通常会使用多个云服务提供商的服务，并需要将它们整合在一起以实现协作和数据共享。以下是一些常见的云系统集成方法和实践：\n\nAPI集成：\n使用应用程序编程接口（API）实现不同云服务和应用程序之间的通信和数据交换。通过调用API来实现系统之间的集成和数据传输。\n\n集成平台：\n使用集成平台和工具（如MuleSoft、Informatica、Boomi）来简化和加速系统集成的过程。这些平台提供了丰富的连接器和工作流程，可帮助企业构建复杂的集成方案。\n\n事件驱动集成：\n基于事件驱动架构（Event-Driven Architecture）实现系统之间的集成。通过订阅和发布事件来传递信息和触发行为，实现异步和实时的系统集成。\n\n数据同步和复制：\n使用数据同步和复制工具（如AWS Data Pipeline、Google Cloud Dataflow）将数据从一个云服务同步到另一个云服务，保持数据的一致性和可用性。\n\n身份和访问管理集成：\n集成身份和访问管理（IAM）系统，实现用户认证和授权在不同云服务和系统之间的一致性和安全性。\n\n业务流程集成：\n将不同云系统的业务流程进行集成和优化，实现跨系统的自动化工作流程和协同工作。\n\n监控和管理集成：\n集成监控和管理工具，实现对多个云系统的统一监控和管理，以便及时发现和解决问题。\n\n安全集成：\n实现安全事件和日志的集中管理和分析，确保在不同云系统之间的数据传输和存储安全可靠。\n\n综合利用上述云系统集成方法和实践，企业可以实现多个云服务和应用程序之间的无缝连接和协同工作，提高系统的效率和灵活性，实现数字化转型和业务创新。同时，云系统集成也需要考虑安全、可靠性和性能等方面，确保整个系统的正常运行和数据的安全保护。\n```\n-  展开配电网云操作系统十点应用部署方案\n```\n在云计算环境中，部署方案通常涉及到如何将应用程序和服务部署到云平台上，以便实现高可用性、可伸缩性和弹性的运行。以下是一般情况下的云计算部署方案：\n\n云服务器部署：\n使用云服务提供商（如AWS、Azure、Google Cloud等）提供的虚拟机实例部署应用程序。可以根据需求选择不同规格和配置的虚拟机，将应用程序和服务部署到这些虚拟机上。\n\n容器化部署：\n使用容器化技术（如Docker、Kubernetes）将应用程序打包为容器镜像，然后在云平台上部署和管理这些容器。容器化部署可以提供更高的灵活性和可移植性。\n\nServerless部署：\n使用Serverless架构（如AWS Lambda、Azure Functions）将应用程序拆分成小的函数，并按需在云平台上执行。Serverless部署无需管理服务器和基础设施，可以实现按需扩展和减少成本。\n\n多区域和跨区域部署：\n在多个云区域或跨多个云服务提供商的区域中部署应用程序，以提高系统的可用性和容错能力。跨区域部署可以减少因单一区域故障而导致的服务中断。\n\n自动化部署和持续集成：\n使用自动化部署工具（如Jenkins、GitLab CI/CD）实现持续集成和持续部署，自动化构建、测试和部署应用程序，提高部署效率和质量。\n\n监控和日志管理：\n部署监控和日志管理工具（如Prometheus、ELK Stack）来监视应用程序的性能和运行情况，及时发现和解决问题。\n\n安全和权限管理：\n部署安全措施（如防火墙、身份认证、加密）和权限管理机制，保障应用程序和数据的安全，防止安全漏洞和攻击。\n\n综合考虑上述云计算部署方案，可以根据具体的业务需求和情况选择适合的部署方式，并借助云计算的优势实现灵活、高效、安全的应用部署和运行。\n```\n```\n系统集成和部署是两个密切相关且互相依赖的概念，在软件开发和 IT 领域中起着至关重要的作用。以下是系统集成和部署之间的关系：\n\n系统集成：\n\n系统集成是将不同系统、软件、服务或组件整合在一起，使它们能够相互通信、协同工作和共享数据。集成的目标是实现系统之间的无缝连接和数据交流，以实现更高的效率、可靠性和灵活性。系统集成侧重于整合系统的功能和数据流程，确保系统间协作无缝。\n系统部署：\n\n系统部署是将经过集成的系统或软件部署到目标环境中，使其能够正常运行和提供服务。部署的目标是将开发完成的系统、应用程序或服务部署到生产环境中，并确保其稳定性、安全性和可用性。部署包括安装、配置、测试、启动和监控系统。\n关系及交互作用：\n\n前期准备：在系统部署之前，需要进行系统集成的工作，确保不同系统之间能够正常通信和协作。\n集成调试：在系统集成阶段，会对整合后的系统进行调试和测试，以确保系统的各个部分能够正常运行。\n部署环境：系统集成完成后，需要将整合后的系统部署到目标环境中，进行安装、配置和测试。\n监控和维护：部署完成后，需要对系统进行定期监控和维护，确保系统的稳定性和性能。\n总体而言，系统集成和部署是软件开发和 IT 管理中不可或缺的两个环节，它们紧密相连，相辅相成，共同确保系统的正常运行和服务的可靠提供。在软件开发和项目实施过程中，系统集成和部署都需要细致的规划、有序的执行和持续的跟踪监控，以确保项目的顺利完成和系统的有效运行。\n```\n\n- 私有云环境部署\n```\n\n选择适当的私有云平台\n选择适合自身需求的私有云平台，如OpenStack、VMware vSphere等，确保平台提供足够的计算、存储和网络资源来支持应用程序的部署和运行。\n\n创建应用程序镜像\n将应用程序打包为镜像（如Docker镜像），确保应用程序的依赖项和配置都包含在内，以便在私有云环境中快速部署和扩展。\n\n配置部署环境\n在私有云中创建虚拟机、容器集群或Serverless环境，配置所需的计算、存储和网络资源，确保部署环境能够满足应用程序的需求。\n\n部署应用程序\n将应用程序镜像部署到私有云环境中，可以通过虚拟机、容器或Serverless函数等方式进行部署，并设置适当的网络访问权限和资源配额。\n\n配置应用程序\n针对具体应用程序的需求，进行配置文件的定制和参数设置，如数据库连接信息、日志输出配置等，确保应用程序能够正常运行。\n\n监控和管理\n部署应用程序后，需要设置监控和日志管理系统，实时监测应用程序的运行状态和性能指标，及时发现并解决问题。\n\n安全加固\n在部署应用程序之前，要确保私有云环境的安全性，包括网络安全、身份认证、数据加密等措施，保护应用程序和数据的安全。\n\n持续优化\n定期对应用程序进行性能优化、资源调整和系统升级，保持应用程序的高可用性和稳定性。\n\n```\n```\n云操作系统部署是在云环境中创建和配置操作系统实例的过程。以下是一些常见的云操作系统部署方案和步骤：\n\n选择云服务提供商：\n\n选择适合自身需求的云服务提供商，如AWS、Azure、Google Cloud等。不同云服务提供商提供的操作系统镜像和部署方式可能有所不同。\n\n选择操作系统镜像：\n\n在云服务提供商的控制台中选择要部署的操作系统镜像，通常有多个选项可供选择，包括不同版本和发行版的操作系统。\n创建虚拟机实例：\n\n在云服务提供商的控制台中创建虚拟机实例，并选择相应的操作系统镜像作为实例的基础。设置实例的规格、区域、网络配置等参数。\n配置网络和安全组：\n\n配置虚拟机实例的网络设置，包括公有 IP 地址、子网、防火墙规则等。确保虚拟机能够与外部网络通信并受到安全保护。\n连接到虚拟机：\n\n使用SSH、RDP等远程连接工具连接到虚拟机实例，进行操作系统的初始化配置，如设置用户账号、密码、网络配置等。\n安装必要的软件和组件：\n\n根据应用程序的需求，在操作系统中安装所需的软件包、库文件和依赖项，以便后续部署应用程序。\n配置系统参数：\n\n针对具体应用场景和性能需求，调整操作系统的参数设置，如内存管理、磁盘配置、网络优化等，以提升系统性能和稳定性。\n部署应用程序：\n\n将应用程序部署到云操作系统实例中，并配置相应的服务端口、权限和访问控制，确保应用程序能够正常运行。\n监控和维护：\n\n设置监控和警报系统，实时监测云操作系统实例的状态和性能指标，及时发现并解决问题。定期进行系统更新和维护，确保系统安全和稳定性。\n云操作系统部署是云计算环境中非常基础和重要的一环，正确的部署方式和配置能够有效提高系统的安全性、可靠性和性能。在部署过程中要注意备份数据、遵循最佳实践和安全策略，以确保云操作系统的稳定运行和应用程序的正常服务。\n```\n```\n在不同区域之间设置数据复制和同步机制，以确保数据在不同区域之间的一致性和可用性。可以使用云服务提供商提供的数据库复制功能或者自行开发数据同步方案。\n\n负载均衡和流量管理：使用负载均衡器和流量管理工具来分发流量到不同区域的实例和服务中，以提高系统的性能和可用性。\n\n跨区域容灾设计：设计容灾方案，确保即使在一个区域发生故障时，系统依然可以继续提供服务。这可能涉及到备份实例、自动切换流量到其他区域、以及快速恢复服务的计划。\n\n全局服务发现和配置管理：采用全局服务发现和配置管理工具，确保不同区域的服务能够相互发现和通信，并且在配置更新时能够同步更新到所有区域。\n\n安全和身份验证：在跨区域部署中要特别注意安全和身份验证的设置，确保数据在不同区域之间的传输和存储是安全的，同时要对访问权限进行严格控制。\n\n监控和故障排除：建立跨区域的监控系统，及时发现并解决不同区域的故障和问题，确保系统的稳定性和可用性。\n```\n```\n自动更新设置：\n\n操作系统级别的设置：现代操作系统通常提供了自动更新功能，用户可以在设置中配置自动更新选项，包括自动下载更新、自动安装更新等。\n更新策略：用户可以根据需要选择更新策略，如自动更新所有可用更新、仅安全更新、仅重要更新等。\n安全更新机制：\n\n数字签名和验证：操作系统更新应该具有数字签名，以确保其完整性和来源的可信性。\n安全传输：更新应该通过加密和安全的传输协议进行传输，以防止中间人攻击和数据篡改。\n自动部署工具：\n\n配置管理工具：使用像Ansible、Chef、Puppet等配置管理工具来自动化操作系统的部署和配置。\n镜像化部署：将操作系统配置为镜像，通过自动化工具进行快速部署，如使用Docker和Kubernetes进行容器化部署。\n测试和回滚机制：\n\n自动化测试：在部署更新之前，应该进行自动化测试以确保更新不会引入新的问题或破坏系统的正常运行。\n回滚策略：在更新失败或导致问题时，应该有自动回滚机制，以快速恢复系统到之前的稳定状态。\n监控和报警：\n\n系统监控：设置监控系统来监视操作系统的运行状态和更新过程，及时发现问题并采取措施。\n异常报警：配置报警机制，以便在更新过程中出现异常时能够及时通知相关人员。\n用户参与和控制：\n\n通知机制：在自动更新和部署过程中，向用户提供通知和提示，让用户了解何时进行更新以及更新的内容。\n手动干预选项：为用户提供手动干预选项，允许他们暂停、延迟或手动触发更新过程。\n综上所述，操作系统的自动更新和部署是通过自动化工具和流程来确保系统安全和稳定性的重要措施。在实施过程中，需要考虑安全性、可靠性、用户参与等因素，以确保更新和部署过程的顺利进行。\n```\n\n```\n密码验证：\n\n用户名和密码：最基本的身份验证方式，用户使用唯一标识（用户名）和对应的密码进行登录验证。\n多因素认证（MFA）：结合多种验证因素，如密码、手机验证码、硬件令牌等，提高身份验证的安全性。\n公钥基础设施（PKI）：\n\n使用数字证书和公钥加密技术进行身份验证和通信加密，确保通信的机密性和完整性。\n单点登录（SSO）：\n\n用户只需一次登录，即可访问多个相关系统或应用程序，提高用户体验的同时减少了密码管理的复杂性。\n访问控制列表（ACL）：\n\n资源所有者定义允许或拒绝特定用户或用户组对资源的访问权限。\n角色 Based Access Control（RBAC）：\n\n将权限分配给角色，然后将用户分配到适当的角色上，简化权限管理。\n属性 Based Access Control（ABAC）：\n\n根据用户和资源的属性（如用户所在部门、访问时间等）来动态决定访问权限。\n访问审计：\n\n记录用户对系统资源的访问活动，以便事后审计和监控。\n生命周期管理：\n\n对用户账户和权限进行全面的生命周期管理，包括创建、修改、暂停、删除等操作，以确保及时撤销不必要的权限。\nAPI 访问控制：\n\n对外部应用程序或服务通过 API 访问系统资源进行访问控制，并根据需要进行身份验证和授权。\n安全标准和协议：\n\n使用安全标准和协议（如OAuth、OpenID Connect等）来实现身份验证和授权，确保安全的身份验证和访问控制流程。\n\n```\n\n```\n对称加密：\n\n在对称加密中，相同的密钥用于加密和解密数据。常见的对称加密算法包括 DES（数据加密标准）、AES（高级加密标准）等。\n非对称加密：\n\n非对称加密使用一对密钥，即公钥和私钥。公钥用于加密数据，私钥用于解密数据。常见的非对称加密算法包括 RSA、ECC（椭圆曲线加密）等。\n哈希函数：\n\n哈希函数将输入数据映射为固定长度的哈希值。哈希函数是单向的，不可逆的，因此通常用于验证数据的完整性而不是加密数据本身。常见的哈希函数包括 SHA-256、MD5 等。\n混合加密：\n\n混合加密是将对称加密和非对称加密结合使用的一种方式。通常使用非对称加密来传输对称加密所需的密钥，然后使用对称加密来加密实际的数据传输过程。\n量子加密：\n\n量子加密利用量子力学原理来保护数据的安全性，其中包括量子密钥分发（QKD）等技术，可以抵御量子计算的攻击。\n深度学习加密：\n\n最近出现的一些新兴技术利用深度学习方法来加密数据，如基于神经网络的加密算法，它们试图通过深度学习的方法提供更安全和更高效的加密解决方案。\n代理重加密：\n\n这是一种基于代理的加密技术，允许数据在经过一系列代理之后仍然保持加密状态，只有授权的用户才能解密数据。\n```\n```\n日志审计：\n\n审计系统日志记录，包括登录日志、操作日志、安全事件日志等，以便跟踪系统和用户活动，及时发现异常行为。\n网络流量监控：\n\n监控网络流量和数据包，识别异常流量模式或攻击行为，防范网络入侵和数据泄露。\n漏洞扫描：\n\n使用漏洞扫描工具对系统和应用程序进行定期扫描，识别系统中存在的安全漏洞，并及时采取修复措施。\n异常行为检测：\n\n借助行为分析技术，监控用户和系统的行为模式，识别异常行为，如未经授权的访问、大规模数据导出等。\n```\n```\n防火墙（Firewalls）：\n\n防火墙是网络安全的第一道防线，可根据预设的安全策略过滤和控制网络流量，阻止未经授权的访问和恶意流量。\n入侵检测与入侵防御系统（IDS/IPS）：\n\nIDS/IPS 可以监控网络流量和系统日志，检测可能的入侵行为，并根据预定义的规则阻止或响应潜在的攻击。\n虚拟专用网络（VPN）：\n\nVPN 可以通过加密和隧道技术确保远程访问和数据传输的安全性，防止敏感信息在公共网络中被窃听或篡改。\n\n```\n```\n完整备份：\n\n完整备份是指将整个数据集全部备份到备份介质中，可以快速恢复所有数据，但需要较大的存储空间和时间。\n增量备份：\n\n增量备份是在上一次完整备份后备份发生变化的数据，备份时间短，但恢复时需要依次恢复完整备份和增量备份。\n差异备份：\n\n差异备份是备份自上次完整备份以来发生变化的数据，恢复时只需恢复完整备份和最近一次差异备份即可。\n镜像备份：\n\n镜像备份是对整个系统或磁盘进行完整的拷贝，包括操作系统、应用程序和数据，恢复时可以还原到备份时的完全状态。\n远程备份：\n\n将备份数据传输至远程或云存储设备中，以防止本地备份数据遭受灾难性事件影响，提高数据的安全性和可靠性。\n数据库备份：\n\n针对数据库系统，可以使用数据库级别的备份工具进行备份，如SQL Server的备份和恢复、MySQL的mysqldump等。\n文件同步备份：\n\n利用文件同步工具实现实时或定时将指定目录下的文件同步备份到其他存储设备中，确保数据及时备份。\n虚拟化备份：\n\n针对虚拟化环境，可以使用专门的虚拟化备份软件对虚拟机进行备份，如VMware的vSphere Data Protection、Veeam Backup & Replication等。\n持续数据保护（CDP）：\n\nCDP 是一种实时备份技术，可以实现对数据的连续备份，几乎实时地恢复到任意时间点的数据状态。\n```\n```\n优势：\n灵活性和可扩展性：云操作系统集成和部署可以根据需求快速扩展或收缩计算资源，满足业务的变化和增长。\n\n成本效益：通过云服务提供商的按需付费模式，可以避免大量的固定成本，降低了IT基础设施的运营成本。\n\n高可用性和容错性：云平台提供了高可用性和容错性的特性，使得操作系统在云环境中更加稳定和可靠。\n\n自动化管理：利用云平台的自动化工具和服务，可以实现对操作系统的自动化部署、配置和管理，减少人工干预，提高效率。\n\n全球化覆盖：云服务提供商分布在全球各地，可以实现全球范围内的操作系统部署和访问，满足多地域的业务需求。\n\n安全性：云平台提供了多层次的安全措施，可以帮助用户保护操作系统和数据的安全。\n\n发展前景：\n深度整合：随着云计算、人工智能、大数据等新技术的发展，云操作系统将与这些技术深度整合，为用户提供更多智能化、高效化的解决方案。\n\n多云混合部署：未来云操作系统将更加支持多云混合部署，使用户能够更灵活地结合不同云服务商的优势，实现统一的管理和控制。\n\n边缘计算：随着边缘计算的兴起，云操作系统将更多地面向边缘设备，支持在边缘节点上部署和管理操作系统，满足边缘计算场景下的需求。\n\n安全与合规：随着数据安全和合规性要求的提高，云操作系统将更加注重安全和合规性，提供更加全面的安全解决方案和服务。\n\n总的来说，云操作系统集成和部署将继续在云计算领域发挥重要作用，并且随着新技术的不断涌现，其发展前景将更加广阔，为用户提供更多便利和价值。\n```\n\n```\n云操作系统的研究工作取得了许多成效，以下是一些常见的成效：\n\n性能优化：研究人员通过对云操作系统进行深入分析和优化，提出了许多性能优化的方法和技术，包括针对虚拟化、容器化、调度算法等方面的优化，从而提高了云操作系统的整体性能。\n\n安全性增强：针对云环境中的安全挑战，研究人员提出了许多安全增强的方法和技术，包括身份认证、访问控制、隔离技术等，加强了云操作系统的安全性。\n\n自动化管理：研究人员设计并实现了许多自动化管理的工具和系统，用于实现对云操作系统的自动化部署、配置和管理，提高了运维效率和可靠性。\n\n容器和微服务：随着容器和微服务的兴起，研究人员在云操作系统领域做了大量工作，提出了许多针对容器和微服务的优化和支持方案，推动了云原生应用的发展。\n\n混合云和多云管理：针对多云环境下的管理挑战，研究人员提出了许多混合云和多云管理的方案和工具，为用户提供了更便捷的管理和控制方式。\n\n边缘计算：随着边缘计算的兴起，研究人员致力于在边缘环境下进行云操作系统的研究，提出了许多适用于边缘计算场景的解决方案。\n\n这些成效使得云操作系统在性能、安全性、管理和适配新兴技术等方面都取得了显著进展，为云计算提供了更加强大和稳健的基础。未来，随着新技术的不断涌现和需求的不断变化，云操作系统的研究工作将继续发挥重要作用，为云计算的发展提供更多的支持和创新。\n```\n\n```\n研究网络拓扑自动发现是计算机网络领域的重要课题，取得了许多成效，以下是一些常见的成效：\n\n减少人工配置：通过自动发现网络拓扑，可以减少网络管理员的人工配置工作量，提高网络管理的效率和可靠性。\n\n实时更新：自动发现能够及时捕获网络拓扑的变化，帮助网络管理员及时调整网络结构，适应新设备接入、故障修复等场景。\n\n降低错误率：自动发现可以减少人为配置错误的发生，提高网络配置的准确性和稳定性，降低网络故障的风险。\n\n支持大规模网络：自动发现技术能够应对大规模复杂网络的拓扑发现需求，帮助管理大型企业网络、数据中心网络等复杂环境。\n\n与网络分析结合：自动发现与网络分析相结合，能够为网络故障诊断、性能优化等提供更加全面的数据支持，提高网络运维的效率。\n\n支持新型网络架构：自动发现技术也能够支持新型网络架构的部署和管理，如软件定义网络（SDN）、边缘计算网络等。\n\n总的来说，自动发现网络拓扑对于降低网络管理成本、提高网络管理效率、支持新型网络架构等方面都取得了显著成效。未来，随着网络规模的不断扩大、网络变化的不断加剧，自动发现网络拓扑的研究将继续发挥重要作用，为构建智能、自适应的网络管理系统提供更多支持和解决方案。\n```\n```\n研究边缘计算应用的管理和部署（Edge Application Orchestration）在近年来取得了一些重要成果，主要体现在以下几个方面：\n\n资源优化和负载均衡：边缘计算环境中，资源分布广泛，包括边缘设备、边缘节点和云端资源。研究取得的成效包括了对这些资源的有效管理和负载均衡技术，使得边缘计算应用能够充分利用资源，并在不同节点间实现负载均衡，提高性能和可靠性。\n\n自动化部署和扩展：研究工作还涉及自动化部署和扩展技术，使得边缘应用能够根据需求自动部署到最优节点，并能够根据负载情况动态扩展或收缩，以应对实时变化的工作负载。\n\n容器化和微服务架构：将边缘应用进行容器化和采用微服务架构，能够提高应用的灵活性和可移植性，同时降低部署和管理的复杂性。研究工作在此方面取得的成效包括了针对边缘环境的容器编排和管理技术，以及微服务架构下的边缘应用设计和优化。\n\n安全和隐私保护：边缘计算环境涉及大量敏感数据的处理，因此安全和隐私保护是至关重要的。研究工作在边缘应用的安全性和隐私保护方面取得了一些成果，包括边缘节点的安全认证、数据加密和访问控制等技术。\n\n智能管理和优化：研究工作还探索了智能管理和优化技术，包括基于机器学习和人工智能的边缘应用管理策略，以及面向边缘环境的自适应优化算法，从而实现对边缘应用的智能监控、调整和优化。\n\n综上所述，研究边缘计算应用纳管取得了一系列的成效，为边缘计算技术的发展和应用提供了重要支持和保障。随着边缘计算应用场景的不断拓展和深化，相信未来会有更多创新的成果涌现。\n```\n```\n研究基础资源配置对于提高资源利用率、降低成本，并且满足应用性能需求方面取得了一些重要成效。以下是一些常见的成果：\n\n自动化资源调度：研究工作在资源调度方面取得了重要进展，通过设计和开发智能调度算法和策略，实现了自动化的资源分配和调度。这些算法可以根据应用的特征和性能需求，以及资源的可用性和负载情况，动态地将任务分配到最适合的资源上，从而提高资源利用率和应用性能。\n\n负载均衡和弹性扩展：研究工作还涉及负载均衡和弹性扩展技术，使得系统能够根据负载变化自动调整资源配置。通过动态迁移任务或弹性地增加、减少资源，系统可以更好地应对负载波动，提高系统的可伸缩性和稳定性。\n\n混合云和多云环境：研究工作还关注了混合云和多云环境下的资源配置问题。通过制定资源调度策略，将任务合理地分配到私有云、公有云或边缘设备等不同资源上，以充分利用各个环境的优势，提高资源利用率和应用性能。\n\n能源效率和环境友好：研究工作还致力于提高资源配置的能源效率和环境友好性。通过考虑能源消耗和环境影响等因素，设计和优化资源调度策略，以减少能源浪费并改善能源利用效率。\n\n智能优化和自适应管理：研究工作还探索了基于机器学习和人工智能的智能优化和自适应管理技术。通过对历史数据进行分析和学习，系统可以自动识别规律和模式，并根据实时的资源需求和性能指标，调整资源配置，以实现快速响应和优化管理。\n\n总的来说，研究基础资源配置取得了一些重要成效，为提高资源利用率、降低成本，并满足应用性能需求提供了有效的解决方案。随着技术的不断发展和创新，相信未来会有更多的成果涌现，进一步提升资源配置的效率和效果。\n```\n```\n资源编排（Resource Orchestration）是指在分布式计算环境中有效地管理和调度各种资源，以满足应用程序的需求。研究资源编排在以下几个方面取得了一些重要成果：\n\n多资源协同调度：研究工作致力于实现多种资源（例如计算资源、存储资源、网络资源等）的协同调度，确保不同类型的资源能够有效配合，提高系统整体性能。这包括设计合适的调度算法和策略，实现资源之间的有效协同工作。\n\n动态资源调度与迁移：研究工作还关注了动态资源调度和迁移技术，使系统能够根据实时负载情况和应用需求，动态地调整资源配置。通过实时监测系统状态，并根据预设策略进行资源调度和迁移，系统可以更好地适应变化的工作负载，提高系统的灵活性和性能。\n\n容器编排和微服务架构：研究工作还涉及将资源编排与容器编排和微服务架构相结合，以提高应用的部署效率和弹性。通过利用容器技术和微服务架构，可以实现资源的快速部署和扩展，简化资源编排的复杂性，并提高系统的可维护性和可靠性。\n\n智能资源优化和管理：研究工作还探索了智能资源优化和管理技术，包括基于机器学习和人工智能的资源编排算法。这些算法可以通过学习系统的历史数据和行为模式，实现对资源的智能调度和优化，以提高系统的性能和效率。\n\n安全性和隐私保护：资源编排也需要考虑安全性和隐私保护等方面的问题。研究工作致力于设计安全可靠的资源编排策略，确保敏感数据和资源受到有效的保护，防止恶意攻击和数据泄露等安全问题。\n\n总的来说，研究资源编排取得了一些重要成果，为提高系统性能、灵活性和安全性提供了有效的技术支持。随着技术的不断进步和创新，相信资源编排领域将会有更多的发展和突破，为分布式计算环境带来更多的好处和机遇。\n```\n\n```\n研究安全管控方面取得了一些重要的成效，主要体现在以下几个方面：\n\n威胁检测和防范：研究工作在威胁检测和防范方面取得了重要进展。通过开发先进的威胁检测技术和安全防护系统，能够及时识别和应对各种网络安全威胁，包括恶意软件、网络攻击、数据泄露等，从而保护信息系统的安全性。\n\n身份认证和访问控制：研究工作还致力于提高身份认证和访问控制的技术水平。通过引入多因素身份认证、基于角色的访问控制（RBAC）、动态访问控制等技术手段，加强对用户身份和权限的管理，确保只有合法用户获得合法访问权限，从而保障系统的安全性。\n\n数据加密和隐私保护：研究工作还涉及数据加密和隐私保护方面的技术创新。通过设计高效的加密算法、安全的密钥管理机制和数据遮蔽技术，确保敏感数据在存储和传输过程中得到有效的保护，防止数据泄露和非法访问。\n\n安全合规和审计：研究工作还关注了安全合规和审计方面的问题。通过设计安全可追溯的系统架构和审计机制，确保系统操作和数据处理符合相关法规和标准，并且能够对系统的安全状态进行有效监控和审计，以便及时发现和应对安全问题。\n\n安全意识和培训：研究工作也包括安全意识和培训方面的工作。通过开展安全培训和教育活动，提高员工和用户对安全问题的认识和理解，增强整体安全意识，从而减少安全事件的发生和影响。\n\n总的来说，研究安全管控取得了一些重要成效，为提高信息系统的安全性和稳定性提供了有效的技术和管理支持。随着信息技术的不断发展和威胁形势的变化，安全管控领域仍然需要不断创新和进步，以适应新的挑战和需求。\n```\n```\n\n```\n\n```\n配电网资源配置，服务编排，安全管控对计算系统中的各种关键资源进行合理分配和调整，以确保计算服务管理和调度计算资源。云计算环境中对基础资源（如虚拟机、存储、网络等）进行合理配置和分配，以满足应用程序和服务的需求，并优化资源利用率、性能和成本。这一过程通常涉及以下几个方面：\n1.\n虚拟机配置：根据应用程序的需求，确定虚拟机的规格（CPU、内存、存储等）和数量，并进行虚拟机的创建、启动和停止管理。可以根据实际负载情况动态调整虚拟机的规模，实现弹性扩展或收缩。\n2.\n3.\n存储配置：配置存储资源，包括块存储、对象存储、文件存储等，以确保数据的安全性、可靠性和性能。可以根据应用程序的读写需求选择合适的存储类型和容量，并进行备份和恢复管理。\n4.\n5.\n网络配置：配置网络资源，包括虚拟网络、子网、路由器、负载均衡器等，以建立应用程序间的通信连接，并保障网络的安全性和稳定性。可以设置访问控制策略、网络隔离和流量控制等功能。\n6.\n7.\n自动化编排：利用自动化工具和编排系统，根据应用程序的部署需求和资源约束，自动进行资源的分配和调度。可以通过容器编排技术（如Kubernetes）、自动化配置管理工具（如Ansible）等实现自动化的资源编排。\n8.\n9.\n监控与优化：持续监控资源的使用情况和性能指标，及时发现和解决资源瓶颈和性能问题。可以利用监控系统（如Prometheus、Grafana）进行资源利用率分析，优化资源配置和调度策略。\n10.\n通过合理配置和编排基础资源，可以提高系统的灵活性、可靠性和性能，并实现资源的高效利用，从而为用户提供更好的云计算服务体验。\n```","slug":"配电网","published":0,"date":"2025-05-13T11:38:58.262Z","updated":"2025-05-13T11:38:58.262Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cmamklq6z000xfkd194j2f0yw","content":"<h1 id=\"配电网业务应用安全管理技术研究\"><a href=\"#配电网业务应用安全管理技术研究\" class=\"headerlink\" title=\"配电网业务应用安全管理技术研究\"></a>配电网业务应用安全管理技术研究</h1><p>任务一：任亮</p>\n<p>3.4 配电网业务应用安全管理技术研究</p>\n<p>4.3 配电网业务应用安全管理技术研究</p>\n<ul>\n<li>业务应用安全动态管理模块开发<ul>\n<li>业务应用在线迁移技术研究</li>\n<li>业务应用支撑资源弹性调度策略研究</li>\n<li>业务应用自愈技术</li>\n</ul>\n</li>\n</ul>\n<p>研究业务应用在线迁移、业务应用支撑资源弹性调度策略、业务应用自愈等技术，设计并开发业务应用安全动态管理模块，实现配电网多端业务应用动态调度，支撑配电管理与用电管理的智能化、自动化发展。</p>\n<h1 id=\"安全高普适性配电网云操作系统研发\"><a href=\"#安全高普适性配电网云操作系统研发\" class=\"headerlink\" title=\"安全高普适性配电网云操作系统研发\"></a>安全高普适性配电网云操作系统研发</h1><p>任务二：王静</p>\n<p>3.5安全高普适性配电网云操作系统研发</p>\n<p>4.4安全高普适性配电网云操作系统研发</p>\n<ul>\n<li>资源配置模块开发</li>\n<li>服务编排模块开发</li>\n<li>安全管控模块开发</li>\n<li>开放服务模块开发</li>\n<li>配电网拓扑自动发现模块开发</li>\n<li>模块系统集成</li>\n</ul>\n<p>研发安全高普适性配电网云操作系统，完成计算资源安全管理模块、网络资源安全管理模块、业务应用安全动态管理模块等关键模块系统集成，实现基础资源配置管理、服务编排、安全管控、台区拓扑自动发现，支撑配电网主站、通信系统、自动化监控终端设备的安全可控运行，实现中低压台区信息基础设施、智能融合终端的国产化替代与云化调度管理，实现配电网资源的抽象及云化，能对电网低压台区多维安全监控告警，在遭受断网、断电、存储损坏3类灾难时，可通过高可用调度机制实现节点自愈，全年系统稳定运行率达99.99%，实现配电网的安全调配和运行。</p>\n<p>实现基础资源配置、基础资源服务编排、资源安全管控、资源开放服务与台区拓扑自动发现，实现配电网信息基础设施的高弹性云化调度、资源安全服务、资源节点自愈，支撑配电网的安全调配与运行。</p>\n<ul>\n<li><p>安全高普适性配电网云操作系统集成</p>\n<ul>\n<li>计算资源安全管理模块</li>\n<li>网络资源安全管理模块</li>\n<li>业务应用安全动态管理模块</li>\n<li>云操作系统服务模块<ul>\n<li>资源配置服务模块开发</li>\n<li>服务编排模块开发</li>\n<li>安全管控模块开发</li>\n<li>开放服务模块开发</li>\n<li>配电网拓扑自动发现模块开发</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"AI\"><a href=\"#AI\" class=\"headerlink\" title=\"AI\"></a>AI</h1><ul>\n<li><p>双重化冗余多机系统心跳部署模型</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li><p>混合系统可靠性测算模型</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">混合系统可靠性测算模型是用于评估同时包含多种组件（如机械、电气、软件等）的系统的可靠性的数学模型。在混合系统中，不同类型的组件之间可能存在相互作用和依赖关系，因此需要一种综合考虑各种组件及其相互关系的方法来计算系统的整体可靠性。</span><br><span class=\"line\"></span><br><span class=\"line\">这种模型通常会结合不同可靠性分析方法，如事件树分析、失效模式和效果分析（FMEA）、Markov模型等，以综合考虑各种可能的失效模式和相互影响，从而对混合系统的可靠性进行定量评估。</span><br><span class=\"line\"></span><br><span class=\"line\">这样的模型能够帮助工程师和决策者更好地了解混合系统的可靠性水平，识别潜在的风险和瓶颈，并制定合适的改进和维护策略，以确保系统在运行过程中能够达到要求的可靠性水平。</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配电网拓扑自动发现</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">拓扑自动发现是指通过自动化的方式，系统能够主动发现和绘制网络中各种设备、节点和通信连接之间的拓扑结构。这种技术通过扫描网络中的设备和通信信息，自动创建和更新网络拓扑图，有助于网络管理员或运维人员更好地了解整个网络结构，快速定位问题和故障，提高网络管理效率和可靠性。</span><br><span class=\"line\"></span><br><span class=\"line\">拓扑自动发现可以应用在各种网络环境中，包括企业网络、数据中心网络、电信网络等，对于大型复杂网络尤其有用。通过拓扑自动发现，网络管理员可以轻松地了解网络中设备的分布和连接关系，识别潜在的瓶颈和安全隐患，及时进行网络规划和优化。</span><br><span class=\"line\"></span><br><span class=\"line\">拓扑自动发现通常结合使用网络管理工具和技术，如网络扫描工具、SNMP协议、LLDP协议等，通过这些工具可以主动地发现网络中各种设备的信息，并在图形界面上呈现出网络拓扑图。这样的可视化展示有助于运维人员更直观地了解网络结构，快速识别问题，并进行快速、准确的故障排查和修复。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">实现拓扑自动发现可以通过以下步骤和方法来进行：</span><br><span class=\"line\"></span><br><span class=\"line\">使用网络扫描工具：网络扫描工具是实现拓扑自动发现的常用工具之一。这些工具可以扫描网络中各个子网的设备和连接信息，获取设备的IP地址、MAC地址、端口信息等，并根据扫描结果绘制网络拓扑图。</span><br><span class=\"line\"></span><br><span class=\"line\">使用SNMP（Simple Network Management Protocol）协议：SNMP协议是一种用于监控和管理网络设备的协议，通过使用SNMP协议，可以获取网络设备的各种信息，如设备类型、配置信息、运行状态等，从而实现拓扑自动发现。</span><br><span class=\"line\"></span><br><span class=\"line\">使用LLDP（Link Layer Discovery Protocol）协议：LLDP是一种用于发现和描述本地网络拓扑关系的协议，通过LLDP协议，网络设备可以发现相邻设备的信息，并建立网络拓扑图。</span><br><span class=\"line\"></span><br><span class=\"line\">结合设备日志和事件信息：设备日志和事件信息中包含了设备之间的通信和操作记录，结合这些信息可以帮助识别设备之间的关联性，从而更准确地构建网络拓扑结构。</span><br><span class=\"line\"></span><br><span class=\"line\">使用专业网络管理软件：有些专业的网络管理软件具有拓扑自动发现功能，可以帮助用户快速、准确地自动发现网络拓扑结构，并提供可视化的拓扑图展示。</span><br><span class=\"line\"></span><br><span class=\"line\">综合使用上述方法和工具，可以实现对网络拓扑结构的自动发现和绘制。在实施拓扑自动发现之前，需要确保网络设备支持相应的协议和功能，并合理配置网络扫描工具或网络管理软件，以实现准确、全面地收集和分析网络设备信息，从而建立完整的网络拓扑图。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li><p>配电网边缘侧应用纳管</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">配电网边缘侧业务应用纳管是指在配电网的边缘侧部署业务应用，并将其纳入到配电网管理系统中进行监控和管理。配电网边缘侧指的是离用户接入点较近、服务范围较小的区域，具有一定的自治性和分布式特点。</span><br><span class=\"line\"></span><br><span class=\"line\">配电网边缘侧业务应用包括但不限于分布式能源接入管理、储能系统控制、智能配电设备监控等。通过在边缘侧部署这些业务应用，可以实现对配电网的动态监测和调度，提高配电网的安全性、可靠性和效率。</span><br><span class=\"line\"></span><br><span class=\"line\">纳管则是指将这些边缘侧业务应用接入到配电网管理系统中，进行统一的监控和管理。通过纳管，可以实现对边缘侧业务应用的集中监控、远程调度和数据分析，从而更好地把握配电网运行状态，及时发现和处理问题，提高配电网的运行水平和管理效率。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">实现边缘侧业务应用纳管（Edge Computing）可以通过以下步骤和方法来进行：</span><br><span class=\"line\"></span><br><span class=\"line\">确定需求和目标：首先需要明确边缘侧业务应用纳管的具体需求和目标，包括要纳管的业务应用类型、规模、部署位置等信息，以及实现纳管的目的和期望效果。</span><br><span class=\"line\"></span><br><span class=\"line\">选取合适的边缘侧管理平台：选择适合自身业务需求的边缘侧管理平台是实现纳管的关键。这些平台通常提供边缘计算资源管理、监控、故障排除、安全管理等功能，帮助用户统一管理和监控边缘侧业务应用。</span><br><span class=\"line\"></span><br><span class=\"line\">部署和配置纳管系统：根据选取的边缘侧管理平台，进行系统部署和基础配置，确保系统正常运行。这包括配置边缘设备与管理平台的通信、建立纳管系统和应用程序之间的连接等。</span><br><span class=\"line\"></span><br><span class=\"line\">注册和认证边缘设备：将需要纳管的边缘设备注册到管理平台，进行认证和授权，以便管理平台能够对边缘设备进行监控、配置和管理。</span><br><span class=\"line\"></span><br><span class=\"line\">部署业务应用程序：将要纳管的业务应用程序部署到边缘设备中，确保应用程序能够正常运行，并与管理平台进行通信。</span><br><span class=\"line\"></span><br><span class=\"line\">监控和管理业务应用程序：通过边缘侧管理平台监控和管理业务应用程序的运行状态、性能指标、安全情况等，及时发现和解决问题，确保业务正常运行。</span><br><span class=\"line\"></span><br><span class=\"line\">完善安全保障措施：在实现边缘侧业务应用纳管的过程中，需注意加强安全管理工作，包括数据加密、访问控制、漏洞修复等，确保业务数据和系统安全。</span><br><span class=\"line\"></span><br><span class=\"line\">通过以上步骤和方法，可以有效实现对边缘侧业务应用的纳管，提高业务运行效率、减少故障发生，提升系统稳定性和安全性。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">终端节点：由各种物联网设备（如传感器、RFID标签、摄像头、智能手机等）组成，主要完成收集原始数据并上报的功能。在终端层中，只需提供各种物联网设备的感知能力，而不需要计算能力。</span><br><span class=\"line\">边缘计算节点：边缘计算节点通过合理部署和调配网络边缘侧节点的计算和存储能力，实现基础服务响应。</span><br><span class=\"line\">网络节点：负责将边缘计算节点处理后的有用数据上传至云计算节点进行分析处理。</span><br><span class=\"line\">云计算节点：边缘计算层的上报数据将在云计算节点进行永久性存储，同时边缘计算节点无法处理的分析任务和综合全局信息的处理任务仍旧需要在云计算节点完成。除此之外，云计算节点还可以根据网络资源分布动态调整边缘计算层的部署策略和算法。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在OpenStack中，资源管理是指对计算、存储、网络等各种资源进行有效管理和监控，以确保资源的高效利用和系统的稳定运行。OpenStack提供了一系列工具和服务，用于实现资源管理功能，包括但不限于以下几个方面：</span><br><span class=\"line\"></span><br><span class=\"line\">计算资源管理： 在OpenStack中，使用计算服务（Nova）可以管理和调度计算资源，包括虚拟机实例的创建、启动、停止、迁移等操作。计算资源管理涉及到资源的动态调度、负载均衡和故障恢复等功能，以确保计算资源的高可用性和性能。</span><br><span class=\"line\"></span><br><span class=\"line\">存储资源管理： OpenStack提供了存储服务（Cinder、Swift、Manila等），用户可以通过这些服务管理块存储、对象存储和文件存储等不同类型的存储资源。存储资源管理包括存储容量的分配、数据备份与恢复、存储策略的设置等操作。</span><br><span class=\"line\"></span><br><span class=\"line\">网络资源管理： 使用网络服务（Neutron）可以管理和配置网络资源，包括虚拟网络的创建、子网的划分、路由的配置等。网络资源管理涉及到网络拓扑的设计、安全组规则的设置、负载均衡的配置等功能，以确保网络资源的稳定和安全。</span><br><span class=\"line\"></span><br><span class=\"line\">身份认证和权限管理： OpenStack提供身份认证服务（Keystone），用户可以通过身份认证机制对资源进行访问控制和权限管理。身份认证和权限管理是保障资源安全的重要环节，可以实现对资源的精细化控制和监管。</span><br><span class=\"line\"></span><br><span class=\"line\">监控和报警： OpenStack提供监控和告警服务，用户可以监控各种资源的使用情况和性能表现，并设置告警规则，及时发现和处理资源的异常情况，保障系统的稳定运行。</span><br><span class=\"line\"></span><br><span class=\"line\">通过以上资源管理功能，OpenStack可以帮助用户有效管理和利用各种云计算资源，实现资源的高效分配、灵活调度和监控管理，为应用部署和运维提供支持和保障。资源管理是OpenStack中的一个核心功能，对于构建稳定、可靠的云计算环墋至关重要。</span><br></pre></td></tr></table></figure></li>\n<li><p>资源配置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">资源配置管理指在系统中的基础资源进行管理和配置，以确保系统运行稳定、高效，并满足用户需求的过程。基础资源通常包括计算资源（CPU、内存、存储）、网络资源、操作系统和应用软件等。</span><br><span class=\"line\">1）计算资源配置</span><br><span class=\"line\">计算资源配置是指对计算系统中的各种关键资源进行合理分配和调整，以确保系统运行顺畅、性能优化、成本控制和资源利用率最大化的过程。可以使用计算服务管理和调度计算资源。计算资源管理涉及到资源的动态调度、负载均衡和故障恢复等功能，以确保计算资源的高可用性和性能。</span><br><span class=\"line\">计算资源调度算法是云计算和分布式系统中的关键组成部分，用于有效地管理和调度计算资源，提高系统的性能和资源利用率。以下是一些常见的计算资源调度算法：</span><br><span class=\"line\"></span><br><span class=\"line\">先来先服务（First Come First Serve, FCFS）：</span><br><span class=\"line\"></span><br><span class=\"line\">最简单的调度算法，按照作业到达的先后顺序进行调度。适用于简单的任务调度场景，但可能导致长作业等待时间和低效的资源利用。</span><br><span class=\"line\">短作业优先（Shortest Job First, SJF）：</span><br><span class=\"line\"></span><br><span class=\"line\">在每次调度时选择预期运行时间最短的作业进行调度。可以减少平均等待时间和提高系统吞吐量。</span><br><span class=\"line\">最高响应比优先（Highest Response Ratio Next, HRRN）：</span><br><span class=\"line\"></span><br><span class=\"line\">结合作业的等待时间和预期运行时间，计算响应比（等待时间+预期运行时间/预期运行时间），选择响应比最高的作业进行调度。</span><br><span class=\"line\">最短剩余时间（Shortest Remaining Time, SRT）：</span><br><span class=\"line\"></span><br><span class=\"line\">在作业运行过程中根据作业的剩余执行时间选择最短的作业进行调度，适用于动态作业的调度。</span><br><span class=\"line\">最高优先级优先（Highest Priority First, HPF）：</span><br><span class=\"line\"></span><br><span class=\"line\">每个作业都有一个优先级，根据作业的优先级进行调度。高优先级作业先执行，适用于优先级任务调度场景。</span><br><span class=\"line\">轮转调度（Round Robin）：</span><br><span class=\"line\"></span><br><span class=\"line\">将CPU时间分成时间片，每个作业在一个时间片内执行一定时间，然后切换到下一个作业。循环执行所有作业，适用于多道程序设计。</span><br><span class=\"line\">负载均衡调度算法：</span><br><span class=\"line\"></span><br><span class=\"line\">通过监控系统负载情况，将任务均匀分配到各个计算节点上，保持系统资源的平衡利用。</span><br><span class=\"line\">智能调度算法：</span><br><span class=\"line\"></span><br><span class=\"line\">基于机器学习、人工智能等技术，根据历史数据和实时情况进行智能化的资源调度，提高系统的自适应性和性能。</span><br><span class=\"line\">这些计算资源调度算法可以根据不同的场景和需求进行选择和应用，帮助优化资源利用、提高系统性能和响应速度。综合考虑作业特性、系统负载和资源限制等因素，选择合适的调度算法对系统的效率和性能至关重要。</span><br><span class=\"line\"></span><br><span class=\"line\">2）网络资源配置</span><br><span class=\"line\">使用网络服务（Neutron）可以管理和配置网络资源，包括虚拟网络的创建、子网的划分、路由的配置等。网络资源管理涉及到网络拓扑的设计、安全组规则的设置、负载均衡的配置等功能，以确保网络资源的稳定和安全。</span><br><span class=\"line\"></span><br><span class=\"line\">3）存储资源配置</span><br><span class=\"line\">使用存储服务管理块存储、对象存储和文件存储等不同类型的存储资源。存储资源管理包括存储容量的分配、数据备份与恢复、存储策略的设置等操作。</span><br><span class=\"line\">存储资源的配置和调度在云计算和虚拟化环境中起着至关重要的作用，对数据存储、访问和性能具有直接影响。以下是关于存储资源配置和调度的一些重要考虑因素和实践方法：</span><br><span class=\"line\"></span><br><span class=\"line\">存储资源类型：</span><br><span class=\"line\"></span><br><span class=\"line\">存储资源可以包括本地硬盘、网络附加存储（如网络文件系统、对象存储、块存储等）等不同类型。根据应用需求和数据访问模式选择合适的存储类型。</span><br><span class=\"line\">存储卷管理：</span><br><span class=\"line\"></span><br><span class=\"line\">使用存储卷管理工具（如LVM、RAID）来管理和配置存储卷，实现数据的分区、备份和恢复，确保数据的安全性和可靠性。</span><br><span class=\"line\">存储性能优化：</span><br><span class=\"line\"></span><br><span class=\"line\">针对不同的应用需求和数据访问模式，对存储资源进行性能优化，包括调整存储缓存、块大小、读写操作优化等，提高数据访问效率。</span><br><span class=\"line\">存储虚拟化：</span><br><span class=\"line\"></span><br><span class=\"line\">使用存储虚拟化技术（如软件定义存储、存储虚拟化设备）将物理存储资源抽象为逻辑存储池，实现多个虚拟机实例共享同一存储资源，提高存储资源的利用率和灵活性。</span><br><span class=\"line\">存储负载均衡：</span><br><span class=\"line\"></span><br><span class=\"line\">在多台服务器上分布存储资源，实现存储负载均衡，避免单点故障和瓶颈，提高系统的可靠性和性能。</span><br><span class=\"line\">存储备份和恢复：</span><br><span class=\"line\"></span><br><span class=\"line\">实现存储资源的定期备份和恢复，保障数据的安全和完整性，应对意外数据丢失或损坏的情况。</span><br><span class=\"line\">自动化存储调度：</span><br><span class=\"line\"></span><br><span class=\"line\">使用自动化存储调度工具（如存储管理系统、自动化存储平台）实现存储资源的动态调度和优化，根据实时需求分配存储资源，提高存储资源的利用率。</span><br><span class=\"line\">数据迁移和迁移：</span><br><span class=\"line\"></span><br><span class=\"line\">对存储资源进行数据迁移和迁移，根据数据的访问频率和重要性进行合理的存储调度，优化存储资源的使用和管理。</span><br><span class=\"line\">通过合理配置和调度存储资源，可以提高数据的安全性、可靠性和性能，确保系统在处理大量数据和高并发访问时能够高效运行，并满足用户需求。</span><br></pre></td></tr></table></figure>\n\n</li>\n<li><p>服务编排</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">服务编排（Service Orchestration）是指将多个服务或应用程序按照一定的逻辑顺序和规则进行组合、配置和管理，以实现复杂的业务流程或系统任务。在服务编排中，不同的服务或应用程序之间会以一定的方式进行互动和协同工作，以达到特定的业务目标或系统运行需求。</span><br><span class=\"line\"></span><br><span class=\"line\">服务编排通常涉及到以下几个重要概念和过程：</span><br><span class=\"line\"></span><br><span class=\"line\">服务定义：将需要的服务或应用程序进行定义和描述，包括服务的输入参数、输出结果、执行逻辑、运行环境等信息。</span><br><span class=\"line\"></span><br><span class=\"line\">服务组合：将定义好的服务按照一定的组合规则进行组合，形成一个服务流程或任务流程。在服务编排中，可能涉及到顺序执行、并发执行、条件分支等方式来组合多个服务。</span><br><span class=\"line\"></span><br><span class=\"line\">服务配置：对组合好的服务流程进行配置和参数设置，以适应特定的场景或需求。这包括服务间的通信设置、数据传递、资源调度等配置。</span><br><span class=\"line\"></span><br><span class=\"line\">服务调度与执行：根据服务编排的规则和配置信息，将服务流程交给服务编排引擎或执行引擎来调度和执行。执行过程中，服务之间会相互调用、交换数据，并按照事先定义的流程进行处理。</span><br><span class=\"line\"></span><br><span class=\"line\">监控与管理：实时监控服务编排的执行过程，记录日志、收集指标，及时发现和处理异常情况。同时，根据监控数据和分析结果，可以对服务编排进行性能优化或资源调整。</span><br><span class=\"line\"></span><br><span class=\"line\">服务编排可以应用于诸多场景，如自动化工作流程、云原生应用开发、微服务架构等。通过服务编排，用户可以更加灵活、高效地管理和部署多个服务，实现复杂的业务逻辑和系统任务。</span><br></pre></td></tr></table></figure></li>\n<li><p>安全管控模块</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在云计算环境中，安全管控是非常重要的，以确保系统和数据的安全性、保密性和完整性。以下是一些常见的安全管控措施和最佳实践：</span><br><span class=\"line\"></span><br><span class=\"line\">身份和访问管理：</span><br><span class=\"line\"></span><br><span class=\"line\">实施严格的身份验证和访问控制，确保只有经授权的用户可以访问和管理计算资源。使用多因素身份验证（MFA）以增强安全性。</span><br><span class=\"line\">网络安全：</span><br><span class=\"line\"></span><br><span class=\"line\">配置网络防火墙、安全组和网络隔离策略，限制网络流量和通信，防止未经授权的访问和攻击。</span><br><span class=\"line\">数据加密：</span><br><span class=\"line\"></span><br><span class=\"line\">对数据在存储和传输过程中进行加密，确保数据的保密性。使用加密算法保护数据，尤其是敏感信息。</span><br><span class=\"line\">漏洞管理：</span><br><span class=\"line\"></span><br><span class=\"line\">定期进行安全漏洞扫描和漏洞管理，及时修复系统和应用程序中的漏洞，以减少系统面临的风险。</span><br><span class=\"line\">日志和审核：</span><br><span class=\"line\"></span><br><span class=\"line\">设置日志记录和审核机制，跟踪系统和用户的活动，帮助及时检测和响应安全事件。</span><br><span class=\"line\">灾难恢复和备份：</span><br><span class=\"line\"></span><br><span class=\"line\">制定灾难恢复计划，并定期进行数据备份，以应对系统故障、数据丢失或其他不可预见的情况。</span><br><span class=\"line\">安全培训：</span><br><span class=\"line\"></span><br><span class=\"line\">对员工进行安全意识培训，教育他们如何识别和应对安全威胁，降低员工造成的安全风险。</span><br><span class=\"line\">合规性和标准：</span><br><span class=\"line\"></span><br><span class=\"line\">遵守相关法规和标准，如GDPR、HIPAA等，确保系统设计和运营符合法律要求和行业标准。</span><br><span class=\"line\">安全技术：</span><br><span class=\"line\"></span><br><span class=\"line\">使用安全工具和技术，如防火墙、入侵检测系统（IDS）、安全信息与事件管理（SIEM）等，增强系统的安全性。</span><br><span class=\"line\">综合上述安全管控措施和最佳实践，用户可以构建安全可靠的云计算环境，有效保护系统和数据免受安全威胁和攻击。持续加强安全管理和监控，及时响应安全事件，是确保云计算环境安全的关键。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">将基础资源配置和管理、资源编排以及安全管控组合运用，在计算资源和数据安全方面具有以下优点：</span><br><span class=\"line\"></span><br><span class=\"line\">资源最佳利用：</span><br><span class=\"line\"></span><br><span class=\"line\">通过资源编排和基础资源配置的优化，可以实现对计算资源的灵活调度和配置，最大限度地提高资源利用率，提升系统性能和效率。</span><br><span class=\"line\">安全性加强：</span><br><span class=\"line\"></span><br><span class=\"line\">结合安全管控机制，对资源访问、数据传输和存储进行加密和监控，防范安全威胁和数据泄露，保障计算资源和信息安全。</span><br><span class=\"line\">风险降低：</span><br><span class=\"line\"></span><br><span class=\"line\">基础资源配置和管理可以确保系统的正常运行和稳定性，资源编排可以按需分配资源，安全管控可以预防和应对安全威胁，降低系统运行风险。</span><br><span class=\"line\">自动化管理：</span><br><span class=\"line\"></span><br><span class=\"line\">结合资源编排技术，可以实现自动化的资源调度和管理，提高系统的自动化程度，减少人为错误和操作成本。</span><br><span class=\"line\">合规性和可管理性：</span><br><span class=\"line\"></span><br><span class=\"line\">强化安全管控机制，确保系统和数据符合合规标准和法规要求，同时实现资源的有效管理和监控，保持系统的可管理性。</span><br><span class=\"line\">响应灵活性：</span><br><span class=\"line\"></span><br><span class=\"line\">结合资源编排技术，可以根据不同的需求快速调整资源配置和部署，灵活应对系统负载变化和业务需求，提高系统的响应能力。</span><br><span class=\"line\">综合应用基础资源配置和管理、资源编排，以及安全管控，可以有效提升系统的可靠性、安全性和效率，满足不同业务场景下的需求和挑战。持续优化资源管理和安全机制，是保障计算资源和数据安全的重要措施，为系统的稳定运行和业务发展提供有力支持。</span><br></pre></td></tr></table></figure></li>\n<li><p>研发配电云系统集成</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">云系统集成指的是将多个云服务、应用程序或系统进行连接和整合，以实现数据流畅、信息交换和协同工作的过程。在云计算环境下，云系统集成变得更加重要和复杂，因为企业通常会使用多个云服务提供商的服务，并需要将它们整合在一起以实现协作和数据共享。以下是一些常见的云系统集成方法和实践：</span><br><span class=\"line\"></span><br><span class=\"line\">API集成：</span><br><span class=\"line\">使用应用程序编程接口（API）实现不同云服务和应用程序之间的通信和数据交换。通过调用API来实现系统之间的集成和数据传输。</span><br><span class=\"line\"></span><br><span class=\"line\">集成平台：</span><br><span class=\"line\">使用集成平台和工具（如MuleSoft、Informatica、Boomi）来简化和加速系统集成的过程。这些平台提供了丰富的连接器和工作流程，可帮助企业构建复杂的集成方案。</span><br><span class=\"line\"></span><br><span class=\"line\">事件驱动集成：</span><br><span class=\"line\">基于事件驱动架构（Event-Driven Architecture）实现系统之间的集成。通过订阅和发布事件来传递信息和触发行为，实现异步和实时的系统集成。</span><br><span class=\"line\"></span><br><span class=\"line\">数据同步和复制：</span><br><span class=\"line\">使用数据同步和复制工具（如AWS Data Pipeline、Google Cloud Dataflow）将数据从一个云服务同步到另一个云服务，保持数据的一致性和可用性。</span><br><span class=\"line\"></span><br><span class=\"line\">身份和访问管理集成：</span><br><span class=\"line\">集成身份和访问管理（IAM）系统，实现用户认证和授权在不同云服务和系统之间的一致性和安全性。</span><br><span class=\"line\"></span><br><span class=\"line\">业务流程集成：</span><br><span class=\"line\">将不同云系统的业务流程进行集成和优化，实现跨系统的自动化工作流程和协同工作。</span><br><span class=\"line\"></span><br><span class=\"line\">监控和管理集成：</span><br><span class=\"line\">集成监控和管理工具，实现对多个云系统的统一监控和管理，以便及时发现和解决问题。</span><br><span class=\"line\"></span><br><span class=\"line\">安全集成：</span><br><span class=\"line\">实现安全事件和日志的集中管理和分析，确保在不同云系统之间的数据传输和存储安全可靠。</span><br><span class=\"line\"></span><br><span class=\"line\">综合利用上述云系统集成方法和实践，企业可以实现多个云服务和应用程序之间的无缝连接和协同工作，提高系统的效率和灵活性，实现数字化转型和业务创新。同时，云系统集成也需要考虑安全、可靠性和性能等方面，确保整个系统的正常运行和数据的安全保护。</span><br></pre></td></tr></table></figure></li>\n<li><p>展开配电网云操作系统十点应用部署方案</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在云计算环境中，部署方案通常涉及到如何将应用程序和服务部署到云平台上，以便实现高可用性、可伸缩性和弹性的运行。以下是一般情况下的云计算部署方案：</span><br><span class=\"line\"></span><br><span class=\"line\">云服务器部署：</span><br><span class=\"line\">使用云服务提供商（如AWS、Azure、Google Cloud等）提供的虚拟机实例部署应用程序。可以根据需求选择不同规格和配置的虚拟机，将应用程序和服务部署到这些虚拟机上。</span><br><span class=\"line\"></span><br><span class=\"line\">容器化部署：</span><br><span class=\"line\">使用容器化技术（如Docker、Kubernetes）将应用程序打包为容器镜像，然后在云平台上部署和管理这些容器。容器化部署可以提供更高的灵活性和可移植性。</span><br><span class=\"line\"></span><br><span class=\"line\">Serverless部署：</span><br><span class=\"line\">使用Serverless架构（如AWS Lambda、Azure Functions）将应用程序拆分成小的函数，并按需在云平台上执行。Serverless部署无需管理服务器和基础设施，可以实现按需扩展和减少成本。</span><br><span class=\"line\"></span><br><span class=\"line\">多区域和跨区域部署：</span><br><span class=\"line\">在多个云区域或跨多个云服务提供商的区域中部署应用程序，以提高系统的可用性和容错能力。跨区域部署可以减少因单一区域故障而导致的服务中断。</span><br><span class=\"line\"></span><br><span class=\"line\">自动化部署和持续集成：</span><br><span class=\"line\">使用自动化部署工具（如Jenkins、GitLab CI/CD）实现持续集成和持续部署，自动化构建、测试和部署应用程序，提高部署效率和质量。</span><br><span class=\"line\"></span><br><span class=\"line\">监控和日志管理：</span><br><span class=\"line\">部署监控和日志管理工具（如Prometheus、ELK Stack）来监视应用程序的性能和运行情况，及时发现和解决问题。</span><br><span class=\"line\"></span><br><span class=\"line\">安全和权限管理：</span><br><span class=\"line\">部署安全措施（如防火墙、身份认证、加密）和权限管理机制，保障应用程序和数据的安全，防止安全漏洞和攻击。</span><br><span class=\"line\"></span><br><span class=\"line\">综合考虑上述云计算部署方案，可以根据具体的业务需求和情况选择适合的部署方式，并借助云计算的优势实现灵活、高效、安全的应用部署和运行。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">系统集成和部署是两个密切相关且互相依赖的概念，在软件开发和 IT 领域中起着至关重要的作用。以下是系统集成和部署之间的关系：</span><br><span class=\"line\"></span><br><span class=\"line\">系统集成：</span><br><span class=\"line\"></span><br><span class=\"line\">系统集成是将不同系统、软件、服务或组件整合在一起，使它们能够相互通信、协同工作和共享数据。集成的目标是实现系统之间的无缝连接和数据交流，以实现更高的效率、可靠性和灵活性。系统集成侧重于整合系统的功能和数据流程，确保系统间协作无缝。</span><br><span class=\"line\">系统部署：</span><br><span class=\"line\"></span><br><span class=\"line\">系统部署是将经过集成的系统或软件部署到目标环境中，使其能够正常运行和提供服务。部署的目标是将开发完成的系统、应用程序或服务部署到生产环境中，并确保其稳定性、安全性和可用性。部署包括安装、配置、测试、启动和监控系统。</span><br><span class=\"line\">关系及交互作用：</span><br><span class=\"line\"></span><br><span class=\"line\">前期准备：在系统部署之前，需要进行系统集成的工作，确保不同系统之间能够正常通信和协作。</span><br><span class=\"line\">集成调试：在系统集成阶段，会对整合后的系统进行调试和测试，以确保系统的各个部分能够正常运行。</span><br><span class=\"line\">部署环境：系统集成完成后，需要将整合后的系统部署到目标环境中，进行安装、配置和测试。</span><br><span class=\"line\">监控和维护：部署完成后，需要对系统进行定期监控和维护，确保系统的稳定性和性能。</span><br><span class=\"line\">总体而言，系统集成和部署是软件开发和 IT 管理中不可或缺的两个环节，它们紧密相连，相辅相成，共同确保系统的正常运行和服务的可靠提供。在软件开发和项目实施过程中，系统集成和部署都需要细致的规划、有序的执行和持续的跟踪监控，以确保项目的顺利完成和系统的有效运行。</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>私有云环境部署</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">选择适当的私有云平台</span><br><span class=\"line\">选择适合自身需求的私有云平台，如OpenStack、VMware vSphere等，确保平台提供足够的计算、存储和网络资源来支持应用程序的部署和运行。</span><br><span class=\"line\"></span><br><span class=\"line\">创建应用程序镜像</span><br><span class=\"line\">将应用程序打包为镜像（如Docker镜像），确保应用程序的依赖项和配置都包含在内，以便在私有云环境中快速部署和扩展。</span><br><span class=\"line\"></span><br><span class=\"line\">配置部署环境</span><br><span class=\"line\">在私有云中创建虚拟机、容器集群或Serverless环境，配置所需的计算、存储和网络资源，确保部署环境能够满足应用程序的需求。</span><br><span class=\"line\"></span><br><span class=\"line\">部署应用程序</span><br><span class=\"line\">将应用程序镜像部署到私有云环境中，可以通过虚拟机、容器或Serverless函数等方式进行部署，并设置适当的网络访问权限和资源配额。</span><br><span class=\"line\"></span><br><span class=\"line\">配置应用程序</span><br><span class=\"line\">针对具体应用程序的需求，进行配置文件的定制和参数设置，如数据库连接信息、日志输出配置等，确保应用程序能够正常运行。</span><br><span class=\"line\"></span><br><span class=\"line\">监控和管理</span><br><span class=\"line\">部署应用程序后，需要设置监控和日志管理系统，实时监测应用程序的运行状态和性能指标，及时发现并解决问题。</span><br><span class=\"line\"></span><br><span class=\"line\">安全加固</span><br><span class=\"line\">在部署应用程序之前，要确保私有云环境的安全性，包括网络安全、身份认证、数据加密等措施，保护应用程序和数据的安全。</span><br><span class=\"line\"></span><br><span class=\"line\">持续优化</span><br><span class=\"line\">定期对应用程序进行性能优化、资源调整和系统升级，保持应用程序的高可用性和稳定性。</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">云操作系统部署是在云环境中创建和配置操作系统实例的过程。以下是一些常见的云操作系统部署方案和步骤：</span><br><span class=\"line\"></span><br><span class=\"line\">选择云服务提供商：</span><br><span class=\"line\"></span><br><span class=\"line\">选择适合自身需求的云服务提供商，如AWS、Azure、Google Cloud等。不同云服务提供商提供的操作系统镜像和部署方式可能有所不同。</span><br><span class=\"line\"></span><br><span class=\"line\">选择操作系统镜像：</span><br><span class=\"line\"></span><br><span class=\"line\">在云服务提供商的控制台中选择要部署的操作系统镜像，通常有多个选项可供选择，包括不同版本和发行版的操作系统。</span><br><span class=\"line\">创建虚拟机实例：</span><br><span class=\"line\"></span><br><span class=\"line\">在云服务提供商的控制台中创建虚拟机实例，并选择相应的操作系统镜像作为实例的基础。设置实例的规格、区域、网络配置等参数。</span><br><span class=\"line\">配置网络和安全组：</span><br><span class=\"line\"></span><br><span class=\"line\">配置虚拟机实例的网络设置，包括公有 IP 地址、子网、防火墙规则等。确保虚拟机能够与外部网络通信并受到安全保护。</span><br><span class=\"line\">连接到虚拟机：</span><br><span class=\"line\"></span><br><span class=\"line\">使用SSH、RDP等远程连接工具连接到虚拟机实例，进行操作系统的初始化配置，如设置用户账号、密码、网络配置等。</span><br><span class=\"line\">安装必要的软件和组件：</span><br><span class=\"line\"></span><br><span class=\"line\">根据应用程序的需求，在操作系统中安装所需的软件包、库文件和依赖项，以便后续部署应用程序。</span><br><span class=\"line\">配置系统参数：</span><br><span class=\"line\"></span><br><span class=\"line\">针对具体应用场景和性能需求，调整操作系统的参数设置，如内存管理、磁盘配置、网络优化等，以提升系统性能和稳定性。</span><br><span class=\"line\">部署应用程序：</span><br><span class=\"line\"></span><br><span class=\"line\">将应用程序部署到云操作系统实例中，并配置相应的服务端口、权限和访问控制，确保应用程序能够正常运行。</span><br><span class=\"line\">监控和维护：</span><br><span class=\"line\"></span><br><span class=\"line\">设置监控和警报系统，实时监测云操作系统实例的状态和性能指标，及时发现并解决问题。定期进行系统更新和维护，确保系统安全和稳定性。</span><br><span class=\"line\">云操作系统部署是云计算环境中非常基础和重要的一环，正确的部署方式和配置能够有效提高系统的安全性、可靠性和性能。在部署过程中要注意备份数据、遵循最佳实践和安全策略，以确保云操作系统的稳定运行和应用程序的正常服务。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在不同区域之间设置数据复制和同步机制，以确保数据在不同区域之间的一致性和可用性。可以使用云服务提供商提供的数据库复制功能或者自行开发数据同步方案。</span><br><span class=\"line\"></span><br><span class=\"line\">负载均衡和流量管理：使用负载均衡器和流量管理工具来分发流量到不同区域的实例和服务中，以提高系统的性能和可用性。</span><br><span class=\"line\"></span><br><span class=\"line\">跨区域容灾设计：设计容灾方案，确保即使在一个区域发生故障时，系统依然可以继续提供服务。这可能涉及到备份实例、自动切换流量到其他区域、以及快速恢复服务的计划。</span><br><span class=\"line\"></span><br><span class=\"line\">全局服务发现和配置管理：采用全局服务发现和配置管理工具，确保不同区域的服务能够相互发现和通信，并且在配置更新时能够同步更新到所有区域。</span><br><span class=\"line\"></span><br><span class=\"line\">安全和身份验证：在跨区域部署中要特别注意安全和身份验证的设置，确保数据在不同区域之间的传输和存储是安全的，同时要对访问权限进行严格控制。</span><br><span class=\"line\"></span><br><span class=\"line\">监控和故障排除：建立跨区域的监控系统，及时发现并解决不同区域的故障和问题，确保系统的稳定性和可用性。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">自动更新设置：</span><br><span class=\"line\"></span><br><span class=\"line\">操作系统级别的设置：现代操作系统通常提供了自动更新功能，用户可以在设置中配置自动更新选项，包括自动下载更新、自动安装更新等。</span><br><span class=\"line\">更新策略：用户可以根据需要选择更新策略，如自动更新所有可用更新、仅安全更新、仅重要更新等。</span><br><span class=\"line\">安全更新机制：</span><br><span class=\"line\"></span><br><span class=\"line\">数字签名和验证：操作系统更新应该具有数字签名，以确保其完整性和来源的可信性。</span><br><span class=\"line\">安全传输：更新应该通过加密和安全的传输协议进行传输，以防止中间人攻击和数据篡改。</span><br><span class=\"line\">自动部署工具：</span><br><span class=\"line\"></span><br><span class=\"line\">配置管理工具：使用像Ansible、Chef、Puppet等配置管理工具来自动化操作系统的部署和配置。</span><br><span class=\"line\">镜像化部署：将操作系统配置为镜像，通过自动化工具进行快速部署，如使用Docker和Kubernetes进行容器化部署。</span><br><span class=\"line\">测试和回滚机制：</span><br><span class=\"line\"></span><br><span class=\"line\">自动化测试：在部署更新之前，应该进行自动化测试以确保更新不会引入新的问题或破坏系统的正常运行。</span><br><span class=\"line\">回滚策略：在更新失败或导致问题时，应该有自动回滚机制，以快速恢复系统到之前的稳定状态。</span><br><span class=\"line\">监控和报警：</span><br><span class=\"line\"></span><br><span class=\"line\">系统监控：设置监控系统来监视操作系统的运行状态和更新过程，及时发现问题并采取措施。</span><br><span class=\"line\">异常报警：配置报警机制，以便在更新过程中出现异常时能够及时通知相关人员。</span><br><span class=\"line\">用户参与和控制：</span><br><span class=\"line\"></span><br><span class=\"line\">通知机制：在自动更新和部署过程中，向用户提供通知和提示，让用户了解何时进行更新以及更新的内容。</span><br><span class=\"line\">手动干预选项：为用户提供手动干预选项，允许他们暂停、延迟或手动触发更新过程。</span><br><span class=\"line\">综上所述，操作系统的自动更新和部署是通过自动化工具和流程来确保系统安全和稳定性的重要措施。在实施过程中，需要考虑安全性、可靠性、用户参与等因素，以确保更新和部署过程的顺利进行。</span><br></pre></td></tr></table></figure></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">密码验证：</span><br><span class=\"line\"></span><br><span class=\"line\">用户名和密码：最基本的身份验证方式，用户使用唯一标识（用户名）和对应的密码进行登录验证。</span><br><span class=\"line\">多因素认证（MFA）：结合多种验证因素，如密码、手机验证码、硬件令牌等，提高身份验证的安全性。</span><br><span class=\"line\">公钥基础设施（PKI）：</span><br><span class=\"line\"></span><br><span class=\"line\">使用数字证书和公钥加密技术进行身份验证和通信加密，确保通信的机密性和完整性。</span><br><span class=\"line\">单点登录（SSO）：</span><br><span class=\"line\"></span><br><span class=\"line\">用户只需一次登录，即可访问多个相关系统或应用程序，提高用户体验的同时减少了密码管理的复杂性。</span><br><span class=\"line\">访问控制列表（ACL）：</span><br><span class=\"line\"></span><br><span class=\"line\">资源所有者定义允许或拒绝特定用户或用户组对资源的访问权限。</span><br><span class=\"line\">角色 Based Access Control（RBAC）：</span><br><span class=\"line\"></span><br><span class=\"line\">将权限分配给角色，然后将用户分配到适当的角色上，简化权限管理。</span><br><span class=\"line\">属性 Based Access Control（ABAC）：</span><br><span class=\"line\"></span><br><span class=\"line\">根据用户和资源的属性（如用户所在部门、访问时间等）来动态决定访问权限。</span><br><span class=\"line\">访问审计：</span><br><span class=\"line\"></span><br><span class=\"line\">记录用户对系统资源的访问活动，以便事后审计和监控。</span><br><span class=\"line\">生命周期管理：</span><br><span class=\"line\"></span><br><span class=\"line\">对用户账户和权限进行全面的生命周期管理，包括创建、修改、暂停、删除等操作，以确保及时撤销不必要的权限。</span><br><span class=\"line\">API 访问控制：</span><br><span class=\"line\"></span><br><span class=\"line\">对外部应用程序或服务通过 API 访问系统资源进行访问控制，并根据需要进行身份验证和授权。</span><br><span class=\"line\">安全标准和协议：</span><br><span class=\"line\"></span><br><span class=\"line\">使用安全标准和协议（如OAuth、OpenID Connect等）来实现身份验证和授权，确保安全的身份验证和访问控制流程。</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">对称加密：</span><br><span class=\"line\"></span><br><span class=\"line\">在对称加密中，相同的密钥用于加密和解密数据。常见的对称加密算法包括 DES（数据加密标准）、AES（高级加密标准）等。</span><br><span class=\"line\">非对称加密：</span><br><span class=\"line\"></span><br><span class=\"line\">非对称加密使用一对密钥，即公钥和私钥。公钥用于加密数据，私钥用于解密数据。常见的非对称加密算法包括 RSA、ECC（椭圆曲线加密）等。</span><br><span class=\"line\">哈希函数：</span><br><span class=\"line\"></span><br><span class=\"line\">哈希函数将输入数据映射为固定长度的哈希值。哈希函数是单向的，不可逆的，因此通常用于验证数据的完整性而不是加密数据本身。常见的哈希函数包括 SHA-256、MD5 等。</span><br><span class=\"line\">混合加密：</span><br><span class=\"line\"></span><br><span class=\"line\">混合加密是将对称加密和非对称加密结合使用的一种方式。通常使用非对称加密来传输对称加密所需的密钥，然后使用对称加密来加密实际的数据传输过程。</span><br><span class=\"line\">量子加密：</span><br><span class=\"line\"></span><br><span class=\"line\">量子加密利用量子力学原理来保护数据的安全性，其中包括量子密钥分发（QKD）等技术，可以抵御量子计算的攻击。</span><br><span class=\"line\">深度学习加密：</span><br><span class=\"line\"></span><br><span class=\"line\">最近出现的一些新兴技术利用深度学习方法来加密数据，如基于神经网络的加密算法，它们试图通过深度学习的方法提供更安全和更高效的加密解决方案。</span><br><span class=\"line\">代理重加密：</span><br><span class=\"line\"></span><br><span class=\"line\">这是一种基于代理的加密技术，允许数据在经过一系列代理之后仍然保持加密状态，只有授权的用户才能解密数据。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">日志审计：</span><br><span class=\"line\"></span><br><span class=\"line\">审计系统日志记录，包括登录日志、操作日志、安全事件日志等，以便跟踪系统和用户活动，及时发现异常行为。</span><br><span class=\"line\">网络流量监控：</span><br><span class=\"line\"></span><br><span class=\"line\">监控网络流量和数据包，识别异常流量模式或攻击行为，防范网络入侵和数据泄露。</span><br><span class=\"line\">漏洞扫描：</span><br><span class=\"line\"></span><br><span class=\"line\">使用漏洞扫描工具对系统和应用程序进行定期扫描，识别系统中存在的安全漏洞，并及时采取修复措施。</span><br><span class=\"line\">异常行为检测：</span><br><span class=\"line\"></span><br><span class=\"line\">借助行为分析技术，监控用户和系统的行为模式，识别异常行为，如未经授权的访问、大规模数据导出等。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">防火墙（Firewalls）：</span><br><span class=\"line\"></span><br><span class=\"line\">防火墙是网络安全的第一道防线，可根据预设的安全策略过滤和控制网络流量，阻止未经授权的访问和恶意流量。</span><br><span class=\"line\">入侵检测与入侵防御系统（IDS/IPS）：</span><br><span class=\"line\"></span><br><span class=\"line\">IDS/IPS 可以监控网络流量和系统日志，检测可能的入侵行为，并根据预定义的规则阻止或响应潜在的攻击。</span><br><span class=\"line\">虚拟专用网络（VPN）：</span><br><span class=\"line\"></span><br><span class=\"line\">VPN 可以通过加密和隧道技术确保远程访问和数据传输的安全性，防止敏感信息在公共网络中被窃听或篡改。</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">完整备份：</span><br><span class=\"line\"></span><br><span class=\"line\">完整备份是指将整个数据集全部备份到备份介质中，可以快速恢复所有数据，但需要较大的存储空间和时间。</span><br><span class=\"line\">增量备份：</span><br><span class=\"line\"></span><br><span class=\"line\">增量备份是在上一次完整备份后备份发生变化的数据，备份时间短，但恢复时需要依次恢复完整备份和增量备份。</span><br><span class=\"line\">差异备份：</span><br><span class=\"line\"></span><br><span class=\"line\">差异备份是备份自上次完整备份以来发生变化的数据，恢复时只需恢复完整备份和最近一次差异备份即可。</span><br><span class=\"line\">镜像备份：</span><br><span class=\"line\"></span><br><span class=\"line\">镜像备份是对整个系统或磁盘进行完整的拷贝，包括操作系统、应用程序和数据，恢复时可以还原到备份时的完全状态。</span><br><span class=\"line\">远程备份：</span><br><span class=\"line\"></span><br><span class=\"line\">将备份数据传输至远程或云存储设备中，以防止本地备份数据遭受灾难性事件影响，提高数据的安全性和可靠性。</span><br><span class=\"line\">数据库备份：</span><br><span class=\"line\"></span><br><span class=\"line\">针对数据库系统，可以使用数据库级别的备份工具进行备份，如SQL Server的备份和恢复、MySQL的mysqldump等。</span><br><span class=\"line\">文件同步备份：</span><br><span class=\"line\"></span><br><span class=\"line\">利用文件同步工具实现实时或定时将指定目录下的文件同步备份到其他存储设备中，确保数据及时备份。</span><br><span class=\"line\">虚拟化备份：</span><br><span class=\"line\"></span><br><span class=\"line\">针对虚拟化环境，可以使用专门的虚拟化备份软件对虚拟机进行备份，如VMware的vSphere Data Protection、Veeam Backup &amp; Replication等。</span><br><span class=\"line\">持续数据保护（CDP）：</span><br><span class=\"line\"></span><br><span class=\"line\">CDP 是一种实时备份技术，可以实现对数据的连续备份，几乎实时地恢复到任意时间点的数据状态。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">优势：</span><br><span class=\"line\">灵活性和可扩展性：云操作系统集成和部署可以根据需求快速扩展或收缩计算资源，满足业务的变化和增长。</span><br><span class=\"line\"></span><br><span class=\"line\">成本效益：通过云服务提供商的按需付费模式，可以避免大量的固定成本，降低了IT基础设施的运营成本。</span><br><span class=\"line\"></span><br><span class=\"line\">高可用性和容错性：云平台提供了高可用性和容错性的特性，使得操作系统在云环境中更加稳定和可靠。</span><br><span class=\"line\"></span><br><span class=\"line\">自动化管理：利用云平台的自动化工具和服务，可以实现对操作系统的自动化部署、配置和管理，减少人工干预，提高效率。</span><br><span class=\"line\"></span><br><span class=\"line\">全球化覆盖：云服务提供商分布在全球各地，可以实现全球范围内的操作系统部署和访问，满足多地域的业务需求。</span><br><span class=\"line\"></span><br><span class=\"line\">安全性：云平台提供了多层次的安全措施，可以帮助用户保护操作系统和数据的安全。</span><br><span class=\"line\"></span><br><span class=\"line\">发展前景：</span><br><span class=\"line\">深度整合：随着云计算、人工智能、大数据等新技术的发展，云操作系统将与这些技术深度整合，为用户提供更多智能化、高效化的解决方案。</span><br><span class=\"line\"></span><br><span class=\"line\">多云混合部署：未来云操作系统将更加支持多云混合部署，使用户能够更灵活地结合不同云服务商的优势，实现统一的管理和控制。</span><br><span class=\"line\"></span><br><span class=\"line\">边缘计算：随着边缘计算的兴起，云操作系统将更多地面向边缘设备，支持在边缘节点上部署和管理操作系统，满足边缘计算场景下的需求。</span><br><span class=\"line\"></span><br><span class=\"line\">安全与合规：随着数据安全和合规性要求的提高，云操作系统将更加注重安全和合规性，提供更加全面的安全解决方案和服务。</span><br><span class=\"line\"></span><br><span class=\"line\">总的来说，云操作系统集成和部署将继续在云计算领域发挥重要作用，并且随着新技术的不断涌现，其发展前景将更加广阔，为用户提供更多便利和价值。</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">云操作系统的研究工作取得了许多成效，以下是一些常见的成效：</span><br><span class=\"line\"></span><br><span class=\"line\">性能优化：研究人员通过对云操作系统进行深入分析和优化，提出了许多性能优化的方法和技术，包括针对虚拟化、容器化、调度算法等方面的优化，从而提高了云操作系统的整体性能。</span><br><span class=\"line\"></span><br><span class=\"line\">安全性增强：针对云环境中的安全挑战，研究人员提出了许多安全增强的方法和技术，包括身份认证、访问控制、隔离技术等，加强了云操作系统的安全性。</span><br><span class=\"line\"></span><br><span class=\"line\">自动化管理：研究人员设计并实现了许多自动化管理的工具和系统，用于实现对云操作系统的自动化部署、配置和管理，提高了运维效率和可靠性。</span><br><span class=\"line\"></span><br><span class=\"line\">容器和微服务：随着容器和微服务的兴起，研究人员在云操作系统领域做了大量工作，提出了许多针对容器和微服务的优化和支持方案，推动了云原生应用的发展。</span><br><span class=\"line\"></span><br><span class=\"line\">混合云和多云管理：针对多云环境下的管理挑战，研究人员提出了许多混合云和多云管理的方案和工具，为用户提供了更便捷的管理和控制方式。</span><br><span class=\"line\"></span><br><span class=\"line\">边缘计算：随着边缘计算的兴起，研究人员致力于在边缘环境下进行云操作系统的研究，提出了许多适用于边缘计算场景的解决方案。</span><br><span class=\"line\"></span><br><span class=\"line\">这些成效使得云操作系统在性能、安全性、管理和适配新兴技术等方面都取得了显著进展，为云计算提供了更加强大和稳健的基础。未来，随着新技术的不断涌现和需求的不断变化，云操作系统的研究工作将继续发挥重要作用，为云计算的发展提供更多的支持和创新。</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">研究网络拓扑自动发现是计算机网络领域的重要课题，取得了许多成效，以下是一些常见的成效：</span><br><span class=\"line\"></span><br><span class=\"line\">减少人工配置：通过自动发现网络拓扑，可以减少网络管理员的人工配置工作量，提高网络管理的效率和可靠性。</span><br><span class=\"line\"></span><br><span class=\"line\">实时更新：自动发现能够及时捕获网络拓扑的变化，帮助网络管理员及时调整网络结构，适应新设备接入、故障修复等场景。</span><br><span class=\"line\"></span><br><span class=\"line\">降低错误率：自动发现可以减少人为配置错误的发生，提高网络配置的准确性和稳定性，降低网络故障的风险。</span><br><span class=\"line\"></span><br><span class=\"line\">支持大规模网络：自动发现技术能够应对大规模复杂网络的拓扑发现需求，帮助管理大型企业网络、数据中心网络等复杂环境。</span><br><span class=\"line\"></span><br><span class=\"line\">与网络分析结合：自动发现与网络分析相结合，能够为网络故障诊断、性能优化等提供更加全面的数据支持，提高网络运维的效率。</span><br><span class=\"line\"></span><br><span class=\"line\">支持新型网络架构：自动发现技术也能够支持新型网络架构的部署和管理，如软件定义网络（SDN）、边缘计算网络等。</span><br><span class=\"line\"></span><br><span class=\"line\">总的来说，自动发现网络拓扑对于降低网络管理成本、提高网络管理效率、支持新型网络架构等方面都取得了显著成效。未来，随着网络规模的不断扩大、网络变化的不断加剧，自动发现网络拓扑的研究将继续发挥重要作用，为构建智能、自适应的网络管理系统提供更多支持和解决方案。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">研究边缘计算应用的管理和部署（Edge Application Orchestration）在近年来取得了一些重要成果，主要体现在以下几个方面：</span><br><span class=\"line\"></span><br><span class=\"line\">资源优化和负载均衡：边缘计算环境中，资源分布广泛，包括边缘设备、边缘节点和云端资源。研究取得的成效包括了对这些资源的有效管理和负载均衡技术，使得边缘计算应用能够充分利用资源，并在不同节点间实现负载均衡，提高性能和可靠性。</span><br><span class=\"line\"></span><br><span class=\"line\">自动化部署和扩展：研究工作还涉及自动化部署和扩展技术，使得边缘应用能够根据需求自动部署到最优节点，并能够根据负载情况动态扩展或收缩，以应对实时变化的工作负载。</span><br><span class=\"line\"></span><br><span class=\"line\">容器化和微服务架构：将边缘应用进行容器化和采用微服务架构，能够提高应用的灵活性和可移植性，同时降低部署和管理的复杂性。研究工作在此方面取得的成效包括了针对边缘环境的容器编排和管理技术，以及微服务架构下的边缘应用设计和优化。</span><br><span class=\"line\"></span><br><span class=\"line\">安全和隐私保护：边缘计算环境涉及大量敏感数据的处理，因此安全和隐私保护是至关重要的。研究工作在边缘应用的安全性和隐私保护方面取得了一些成果，包括边缘节点的安全认证、数据加密和访问控制等技术。</span><br><span class=\"line\"></span><br><span class=\"line\">智能管理和优化：研究工作还探索了智能管理和优化技术，包括基于机器学习和人工智能的边缘应用管理策略，以及面向边缘环境的自适应优化算法，从而实现对边缘应用的智能监控、调整和优化。</span><br><span class=\"line\"></span><br><span class=\"line\">综上所述，研究边缘计算应用纳管取得了一系列的成效，为边缘计算技术的发展和应用提供了重要支持和保障。随着边缘计算应用场景的不断拓展和深化，相信未来会有更多创新的成果涌现。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">研究基础资源配置对于提高资源利用率、降低成本，并且满足应用性能需求方面取得了一些重要成效。以下是一些常见的成果：</span><br><span class=\"line\"></span><br><span class=\"line\">自动化资源调度：研究工作在资源调度方面取得了重要进展，通过设计和开发智能调度算法和策略，实现了自动化的资源分配和调度。这些算法可以根据应用的特征和性能需求，以及资源的可用性和负载情况，动态地将任务分配到最适合的资源上，从而提高资源利用率和应用性能。</span><br><span class=\"line\"></span><br><span class=\"line\">负载均衡和弹性扩展：研究工作还涉及负载均衡和弹性扩展技术，使得系统能够根据负载变化自动调整资源配置。通过动态迁移任务或弹性地增加、减少资源，系统可以更好地应对负载波动，提高系统的可伸缩性和稳定性。</span><br><span class=\"line\"></span><br><span class=\"line\">混合云和多云环境：研究工作还关注了混合云和多云环境下的资源配置问题。通过制定资源调度策略，将任务合理地分配到私有云、公有云或边缘设备等不同资源上，以充分利用各个环境的优势，提高资源利用率和应用性能。</span><br><span class=\"line\"></span><br><span class=\"line\">能源效率和环境友好：研究工作还致力于提高资源配置的能源效率和环境友好性。通过考虑能源消耗和环境影响等因素，设计和优化资源调度策略，以减少能源浪费并改善能源利用效率。</span><br><span class=\"line\"></span><br><span class=\"line\">智能优化和自适应管理：研究工作还探索了基于机器学习和人工智能的智能优化和自适应管理技术。通过对历史数据进行分析和学习，系统可以自动识别规律和模式，并根据实时的资源需求和性能指标，调整资源配置，以实现快速响应和优化管理。</span><br><span class=\"line\"></span><br><span class=\"line\">总的来说，研究基础资源配置取得了一些重要成效，为提高资源利用率、降低成本，并满足应用性能需求提供了有效的解决方案。随着技术的不断发展和创新，相信未来会有更多的成果涌现，进一步提升资源配置的效率和效果。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">资源编排（Resource Orchestration）是指在分布式计算环境中有效地管理和调度各种资源，以满足应用程序的需求。研究资源编排在以下几个方面取得了一些重要成果：</span><br><span class=\"line\"></span><br><span class=\"line\">多资源协同调度：研究工作致力于实现多种资源（例如计算资源、存储资源、网络资源等）的协同调度，确保不同类型的资源能够有效配合，提高系统整体性能。这包括设计合适的调度算法和策略，实现资源之间的有效协同工作。</span><br><span class=\"line\"></span><br><span class=\"line\">动态资源调度与迁移：研究工作还关注了动态资源调度和迁移技术，使系统能够根据实时负载情况和应用需求，动态地调整资源配置。通过实时监测系统状态，并根据预设策略进行资源调度和迁移，系统可以更好地适应变化的工作负载，提高系统的灵活性和性能。</span><br><span class=\"line\"></span><br><span class=\"line\">容器编排和微服务架构：研究工作还涉及将资源编排与容器编排和微服务架构相结合，以提高应用的部署效率和弹性。通过利用容器技术和微服务架构，可以实现资源的快速部署和扩展，简化资源编排的复杂性，并提高系统的可维护性和可靠性。</span><br><span class=\"line\"></span><br><span class=\"line\">智能资源优化和管理：研究工作还探索了智能资源优化和管理技术，包括基于机器学习和人工智能的资源编排算法。这些算法可以通过学习系统的历史数据和行为模式，实现对资源的智能调度和优化，以提高系统的性能和效率。</span><br><span class=\"line\"></span><br><span class=\"line\">安全性和隐私保护：资源编排也需要考虑安全性和隐私保护等方面的问题。研究工作致力于设计安全可靠的资源编排策略，确保敏感数据和资源受到有效的保护，防止恶意攻击和数据泄露等安全问题。</span><br><span class=\"line\"></span><br><span class=\"line\">总的来说，研究资源编排取得了一些重要成果，为提高系统性能、灵活性和安全性提供了有效的技术支持。随着技术的不断进步和创新，相信资源编排领域将会有更多的发展和突破，为分布式计算环境带来更多的好处和机遇。</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">研究安全管控方面取得了一些重要的成效，主要体现在以下几个方面：</span><br><span class=\"line\"></span><br><span class=\"line\">威胁检测和防范：研究工作在威胁检测和防范方面取得了重要进展。通过开发先进的威胁检测技术和安全防护系统，能够及时识别和应对各种网络安全威胁，包括恶意软件、网络攻击、数据泄露等，从而保护信息系统的安全性。</span><br><span class=\"line\"></span><br><span class=\"line\">身份认证和访问控制：研究工作还致力于提高身份认证和访问控制的技术水平。通过引入多因素身份认证、基于角色的访问控制（RBAC）、动态访问控制等技术手段，加强对用户身份和权限的管理，确保只有合法用户获得合法访问权限，从而保障系统的安全性。</span><br><span class=\"line\"></span><br><span class=\"line\">数据加密和隐私保护：研究工作还涉及数据加密和隐私保护方面的技术创新。通过设计高效的加密算法、安全的密钥管理机制和数据遮蔽技术，确保敏感数据在存储和传输过程中得到有效的保护，防止数据泄露和非法访问。</span><br><span class=\"line\"></span><br><span class=\"line\">安全合规和审计：研究工作还关注了安全合规和审计方面的问题。通过设计安全可追溯的系统架构和审计机制，确保系统操作和数据处理符合相关法规和标准，并且能够对系统的安全状态进行有效监控和审计，以便及时发现和应对安全问题。</span><br><span class=\"line\"></span><br><span class=\"line\">安全意识和培训：研究工作也包括安全意识和培训方面的工作。通过开展安全培训和教育活动，提高员工和用户对安全问题的认识和理解，增强整体安全意识，从而减少安全事件的发生和影响。</span><br><span class=\"line\"></span><br><span class=\"line\">总的来说，研究安全管控取得了一些重要成效，为提高信息系统的安全性和稳定性提供了有效的技术和管理支持。随着信息技术的不断发展和威胁形势的变化，安全管控领域仍然需要不断创新和进步，以适应新的挑战和需求。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">配电网资源配置，服务编排，安全管控对计算系统中的各种关键资源进行合理分配和调整，以确保计算服务管理和调度计算资源。云计算环境中对基础资源（如虚拟机、存储、网络等）进行合理配置和分配，以满足应用程序和服务的需求，并优化资源利用率、性能和成本。这一过程通常涉及以下几个方面：</span><br><span class=\"line\">1.</span><br><span class=\"line\">虚拟机配置：根据应用程序的需求，确定虚拟机的规格（CPU、内存、存储等）和数量，并进行虚拟机的创建、启动和停止管理。可以根据实际负载情况动态调整虚拟机的规模，实现弹性扩展或收缩。</span><br><span class=\"line\">2.</span><br><span class=\"line\">3.</span><br><span class=\"line\">存储配置：配置存储资源，包括块存储、对象存储、文件存储等，以确保数据的安全性、可靠性和性能。可以根据应用程序的读写需求选择合适的存储类型和容量，并进行备份和恢复管理。</span><br><span class=\"line\">4.</span><br><span class=\"line\">5.</span><br><span class=\"line\">网络配置：配置网络资源，包括虚拟网络、子网、路由器、负载均衡器等，以建立应用程序间的通信连接，并保障网络的安全性和稳定性。可以设置访问控制策略、网络隔离和流量控制等功能。</span><br><span class=\"line\">6.</span><br><span class=\"line\">7.</span><br><span class=\"line\">自动化编排：利用自动化工具和编排系统，根据应用程序的部署需求和资源约束，自动进行资源的分配和调度。可以通过容器编排技术（如Kubernetes）、自动化配置管理工具（如Ansible）等实现自动化的资源编排。</span><br><span class=\"line\">8.</span><br><span class=\"line\">9.</span><br><span class=\"line\">监控与优化：持续监控资源的使用情况和性能指标，及时发现和解决资源瓶颈和性能问题。可以利用监控系统（如Prometheus、Grafana）进行资源利用率分析，优化资源配置和调度策略。</span><br><span class=\"line\">10.</span><br><span class=\"line\">通过合理配置和编排基础资源，可以提高系统的灵活性、可靠性和性能，并实现资源的高效利用，从而为用户提供更好的云计算服务体验。</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"配电网业务应用安全管理技术研究\"><a href=\"#配电网业务应用安全管理技术研究\" class=\"headerlink\" title=\"配电网业务应用安全管理技术研究\"></a>配电网业务应用安全管理技术研究</h1><p>任务一：任亮</p>\n<p>3.4 配电网业务应用安全管理技术研究</p>\n<p>4.3 配电网业务应用安全管理技术研究</p>\n<ul>\n<li>业务应用安全动态管理模块开发<ul>\n<li>业务应用在线迁移技术研究</li>\n<li>业务应用支撑资源弹性调度策略研究</li>\n<li>业务应用自愈技术</li>\n</ul>\n</li>\n</ul>\n<p>研究业务应用在线迁移、业务应用支撑资源弹性调度策略、业务应用自愈等技术，设计并开发业务应用安全动态管理模块，实现配电网多端业务应用动态调度，支撑配电管理与用电管理的智能化、自动化发展。</p>\n<h1 id=\"安全高普适性配电网云操作系统研发\"><a href=\"#安全高普适性配电网云操作系统研发\" class=\"headerlink\" title=\"安全高普适性配电网云操作系统研发\"></a>安全高普适性配电网云操作系统研发</h1><p>任务二：王静</p>\n<p>3.5安全高普适性配电网云操作系统研发</p>\n<p>4.4安全高普适性配电网云操作系统研发</p>\n<ul>\n<li>资源配置模块开发</li>\n<li>服务编排模块开发</li>\n<li>安全管控模块开发</li>\n<li>开放服务模块开发</li>\n<li>配电网拓扑自动发现模块开发</li>\n<li>模块系统集成</li>\n</ul>\n<p>研发安全高普适性配电网云操作系统，完成计算资源安全管理模块、网络资源安全管理模块、业务应用安全动态管理模块等关键模块系统集成，实现基础资源配置管理、服务编排、安全管控、台区拓扑自动发现，支撑配电网主站、通信系统、自动化监控终端设备的安全可控运行，实现中低压台区信息基础设施、智能融合终端的国产化替代与云化调度管理，实现配电网资源的抽象及云化，能对电网低压台区多维安全监控告警，在遭受断网、断电、存储损坏3类灾难时，可通过高可用调度机制实现节点自愈，全年系统稳定运行率达99.99%，实现配电网的安全调配和运行。</p>\n<p>实现基础资源配置、基础资源服务编排、资源安全管控、资源开放服务与台区拓扑自动发现，实现配电网信息基础设施的高弹性云化调度、资源安全服务、资源节点自愈，支撑配电网的安全调配与运行。</p>\n<ul>\n<li><p>安全高普适性配电网云操作系统集成</p>\n<ul>\n<li>计算资源安全管理模块</li>\n<li>网络资源安全管理模块</li>\n<li>业务应用安全动态管理模块</li>\n<li>云操作系统服务模块<ul>\n<li>资源配置服务模块开发</li>\n<li>服务编排模块开发</li>\n<li>安全管控模块开发</li>\n<li>开放服务模块开发</li>\n<li>配电网拓扑自动发现模块开发</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"AI\"><a href=\"#AI\" class=\"headerlink\" title=\"AI\"></a>AI</h1><ul>\n<li><p>双重化冗余多机系统心跳部署模型</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li><p>混合系统可靠性测算模型</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">混合系统可靠性测算模型是用于评估同时包含多种组件（如机械、电气、软件等）的系统的可靠性的数学模型。在混合系统中，不同类型的组件之间可能存在相互作用和依赖关系，因此需要一种综合考虑各种组件及其相互关系的方法来计算系统的整体可靠性。</span><br><span class=\"line\"></span><br><span class=\"line\">这种模型通常会结合不同可靠性分析方法，如事件树分析、失效模式和效果分析（FMEA）、Markov模型等，以综合考虑各种可能的失效模式和相互影响，从而对混合系统的可靠性进行定量评估。</span><br><span class=\"line\"></span><br><span class=\"line\">这样的模型能够帮助工程师和决策者更好地了解混合系统的可靠性水平，识别潜在的风险和瓶颈，并制定合适的改进和维护策略，以确保系统在运行过程中能够达到要求的可靠性水平。</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配电网拓扑自动发现</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">拓扑自动发现是指通过自动化的方式，系统能够主动发现和绘制网络中各种设备、节点和通信连接之间的拓扑结构。这种技术通过扫描网络中的设备和通信信息，自动创建和更新网络拓扑图，有助于网络管理员或运维人员更好地了解整个网络结构，快速定位问题和故障，提高网络管理效率和可靠性。</span><br><span class=\"line\"></span><br><span class=\"line\">拓扑自动发现可以应用在各种网络环境中，包括企业网络、数据中心网络、电信网络等，对于大型复杂网络尤其有用。通过拓扑自动发现，网络管理员可以轻松地了解网络中设备的分布和连接关系，识别潜在的瓶颈和安全隐患，及时进行网络规划和优化。</span><br><span class=\"line\"></span><br><span class=\"line\">拓扑自动发现通常结合使用网络管理工具和技术，如网络扫描工具、SNMP协议、LLDP协议等，通过这些工具可以主动地发现网络中各种设备的信息，并在图形界面上呈现出网络拓扑图。这样的可视化展示有助于运维人员更直观地了解网络结构，快速识别问题，并进行快速、准确的故障排查和修复。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">实现拓扑自动发现可以通过以下步骤和方法来进行：</span><br><span class=\"line\"></span><br><span class=\"line\">使用网络扫描工具：网络扫描工具是实现拓扑自动发现的常用工具之一。这些工具可以扫描网络中各个子网的设备和连接信息，获取设备的IP地址、MAC地址、端口信息等，并根据扫描结果绘制网络拓扑图。</span><br><span class=\"line\"></span><br><span class=\"line\">使用SNMP（Simple Network Management Protocol）协议：SNMP协议是一种用于监控和管理网络设备的协议，通过使用SNMP协议，可以获取网络设备的各种信息，如设备类型、配置信息、运行状态等，从而实现拓扑自动发现。</span><br><span class=\"line\"></span><br><span class=\"line\">使用LLDP（Link Layer Discovery Protocol）协议：LLDP是一种用于发现和描述本地网络拓扑关系的协议，通过LLDP协议，网络设备可以发现相邻设备的信息，并建立网络拓扑图。</span><br><span class=\"line\"></span><br><span class=\"line\">结合设备日志和事件信息：设备日志和事件信息中包含了设备之间的通信和操作记录，结合这些信息可以帮助识别设备之间的关联性，从而更准确地构建网络拓扑结构。</span><br><span class=\"line\"></span><br><span class=\"line\">使用专业网络管理软件：有些专业的网络管理软件具有拓扑自动发现功能，可以帮助用户快速、准确地自动发现网络拓扑结构，并提供可视化的拓扑图展示。</span><br><span class=\"line\"></span><br><span class=\"line\">综合使用上述方法和工具，可以实现对网络拓扑结构的自动发现和绘制。在实施拓扑自动发现之前，需要确保网络设备支持相应的协议和功能，并合理配置网络扫描工具或网络管理软件，以实现准确、全面地收集和分析网络设备信息，从而建立完整的网络拓扑图。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li><p>配电网边缘侧应用纳管</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">配电网边缘侧业务应用纳管是指在配电网的边缘侧部署业务应用，并将其纳入到配电网管理系统中进行监控和管理。配电网边缘侧指的是离用户接入点较近、服务范围较小的区域，具有一定的自治性和分布式特点。</span><br><span class=\"line\"></span><br><span class=\"line\">配电网边缘侧业务应用包括但不限于分布式能源接入管理、储能系统控制、智能配电设备监控等。通过在边缘侧部署这些业务应用，可以实现对配电网的动态监测和调度，提高配电网的安全性、可靠性和效率。</span><br><span class=\"line\"></span><br><span class=\"line\">纳管则是指将这些边缘侧业务应用接入到配电网管理系统中，进行统一的监控和管理。通过纳管，可以实现对边缘侧业务应用的集中监控、远程调度和数据分析，从而更好地把握配电网运行状态，及时发现和处理问题，提高配电网的运行水平和管理效率。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">实现边缘侧业务应用纳管（Edge Computing）可以通过以下步骤和方法来进行：</span><br><span class=\"line\"></span><br><span class=\"line\">确定需求和目标：首先需要明确边缘侧业务应用纳管的具体需求和目标，包括要纳管的业务应用类型、规模、部署位置等信息，以及实现纳管的目的和期望效果。</span><br><span class=\"line\"></span><br><span class=\"line\">选取合适的边缘侧管理平台：选择适合自身业务需求的边缘侧管理平台是实现纳管的关键。这些平台通常提供边缘计算资源管理、监控、故障排除、安全管理等功能，帮助用户统一管理和监控边缘侧业务应用。</span><br><span class=\"line\"></span><br><span class=\"line\">部署和配置纳管系统：根据选取的边缘侧管理平台，进行系统部署和基础配置，确保系统正常运行。这包括配置边缘设备与管理平台的通信、建立纳管系统和应用程序之间的连接等。</span><br><span class=\"line\"></span><br><span class=\"line\">注册和认证边缘设备：将需要纳管的边缘设备注册到管理平台，进行认证和授权，以便管理平台能够对边缘设备进行监控、配置和管理。</span><br><span class=\"line\"></span><br><span class=\"line\">部署业务应用程序：将要纳管的业务应用程序部署到边缘设备中，确保应用程序能够正常运行，并与管理平台进行通信。</span><br><span class=\"line\"></span><br><span class=\"line\">监控和管理业务应用程序：通过边缘侧管理平台监控和管理业务应用程序的运行状态、性能指标、安全情况等，及时发现和解决问题，确保业务正常运行。</span><br><span class=\"line\"></span><br><span class=\"line\">完善安全保障措施：在实现边缘侧业务应用纳管的过程中，需注意加强安全管理工作，包括数据加密、访问控制、漏洞修复等，确保业务数据和系统安全。</span><br><span class=\"line\"></span><br><span class=\"line\">通过以上步骤和方法，可以有效实现对边缘侧业务应用的纳管，提高业务运行效率、减少故障发生，提升系统稳定性和安全性。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">终端节点：由各种物联网设备（如传感器、RFID标签、摄像头、智能手机等）组成，主要完成收集原始数据并上报的功能。在终端层中，只需提供各种物联网设备的感知能力，而不需要计算能力。</span><br><span class=\"line\">边缘计算节点：边缘计算节点通过合理部署和调配网络边缘侧节点的计算和存储能力，实现基础服务响应。</span><br><span class=\"line\">网络节点：负责将边缘计算节点处理后的有用数据上传至云计算节点进行分析处理。</span><br><span class=\"line\">云计算节点：边缘计算层的上报数据将在云计算节点进行永久性存储，同时边缘计算节点无法处理的分析任务和综合全局信息的处理任务仍旧需要在云计算节点完成。除此之外，云计算节点还可以根据网络资源分布动态调整边缘计算层的部署策略和算法。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在OpenStack中，资源管理是指对计算、存储、网络等各种资源进行有效管理和监控，以确保资源的高效利用和系统的稳定运行。OpenStack提供了一系列工具和服务，用于实现资源管理功能，包括但不限于以下几个方面：</span><br><span class=\"line\"></span><br><span class=\"line\">计算资源管理： 在OpenStack中，使用计算服务（Nova）可以管理和调度计算资源，包括虚拟机实例的创建、启动、停止、迁移等操作。计算资源管理涉及到资源的动态调度、负载均衡和故障恢复等功能，以确保计算资源的高可用性和性能。</span><br><span class=\"line\"></span><br><span class=\"line\">存储资源管理： OpenStack提供了存储服务（Cinder、Swift、Manila等），用户可以通过这些服务管理块存储、对象存储和文件存储等不同类型的存储资源。存储资源管理包括存储容量的分配、数据备份与恢复、存储策略的设置等操作。</span><br><span class=\"line\"></span><br><span class=\"line\">网络资源管理： 使用网络服务（Neutron）可以管理和配置网络资源，包括虚拟网络的创建、子网的划分、路由的配置等。网络资源管理涉及到网络拓扑的设计、安全组规则的设置、负载均衡的配置等功能，以确保网络资源的稳定和安全。</span><br><span class=\"line\"></span><br><span class=\"line\">身份认证和权限管理： OpenStack提供身份认证服务（Keystone），用户可以通过身份认证机制对资源进行访问控制和权限管理。身份认证和权限管理是保障资源安全的重要环节，可以实现对资源的精细化控制和监管。</span><br><span class=\"line\"></span><br><span class=\"line\">监控和报警： OpenStack提供监控和告警服务，用户可以监控各种资源的使用情况和性能表现，并设置告警规则，及时发现和处理资源的异常情况，保障系统的稳定运行。</span><br><span class=\"line\"></span><br><span class=\"line\">通过以上资源管理功能，OpenStack可以帮助用户有效管理和利用各种云计算资源，实现资源的高效分配、灵活调度和监控管理，为应用部署和运维提供支持和保障。资源管理是OpenStack中的一个核心功能，对于构建稳定、可靠的云计算环墋至关重要。</span><br></pre></td></tr></table></figure></li>\n<li><p>资源配置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">资源配置管理指在系统中的基础资源进行管理和配置，以确保系统运行稳定、高效，并满足用户需求的过程。基础资源通常包括计算资源（CPU、内存、存储）、网络资源、操作系统和应用软件等。</span><br><span class=\"line\">1）计算资源配置</span><br><span class=\"line\">计算资源配置是指对计算系统中的各种关键资源进行合理分配和调整，以确保系统运行顺畅、性能优化、成本控制和资源利用率最大化的过程。可以使用计算服务管理和调度计算资源。计算资源管理涉及到资源的动态调度、负载均衡和故障恢复等功能，以确保计算资源的高可用性和性能。</span><br><span class=\"line\">计算资源调度算法是云计算和分布式系统中的关键组成部分，用于有效地管理和调度计算资源，提高系统的性能和资源利用率。以下是一些常见的计算资源调度算法：</span><br><span class=\"line\"></span><br><span class=\"line\">先来先服务（First Come First Serve, FCFS）：</span><br><span class=\"line\"></span><br><span class=\"line\">最简单的调度算法，按照作业到达的先后顺序进行调度。适用于简单的任务调度场景，但可能导致长作业等待时间和低效的资源利用。</span><br><span class=\"line\">短作业优先（Shortest Job First, SJF）：</span><br><span class=\"line\"></span><br><span class=\"line\">在每次调度时选择预期运行时间最短的作业进行调度。可以减少平均等待时间和提高系统吞吐量。</span><br><span class=\"line\">最高响应比优先（Highest Response Ratio Next, HRRN）：</span><br><span class=\"line\"></span><br><span class=\"line\">结合作业的等待时间和预期运行时间，计算响应比（等待时间+预期运行时间/预期运行时间），选择响应比最高的作业进行调度。</span><br><span class=\"line\">最短剩余时间（Shortest Remaining Time, SRT）：</span><br><span class=\"line\"></span><br><span class=\"line\">在作业运行过程中根据作业的剩余执行时间选择最短的作业进行调度，适用于动态作业的调度。</span><br><span class=\"line\">最高优先级优先（Highest Priority First, HPF）：</span><br><span class=\"line\"></span><br><span class=\"line\">每个作业都有一个优先级，根据作业的优先级进行调度。高优先级作业先执行，适用于优先级任务调度场景。</span><br><span class=\"line\">轮转调度（Round Robin）：</span><br><span class=\"line\"></span><br><span class=\"line\">将CPU时间分成时间片，每个作业在一个时间片内执行一定时间，然后切换到下一个作业。循环执行所有作业，适用于多道程序设计。</span><br><span class=\"line\">负载均衡调度算法：</span><br><span class=\"line\"></span><br><span class=\"line\">通过监控系统负载情况，将任务均匀分配到各个计算节点上，保持系统资源的平衡利用。</span><br><span class=\"line\">智能调度算法：</span><br><span class=\"line\"></span><br><span class=\"line\">基于机器学习、人工智能等技术，根据历史数据和实时情况进行智能化的资源调度，提高系统的自适应性和性能。</span><br><span class=\"line\">这些计算资源调度算法可以根据不同的场景和需求进行选择和应用，帮助优化资源利用、提高系统性能和响应速度。综合考虑作业特性、系统负载和资源限制等因素，选择合适的调度算法对系统的效率和性能至关重要。</span><br><span class=\"line\"></span><br><span class=\"line\">2）网络资源配置</span><br><span class=\"line\">使用网络服务（Neutron）可以管理和配置网络资源，包括虚拟网络的创建、子网的划分、路由的配置等。网络资源管理涉及到网络拓扑的设计、安全组规则的设置、负载均衡的配置等功能，以确保网络资源的稳定和安全。</span><br><span class=\"line\"></span><br><span class=\"line\">3）存储资源配置</span><br><span class=\"line\">使用存储服务管理块存储、对象存储和文件存储等不同类型的存储资源。存储资源管理包括存储容量的分配、数据备份与恢复、存储策略的设置等操作。</span><br><span class=\"line\">存储资源的配置和调度在云计算和虚拟化环境中起着至关重要的作用，对数据存储、访问和性能具有直接影响。以下是关于存储资源配置和调度的一些重要考虑因素和实践方法：</span><br><span class=\"line\"></span><br><span class=\"line\">存储资源类型：</span><br><span class=\"line\"></span><br><span class=\"line\">存储资源可以包括本地硬盘、网络附加存储（如网络文件系统、对象存储、块存储等）等不同类型。根据应用需求和数据访问模式选择合适的存储类型。</span><br><span class=\"line\">存储卷管理：</span><br><span class=\"line\"></span><br><span class=\"line\">使用存储卷管理工具（如LVM、RAID）来管理和配置存储卷，实现数据的分区、备份和恢复，确保数据的安全性和可靠性。</span><br><span class=\"line\">存储性能优化：</span><br><span class=\"line\"></span><br><span class=\"line\">针对不同的应用需求和数据访问模式，对存储资源进行性能优化，包括调整存储缓存、块大小、读写操作优化等，提高数据访问效率。</span><br><span class=\"line\">存储虚拟化：</span><br><span class=\"line\"></span><br><span class=\"line\">使用存储虚拟化技术（如软件定义存储、存储虚拟化设备）将物理存储资源抽象为逻辑存储池，实现多个虚拟机实例共享同一存储资源，提高存储资源的利用率和灵活性。</span><br><span class=\"line\">存储负载均衡：</span><br><span class=\"line\"></span><br><span class=\"line\">在多台服务器上分布存储资源，实现存储负载均衡，避免单点故障和瓶颈，提高系统的可靠性和性能。</span><br><span class=\"line\">存储备份和恢复：</span><br><span class=\"line\"></span><br><span class=\"line\">实现存储资源的定期备份和恢复，保障数据的安全和完整性，应对意外数据丢失或损坏的情况。</span><br><span class=\"line\">自动化存储调度：</span><br><span class=\"line\"></span><br><span class=\"line\">使用自动化存储调度工具（如存储管理系统、自动化存储平台）实现存储资源的动态调度和优化，根据实时需求分配存储资源，提高存储资源的利用率。</span><br><span class=\"line\">数据迁移和迁移：</span><br><span class=\"line\"></span><br><span class=\"line\">对存储资源进行数据迁移和迁移，根据数据的访问频率和重要性进行合理的存储调度，优化存储资源的使用和管理。</span><br><span class=\"line\">通过合理配置和调度存储资源，可以提高数据的安全性、可靠性和性能，确保系统在处理大量数据和高并发访问时能够高效运行，并满足用户需求。</span><br></pre></td></tr></table></figure>\n\n</li>\n<li><p>服务编排</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">服务编排（Service Orchestration）是指将多个服务或应用程序按照一定的逻辑顺序和规则进行组合、配置和管理，以实现复杂的业务流程或系统任务。在服务编排中，不同的服务或应用程序之间会以一定的方式进行互动和协同工作，以达到特定的业务目标或系统运行需求。</span><br><span class=\"line\"></span><br><span class=\"line\">服务编排通常涉及到以下几个重要概念和过程：</span><br><span class=\"line\"></span><br><span class=\"line\">服务定义：将需要的服务或应用程序进行定义和描述，包括服务的输入参数、输出结果、执行逻辑、运行环境等信息。</span><br><span class=\"line\"></span><br><span class=\"line\">服务组合：将定义好的服务按照一定的组合规则进行组合，形成一个服务流程或任务流程。在服务编排中，可能涉及到顺序执行、并发执行、条件分支等方式来组合多个服务。</span><br><span class=\"line\"></span><br><span class=\"line\">服务配置：对组合好的服务流程进行配置和参数设置，以适应特定的场景或需求。这包括服务间的通信设置、数据传递、资源调度等配置。</span><br><span class=\"line\"></span><br><span class=\"line\">服务调度与执行：根据服务编排的规则和配置信息，将服务流程交给服务编排引擎或执行引擎来调度和执行。执行过程中，服务之间会相互调用、交换数据，并按照事先定义的流程进行处理。</span><br><span class=\"line\"></span><br><span class=\"line\">监控与管理：实时监控服务编排的执行过程，记录日志、收集指标，及时发现和处理异常情况。同时，根据监控数据和分析结果，可以对服务编排进行性能优化或资源调整。</span><br><span class=\"line\"></span><br><span class=\"line\">服务编排可以应用于诸多场景，如自动化工作流程、云原生应用开发、微服务架构等。通过服务编排，用户可以更加灵活、高效地管理和部署多个服务，实现复杂的业务逻辑和系统任务。</span><br></pre></td></tr></table></figure></li>\n<li><p>安全管控模块</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在云计算环境中，安全管控是非常重要的，以确保系统和数据的安全性、保密性和完整性。以下是一些常见的安全管控措施和最佳实践：</span><br><span class=\"line\"></span><br><span class=\"line\">身份和访问管理：</span><br><span class=\"line\"></span><br><span class=\"line\">实施严格的身份验证和访问控制，确保只有经授权的用户可以访问和管理计算资源。使用多因素身份验证（MFA）以增强安全性。</span><br><span class=\"line\">网络安全：</span><br><span class=\"line\"></span><br><span class=\"line\">配置网络防火墙、安全组和网络隔离策略，限制网络流量和通信，防止未经授权的访问和攻击。</span><br><span class=\"line\">数据加密：</span><br><span class=\"line\"></span><br><span class=\"line\">对数据在存储和传输过程中进行加密，确保数据的保密性。使用加密算法保护数据，尤其是敏感信息。</span><br><span class=\"line\">漏洞管理：</span><br><span class=\"line\"></span><br><span class=\"line\">定期进行安全漏洞扫描和漏洞管理，及时修复系统和应用程序中的漏洞，以减少系统面临的风险。</span><br><span class=\"line\">日志和审核：</span><br><span class=\"line\"></span><br><span class=\"line\">设置日志记录和审核机制，跟踪系统和用户的活动，帮助及时检测和响应安全事件。</span><br><span class=\"line\">灾难恢复和备份：</span><br><span class=\"line\"></span><br><span class=\"line\">制定灾难恢复计划，并定期进行数据备份，以应对系统故障、数据丢失或其他不可预见的情况。</span><br><span class=\"line\">安全培训：</span><br><span class=\"line\"></span><br><span class=\"line\">对员工进行安全意识培训，教育他们如何识别和应对安全威胁，降低员工造成的安全风险。</span><br><span class=\"line\">合规性和标准：</span><br><span class=\"line\"></span><br><span class=\"line\">遵守相关法规和标准，如GDPR、HIPAA等，确保系统设计和运营符合法律要求和行业标准。</span><br><span class=\"line\">安全技术：</span><br><span class=\"line\"></span><br><span class=\"line\">使用安全工具和技术，如防火墙、入侵检测系统（IDS）、安全信息与事件管理（SIEM）等，增强系统的安全性。</span><br><span class=\"line\">综合上述安全管控措施和最佳实践，用户可以构建安全可靠的云计算环境，有效保护系统和数据免受安全威胁和攻击。持续加强安全管理和监控，及时响应安全事件，是确保云计算环境安全的关键。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">将基础资源配置和管理、资源编排以及安全管控组合运用，在计算资源和数据安全方面具有以下优点：</span><br><span class=\"line\"></span><br><span class=\"line\">资源最佳利用：</span><br><span class=\"line\"></span><br><span class=\"line\">通过资源编排和基础资源配置的优化，可以实现对计算资源的灵活调度和配置，最大限度地提高资源利用率，提升系统性能和效率。</span><br><span class=\"line\">安全性加强：</span><br><span class=\"line\"></span><br><span class=\"line\">结合安全管控机制，对资源访问、数据传输和存储进行加密和监控，防范安全威胁和数据泄露，保障计算资源和信息安全。</span><br><span class=\"line\">风险降低：</span><br><span class=\"line\"></span><br><span class=\"line\">基础资源配置和管理可以确保系统的正常运行和稳定性，资源编排可以按需分配资源，安全管控可以预防和应对安全威胁，降低系统运行风险。</span><br><span class=\"line\">自动化管理：</span><br><span class=\"line\"></span><br><span class=\"line\">结合资源编排技术，可以实现自动化的资源调度和管理，提高系统的自动化程度，减少人为错误和操作成本。</span><br><span class=\"line\">合规性和可管理性：</span><br><span class=\"line\"></span><br><span class=\"line\">强化安全管控机制，确保系统和数据符合合规标准和法规要求，同时实现资源的有效管理和监控，保持系统的可管理性。</span><br><span class=\"line\">响应灵活性：</span><br><span class=\"line\"></span><br><span class=\"line\">结合资源编排技术，可以根据不同的需求快速调整资源配置和部署，灵活应对系统负载变化和业务需求，提高系统的响应能力。</span><br><span class=\"line\">综合应用基础资源配置和管理、资源编排，以及安全管控，可以有效提升系统的可靠性、安全性和效率，满足不同业务场景下的需求和挑战。持续优化资源管理和安全机制，是保障计算资源和数据安全的重要措施，为系统的稳定运行和业务发展提供有力支持。</span><br></pre></td></tr></table></figure></li>\n<li><p>研发配电云系统集成</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">云系统集成指的是将多个云服务、应用程序或系统进行连接和整合，以实现数据流畅、信息交换和协同工作的过程。在云计算环境下，云系统集成变得更加重要和复杂，因为企业通常会使用多个云服务提供商的服务，并需要将它们整合在一起以实现协作和数据共享。以下是一些常见的云系统集成方法和实践：</span><br><span class=\"line\"></span><br><span class=\"line\">API集成：</span><br><span class=\"line\">使用应用程序编程接口（API）实现不同云服务和应用程序之间的通信和数据交换。通过调用API来实现系统之间的集成和数据传输。</span><br><span class=\"line\"></span><br><span class=\"line\">集成平台：</span><br><span class=\"line\">使用集成平台和工具（如MuleSoft、Informatica、Boomi）来简化和加速系统集成的过程。这些平台提供了丰富的连接器和工作流程，可帮助企业构建复杂的集成方案。</span><br><span class=\"line\"></span><br><span class=\"line\">事件驱动集成：</span><br><span class=\"line\">基于事件驱动架构（Event-Driven Architecture）实现系统之间的集成。通过订阅和发布事件来传递信息和触发行为，实现异步和实时的系统集成。</span><br><span class=\"line\"></span><br><span class=\"line\">数据同步和复制：</span><br><span class=\"line\">使用数据同步和复制工具（如AWS Data Pipeline、Google Cloud Dataflow）将数据从一个云服务同步到另一个云服务，保持数据的一致性和可用性。</span><br><span class=\"line\"></span><br><span class=\"line\">身份和访问管理集成：</span><br><span class=\"line\">集成身份和访问管理（IAM）系统，实现用户认证和授权在不同云服务和系统之间的一致性和安全性。</span><br><span class=\"line\"></span><br><span class=\"line\">业务流程集成：</span><br><span class=\"line\">将不同云系统的业务流程进行集成和优化，实现跨系统的自动化工作流程和协同工作。</span><br><span class=\"line\"></span><br><span class=\"line\">监控和管理集成：</span><br><span class=\"line\">集成监控和管理工具，实现对多个云系统的统一监控和管理，以便及时发现和解决问题。</span><br><span class=\"line\"></span><br><span class=\"line\">安全集成：</span><br><span class=\"line\">实现安全事件和日志的集中管理和分析，确保在不同云系统之间的数据传输和存储安全可靠。</span><br><span class=\"line\"></span><br><span class=\"line\">综合利用上述云系统集成方法和实践，企业可以实现多个云服务和应用程序之间的无缝连接和协同工作，提高系统的效率和灵活性，实现数字化转型和业务创新。同时，云系统集成也需要考虑安全、可靠性和性能等方面，确保整个系统的正常运行和数据的安全保护。</span><br></pre></td></tr></table></figure></li>\n<li><p>展开配电网云操作系统十点应用部署方案</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在云计算环境中，部署方案通常涉及到如何将应用程序和服务部署到云平台上，以便实现高可用性、可伸缩性和弹性的运行。以下是一般情况下的云计算部署方案：</span><br><span class=\"line\"></span><br><span class=\"line\">云服务器部署：</span><br><span class=\"line\">使用云服务提供商（如AWS、Azure、Google Cloud等）提供的虚拟机实例部署应用程序。可以根据需求选择不同规格和配置的虚拟机，将应用程序和服务部署到这些虚拟机上。</span><br><span class=\"line\"></span><br><span class=\"line\">容器化部署：</span><br><span class=\"line\">使用容器化技术（如Docker、Kubernetes）将应用程序打包为容器镜像，然后在云平台上部署和管理这些容器。容器化部署可以提供更高的灵活性和可移植性。</span><br><span class=\"line\"></span><br><span class=\"line\">Serverless部署：</span><br><span class=\"line\">使用Serverless架构（如AWS Lambda、Azure Functions）将应用程序拆分成小的函数，并按需在云平台上执行。Serverless部署无需管理服务器和基础设施，可以实现按需扩展和减少成本。</span><br><span class=\"line\"></span><br><span class=\"line\">多区域和跨区域部署：</span><br><span class=\"line\">在多个云区域或跨多个云服务提供商的区域中部署应用程序，以提高系统的可用性和容错能力。跨区域部署可以减少因单一区域故障而导致的服务中断。</span><br><span class=\"line\"></span><br><span class=\"line\">自动化部署和持续集成：</span><br><span class=\"line\">使用自动化部署工具（如Jenkins、GitLab CI/CD）实现持续集成和持续部署，自动化构建、测试和部署应用程序，提高部署效率和质量。</span><br><span class=\"line\"></span><br><span class=\"line\">监控和日志管理：</span><br><span class=\"line\">部署监控和日志管理工具（如Prometheus、ELK Stack）来监视应用程序的性能和运行情况，及时发现和解决问题。</span><br><span class=\"line\"></span><br><span class=\"line\">安全和权限管理：</span><br><span class=\"line\">部署安全措施（如防火墙、身份认证、加密）和权限管理机制，保障应用程序和数据的安全，防止安全漏洞和攻击。</span><br><span class=\"line\"></span><br><span class=\"line\">综合考虑上述云计算部署方案，可以根据具体的业务需求和情况选择适合的部署方式，并借助云计算的优势实现灵活、高效、安全的应用部署和运行。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">系统集成和部署是两个密切相关且互相依赖的概念，在软件开发和 IT 领域中起着至关重要的作用。以下是系统集成和部署之间的关系：</span><br><span class=\"line\"></span><br><span class=\"line\">系统集成：</span><br><span class=\"line\"></span><br><span class=\"line\">系统集成是将不同系统、软件、服务或组件整合在一起，使它们能够相互通信、协同工作和共享数据。集成的目标是实现系统之间的无缝连接和数据交流，以实现更高的效率、可靠性和灵活性。系统集成侧重于整合系统的功能和数据流程，确保系统间协作无缝。</span><br><span class=\"line\">系统部署：</span><br><span class=\"line\"></span><br><span class=\"line\">系统部署是将经过集成的系统或软件部署到目标环境中，使其能够正常运行和提供服务。部署的目标是将开发完成的系统、应用程序或服务部署到生产环境中，并确保其稳定性、安全性和可用性。部署包括安装、配置、测试、启动和监控系统。</span><br><span class=\"line\">关系及交互作用：</span><br><span class=\"line\"></span><br><span class=\"line\">前期准备：在系统部署之前，需要进行系统集成的工作，确保不同系统之间能够正常通信和协作。</span><br><span class=\"line\">集成调试：在系统集成阶段，会对整合后的系统进行调试和测试，以确保系统的各个部分能够正常运行。</span><br><span class=\"line\">部署环境：系统集成完成后，需要将整合后的系统部署到目标环境中，进行安装、配置和测试。</span><br><span class=\"line\">监控和维护：部署完成后，需要对系统进行定期监控和维护，确保系统的稳定性和性能。</span><br><span class=\"line\">总体而言，系统集成和部署是软件开发和 IT 管理中不可或缺的两个环节，它们紧密相连，相辅相成，共同确保系统的正常运行和服务的可靠提供。在软件开发和项目实施过程中，系统集成和部署都需要细致的规划、有序的执行和持续的跟踪监控，以确保项目的顺利完成和系统的有效运行。</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>私有云环境部署</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">选择适当的私有云平台</span><br><span class=\"line\">选择适合自身需求的私有云平台，如OpenStack、VMware vSphere等，确保平台提供足够的计算、存储和网络资源来支持应用程序的部署和运行。</span><br><span class=\"line\"></span><br><span class=\"line\">创建应用程序镜像</span><br><span class=\"line\">将应用程序打包为镜像（如Docker镜像），确保应用程序的依赖项和配置都包含在内，以便在私有云环境中快速部署和扩展。</span><br><span class=\"line\"></span><br><span class=\"line\">配置部署环境</span><br><span class=\"line\">在私有云中创建虚拟机、容器集群或Serverless环境，配置所需的计算、存储和网络资源，确保部署环境能够满足应用程序的需求。</span><br><span class=\"line\"></span><br><span class=\"line\">部署应用程序</span><br><span class=\"line\">将应用程序镜像部署到私有云环境中，可以通过虚拟机、容器或Serverless函数等方式进行部署，并设置适当的网络访问权限和资源配额。</span><br><span class=\"line\"></span><br><span class=\"line\">配置应用程序</span><br><span class=\"line\">针对具体应用程序的需求，进行配置文件的定制和参数设置，如数据库连接信息、日志输出配置等，确保应用程序能够正常运行。</span><br><span class=\"line\"></span><br><span class=\"line\">监控和管理</span><br><span class=\"line\">部署应用程序后，需要设置监控和日志管理系统，实时监测应用程序的运行状态和性能指标，及时发现并解决问题。</span><br><span class=\"line\"></span><br><span class=\"line\">安全加固</span><br><span class=\"line\">在部署应用程序之前，要确保私有云环境的安全性，包括网络安全、身份认证、数据加密等措施，保护应用程序和数据的安全。</span><br><span class=\"line\"></span><br><span class=\"line\">持续优化</span><br><span class=\"line\">定期对应用程序进行性能优化、资源调整和系统升级，保持应用程序的高可用性和稳定性。</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">云操作系统部署是在云环境中创建和配置操作系统实例的过程。以下是一些常见的云操作系统部署方案和步骤：</span><br><span class=\"line\"></span><br><span class=\"line\">选择云服务提供商：</span><br><span class=\"line\"></span><br><span class=\"line\">选择适合自身需求的云服务提供商，如AWS、Azure、Google Cloud等。不同云服务提供商提供的操作系统镜像和部署方式可能有所不同。</span><br><span class=\"line\"></span><br><span class=\"line\">选择操作系统镜像：</span><br><span class=\"line\"></span><br><span class=\"line\">在云服务提供商的控制台中选择要部署的操作系统镜像，通常有多个选项可供选择，包括不同版本和发行版的操作系统。</span><br><span class=\"line\">创建虚拟机实例：</span><br><span class=\"line\"></span><br><span class=\"line\">在云服务提供商的控制台中创建虚拟机实例，并选择相应的操作系统镜像作为实例的基础。设置实例的规格、区域、网络配置等参数。</span><br><span class=\"line\">配置网络和安全组：</span><br><span class=\"line\"></span><br><span class=\"line\">配置虚拟机实例的网络设置，包括公有 IP 地址、子网、防火墙规则等。确保虚拟机能够与外部网络通信并受到安全保护。</span><br><span class=\"line\">连接到虚拟机：</span><br><span class=\"line\"></span><br><span class=\"line\">使用SSH、RDP等远程连接工具连接到虚拟机实例，进行操作系统的初始化配置，如设置用户账号、密码、网络配置等。</span><br><span class=\"line\">安装必要的软件和组件：</span><br><span class=\"line\"></span><br><span class=\"line\">根据应用程序的需求，在操作系统中安装所需的软件包、库文件和依赖项，以便后续部署应用程序。</span><br><span class=\"line\">配置系统参数：</span><br><span class=\"line\"></span><br><span class=\"line\">针对具体应用场景和性能需求，调整操作系统的参数设置，如内存管理、磁盘配置、网络优化等，以提升系统性能和稳定性。</span><br><span class=\"line\">部署应用程序：</span><br><span class=\"line\"></span><br><span class=\"line\">将应用程序部署到云操作系统实例中，并配置相应的服务端口、权限和访问控制，确保应用程序能够正常运行。</span><br><span class=\"line\">监控和维护：</span><br><span class=\"line\"></span><br><span class=\"line\">设置监控和警报系统，实时监测云操作系统实例的状态和性能指标，及时发现并解决问题。定期进行系统更新和维护，确保系统安全和稳定性。</span><br><span class=\"line\">云操作系统部署是云计算环境中非常基础和重要的一环，正确的部署方式和配置能够有效提高系统的安全性、可靠性和性能。在部署过程中要注意备份数据、遵循最佳实践和安全策略，以确保云操作系统的稳定运行和应用程序的正常服务。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在不同区域之间设置数据复制和同步机制，以确保数据在不同区域之间的一致性和可用性。可以使用云服务提供商提供的数据库复制功能或者自行开发数据同步方案。</span><br><span class=\"line\"></span><br><span class=\"line\">负载均衡和流量管理：使用负载均衡器和流量管理工具来分发流量到不同区域的实例和服务中，以提高系统的性能和可用性。</span><br><span class=\"line\"></span><br><span class=\"line\">跨区域容灾设计：设计容灾方案，确保即使在一个区域发生故障时，系统依然可以继续提供服务。这可能涉及到备份实例、自动切换流量到其他区域、以及快速恢复服务的计划。</span><br><span class=\"line\"></span><br><span class=\"line\">全局服务发现和配置管理：采用全局服务发现和配置管理工具，确保不同区域的服务能够相互发现和通信，并且在配置更新时能够同步更新到所有区域。</span><br><span class=\"line\"></span><br><span class=\"line\">安全和身份验证：在跨区域部署中要特别注意安全和身份验证的设置，确保数据在不同区域之间的传输和存储是安全的，同时要对访问权限进行严格控制。</span><br><span class=\"line\"></span><br><span class=\"line\">监控和故障排除：建立跨区域的监控系统，及时发现并解决不同区域的故障和问题，确保系统的稳定性和可用性。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">自动更新设置：</span><br><span class=\"line\"></span><br><span class=\"line\">操作系统级别的设置：现代操作系统通常提供了自动更新功能，用户可以在设置中配置自动更新选项，包括自动下载更新、自动安装更新等。</span><br><span class=\"line\">更新策略：用户可以根据需要选择更新策略，如自动更新所有可用更新、仅安全更新、仅重要更新等。</span><br><span class=\"line\">安全更新机制：</span><br><span class=\"line\"></span><br><span class=\"line\">数字签名和验证：操作系统更新应该具有数字签名，以确保其完整性和来源的可信性。</span><br><span class=\"line\">安全传输：更新应该通过加密和安全的传输协议进行传输，以防止中间人攻击和数据篡改。</span><br><span class=\"line\">自动部署工具：</span><br><span class=\"line\"></span><br><span class=\"line\">配置管理工具：使用像Ansible、Chef、Puppet等配置管理工具来自动化操作系统的部署和配置。</span><br><span class=\"line\">镜像化部署：将操作系统配置为镜像，通过自动化工具进行快速部署，如使用Docker和Kubernetes进行容器化部署。</span><br><span class=\"line\">测试和回滚机制：</span><br><span class=\"line\"></span><br><span class=\"line\">自动化测试：在部署更新之前，应该进行自动化测试以确保更新不会引入新的问题或破坏系统的正常运行。</span><br><span class=\"line\">回滚策略：在更新失败或导致问题时，应该有自动回滚机制，以快速恢复系统到之前的稳定状态。</span><br><span class=\"line\">监控和报警：</span><br><span class=\"line\"></span><br><span class=\"line\">系统监控：设置监控系统来监视操作系统的运行状态和更新过程，及时发现问题并采取措施。</span><br><span class=\"line\">异常报警：配置报警机制，以便在更新过程中出现异常时能够及时通知相关人员。</span><br><span class=\"line\">用户参与和控制：</span><br><span class=\"line\"></span><br><span class=\"line\">通知机制：在自动更新和部署过程中，向用户提供通知和提示，让用户了解何时进行更新以及更新的内容。</span><br><span class=\"line\">手动干预选项：为用户提供手动干预选项，允许他们暂停、延迟或手动触发更新过程。</span><br><span class=\"line\">综上所述，操作系统的自动更新和部署是通过自动化工具和流程来确保系统安全和稳定性的重要措施。在实施过程中，需要考虑安全性、可靠性、用户参与等因素，以确保更新和部署过程的顺利进行。</span><br></pre></td></tr></table></figure></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">密码验证：</span><br><span class=\"line\"></span><br><span class=\"line\">用户名和密码：最基本的身份验证方式，用户使用唯一标识（用户名）和对应的密码进行登录验证。</span><br><span class=\"line\">多因素认证（MFA）：结合多种验证因素，如密码、手机验证码、硬件令牌等，提高身份验证的安全性。</span><br><span class=\"line\">公钥基础设施（PKI）：</span><br><span class=\"line\"></span><br><span class=\"line\">使用数字证书和公钥加密技术进行身份验证和通信加密，确保通信的机密性和完整性。</span><br><span class=\"line\">单点登录（SSO）：</span><br><span class=\"line\"></span><br><span class=\"line\">用户只需一次登录，即可访问多个相关系统或应用程序，提高用户体验的同时减少了密码管理的复杂性。</span><br><span class=\"line\">访问控制列表（ACL）：</span><br><span class=\"line\"></span><br><span class=\"line\">资源所有者定义允许或拒绝特定用户或用户组对资源的访问权限。</span><br><span class=\"line\">角色 Based Access Control（RBAC）：</span><br><span class=\"line\"></span><br><span class=\"line\">将权限分配给角色，然后将用户分配到适当的角色上，简化权限管理。</span><br><span class=\"line\">属性 Based Access Control（ABAC）：</span><br><span class=\"line\"></span><br><span class=\"line\">根据用户和资源的属性（如用户所在部门、访问时间等）来动态决定访问权限。</span><br><span class=\"line\">访问审计：</span><br><span class=\"line\"></span><br><span class=\"line\">记录用户对系统资源的访问活动，以便事后审计和监控。</span><br><span class=\"line\">生命周期管理：</span><br><span class=\"line\"></span><br><span class=\"line\">对用户账户和权限进行全面的生命周期管理，包括创建、修改、暂停、删除等操作，以确保及时撤销不必要的权限。</span><br><span class=\"line\">API 访问控制：</span><br><span class=\"line\"></span><br><span class=\"line\">对外部应用程序或服务通过 API 访问系统资源进行访问控制，并根据需要进行身份验证和授权。</span><br><span class=\"line\">安全标准和协议：</span><br><span class=\"line\"></span><br><span class=\"line\">使用安全标准和协议（如OAuth、OpenID Connect等）来实现身份验证和授权，确保安全的身份验证和访问控制流程。</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">对称加密：</span><br><span class=\"line\"></span><br><span class=\"line\">在对称加密中，相同的密钥用于加密和解密数据。常见的对称加密算法包括 DES（数据加密标准）、AES（高级加密标准）等。</span><br><span class=\"line\">非对称加密：</span><br><span class=\"line\"></span><br><span class=\"line\">非对称加密使用一对密钥，即公钥和私钥。公钥用于加密数据，私钥用于解密数据。常见的非对称加密算法包括 RSA、ECC（椭圆曲线加密）等。</span><br><span class=\"line\">哈希函数：</span><br><span class=\"line\"></span><br><span class=\"line\">哈希函数将输入数据映射为固定长度的哈希值。哈希函数是单向的，不可逆的，因此通常用于验证数据的完整性而不是加密数据本身。常见的哈希函数包括 SHA-256、MD5 等。</span><br><span class=\"line\">混合加密：</span><br><span class=\"line\"></span><br><span class=\"line\">混合加密是将对称加密和非对称加密结合使用的一种方式。通常使用非对称加密来传输对称加密所需的密钥，然后使用对称加密来加密实际的数据传输过程。</span><br><span class=\"line\">量子加密：</span><br><span class=\"line\"></span><br><span class=\"line\">量子加密利用量子力学原理来保护数据的安全性，其中包括量子密钥分发（QKD）等技术，可以抵御量子计算的攻击。</span><br><span class=\"line\">深度学习加密：</span><br><span class=\"line\"></span><br><span class=\"line\">最近出现的一些新兴技术利用深度学习方法来加密数据，如基于神经网络的加密算法，它们试图通过深度学习的方法提供更安全和更高效的加密解决方案。</span><br><span class=\"line\">代理重加密：</span><br><span class=\"line\"></span><br><span class=\"line\">这是一种基于代理的加密技术，允许数据在经过一系列代理之后仍然保持加密状态，只有授权的用户才能解密数据。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">日志审计：</span><br><span class=\"line\"></span><br><span class=\"line\">审计系统日志记录，包括登录日志、操作日志、安全事件日志等，以便跟踪系统和用户活动，及时发现异常行为。</span><br><span class=\"line\">网络流量监控：</span><br><span class=\"line\"></span><br><span class=\"line\">监控网络流量和数据包，识别异常流量模式或攻击行为，防范网络入侵和数据泄露。</span><br><span class=\"line\">漏洞扫描：</span><br><span class=\"line\"></span><br><span class=\"line\">使用漏洞扫描工具对系统和应用程序进行定期扫描，识别系统中存在的安全漏洞，并及时采取修复措施。</span><br><span class=\"line\">异常行为检测：</span><br><span class=\"line\"></span><br><span class=\"line\">借助行为分析技术，监控用户和系统的行为模式，识别异常行为，如未经授权的访问、大规模数据导出等。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">防火墙（Firewalls）：</span><br><span class=\"line\"></span><br><span class=\"line\">防火墙是网络安全的第一道防线，可根据预设的安全策略过滤和控制网络流量，阻止未经授权的访问和恶意流量。</span><br><span class=\"line\">入侵检测与入侵防御系统（IDS/IPS）：</span><br><span class=\"line\"></span><br><span class=\"line\">IDS/IPS 可以监控网络流量和系统日志，检测可能的入侵行为，并根据预定义的规则阻止或响应潜在的攻击。</span><br><span class=\"line\">虚拟专用网络（VPN）：</span><br><span class=\"line\"></span><br><span class=\"line\">VPN 可以通过加密和隧道技术确保远程访问和数据传输的安全性，防止敏感信息在公共网络中被窃听或篡改。</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">完整备份：</span><br><span class=\"line\"></span><br><span class=\"line\">完整备份是指将整个数据集全部备份到备份介质中，可以快速恢复所有数据，但需要较大的存储空间和时间。</span><br><span class=\"line\">增量备份：</span><br><span class=\"line\"></span><br><span class=\"line\">增量备份是在上一次完整备份后备份发生变化的数据，备份时间短，但恢复时需要依次恢复完整备份和增量备份。</span><br><span class=\"line\">差异备份：</span><br><span class=\"line\"></span><br><span class=\"line\">差异备份是备份自上次完整备份以来发生变化的数据，恢复时只需恢复完整备份和最近一次差异备份即可。</span><br><span class=\"line\">镜像备份：</span><br><span class=\"line\"></span><br><span class=\"line\">镜像备份是对整个系统或磁盘进行完整的拷贝，包括操作系统、应用程序和数据，恢复时可以还原到备份时的完全状态。</span><br><span class=\"line\">远程备份：</span><br><span class=\"line\"></span><br><span class=\"line\">将备份数据传输至远程或云存储设备中，以防止本地备份数据遭受灾难性事件影响，提高数据的安全性和可靠性。</span><br><span class=\"line\">数据库备份：</span><br><span class=\"line\"></span><br><span class=\"line\">针对数据库系统，可以使用数据库级别的备份工具进行备份，如SQL Server的备份和恢复、MySQL的mysqldump等。</span><br><span class=\"line\">文件同步备份：</span><br><span class=\"line\"></span><br><span class=\"line\">利用文件同步工具实现实时或定时将指定目录下的文件同步备份到其他存储设备中，确保数据及时备份。</span><br><span class=\"line\">虚拟化备份：</span><br><span class=\"line\"></span><br><span class=\"line\">针对虚拟化环境，可以使用专门的虚拟化备份软件对虚拟机进行备份，如VMware的vSphere Data Protection、Veeam Backup &amp; Replication等。</span><br><span class=\"line\">持续数据保护（CDP）：</span><br><span class=\"line\"></span><br><span class=\"line\">CDP 是一种实时备份技术，可以实现对数据的连续备份，几乎实时地恢复到任意时间点的数据状态。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">优势：</span><br><span class=\"line\">灵活性和可扩展性：云操作系统集成和部署可以根据需求快速扩展或收缩计算资源，满足业务的变化和增长。</span><br><span class=\"line\"></span><br><span class=\"line\">成本效益：通过云服务提供商的按需付费模式，可以避免大量的固定成本，降低了IT基础设施的运营成本。</span><br><span class=\"line\"></span><br><span class=\"line\">高可用性和容错性：云平台提供了高可用性和容错性的特性，使得操作系统在云环境中更加稳定和可靠。</span><br><span class=\"line\"></span><br><span class=\"line\">自动化管理：利用云平台的自动化工具和服务，可以实现对操作系统的自动化部署、配置和管理，减少人工干预，提高效率。</span><br><span class=\"line\"></span><br><span class=\"line\">全球化覆盖：云服务提供商分布在全球各地，可以实现全球范围内的操作系统部署和访问，满足多地域的业务需求。</span><br><span class=\"line\"></span><br><span class=\"line\">安全性：云平台提供了多层次的安全措施，可以帮助用户保护操作系统和数据的安全。</span><br><span class=\"line\"></span><br><span class=\"line\">发展前景：</span><br><span class=\"line\">深度整合：随着云计算、人工智能、大数据等新技术的发展，云操作系统将与这些技术深度整合，为用户提供更多智能化、高效化的解决方案。</span><br><span class=\"line\"></span><br><span class=\"line\">多云混合部署：未来云操作系统将更加支持多云混合部署，使用户能够更灵活地结合不同云服务商的优势，实现统一的管理和控制。</span><br><span class=\"line\"></span><br><span class=\"line\">边缘计算：随着边缘计算的兴起，云操作系统将更多地面向边缘设备，支持在边缘节点上部署和管理操作系统，满足边缘计算场景下的需求。</span><br><span class=\"line\"></span><br><span class=\"line\">安全与合规：随着数据安全和合规性要求的提高，云操作系统将更加注重安全和合规性，提供更加全面的安全解决方案和服务。</span><br><span class=\"line\"></span><br><span class=\"line\">总的来说，云操作系统集成和部署将继续在云计算领域发挥重要作用，并且随着新技术的不断涌现，其发展前景将更加广阔，为用户提供更多便利和价值。</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">云操作系统的研究工作取得了许多成效，以下是一些常见的成效：</span><br><span class=\"line\"></span><br><span class=\"line\">性能优化：研究人员通过对云操作系统进行深入分析和优化，提出了许多性能优化的方法和技术，包括针对虚拟化、容器化、调度算法等方面的优化，从而提高了云操作系统的整体性能。</span><br><span class=\"line\"></span><br><span class=\"line\">安全性增强：针对云环境中的安全挑战，研究人员提出了许多安全增强的方法和技术，包括身份认证、访问控制、隔离技术等，加强了云操作系统的安全性。</span><br><span class=\"line\"></span><br><span class=\"line\">自动化管理：研究人员设计并实现了许多自动化管理的工具和系统，用于实现对云操作系统的自动化部署、配置和管理，提高了运维效率和可靠性。</span><br><span class=\"line\"></span><br><span class=\"line\">容器和微服务：随着容器和微服务的兴起，研究人员在云操作系统领域做了大量工作，提出了许多针对容器和微服务的优化和支持方案，推动了云原生应用的发展。</span><br><span class=\"line\"></span><br><span class=\"line\">混合云和多云管理：针对多云环境下的管理挑战，研究人员提出了许多混合云和多云管理的方案和工具，为用户提供了更便捷的管理和控制方式。</span><br><span class=\"line\"></span><br><span class=\"line\">边缘计算：随着边缘计算的兴起，研究人员致力于在边缘环境下进行云操作系统的研究，提出了许多适用于边缘计算场景的解决方案。</span><br><span class=\"line\"></span><br><span class=\"line\">这些成效使得云操作系统在性能、安全性、管理和适配新兴技术等方面都取得了显著进展，为云计算提供了更加强大和稳健的基础。未来，随着新技术的不断涌现和需求的不断变化，云操作系统的研究工作将继续发挥重要作用，为云计算的发展提供更多的支持和创新。</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">研究网络拓扑自动发现是计算机网络领域的重要课题，取得了许多成效，以下是一些常见的成效：</span><br><span class=\"line\"></span><br><span class=\"line\">减少人工配置：通过自动发现网络拓扑，可以减少网络管理员的人工配置工作量，提高网络管理的效率和可靠性。</span><br><span class=\"line\"></span><br><span class=\"line\">实时更新：自动发现能够及时捕获网络拓扑的变化，帮助网络管理员及时调整网络结构，适应新设备接入、故障修复等场景。</span><br><span class=\"line\"></span><br><span class=\"line\">降低错误率：自动发现可以减少人为配置错误的发生，提高网络配置的准确性和稳定性，降低网络故障的风险。</span><br><span class=\"line\"></span><br><span class=\"line\">支持大规模网络：自动发现技术能够应对大规模复杂网络的拓扑发现需求，帮助管理大型企业网络、数据中心网络等复杂环境。</span><br><span class=\"line\"></span><br><span class=\"line\">与网络分析结合：自动发现与网络分析相结合，能够为网络故障诊断、性能优化等提供更加全面的数据支持，提高网络运维的效率。</span><br><span class=\"line\"></span><br><span class=\"line\">支持新型网络架构：自动发现技术也能够支持新型网络架构的部署和管理，如软件定义网络（SDN）、边缘计算网络等。</span><br><span class=\"line\"></span><br><span class=\"line\">总的来说，自动发现网络拓扑对于降低网络管理成本、提高网络管理效率、支持新型网络架构等方面都取得了显著成效。未来，随着网络规模的不断扩大、网络变化的不断加剧，自动发现网络拓扑的研究将继续发挥重要作用，为构建智能、自适应的网络管理系统提供更多支持和解决方案。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">研究边缘计算应用的管理和部署（Edge Application Orchestration）在近年来取得了一些重要成果，主要体现在以下几个方面：</span><br><span class=\"line\"></span><br><span class=\"line\">资源优化和负载均衡：边缘计算环境中，资源分布广泛，包括边缘设备、边缘节点和云端资源。研究取得的成效包括了对这些资源的有效管理和负载均衡技术，使得边缘计算应用能够充分利用资源，并在不同节点间实现负载均衡，提高性能和可靠性。</span><br><span class=\"line\"></span><br><span class=\"line\">自动化部署和扩展：研究工作还涉及自动化部署和扩展技术，使得边缘应用能够根据需求自动部署到最优节点，并能够根据负载情况动态扩展或收缩，以应对实时变化的工作负载。</span><br><span class=\"line\"></span><br><span class=\"line\">容器化和微服务架构：将边缘应用进行容器化和采用微服务架构，能够提高应用的灵活性和可移植性，同时降低部署和管理的复杂性。研究工作在此方面取得的成效包括了针对边缘环境的容器编排和管理技术，以及微服务架构下的边缘应用设计和优化。</span><br><span class=\"line\"></span><br><span class=\"line\">安全和隐私保护：边缘计算环境涉及大量敏感数据的处理，因此安全和隐私保护是至关重要的。研究工作在边缘应用的安全性和隐私保护方面取得了一些成果，包括边缘节点的安全认证、数据加密和访问控制等技术。</span><br><span class=\"line\"></span><br><span class=\"line\">智能管理和优化：研究工作还探索了智能管理和优化技术，包括基于机器学习和人工智能的边缘应用管理策略，以及面向边缘环境的自适应优化算法，从而实现对边缘应用的智能监控、调整和优化。</span><br><span class=\"line\"></span><br><span class=\"line\">综上所述，研究边缘计算应用纳管取得了一系列的成效，为边缘计算技术的发展和应用提供了重要支持和保障。随着边缘计算应用场景的不断拓展和深化，相信未来会有更多创新的成果涌现。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">研究基础资源配置对于提高资源利用率、降低成本，并且满足应用性能需求方面取得了一些重要成效。以下是一些常见的成果：</span><br><span class=\"line\"></span><br><span class=\"line\">自动化资源调度：研究工作在资源调度方面取得了重要进展，通过设计和开发智能调度算法和策略，实现了自动化的资源分配和调度。这些算法可以根据应用的特征和性能需求，以及资源的可用性和负载情况，动态地将任务分配到最适合的资源上，从而提高资源利用率和应用性能。</span><br><span class=\"line\"></span><br><span class=\"line\">负载均衡和弹性扩展：研究工作还涉及负载均衡和弹性扩展技术，使得系统能够根据负载变化自动调整资源配置。通过动态迁移任务或弹性地增加、减少资源，系统可以更好地应对负载波动，提高系统的可伸缩性和稳定性。</span><br><span class=\"line\"></span><br><span class=\"line\">混合云和多云环境：研究工作还关注了混合云和多云环境下的资源配置问题。通过制定资源调度策略，将任务合理地分配到私有云、公有云或边缘设备等不同资源上，以充分利用各个环境的优势，提高资源利用率和应用性能。</span><br><span class=\"line\"></span><br><span class=\"line\">能源效率和环境友好：研究工作还致力于提高资源配置的能源效率和环境友好性。通过考虑能源消耗和环境影响等因素，设计和优化资源调度策略，以减少能源浪费并改善能源利用效率。</span><br><span class=\"line\"></span><br><span class=\"line\">智能优化和自适应管理：研究工作还探索了基于机器学习和人工智能的智能优化和自适应管理技术。通过对历史数据进行分析和学习，系统可以自动识别规律和模式，并根据实时的资源需求和性能指标，调整资源配置，以实现快速响应和优化管理。</span><br><span class=\"line\"></span><br><span class=\"line\">总的来说，研究基础资源配置取得了一些重要成效，为提高资源利用率、降低成本，并满足应用性能需求提供了有效的解决方案。随着技术的不断发展和创新，相信未来会有更多的成果涌现，进一步提升资源配置的效率和效果。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">资源编排（Resource Orchestration）是指在分布式计算环境中有效地管理和调度各种资源，以满足应用程序的需求。研究资源编排在以下几个方面取得了一些重要成果：</span><br><span class=\"line\"></span><br><span class=\"line\">多资源协同调度：研究工作致力于实现多种资源（例如计算资源、存储资源、网络资源等）的协同调度，确保不同类型的资源能够有效配合，提高系统整体性能。这包括设计合适的调度算法和策略，实现资源之间的有效协同工作。</span><br><span class=\"line\"></span><br><span class=\"line\">动态资源调度与迁移：研究工作还关注了动态资源调度和迁移技术，使系统能够根据实时负载情况和应用需求，动态地调整资源配置。通过实时监测系统状态，并根据预设策略进行资源调度和迁移，系统可以更好地适应变化的工作负载，提高系统的灵活性和性能。</span><br><span class=\"line\"></span><br><span class=\"line\">容器编排和微服务架构：研究工作还涉及将资源编排与容器编排和微服务架构相结合，以提高应用的部署效率和弹性。通过利用容器技术和微服务架构，可以实现资源的快速部署和扩展，简化资源编排的复杂性，并提高系统的可维护性和可靠性。</span><br><span class=\"line\"></span><br><span class=\"line\">智能资源优化和管理：研究工作还探索了智能资源优化和管理技术，包括基于机器学习和人工智能的资源编排算法。这些算法可以通过学习系统的历史数据和行为模式，实现对资源的智能调度和优化，以提高系统的性能和效率。</span><br><span class=\"line\"></span><br><span class=\"line\">安全性和隐私保护：资源编排也需要考虑安全性和隐私保护等方面的问题。研究工作致力于设计安全可靠的资源编排策略，确保敏感数据和资源受到有效的保护，防止恶意攻击和数据泄露等安全问题。</span><br><span class=\"line\"></span><br><span class=\"line\">总的来说，研究资源编排取得了一些重要成果，为提高系统性能、灵活性和安全性提供了有效的技术支持。随着技术的不断进步和创新，相信资源编排领域将会有更多的发展和突破，为分布式计算环境带来更多的好处和机遇。</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">研究安全管控方面取得了一些重要的成效，主要体现在以下几个方面：</span><br><span class=\"line\"></span><br><span class=\"line\">威胁检测和防范：研究工作在威胁检测和防范方面取得了重要进展。通过开发先进的威胁检测技术和安全防护系统，能够及时识别和应对各种网络安全威胁，包括恶意软件、网络攻击、数据泄露等，从而保护信息系统的安全性。</span><br><span class=\"line\"></span><br><span class=\"line\">身份认证和访问控制：研究工作还致力于提高身份认证和访问控制的技术水平。通过引入多因素身份认证、基于角色的访问控制（RBAC）、动态访问控制等技术手段，加强对用户身份和权限的管理，确保只有合法用户获得合法访问权限，从而保障系统的安全性。</span><br><span class=\"line\"></span><br><span class=\"line\">数据加密和隐私保护：研究工作还涉及数据加密和隐私保护方面的技术创新。通过设计高效的加密算法、安全的密钥管理机制和数据遮蔽技术，确保敏感数据在存储和传输过程中得到有效的保护，防止数据泄露和非法访问。</span><br><span class=\"line\"></span><br><span class=\"line\">安全合规和审计：研究工作还关注了安全合规和审计方面的问题。通过设计安全可追溯的系统架构和审计机制，确保系统操作和数据处理符合相关法规和标准，并且能够对系统的安全状态进行有效监控和审计，以便及时发现和应对安全问题。</span><br><span class=\"line\"></span><br><span class=\"line\">安全意识和培训：研究工作也包括安全意识和培训方面的工作。通过开展安全培训和教育活动，提高员工和用户对安全问题的认识和理解，增强整体安全意识，从而减少安全事件的发生和影响。</span><br><span class=\"line\"></span><br><span class=\"line\">总的来说，研究安全管控取得了一些重要成效，为提高信息系统的安全性和稳定性提供了有效的技术和管理支持。随着信息技术的不断发展和威胁形势的变化，安全管控领域仍然需要不断创新和进步，以适应新的挑战和需求。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">配电网资源配置，服务编排，安全管控对计算系统中的各种关键资源进行合理分配和调整，以确保计算服务管理和调度计算资源。云计算环境中对基础资源（如虚拟机、存储、网络等）进行合理配置和分配，以满足应用程序和服务的需求，并优化资源利用率、性能和成本。这一过程通常涉及以下几个方面：</span><br><span class=\"line\">1.</span><br><span class=\"line\">虚拟机配置：根据应用程序的需求，确定虚拟机的规格（CPU、内存、存储等）和数量，并进行虚拟机的创建、启动和停止管理。可以根据实际负载情况动态调整虚拟机的规模，实现弹性扩展或收缩。</span><br><span class=\"line\">2.</span><br><span class=\"line\">3.</span><br><span class=\"line\">存储配置：配置存储资源，包括块存储、对象存储、文件存储等，以确保数据的安全性、可靠性和性能。可以根据应用程序的读写需求选择合适的存储类型和容量，并进行备份和恢复管理。</span><br><span class=\"line\">4.</span><br><span class=\"line\">5.</span><br><span class=\"line\">网络配置：配置网络资源，包括虚拟网络、子网、路由器、负载均衡器等，以建立应用程序间的通信连接，并保障网络的安全性和稳定性。可以设置访问控制策略、网络隔离和流量控制等功能。</span><br><span class=\"line\">6.</span><br><span class=\"line\">7.</span><br><span class=\"line\">自动化编排：利用自动化工具和编排系统，根据应用程序的部署需求和资源约束，自动进行资源的分配和调度。可以通过容器编排技术（如Kubernetes）、自动化配置管理工具（如Ansible）等实现自动化的资源编排。</span><br><span class=\"line\">8.</span><br><span class=\"line\">9.</span><br><span class=\"line\">监控与优化：持续监控资源的使用情况和性能指标，及时发现和解决资源瓶颈和性能问题。可以利用监控系统（如Prometheus、Grafana）进行资源利用率分析，优化资源配置和调度策略。</span><br><span class=\"line\">10.</span><br><span class=\"line\">通过合理配置和编排基础资源，可以提高系统的灵活性、可靠性和性能，并实现资源的高效利用，从而为用户提供更好的云计算服务体验。</span><br></pre></td></tr></table></figure>"},{"title":"Fio测试磁盘读写性能","date":"2023-12-25T02:27:28.000Z","description":"Fio测试磁盘读写性能","type":"tags","comments":1,"_content":"# 环境\n\n内核：4.10\n\ncpu：8\n\n内存：8GB\n\n硬盘：100GB\n\n# 安装fio\n\nfio 的全称是 flexible I/O tester，是常用的磁盘性能测试工具。fio 通过产生一系列的线程或进程来执行用户指定的特定类型 IO 操作。典型的用法是用户将需要模拟的 IO 负载写入到 job file 中。fio 支持多种 IO 引擎，通过 ioengine=io_uring，我们可以在 fio 中使用 io_uring 接口来测试磁盘性能。\n\n```bash\nyum install fio\n```\n\n# 测试\n\n- 4k随机读\n\n  ```bash\n  fio -name=iouring_test -filename=/mnt/vdd/testfile -iodepth=128 -thread -rw=randread -ioengine=io_uring -sqthread_poll=1 -direct=1 -bs=4k -size=10G -numjobs=1 -runtime=120 -group_reporting\n  ```\n\n- 4k 随机写\n\n  ```bash\n  fio -name=iouring_test -filename=/mnt/vdd/testfile -iodepth=128 -thread -rw=randwrite -ioengine=io_uring -sqthread_poll=1 -direct=1 -bs=4k -size=10G -numjobs=1 -runtime=120 -group_reporting\n  ```\n\n- 随机读写\n\n  ```bash\n  fio -name=iouring_test -filename=/mnt/vdd/testfile -iodepth=128 -thread -rw=randrw -ioengine=io_uring -sqthread_poll=1 -direct=1 -bs=4k -size=10G -numjobs=1 -runtime=120 -group_reporting\n  ```\n\n- 4k 顺序读\n\n  ```\n  fio -name=iouring_test -filename=/mnt/vdd/testfile -iodepth=128 -thread -rw=read -ioengine=io_uring -sqthread_poll=1 -direct=1 -bs=4k -size=10G -numjobs=1 -runtime=120 -group_reporting\n  ```\n\n- 4k 顺序写\n\n  ```bash\n  fio -name=iouring_test -filename=/mnt/vdd/testfile -iodepth=128 -thread -rw=write -ioengine=io_uring -sqthread_poll=1 -direct=1 -bs=4k -size=10G -numjobs=1 -runtime=120 -group_reporting\n  ```\n\n- 4K顺序读写\n\n  ```bash\n  fio -name=iouring_test -filename=/mnt/vdd/testfile -iodepth=128 -thread -rw=rw -ioengine=io_uring -sqthread_poll=1 -direct=1 -bs=4k -size=10G -numjobs=1 -runtime=120 -group_reporting\n  ```\n\n  \n\n说明：\nfilename=/dev/sdb1    测试文件名称，通常选择需要测试的盘的data目录。\ndirect=1         测试过程绕过机器自带的buffer。使测试结果更真实。\nbs=16k          单次io的块文件大小为16k\nbsrange=512-2048     同上，提定数据块的大小范围\nsize=5g  本次的测试文件大小为5g，以每次4k的io进行测试。\nnumjobs=30        本次的测试线程为30.\nruntime=1000       测试时间为1000秒，如果不写则一直将5g文件分4k每次写完为止。\nioengine=psync      io引擎使用pync方式\nrwmixwrite=30      在混合读写的模式下，写占30%\ngroup_reporting     关于显示结果的，汇总每个进程的信息。\n\n此外\nlockmem=1g        只使用1g内存进行测试。\nzero_buffers       用0初始化系统buffer。\nnrfiles=8        每个进程生成文件的数量。\nread 顺序读\nwrite 顺序写\nrw,readwrite 顺序混合读写\nrandwrite 随机写\nrandread 随机读\nrandrw 随机混合读写\n","source":"_posts/Fio测试磁盘读写性能.md","raw":"---\ntitle: Fio测试磁盘读写性能\ndate: 2023-12-25 10:27:28\ndescription: Fio测试磁盘读写性能\ntype: \"tags\"\ncomments: true\ncategories:\n- Linux\n- Tools\n- Test\ntags:\n- Linux\n- Test\n---\n# 环境\n\n内核：4.10\n\ncpu：8\n\n内存：8GB\n\n硬盘：100GB\n\n# 安装fio\n\nfio 的全称是 flexible I/O tester，是常用的磁盘性能测试工具。fio 通过产生一系列的线程或进程来执行用户指定的特定类型 IO 操作。典型的用法是用户将需要模拟的 IO 负载写入到 job file 中。fio 支持多种 IO 引擎，通过 ioengine=io_uring，我们可以在 fio 中使用 io_uring 接口来测试磁盘性能。\n\n```bash\nyum install fio\n```\n\n# 测试\n\n- 4k随机读\n\n  ```bash\n  fio -name=iouring_test -filename=/mnt/vdd/testfile -iodepth=128 -thread -rw=randread -ioengine=io_uring -sqthread_poll=1 -direct=1 -bs=4k -size=10G -numjobs=1 -runtime=120 -group_reporting\n  ```\n\n- 4k 随机写\n\n  ```bash\n  fio -name=iouring_test -filename=/mnt/vdd/testfile -iodepth=128 -thread -rw=randwrite -ioengine=io_uring -sqthread_poll=1 -direct=1 -bs=4k -size=10G -numjobs=1 -runtime=120 -group_reporting\n  ```\n\n- 随机读写\n\n  ```bash\n  fio -name=iouring_test -filename=/mnt/vdd/testfile -iodepth=128 -thread -rw=randrw -ioengine=io_uring -sqthread_poll=1 -direct=1 -bs=4k -size=10G -numjobs=1 -runtime=120 -group_reporting\n  ```\n\n- 4k 顺序读\n\n  ```\n  fio -name=iouring_test -filename=/mnt/vdd/testfile -iodepth=128 -thread -rw=read -ioengine=io_uring -sqthread_poll=1 -direct=1 -bs=4k -size=10G -numjobs=1 -runtime=120 -group_reporting\n  ```\n\n- 4k 顺序写\n\n  ```bash\n  fio -name=iouring_test -filename=/mnt/vdd/testfile -iodepth=128 -thread -rw=write -ioengine=io_uring -sqthread_poll=1 -direct=1 -bs=4k -size=10G -numjobs=1 -runtime=120 -group_reporting\n  ```\n\n- 4K顺序读写\n\n  ```bash\n  fio -name=iouring_test -filename=/mnt/vdd/testfile -iodepth=128 -thread -rw=rw -ioengine=io_uring -sqthread_poll=1 -direct=1 -bs=4k -size=10G -numjobs=1 -runtime=120 -group_reporting\n  ```\n\n  \n\n说明：\nfilename=/dev/sdb1    测试文件名称，通常选择需要测试的盘的data目录。\ndirect=1         测试过程绕过机器自带的buffer。使测试结果更真实。\nbs=16k          单次io的块文件大小为16k\nbsrange=512-2048     同上，提定数据块的大小范围\nsize=5g  本次的测试文件大小为5g，以每次4k的io进行测试。\nnumjobs=30        本次的测试线程为30.\nruntime=1000       测试时间为1000秒，如果不写则一直将5g文件分4k每次写完为止。\nioengine=psync      io引擎使用pync方式\nrwmixwrite=30      在混合读写的模式下，写占30%\ngroup_reporting     关于显示结果的，汇总每个进程的信息。\n\n此外\nlockmem=1g        只使用1g内存进行测试。\nzero_buffers       用0初始化系统buffer。\nnrfiles=8        每个进程生成文件的数量。\nread 顺序读\nwrite 顺序写\nrw,readwrite 顺序混合读写\nrandwrite 随机写\nrandread 随机读\nrandrw 随机混合读写\n","slug":"Fio测试磁盘读写性能","published":1,"updated":"2025-03-27T00:57:01.336Z","layout":"post","photos":[],"link":"","_id":"cmamklq6z0010fkd1fu548y8d","content":"<h1 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h1><p>内核：4.10</p>\n<p>cpu：8</p>\n<p>内存：8GB</p>\n<p>硬盘：100GB</p>\n<h1 id=\"安装fio\"><a href=\"#安装fio\" class=\"headerlink\" title=\"安装fio\"></a>安装fio</h1><p>fio 的全称是 flexible I&#x2F;O tester，是常用的磁盘性能测试工具。fio 通过产生一系列的线程或进程来执行用户指定的特定类型 IO 操作。典型的用法是用户将需要模拟的 IO 负载写入到 job file 中。fio 支持多种 IO 引擎，通过 ioengine&#x3D;io_uring，我们可以在 fio 中使用 io_uring 接口来测试磁盘性能。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install fio</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h1><ul>\n<li><p>4k随机读</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fio -name=iouring_test -filename=/mnt/vdd/testfile -iodepth=128 -thread -rw=randread -ioengine=io_uring -sqthread_poll=1 -direct=1 -bs=4k -size=10G -numjobs=1 -runtime=120 -group_reporting</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>4k 随机写</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fio -name=iouring_test -filename=/mnt/vdd/testfile -iodepth=128 -thread -rw=randwrite -ioengine=io_uring -sqthread_poll=1 -direct=1 -bs=4k -size=10G -numjobs=1 -runtime=120 -group_reporting</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>随机读写</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fio -name=iouring_test -filename=/mnt/vdd/testfile -iodepth=128 -thread -rw=randrw -ioengine=io_uring -sqthread_poll=1 -direct=1 -bs=4k -size=10G -numjobs=1 -runtime=120 -group_reporting</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>4k 顺序读</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fio -name=iouring_test -filename=/mnt/vdd/testfile -iodepth=128 -thread -rw=read -ioengine=io_uring -sqthread_poll=1 -direct=1 -bs=4k -size=10G -numjobs=1 -runtime=120 -group_reporting</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>4k 顺序写</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fio -name=iouring_test -filename=/mnt/vdd/testfile -iodepth=128 -thread -rw=write -ioengine=io_uring -sqthread_poll=1 -direct=1 -bs=4k -size=10G -numjobs=1 -runtime=120 -group_reporting</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>4K顺序读写</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fio -name=iouring_test -filename=/mnt/vdd/testfile -iodepth=128 -thread -rw=rw -ioengine=io_uring -sqthread_poll=1 -direct=1 -bs=4k -size=10G -numjobs=1 -runtime=120 -group_reporting</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>说明：<br>filename&#x3D;&#x2F;dev&#x2F;sdb1    测试文件名称，通常选择需要测试的盘的data目录。<br>direct&#x3D;1         测试过程绕过机器自带的buffer。使测试结果更真实。<br>bs&#x3D;16k          单次io的块文件大小为16k<br>bsrange&#x3D;512-2048     同上，提定数据块的大小范围<br>size&#x3D;5g  本次的测试文件大小为5g，以每次4k的io进行测试。<br>numjobs&#x3D;30        本次的测试线程为30.<br>runtime&#x3D;1000       测试时间为1000秒，如果不写则一直将5g文件分4k每次写完为止。<br>ioengine&#x3D;psync      io引擎使用pync方式<br>rwmixwrite&#x3D;30      在混合读写的模式下，写占30%<br>group_reporting     关于显示结果的，汇总每个进程的信息。</p>\n<p>此外<br>lockmem&#x3D;1g        只使用1g内存进行测试。<br>zero_buffers       用0初始化系统buffer。<br>nrfiles&#x3D;8        每个进程生成文件的数量。<br>read 顺序读<br>write 顺序写<br>rw,readwrite 顺序混合读写<br>randwrite 随机写<br>randread 随机读<br>randrw 随机混合读写</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h1><p>内核：4.10</p>\n<p>cpu：8</p>\n<p>内存：8GB</p>\n<p>硬盘：100GB</p>\n<h1 id=\"安装fio\"><a href=\"#安装fio\" class=\"headerlink\" title=\"安装fio\"></a>安装fio</h1><p>fio 的全称是 flexible I&#x2F;O tester，是常用的磁盘性能测试工具。fio 通过产生一系列的线程或进程来执行用户指定的特定类型 IO 操作。典型的用法是用户将需要模拟的 IO 负载写入到 job file 中。fio 支持多种 IO 引擎，通过 ioengine&#x3D;io_uring，我们可以在 fio 中使用 io_uring 接口来测试磁盘性能。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install fio</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h1><ul>\n<li><p>4k随机读</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fio -name=iouring_test -filename=/mnt/vdd/testfile -iodepth=128 -thread -rw=randread -ioengine=io_uring -sqthread_poll=1 -direct=1 -bs=4k -size=10G -numjobs=1 -runtime=120 -group_reporting</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>4k 随机写</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fio -name=iouring_test -filename=/mnt/vdd/testfile -iodepth=128 -thread -rw=randwrite -ioengine=io_uring -sqthread_poll=1 -direct=1 -bs=4k -size=10G -numjobs=1 -runtime=120 -group_reporting</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>随机读写</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fio -name=iouring_test -filename=/mnt/vdd/testfile -iodepth=128 -thread -rw=randrw -ioengine=io_uring -sqthread_poll=1 -direct=1 -bs=4k -size=10G -numjobs=1 -runtime=120 -group_reporting</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>4k 顺序读</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fio -name=iouring_test -filename=/mnt/vdd/testfile -iodepth=128 -thread -rw=read -ioengine=io_uring -sqthread_poll=1 -direct=1 -bs=4k -size=10G -numjobs=1 -runtime=120 -group_reporting</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>4k 顺序写</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fio -name=iouring_test -filename=/mnt/vdd/testfile -iodepth=128 -thread -rw=write -ioengine=io_uring -sqthread_poll=1 -direct=1 -bs=4k -size=10G -numjobs=1 -runtime=120 -group_reporting</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>4K顺序读写</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fio -name=iouring_test -filename=/mnt/vdd/testfile -iodepth=128 -thread -rw=rw -ioengine=io_uring -sqthread_poll=1 -direct=1 -bs=4k -size=10G -numjobs=1 -runtime=120 -group_reporting</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>说明：<br>filename&#x3D;&#x2F;dev&#x2F;sdb1    测试文件名称，通常选择需要测试的盘的data目录。<br>direct&#x3D;1         测试过程绕过机器自带的buffer。使测试结果更真实。<br>bs&#x3D;16k          单次io的块文件大小为16k<br>bsrange&#x3D;512-2048     同上，提定数据块的大小范围<br>size&#x3D;5g  本次的测试文件大小为5g，以每次4k的io进行测试。<br>numjobs&#x3D;30        本次的测试线程为30.<br>runtime&#x3D;1000       测试时间为1000秒，如果不写则一直将5g文件分4k每次写完为止。<br>ioengine&#x3D;psync      io引擎使用pync方式<br>rwmixwrite&#x3D;30      在混合读写的模式下，写占30%<br>group_reporting     关于显示结果的，汇总每个进程的信息。</p>\n<p>此外<br>lockmem&#x3D;1g        只使用1g内存进行测试。<br>zero_buffers       用0初始化系统buffer。<br>nrfiles&#x3D;8        每个进程生成文件的数量。<br>read 顺序读<br>write 顺序写<br>rw,readwrite 顺序混合读写<br>randwrite 随机写<br>randread 随机读<br>randrw 随机混合读写</p>\n"},{"title":"java安装配置","date":"2023-12-15T02:27:28.000Z","description":"Linux java环境配置","type":"tags","comments":1,"_content":"\n# Java-环境安装配置\nLink： <https://www.oracle.com/java/technologies/downloads/>\n\n下载tar包，解压到指定的位置\n\n修改环境变量(Linux)\n\n```plain\nvim /etc/profile\nexport JAVA_HOME=/opt/java/jdk1.8.0_381\nexport PATH=$JAVA_HOME/bin:$PATH\nexport CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar\nexport JRE_HOME=$JAVA_HOME/jre\n```\n# maven配置\nLink：<https://maven.apache.org/>\n\n```plain\nexport MAVEN_HOME=/opt/maven/apache-maven-3.9.4\nexport PATH=${PATH}:${MAVEN_HOME}/bin\n```\n# 运行jar包\n```bash\n# 打包jar\nmvn package ***.jar\n# 直接运行\njava -jar ***.jar\n# 开启后台运行\nnohup java -jar ***.jar &\n```\n","source":"_posts/Java环境相关配置.md","raw":"---\ntitle: java安装配置\ndate: 2023-12-15 10:27:28\ndescription: Linux java环境配置\ntype: \"tags\"\ncomments: true\ncategories:\n- Linux\n- Java\ntags:\n- Linux\n- Java\n---\n\n# Java-环境安装配置\nLink： <https://www.oracle.com/java/technologies/downloads/>\n\n下载tar包，解压到指定的位置\n\n修改环境变量(Linux)\n\n```plain\nvim /etc/profile\nexport JAVA_HOME=/opt/java/jdk1.8.0_381\nexport PATH=$JAVA_HOME/bin:$PATH\nexport CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar\nexport JRE_HOME=$JAVA_HOME/jre\n```\n# maven配置\nLink：<https://maven.apache.org/>\n\n```plain\nexport MAVEN_HOME=/opt/maven/apache-maven-3.9.4\nexport PATH=${PATH}:${MAVEN_HOME}/bin\n```\n# 运行jar包\n```bash\n# 打包jar\nmvn package ***.jar\n# 直接运行\njava -jar ***.jar\n# 开启后台运行\nnohup java -jar ***.jar &\n```\n","slug":"Java环境相关配置","published":1,"updated":"2025-03-27T00:57:01.337Z","layout":"post","photos":[],"link":"","_id":"cmamklq700013fkd139c504vk","content":"<h1 id=\"Java-环境安装配置\"><a href=\"#Java-环境安装配置\" class=\"headerlink\" title=\"Java-环境安装配置\"></a>Java-环境安装配置</h1><p>Link： <a href=\"https://www.oracle.com/java/technologies/downloads/\">https://www.oracle.com/java/technologies/downloads/</a></p>\n<p>下载tar包，解压到指定的位置</p>\n<p>修改环境变量(Linux)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/profile</span><br><span class=\"line\">export JAVA_HOME=/opt/java/jdk1.8.0_381</span><br><span class=\"line\">export PATH=$JAVA_HOME/bin:$PATH</span><br><span class=\"line\">export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class=\"line\">export JRE_HOME=$JAVA_HOME/jre</span><br></pre></td></tr></table></figure>\n<h1 id=\"maven配置\"><a href=\"#maven配置\" class=\"headerlink\" title=\"maven配置\"></a>maven配置</h1><p>Link：<a href=\"https://maven.apache.org/\">https://maven.apache.org/</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export MAVEN_HOME=/opt/maven/apache-maven-3.9.4</span><br><span class=\"line\">export PATH=$&#123;PATH&#125;:$&#123;MAVEN_HOME&#125;/bin</span><br></pre></td></tr></table></figure>\n<h1 id=\"运行jar包\"><a href=\"#运行jar包\" class=\"headerlink\" title=\"运行jar包\"></a>运行jar包</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 打包jar</span></span><br><span class=\"line\">mvn package ***.jar</span><br><span class=\"line\"><span class=\"comment\"># 直接运行</span></span><br><span class=\"line\">java -jar ***.jar</span><br><span class=\"line\"><span class=\"comment\"># 开启后台运行</span></span><br><span class=\"line\"><span class=\"built_in\">nohup</span> java -jar ***.jar &amp;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Java-环境安装配置\"><a href=\"#Java-环境安装配置\" class=\"headerlink\" title=\"Java-环境安装配置\"></a>Java-环境安装配置</h1><p>Link： <a href=\"https://www.oracle.com/java/technologies/downloads/\">https://www.oracle.com/java/technologies/downloads/</a></p>\n<p>下载tar包，解压到指定的位置</p>\n<p>修改环境变量(Linux)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/profile</span><br><span class=\"line\">export JAVA_HOME=/opt/java/jdk1.8.0_381</span><br><span class=\"line\">export PATH=$JAVA_HOME/bin:$PATH</span><br><span class=\"line\">export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class=\"line\">export JRE_HOME=$JAVA_HOME/jre</span><br></pre></td></tr></table></figure>\n<h1 id=\"maven配置\"><a href=\"#maven配置\" class=\"headerlink\" title=\"maven配置\"></a>maven配置</h1><p>Link：<a href=\"https://maven.apache.org/\">https://maven.apache.org/</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export MAVEN_HOME=/opt/maven/apache-maven-3.9.4</span><br><span class=\"line\">export PATH=$&#123;PATH&#125;:$&#123;MAVEN_HOME&#125;/bin</span><br></pre></td></tr></table></figure>\n<h1 id=\"运行jar包\"><a href=\"#运行jar包\" class=\"headerlink\" title=\"运行jar包\"></a>运行jar包</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 打包jar</span></span><br><span class=\"line\">mvn package ***.jar</span><br><span class=\"line\"><span class=\"comment\"># 直接运行</span></span><br><span class=\"line\">java -jar ***.jar</span><br><span class=\"line\"><span class=\"comment\"># 开启后台运行</span></span><br><span class=\"line\"><span class=\"built_in\">nohup</span> java -jar ***.jar &amp;</span><br></pre></td></tr></table></figure>\n"},{"title":"Python安装配置","date":"2023-12-15T02:27:28.000Z","description":"Linux Python环境配置","type":"tags","comments":1,"_content":"\n# 安装Python\n1. 下载python\n```bash\n$ wget https://www.python.org/ftp/python/3.8.0/Python-3.8.0.tgz\n# 解压到opt\n$ tar -zxvf Python-3.8.0.tgz -C /opt\n```\n2. 编译安装python3.8.0\n```bash\n#进入到python-3.8.0文件夹\n$ cd /opt/Python-3.8.0 \n#检查以确保系统满足程序的最低要求\n$ sudo ./configure \n#执行编译脚本\n$ sudo make \n#直接安装\n$ sudo make install\n#替换原版本安装\n$ sudo make altinstall\n```\n3. 修改python默认版本\n```bash\n#查询python3.8位置\n$ whereis python3.8\npython3.9: /usr/local/bin/python3.8 /usr/local/lib/python3.8\n#删除当前软连接\n$ sudo rm /usr/bin/python\n#为新版python创建软链接\n$ sudo ln -s /usr/bin/python3.8 /usr/bin/python\n```\n4. 配置环境变量\n修改用户主目录下名为.bash_profile的文件，配置PATH环境变量并使其生效。\n```bash\n$ cd ~\n$ vim .bash_profile\n# ... 此处省略上面的代码 ...\nexport PATH=$PATH:/usr/local/python38/bin\n# ... 此处省略下面的代码 ...\n```\n5. 激活环境变量\n```bash\n$ source .bash_profile\n```\n# 修改Python默认版本\n1. 查询当前版本\n```bash\n$ python --version\nPython 2.7.16\n```\n2. 删除当前软链接\n```bash\n$ sudo rm /usr/bin/python\n```\n3. 为新版python创建软链接\n```bash\n$ sudo ln -s /usr/bin/python3.7 /usr/bin/python\n```\n4. 校验结果\n```bash\n$ python --version\nPython 3.7.3\n```\n# pip源配置\npip配置信息保存路径：~/.config/pip/pip.conf\n```bash\n#配置清华源\n$ pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple\n#删除配置\n$ pip config unset global.index-url\n```\n# venv环境配置\n1.创建独立的python运行环境\n```bash\n#创建独立目录\n$ mkdir venv\n$ cd venv/\n#初始化python运行环境\n$ python* -m venv .\n#查看当前目录，发现生成lib，include,bin，pyvenv.cfg\n$ ls\nbin  include  lib  pyvenv.cfg\n#进入bin目录，激活该venv环境\n$ cd bin\n$ source activate\n#退出当前的proj101env环境\n$ deactivate\n```\n# Ipython编程工具\n1. 安装Ipython\n```plain\n$ pip install ipython\n```\n2. 启动IPython\n```bash\n$ ipython\n```\n3. 退出ipython\n```bash\n$ ctl+D\n```\nturtle图形绘制工具\n1. 安装依赖\n```bash\n# For Ubuntu or other distros with Apt:\n$ sudo apt-get install python3-tk\n# For Fedora:\n$ sudo dnf install python3-tkinter\n```\n2. 绘制图形\n```plain\nimport turtle\n\nturtle.pensize(4)\nturtle.pencolor('red')\n\nturtle.forward(100)\nturtle.right(90)\nturtle.forward(100)\nturtle.right(90)\nturtle.forward(100)\nturtle.right(90)\nturtle.forward(100)\n\nturtle.mainloop()\n```\n\n\n","source":"_posts/Python相关环境配置.md","raw":"---\ntitle: Python安装配置\ndate: 2023-12-15 10:27:28\ndescription: Linux Python环境配置\ntype: \"tags\"\ncomments: true\ncategories:\n- Linux\n- Python\ntags:\n- Linux\n- Python\n---\n\n# 安装Python\n1. 下载python\n```bash\n$ wget https://www.python.org/ftp/python/3.8.0/Python-3.8.0.tgz\n# 解压到opt\n$ tar -zxvf Python-3.8.0.tgz -C /opt\n```\n2. 编译安装python3.8.0\n```bash\n#进入到python-3.8.0文件夹\n$ cd /opt/Python-3.8.0 \n#检查以确保系统满足程序的最低要求\n$ sudo ./configure \n#执行编译脚本\n$ sudo make \n#直接安装\n$ sudo make install\n#替换原版本安装\n$ sudo make altinstall\n```\n3. 修改python默认版本\n```bash\n#查询python3.8位置\n$ whereis python3.8\npython3.9: /usr/local/bin/python3.8 /usr/local/lib/python3.8\n#删除当前软连接\n$ sudo rm /usr/bin/python\n#为新版python创建软链接\n$ sudo ln -s /usr/bin/python3.8 /usr/bin/python\n```\n4. 配置环境变量\n修改用户主目录下名为.bash_profile的文件，配置PATH环境变量并使其生效。\n```bash\n$ cd ~\n$ vim .bash_profile\n# ... 此处省略上面的代码 ...\nexport PATH=$PATH:/usr/local/python38/bin\n# ... 此处省略下面的代码 ...\n```\n5. 激活环境变量\n```bash\n$ source .bash_profile\n```\n# 修改Python默认版本\n1. 查询当前版本\n```bash\n$ python --version\nPython 2.7.16\n```\n2. 删除当前软链接\n```bash\n$ sudo rm /usr/bin/python\n```\n3. 为新版python创建软链接\n```bash\n$ sudo ln -s /usr/bin/python3.7 /usr/bin/python\n```\n4. 校验结果\n```bash\n$ python --version\nPython 3.7.3\n```\n# pip源配置\npip配置信息保存路径：~/.config/pip/pip.conf\n```bash\n#配置清华源\n$ pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple\n#删除配置\n$ pip config unset global.index-url\n```\n# venv环境配置\n1.创建独立的python运行环境\n```bash\n#创建独立目录\n$ mkdir venv\n$ cd venv/\n#初始化python运行环境\n$ python* -m venv .\n#查看当前目录，发现生成lib，include,bin，pyvenv.cfg\n$ ls\nbin  include  lib  pyvenv.cfg\n#进入bin目录，激活该venv环境\n$ cd bin\n$ source activate\n#退出当前的proj101env环境\n$ deactivate\n```\n# Ipython编程工具\n1. 安装Ipython\n```plain\n$ pip install ipython\n```\n2. 启动IPython\n```bash\n$ ipython\n```\n3. 退出ipython\n```bash\n$ ctl+D\n```\nturtle图形绘制工具\n1. 安装依赖\n```bash\n# For Ubuntu or other distros with Apt:\n$ sudo apt-get install python3-tk\n# For Fedora:\n$ sudo dnf install python3-tkinter\n```\n2. 绘制图形\n```plain\nimport turtle\n\nturtle.pensize(4)\nturtle.pencolor('red')\n\nturtle.forward(100)\nturtle.right(90)\nturtle.forward(100)\nturtle.right(90)\nturtle.forward(100)\nturtle.right(90)\nturtle.forward(100)\n\nturtle.mainloop()\n```\n\n\n","slug":"Python相关环境配置","published":1,"updated":"2025-05-13T11:38:58.262Z","layout":"post","photos":[],"link":"","_id":"cmamklq700014fkd14jrc8h42","content":"<h1 id=\"安装Python\"><a href=\"#安装Python\" class=\"headerlink\" title=\"安装Python\"></a>安装Python</h1><ol>\n<li>下载python<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget https://www.python.org/ftp/python/3.8.0/Python-3.8.0.tgz</span><br><span class=\"line\"><span class=\"comment\"># 解压到opt</span></span><br><span class=\"line\">$ tar -zxvf Python-3.8.0.tgz -C /opt</span><br></pre></td></tr></table></figure></li>\n<li>编译安装python3.8.0<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#进入到python-3.8.0文件夹</span></span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> /opt/Python-3.8.0 </span><br><span class=\"line\"><span class=\"comment\">#检查以确保系统满足程序的最低要求</span></span><br><span class=\"line\">$ sudo ./configure </span><br><span class=\"line\"><span class=\"comment\">#执行编译脚本</span></span><br><span class=\"line\">$ sudo make </span><br><span class=\"line\"><span class=\"comment\">#直接安装</span></span><br><span class=\"line\">$ sudo make install</span><br><span class=\"line\"><span class=\"comment\">#替换原版本安装</span></span><br><span class=\"line\">$ sudo make altinstall</span><br></pre></td></tr></table></figure></li>\n<li>修改python默认版本<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#查询python3.8位置</span></span><br><span class=\"line\">$ whereis python3.8</span><br><span class=\"line\">python3.9: /usr/local/bin/python3.8 /usr/local/lib/python3.8</span><br><span class=\"line\"><span class=\"comment\">#删除当前软连接</span></span><br><span class=\"line\">$ sudo <span class=\"built_in\">rm</span> /usr/bin/python</span><br><span class=\"line\"><span class=\"comment\">#为新版python创建软链接</span></span><br><span class=\"line\">$ sudo <span class=\"built_in\">ln</span> -s /usr/bin/python3.8 /usr/bin/python</span><br></pre></td></tr></table></figure></li>\n<li>配置环境变量<br>修改用户主目录下名为.bash_profile的文件，配置PATH环境变量并使其生效。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> ~</span><br><span class=\"line\">$ vim .bash_profile</span><br><span class=\"line\"><span class=\"comment\"># ... 此处省略上面的代码 ...</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:/usr/local/python38/bin</span><br><span class=\"line\"><span class=\"comment\"># ... 此处省略下面的代码 ...</span></span><br></pre></td></tr></table></figure></li>\n<li>激活环境变量<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">source</span> .bash_profile</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h1 id=\"修改Python默认版本\"><a href=\"#修改Python默认版本\" class=\"headerlink\" title=\"修改Python默认版本\"></a>修改Python默认版本</h1><ol>\n<li>查询当前版本<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python --version</span><br><span class=\"line\">Python 2.7.16</span><br></pre></td></tr></table></figure></li>\n<li>删除当前软链接<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo <span class=\"built_in\">rm</span> /usr/bin/python</span><br></pre></td></tr></table></figure></li>\n<li>为新版python创建软链接<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo <span class=\"built_in\">ln</span> -s /usr/bin/python3.7 /usr/bin/python</span><br></pre></td></tr></table></figure></li>\n<li>校验结果<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python --version</span><br><span class=\"line\">Python 3.7.3</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h1 id=\"pip源配置\"><a href=\"#pip源配置\" class=\"headerlink\" title=\"pip源配置\"></a>pip源配置</h1><p>pip配置信息保存路径：~&#x2F;.config&#x2F;pip&#x2F;pip.conf</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#配置清华源</span></span><br><span class=\"line\">$ pip config <span class=\"built_in\">set</span> global.index-url https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class=\"line\"><span class=\"comment\">#删除配置</span></span><br><span class=\"line\">$ pip config <span class=\"built_in\">unset</span> global.index-url</span><br></pre></td></tr></table></figure>\n<h1 id=\"venv环境配置\"><a href=\"#venv环境配置\" class=\"headerlink\" title=\"venv环境配置\"></a>venv环境配置</h1><p>1.创建独立的python运行环境</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#创建独立目录</span></span><br><span class=\"line\">$ <span class=\"built_in\">mkdir</span> venv</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> venv/</span><br><span class=\"line\"><span class=\"comment\">#初始化python运行环境</span></span><br><span class=\"line\">$ python* -m venv .</span><br><span class=\"line\"><span class=\"comment\">#查看当前目录，发现生成lib，include,bin，pyvenv.cfg</span></span><br><span class=\"line\">$ <span class=\"built_in\">ls</span></span><br><span class=\"line\">bin  include  lib  pyvenv.cfg</span><br><span class=\"line\"><span class=\"comment\">#进入bin目录，激活该venv环境</span></span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> bin</span><br><span class=\"line\">$ <span class=\"built_in\">source</span> activate</span><br><span class=\"line\"><span class=\"comment\">#退出当前的proj101env环境</span></span><br><span class=\"line\">$ deactivate</span><br></pre></td></tr></table></figure>\n<h1 id=\"Ipython编程工具\"><a href=\"#Ipython编程工具\" class=\"headerlink\" title=\"Ipython编程工具\"></a>Ipython编程工具</h1><ol>\n<li>安装Ipython<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pip install ipython</span><br></pre></td></tr></table></figure></li>\n<li>启动IPython<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ipython</span><br></pre></td></tr></table></figure></li>\n<li>退出ipython<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ctl+D</span><br></pre></td></tr></table></figure>\nturtle图形绘制工具</li>\n<li>安装依赖<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># For Ubuntu or other distros with Apt:</span></span><br><span class=\"line\">$ sudo apt-get install python3-tk</span><br><span class=\"line\"><span class=\"comment\"># For Fedora:</span></span><br><span class=\"line\">$ sudo dnf install python3-tkinter</span><br></pre></td></tr></table></figure></li>\n<li>绘制图形<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import turtle</span><br><span class=\"line\"></span><br><span class=\"line\">turtle.pensize(4)</span><br><span class=\"line\">turtle.pencolor(&#x27;red&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">turtle.forward(100)</span><br><span class=\"line\">turtle.right(90)</span><br><span class=\"line\">turtle.forward(100)</span><br><span class=\"line\">turtle.right(90)</span><br><span class=\"line\">turtle.forward(100)</span><br><span class=\"line\">turtle.right(90)</span><br><span class=\"line\">turtle.forward(100)</span><br><span class=\"line\"></span><br><span class=\"line\">turtle.mainloop()</span><br></pre></td></tr></table></figure></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"安装Python\"><a href=\"#安装Python\" class=\"headerlink\" title=\"安装Python\"></a>安装Python</h1><ol>\n<li>下载python<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget https://www.python.org/ftp/python/3.8.0/Python-3.8.0.tgz</span><br><span class=\"line\"><span class=\"comment\"># 解压到opt</span></span><br><span class=\"line\">$ tar -zxvf Python-3.8.0.tgz -C /opt</span><br></pre></td></tr></table></figure></li>\n<li>编译安装python3.8.0<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#进入到python-3.8.0文件夹</span></span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> /opt/Python-3.8.0 </span><br><span class=\"line\"><span class=\"comment\">#检查以确保系统满足程序的最低要求</span></span><br><span class=\"line\">$ sudo ./configure </span><br><span class=\"line\"><span class=\"comment\">#执行编译脚本</span></span><br><span class=\"line\">$ sudo make </span><br><span class=\"line\"><span class=\"comment\">#直接安装</span></span><br><span class=\"line\">$ sudo make install</span><br><span class=\"line\"><span class=\"comment\">#替换原版本安装</span></span><br><span class=\"line\">$ sudo make altinstall</span><br></pre></td></tr></table></figure></li>\n<li>修改python默认版本<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#查询python3.8位置</span></span><br><span class=\"line\">$ whereis python3.8</span><br><span class=\"line\">python3.9: /usr/local/bin/python3.8 /usr/local/lib/python3.8</span><br><span class=\"line\"><span class=\"comment\">#删除当前软连接</span></span><br><span class=\"line\">$ sudo <span class=\"built_in\">rm</span> /usr/bin/python</span><br><span class=\"line\"><span class=\"comment\">#为新版python创建软链接</span></span><br><span class=\"line\">$ sudo <span class=\"built_in\">ln</span> -s /usr/bin/python3.8 /usr/bin/python</span><br></pre></td></tr></table></figure></li>\n<li>配置环境变量<br>修改用户主目录下名为.bash_profile的文件，配置PATH环境变量并使其生效。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> ~</span><br><span class=\"line\">$ vim .bash_profile</span><br><span class=\"line\"><span class=\"comment\"># ... 此处省略上面的代码 ...</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:/usr/local/python38/bin</span><br><span class=\"line\"><span class=\"comment\"># ... 此处省略下面的代码 ...</span></span><br></pre></td></tr></table></figure></li>\n<li>激活环境变量<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">source</span> .bash_profile</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h1 id=\"修改Python默认版本\"><a href=\"#修改Python默认版本\" class=\"headerlink\" title=\"修改Python默认版本\"></a>修改Python默认版本</h1><ol>\n<li>查询当前版本<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python --version</span><br><span class=\"line\">Python 2.7.16</span><br></pre></td></tr></table></figure></li>\n<li>删除当前软链接<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo <span class=\"built_in\">rm</span> /usr/bin/python</span><br></pre></td></tr></table></figure></li>\n<li>为新版python创建软链接<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo <span class=\"built_in\">ln</span> -s /usr/bin/python3.7 /usr/bin/python</span><br></pre></td></tr></table></figure></li>\n<li>校验结果<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python --version</span><br><span class=\"line\">Python 3.7.3</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h1 id=\"pip源配置\"><a href=\"#pip源配置\" class=\"headerlink\" title=\"pip源配置\"></a>pip源配置</h1><p>pip配置信息保存路径：~&#x2F;.config&#x2F;pip&#x2F;pip.conf</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#配置清华源</span></span><br><span class=\"line\">$ pip config <span class=\"built_in\">set</span> global.index-url https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class=\"line\"><span class=\"comment\">#删除配置</span></span><br><span class=\"line\">$ pip config <span class=\"built_in\">unset</span> global.index-url</span><br></pre></td></tr></table></figure>\n<h1 id=\"venv环境配置\"><a href=\"#venv环境配置\" class=\"headerlink\" title=\"venv环境配置\"></a>venv环境配置</h1><p>1.创建独立的python运行环境</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#创建独立目录</span></span><br><span class=\"line\">$ <span class=\"built_in\">mkdir</span> venv</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> venv/</span><br><span class=\"line\"><span class=\"comment\">#初始化python运行环境</span></span><br><span class=\"line\">$ python* -m venv .</span><br><span class=\"line\"><span class=\"comment\">#查看当前目录，发现生成lib，include,bin，pyvenv.cfg</span></span><br><span class=\"line\">$ <span class=\"built_in\">ls</span></span><br><span class=\"line\">bin  include  lib  pyvenv.cfg</span><br><span class=\"line\"><span class=\"comment\">#进入bin目录，激活该venv环境</span></span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> bin</span><br><span class=\"line\">$ <span class=\"built_in\">source</span> activate</span><br><span class=\"line\"><span class=\"comment\">#退出当前的proj101env环境</span></span><br><span class=\"line\">$ deactivate</span><br></pre></td></tr></table></figure>\n<h1 id=\"Ipython编程工具\"><a href=\"#Ipython编程工具\" class=\"headerlink\" title=\"Ipython编程工具\"></a>Ipython编程工具</h1><ol>\n<li>安装Ipython<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pip install ipython</span><br></pre></td></tr></table></figure></li>\n<li>启动IPython<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ipython</span><br></pre></td></tr></table></figure></li>\n<li>退出ipython<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ctl+D</span><br></pre></td></tr></table></figure>\nturtle图形绘制工具</li>\n<li>安装依赖<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># For Ubuntu or other distros with Apt:</span></span><br><span class=\"line\">$ sudo apt-get install python3-tk</span><br><span class=\"line\"><span class=\"comment\"># For Fedora:</span></span><br><span class=\"line\">$ sudo dnf install python3-tkinter</span><br></pre></td></tr></table></figure></li>\n<li>绘制图形<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import turtle</span><br><span class=\"line\"></span><br><span class=\"line\">turtle.pensize(4)</span><br><span class=\"line\">turtle.pencolor(&#x27;red&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">turtle.forward(100)</span><br><span class=\"line\">turtle.right(90)</span><br><span class=\"line\">turtle.forward(100)</span><br><span class=\"line\">turtle.right(90)</span><br><span class=\"line\">turtle.forward(100)</span><br><span class=\"line\">turtle.right(90)</span><br><span class=\"line\">turtle.forward(100)</span><br><span class=\"line\"></span><br><span class=\"line\">turtle.mainloop()</span><br></pre></td></tr></table></figure></li>\n</ol>\n"},{"title":"git使用","date":"2023-12-15T02:27:28.000Z","description":"Linux git使用","type":"tags","comments":1,"_content":"# 远程配置\n\"待补充···\"\n\n# 本地配置\n\n优先级：local > global > system\n\n```bash\ngit config user.name <name>\ngit config user.email <email>\n# --local ：local只对仓库有效\n# --global ：global对登录用户所有仓库有效\n# --system ：system对系统的所有用户有效\n```\n\n# 本地仓库切换分支\n\n```bash\ngit checkout <old-branch>\ngit checkout -b <new-branch>\n```\n\n# 合并远程分支\n\n```bash\ngit push origin <local-branch>:<cloud-branch>\n```\n\n# 删除本地分支\n\n```bash\ngit branch -d <local-branch>\n```\n# 删除远程分支\n\n```bash\ngit push origin -d <cloud-branch>\n```\n# 拉取远程代码到本地分支\n\n```bash\ngit pull origin <local-branch>\n```\n# 创建远程分支\n\n```bash\n# 将本地分支推送到远程分支，若远程分支不存在则会自动新建新远程分支\ngit push origin <local-branch>:<cloud-branch>\n# 将本地空分支推送到远程分支上时，则会删除该远程分支\ngit push origin :<cloud-branch>\n```\n\n# 合并commit\n\n```bash\n# 本地通常会有无数次 commit ，可以合并“相同功能”的多个 commit，以保持历史的简洁。\ngit commit --amend \n```\n\n# 添加多个远程仓库\n```bash\n#添加远程仓库地址，并将其命名。\ngit remote add <name> <url>\n#提交到远程仓库，origin是默认仓库地址。\ngit push <name> <本地分支>:<远程仓库分支>\n```","source":"_posts/git使用.md","raw":"---\ntitle: git使用\ndate: 2023-12-15 10:27:28\ndescription: Linux git使用\ntype: \"tags\"\ncomments: true\ncategories:\n- Linux\n- Tools\n- Git\ntags:\n- Linux\n- Git\n---\n# 远程配置\n\"待补充···\"\n\n# 本地配置\n\n优先级：local > global > system\n\n```bash\ngit config user.name <name>\ngit config user.email <email>\n# --local ：local只对仓库有效\n# --global ：global对登录用户所有仓库有效\n# --system ：system对系统的所有用户有效\n```\n\n# 本地仓库切换分支\n\n```bash\ngit checkout <old-branch>\ngit checkout -b <new-branch>\n```\n\n# 合并远程分支\n\n```bash\ngit push origin <local-branch>:<cloud-branch>\n```\n\n# 删除本地分支\n\n```bash\ngit branch -d <local-branch>\n```\n# 删除远程分支\n\n```bash\ngit push origin -d <cloud-branch>\n```\n# 拉取远程代码到本地分支\n\n```bash\ngit pull origin <local-branch>\n```\n# 创建远程分支\n\n```bash\n# 将本地分支推送到远程分支，若远程分支不存在则会自动新建新远程分支\ngit push origin <local-branch>:<cloud-branch>\n# 将本地空分支推送到远程分支上时，则会删除该远程分支\ngit push origin :<cloud-branch>\n```\n\n# 合并commit\n\n```bash\n# 本地通常会有无数次 commit ，可以合并“相同功能”的多个 commit，以保持历史的简洁。\ngit commit --amend \n```\n\n# 添加多个远程仓库\n```bash\n#添加远程仓库地址，并将其命名。\ngit remote add <name> <url>\n#提交到远程仓库，origin是默认仓库地址。\ngit push <name> <本地分支>:<远程仓库分支>\n```","slug":"git使用","published":1,"updated":"2025-03-27T00:57:01.338Z","layout":"post","photos":[],"link":"","_id":"cmamklq700015fkd1asfz253z","content":"<h1 id=\"远程配置\"><a href=\"#远程配置\" class=\"headerlink\" title=\"远程配置\"></a>远程配置</h1><p>“待补充···”</p>\n<h1 id=\"本地配置\"><a href=\"#本地配置\" class=\"headerlink\" title=\"本地配置\"></a>本地配置</h1><p>优先级：local &gt; global &gt; system</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config user.name &lt;name&gt;</span><br><span class=\"line\">git config user.email &lt;email&gt;</span><br><span class=\"line\"><span class=\"comment\"># --local ：local只对仓库有效</span></span><br><span class=\"line\"><span class=\"comment\"># --global ：global对登录用户所有仓库有效</span></span><br><span class=\"line\"><span class=\"comment\"># --system ：system对系统的所有用户有效</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"本地仓库切换分支\"><a href=\"#本地仓库切换分支\" class=\"headerlink\" title=\"本地仓库切换分支\"></a>本地仓库切换分支</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout &lt;old-branch&gt;</span><br><span class=\"line\">git checkout -b &lt;new-branch&gt;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"合并远程分支\"><a href=\"#合并远程分支\" class=\"headerlink\" title=\"合并远程分支\"></a>合并远程分支</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin &lt;local-branch&gt;:&lt;cloud-branch&gt;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"删除本地分支\"><a href=\"#删除本地分支\" class=\"headerlink\" title=\"删除本地分支\"></a>删除本地分支</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -d &lt;local-branch&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"删除远程分支\"><a href=\"#删除远程分支\" class=\"headerlink\" title=\"删除远程分支\"></a>删除远程分支</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin -d &lt;cloud-branch&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"拉取远程代码到本地分支\"><a href=\"#拉取远程代码到本地分支\" class=\"headerlink\" title=\"拉取远程代码到本地分支\"></a>拉取远程代码到本地分支</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull origin &lt;local-branch&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"创建远程分支\"><a href=\"#创建远程分支\" class=\"headerlink\" title=\"创建远程分支\"></a>创建远程分支</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将本地分支推送到远程分支，若远程分支不存在则会自动新建新远程分支</span></span><br><span class=\"line\">git push origin &lt;local-branch&gt;:&lt;cloud-branch&gt;</span><br><span class=\"line\"><span class=\"comment\"># 将本地空分支推送到远程分支上时，则会删除该远程分支</span></span><br><span class=\"line\">git push origin :&lt;cloud-branch&gt;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"合并commit\"><a href=\"#合并commit\" class=\"headerlink\" title=\"合并commit\"></a>合并commit</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 本地通常会有无数次 commit ，可以合并“相同功能”的多个 commit，以保持历史的简洁。</span></span><br><span class=\"line\">git commit --amend </span><br></pre></td></tr></table></figure>\n\n<h1 id=\"添加多个远程仓库\"><a href=\"#添加多个远程仓库\" class=\"headerlink\" title=\"添加多个远程仓库\"></a>添加多个远程仓库</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#添加远程仓库地址，并将其命名。</span></span><br><span class=\"line\">git remote add &lt;name&gt; &lt;url&gt;</span><br><span class=\"line\"><span class=\"comment\">#提交到远程仓库，origin是默认仓库地址。</span></span><br><span class=\"line\">git push &lt;name&gt; &lt;本地分支&gt;:&lt;远程仓库分支&gt;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"远程配置\"><a href=\"#远程配置\" class=\"headerlink\" title=\"远程配置\"></a>远程配置</h1><p>“待补充···”</p>\n<h1 id=\"本地配置\"><a href=\"#本地配置\" class=\"headerlink\" title=\"本地配置\"></a>本地配置</h1><p>优先级：local &gt; global &gt; system</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config user.name &lt;name&gt;</span><br><span class=\"line\">git config user.email &lt;email&gt;</span><br><span class=\"line\"><span class=\"comment\"># --local ：local只对仓库有效</span></span><br><span class=\"line\"><span class=\"comment\"># --global ：global对登录用户所有仓库有效</span></span><br><span class=\"line\"><span class=\"comment\"># --system ：system对系统的所有用户有效</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"本地仓库切换分支\"><a href=\"#本地仓库切换分支\" class=\"headerlink\" title=\"本地仓库切换分支\"></a>本地仓库切换分支</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout &lt;old-branch&gt;</span><br><span class=\"line\">git checkout -b &lt;new-branch&gt;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"合并远程分支\"><a href=\"#合并远程分支\" class=\"headerlink\" title=\"合并远程分支\"></a>合并远程分支</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin &lt;local-branch&gt;:&lt;cloud-branch&gt;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"删除本地分支\"><a href=\"#删除本地分支\" class=\"headerlink\" title=\"删除本地分支\"></a>删除本地分支</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -d &lt;local-branch&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"删除远程分支\"><a href=\"#删除远程分支\" class=\"headerlink\" title=\"删除远程分支\"></a>删除远程分支</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin -d &lt;cloud-branch&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"拉取远程代码到本地分支\"><a href=\"#拉取远程代码到本地分支\" class=\"headerlink\" title=\"拉取远程代码到本地分支\"></a>拉取远程代码到本地分支</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull origin &lt;local-branch&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"创建远程分支\"><a href=\"#创建远程分支\" class=\"headerlink\" title=\"创建远程分支\"></a>创建远程分支</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将本地分支推送到远程分支，若远程分支不存在则会自动新建新远程分支</span></span><br><span class=\"line\">git push origin &lt;local-branch&gt;:&lt;cloud-branch&gt;</span><br><span class=\"line\"><span class=\"comment\"># 将本地空分支推送到远程分支上时，则会删除该远程分支</span></span><br><span class=\"line\">git push origin :&lt;cloud-branch&gt;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"合并commit\"><a href=\"#合并commit\" class=\"headerlink\" title=\"合并commit\"></a>合并commit</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 本地通常会有无数次 commit ，可以合并“相同功能”的多个 commit，以保持历史的简洁。</span></span><br><span class=\"line\">git commit --amend </span><br></pre></td></tr></table></figure>\n\n<h1 id=\"添加多个远程仓库\"><a href=\"#添加多个远程仓库\" class=\"headerlink\" title=\"添加多个远程仓库\"></a>添加多个远程仓库</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#添加远程仓库地址，并将其命名。</span></span><br><span class=\"line\">git remote add &lt;name&gt; &lt;url&gt;</span><br><span class=\"line\"><span class=\"comment\">#提交到远程仓库，origin是默认仓库地址。</span></span><br><span class=\"line\">git push &lt;name&gt; &lt;本地分支&gt;:&lt;远程仓库分支&gt;</span><br></pre></td></tr></table></figure>"},{"_content":"# OpenStack Antelope 部署指南\n\n[TOC]\n\n本文档是 openEuler OpenStack SIG 编写的基于 |openEuler 24.03 LTS SP1 的 OpenStack 部署指南，内容由 SIG 贡献者提供。在阅读过程中，如果您有任何疑问或者发现任何问题，请[联系](https://gitee.com/openeuler/openstack#%E8%81%94%E7%B3%BB%E6%96%B9%E5%BC%8F)SIG维护人员，或者直接[提交issue](https://gitee.com/openeuler/openstack/issues)\n\n**约定**\n\n本章节描述文档中的一些通用约定。\n\n| 名称 | 定义 |\n|:----:|:----:|\n| RABBIT_PASS | rabbitmq的密码，由用户设置，在OpenStack各个服务配置中使用 |\n| CINDER_PASS | cinder服务keystone用户的密码，在cinder配置中使用|\n| CINDER_DBPASS | cinder服务数据库密码，在cinder配置中使用|\n| KEYSTONE_DBPASS | keystone服务数据库密码，在keystone配置中使用|\n| GLANCE_PASS | glance服务keystone用户的密码，在glance配置中使用|\n| GLANCE_DBPASS | glance服务数据库密码，在glance配置中使用|\n| HEAT_PASS | 在keystone注册的heat用户密码，在heat配置中使用|\n| HEAT_DBPASS | heat服务数据库密码，在heat配置中使用 |\n| CYBORG_PASS | 在keystone注册的cyborg用户密码，在cyborg配置中使用|\n| CYBORG_DBPASS | cyborg服务数据库密码，在cyborg配置中使用 |\n| NEUTRON_PASS | 在keystone注册的neutron用户密码，在neutron配置中使用|\n| NEUTRON_DBPASS | neutron服务数据库密码，在neutron配置中使用 |\n| PROVIDER_INTERFACE_NAME | 物理网络接口的名称，在neutron配置中使用 |\n| OVERLAY_INTERFACE_IP_ADDRESS | Controller控制节点的管理ip地址，在neutron配置中使用 |\n| METADATA_SECRET | metadata proxy的secret密码，在nova和neutron配置中使用 |\n| PLACEMENT_DBPASS | placement服务数据库密码，在placement配置中使用 |\n| PLACEMENT_PASS | 在keystone注册的placement用户密码，在placement配置中使用 |\n| NOVA_DBPASS |  nova服务数据库密码，在nova配置中使用 |\n| NOVA_PASS | 在keystone注册的nova用户密码，在nova,cyborg,neutron等配置中使用 |\n| IRONIC_DBPASS | ironic服务数据库密码，在ironic配置中使用 |\n| IRONIC_PASS | 在keystone注册的ironic用户密码，在ironic配置中使用 |\n| IRONIC_INSPECTOR_DBPASS | ironic-inspector服务数据库密码，在ironic-inspector配置中使用|\n| IRONIC_INSPECTOR_PASS | 在keystone注册的ironic-inspector用户密码，在ironic-inspector配置中使用 |\n\nOpenStack SIG 提供了多种基于 openEuler 部署 OpenStack 的方法，以满足不同的用户场景，请按需选择。\n\n## 基于RPM部署\n\n### 环境准备\n\n本文档基于OpenStack经典的三节点环境进行部署，三个节点分别是控制节点(Controller)、计算节点(Compute)、存储节点(Storage)，其中存储节点一般只部署存储服务，在资源有限的情况下，可以不单独部署该节点，把存储节点上的服务部署到计算节点即可。\n\n首先准备三个|openEuler 24.03 LTS SP1环境，根据您的环境，下载对应的镜像并安装即可：[ISO镜像](https://repo.openeuler.org/openEuler-24.03-LTS-SP1/ISO/)、[qcow2镜像](https://repo.openeuler.org/openEuler-24.03-LTS-SP1/virtual_machine_img/)。\n\n下面的安装按照如下拓扑进行：\n\n```shell\ncontroller：192.168.0.2\ncompute：   192.168.0.3\nstorage：   192.168.0.4\n```\n\n如果您的环境IP不同，请按照您的环境IP修改相应的配置文件。\n\n本文档的三节点服务拓扑如下图所示(只包含Keystone、Glance、Nova、Cinder、Neutron这几个核心服务，其他服务请参考具体部署章节)：\n\n![topology1](../img/install/topology1.PNG)\n![topology2](../img/install/topology2.PNG)\n![topology3](../img/install/topology3.PNG)\n\n在正式部署之前，需要对每个节点做如下配置和检查：\n\n1. 配置 |openEuler 24.03 LTS SP1 官方 yum 源，需要启用 EPOL 软件仓以支持 OpenStack\n\n    ```shell\n    yum update\n    yum install openstack-release-antelope\n    yum clean all && yum makecache\n    ```\n\n    **注意**：如果你的环境的YUM源没有启用EPOL，需要同时配置EPOL，确保EPOL已配置，如下所示。\n\n    ```shell\n    vi /etc/yum.repos.d/openEuler.repo\n\n    [EPOL]\n    name=EPOL\n    baseurl=http://repo.openeuler.org/openEuler-24.03-LTS-SP1/EPOL/main/$basearch/\n    enabled=1\n    gpgcheck=1\n    gpgkey=http://repo.openeuler.org/openEuler-24.03-LTS-SP1/OS/$basearch/RPM-GPG-KEY-openEuler\n    EOF\n    ```\n\n2. 修改主机名以及映射\n\n    每个节点分别修改主机名，以controller为例：\n\n    ```shell\n    hostnamectl set-hostname controller\n\n    vi /etc/hostname\n    内容修改为controller\n    ```\n\n    然后修改每个节点的`/etc/hosts`文件，新增如下内容:\n\n    ```shell\n    192.168.0.2   controller\n    192.168.0.3   compute\n    192.168.0.4   storage\n    ```\n\n#### 时钟同步\n\n集群环境时刻要求每个节点的时间一致，一般由时钟同步软件保证。本文使用`chrony`软件。步骤如下：\n\n**Controller节点**：\n\n1. 安装服务\n\n    ```shell\n    dnf install chrony\n    ```\n\n2. 修改`/etc/chrony.conf`配置文件，新增一行\n\n    ```shell\n    # 表示允许哪些IP从本节点同步时钟\n    allow 192.168.0.0/24\n    ```\n\n3. 重启服务\n\n    ```shell\n    systemctl restart chronyd\n    ```\n\n**其他节点**\n\n1. 安装服务\n\n    ```shell\n    dnf install chrony\n    ```\n\n2. 修改`/etc/chrony.conf`配置文件，新增一行\n\n    ```shell\n    # NTP_SERVER是controller IP，表示从这个机器获取时间，这里我们填192.168.0.2，或者在`/etc/hosts`里配置好的controller名字即可。\n    server NTP_SERVER iburst\n    ```\n\n    同时，要把`pool pool.ntp.org iburst`这一行注释掉，表示不从公网同步时钟。\n\n3. 重启服务\n\n    ```shell\n    systemctl restart chronyd\n    ```\n\n配置完成后，检查一下结果，在其他非controller节点执行`chronyc sources`，返回结果类似如下内容，表示成功从controller同步时钟。\n\n```ini\nMS Name/IP address         Stratum Poll Reach LastRx Last sample\n===============================================================================\n^* 192.168.0.2                 4   6     7     0  -1406ns[  +55us] +/-   16ms\n```\n\n#### 安装数据库\n\n数据库安装在控制节点，这里推荐使用mariadb。\n\n1. 安装软件包\n\n    ```shell\n    dnf install mysql-config mariadb mariadb-server python3-PyMySQL\n    ```\n\n2. 新增配置文件`/etc/my.cnf.d/openstack.cnf`，内容如下\n\n    ```shell\n    [mysqld]\n    bind-address = 192.168.0.2\n    default-storage-engine = innodb\n    innodb_file_per_table = on\n    max_connections = 4096\n    collation-server = utf8_general_ci\n    character-set-server = utf8\n    ```\n\n3. 启动服务器\n\n    ```shell\n    systemctl start mariadb\n    ```\n\n4. 初始化数据库，根据提示进行即可\n\n    ```shell\n    mysql_secure_installation\n    ```\n\n    示例如下：\n\n    ```shell\n    NOTE: RUNNING ALL PARTS OF THIS SCRIPT IS RECOMMENDED FOR ALL MariaDB\n        SERVERS IN PRODUCTION USE!  PLEASE READ EACH STEP CAREFULLY!\n\n    In order to log into MariaDB to secure it, we'll need the current\n    password for the root user. If you've just installed MariaDB, and\n    haven't set the root password yet, you should just press enter here.\n\n    Enter current password for root (enter for none): \n    \n    #这里输入密码，由于我们是初始化DB，直接回车就行\n\n    OK, successfully used password, moving on...\n\n    Setting the root password or using the unix_socket ensures that nobody\n    can log into the MariaDB root user without the proper authorisation.\n\n    You already have your root account protected, so you can safely answer 'n'.\n\n    # 这里根据提示输入N\n\n    Switch to unix_socket authentication [Y/n] N\n\n    Enabled successfully!\n    Reloading privilege tables..\n    ... Success!\n\n\n    You already have your root account protected, so you can safely answer 'n'.\n\n    # 输入Y，修改密码\n\n    Change the root password? [Y/n] Y\n\n    New password: \n    Re-enter new password: \n    Password updated successfully!\n    Reloading privilege tables..\n    ... Success!\n\n\n    By default, a MariaDB installation has an anonymous user, allowing anyone\n    to log into MariaDB without having to have a user account created for\n    them.  This is intended only for testing, and to make the installation\n    go a bit smoother.  You should remove them before moving into a\n    production environment.\n\n    # 输入Y，删除匿名用户\n\n    Remove anonymous users? [Y/n] Y\n    ... Success!\n\n    Normally, root should only be allowed to connect from 'localhost'.  This\n    ensures that someone cannot guess at the root password from the network.\n\n    # 输入Y，关闭root远程登录权限\n\n    Disallow root login remotely? [Y/n] Y\n    ... Success!\n\n    By default, MariaDB comes with a database named 'test' that anyone can\n    access.  This is also intended only for testing, and should be removed\n    before moving into a production environment.\n\n    # 输入Y，删除test数据库\n\n    Remove test database and access to it? [Y/n] Y\n    - Dropping test database...\n    ... Success!\n    - Removing privileges on test database...\n    ... Success!\n\n    Reloading the privilege tables will ensure that all changes made so far\n    will take effect immediately.\n\n    # 输入Y，重载配置\n\n    Reload privilege tables now? [Y/n] Y\n    ... Success!\n\n    Cleaning up...\n\n    All done!  If you've completed all of the above steps, your MariaDB\n    installation should now be secure.\n    ```\n\n5. 验证，根据第四步设置的密码，检查是否能登录mariadb\n\n    ```shell\n    mysql -uroot -p\n    ```\n\n#### 安装消息队列\n\n消息队列安装在控制节点，这里推荐使用rabbitmq。\n\n1. 安装软件包\n\n    ```shell\n    dnf install rabbitmq-server\n    ```\n\n2. 启动服务\n\n    ```shell\n    systemctl start rabbitmq-server\n    ```\n\n3. 配置openstack用户，`RABBIT_PASS`是openstack服务登录消息队里的密码，需要和后面各个服务的配置保持一致。\n\n    ```shell\n    rabbitmqctl add_user openstack RABBIT_PASS\n    rabbitmqctl set_permissions openstack \".*\" \".*\" \".*\"\n    ```\n\n#### 安装缓存服务\n\n消息队列安装在控制节点，这里推荐使用Memcached。\n\n1. 安装软件包\n\n    ```shell\n    dnf install memcached python3-memcached\n    ```\n\n2. 修改配置文件`/etc/sysconfig/memcached`\n\n    ```shell\n    OPTIONS=\"-l 127.0.0.1,::1,controller\"\n    ```\n\n3. 启动服务\n\n    ```shell\n    systemctl start memcached\n    ```\n\n### 部署服务\n\n#### Keystone\n\nKeystone是OpenStack提供的鉴权服务，是整个OpenStack的入口，提供了租户隔离、用户认证、服务发现等功能，必须安装。\n\n1. 创建 keystone 数据库并授权\n\n    ``` sql\n    mysql -u root -p\n\n    MariaDB [(none)]> CREATE DATABASE keystone;\n    MariaDB [(none)]> GRANT ALL PRIVILEGES ON keystone.* TO 'keystone'@'localhost' \\\n    IDENTIFIED BY 'KEYSTONE_DBPASS';\n    MariaDB [(none)]> GRANT ALL PRIVILEGES ON keystone.* TO 'keystone'@'%' \\\n    IDENTIFIED BY 'KEYSTONE_DBPASS';\n    MariaDB [(none)]> exit\n    ```\n\n    ***注意***\n\n    **替换 `KEYSTONE_DBPASS`，为 Keystone 数据库设置密码**\n\n2. 安装软件包\n\n    ```shell\n    dnf install openstack-keystone httpd mod_wsgi\n    ```\n\n3. 配置keystone相关配置\n\n    ```shell\n    vim /etc/keystone/keystone.conf\n\n    [database]\n    connection = mysql+pymysql://keystone:KEYSTONE_DBPASS@controller/keystone\n\n    [token]\n    provider = fernet\n    ```\n\n    ***解释***\n\n    [database]部分，配置数据库入口\n\n    [token]部分，配置token provider\n\n4. 同步数据库\n\n    ```shell\n    su -s /bin/sh -c \"keystone-manage db_sync\" keystone\n    ```\n\n5. 初始化Fernet密钥仓库\n\n    ```shell\n    keystone-manage fernet_setup --keystone-user keystone --keystone-group keystone\n    keystone-manage credential_setup --keystone-user keystone --keystone-group keystone\n    ```\n\n6. 启动服务\n\n    ```shell\n    keystone-manage bootstrap --bootstrap-password ADMIN_PASS \\\n    --bootstrap-admin-url http://controller:5000/v3/ \\\n    --bootstrap-internal-url http://controller:5000/v3/ \\\n    --bootstrap-public-url http://controller:5000/v3/ \\\n    --bootstrap-region-id RegionOne\n    ```\n\n    ***注意***\n\n    **替换 `ADMIN_PASS`，为 admin 用户设置密码**\n\n7. 配置Apache HTTP server\n\n    - 打开httpd.conf并配置\n\n    ```shell\n    #需要修改的配置文件路径\n    vim /etc/httpd/conf/httpd.conf\n    \n    #修改以下项，如果没有则新添加\n    ServerName controller\n    ```\n\n    - 创建软链接\n\n    ```shell\n    ln -s /usr/share/keystone/wsgi-keystone.conf /etc/httpd/conf.d/\n    ```\n\n    ***解释***\n\n    配置 `ServerName` 项引用控制节点\n\n    ***注意***\n    **如果 `ServerName` 项不存在则需要创建**\n\n8. 启动Apache HTTP服务\n\n    ```shell\n    systemctl enable httpd.service\n    systemctl start httpd.service\n    ```\n\n9. 创建环境变量配置\n\n    ```shell\n    cat << EOF >> ~/.admin-openrc\n    export OS_PROJECT_DOMAIN_NAME=Default\n    export OS_USER_DOMAIN_NAME=Default\n    export OS_PROJECT_NAME=admin\n    export OS_USERNAME=admin\n    export OS_PASSWORD=ADMIN_PASS\n    export OS_AUTH_URL=http://controller:5000/v3\n    export OS_IDENTITY_API_VERSION=3\n    export OS_IMAGE_API_VERSION=2\n    EOF\n    ```\n\n    ***注意***\n\n    **替换 `ADMIN_PASS` 为 admin 用户的密码**\n\n10. 依次创建domain, projects, users, roles\n\n    - 需要先安装python3-openstackclient\n\n    ```shell\n    dnf install python3-openstackclient\n    ```\n\n    - 导入环境变量\n\n    ```shell\n    source ~/.admin-openrc\n    ```\n\n    - 创建project `service`，其中 domain `default` 在 keystone-manage bootstrap 时已创建\n\n    ```shell\n    openstack domain create --description \"An Example Domain\" example\n    ```\n\n    ```shell\n    openstack project create --domain default --description \"Service Project\" service\n    ```\n\n    - 创建（non-admin）project `myproject`，user `myuser` 和 role `myrole`，为 `myproject` 和 `myuser` 添加角色`myrole`\n\n    ```shell\n    openstack project create --domain default --description \"Demo Project\" myproject\n    openstack user create --domain default --password-prompt myuser\n    openstack role create myrole\n    openstack role add --project myproject --user myuser myrole\n    ```\n\n11. 验证\n\n    - 取消临时环境变量OS_AUTH_URL和OS_PASSWORD：\n\n    ```shell\n    source ~/.admin-openrc\n    unset OS_AUTH_URL OS_PASSWORD\n    ```\n\n    - 为admin用户请求token：\n\n    ```shell\n    openstack --os-auth-url http://controller:5000/v3 \\\n    --os-project-domain-name Default --os-user-domain-name Default \\\n    --os-project-name admin --os-username admin token issue\n    ```\n\n    - 为myuser用户请求token：\n\n    ```shell\n    openstack --os-auth-url http://controller:5000/v3 \\\n    --os-project-domain-name Default --os-user-domain-name Default \\\n    --os-project-name myproject --os-username myuser token issue\n    ```\n\n#### Glance\n\nGlance是OpenStack提供的镜像服务，负责虚拟机、裸机镜像的上传与下载，必须安装。\n\n**Controller节点**：\n\n1. 创建 glance 数据库并授权\n\n    ```sql\n    mysql -u root -p\n\n    MariaDB [(none)]> CREATE DATABASE glance;\n    MariaDB [(none)]> GRANT ALL PRIVILEGES ON glance.* TO 'glance'@'localhost' \\\n    IDENTIFIED BY 'GLANCE_DBPASS';\n    MariaDB [(none)]> GRANT ALL PRIVILEGES ON glance.* TO 'glance'@'%' \\\n    IDENTIFIED BY 'GLANCE_DBPASS';\n    MariaDB [(none)]> exit\n    ```\n\n    ***注意:***\n\n    **替换 `GLANCE_DBPASS`，为 glance 数据库设置密码**\n\n2. 初始化 glance 资源对象\n\n    - 导入环境变量\n\n    ```shell\n    source ~/.admin-openrc\n    ```\n\n    - 创建用户时，命令行会提示输入密码，请输入自定义的密码，下文涉及到`GLANCE_PASS`的地方替换成该密码即可。\n\n    ```shell\n    openstack user create --domain default --password-prompt glance\n    User Password:\n    Repeat User Password:\n    ```\n\n    - 添加glance用户到service project并指定admin角色：\n\n    ```shell\n    openstack role add --project service --user glance admin\n    ```\n\n    - 创建glance服务实体：\n\n    ```shell\n    openstack service create --name glance --description \"OpenStack Image\" image\n    ```\n\n    - 创建glance API服务：\n\n    ```shell\n    openstack endpoint create --region RegionOne image public http://controller:9292\n    openstack endpoint create --region RegionOne image internal http://controller:9292\n    openstack endpoint create --region RegionOne image admin http://controller:9292\n    ```\n\n3. 安装软件包\n\n    ```shell\n    dnf install openstack-glance\n    ```\n\n4. 修改 glance 配置文件\n\n    ```shell\n    vim /etc/glance/glance-api.conf\n\n    [database]\n    connection = mysql+pymysql://glance:GLANCE_DBPASS@controller/glance\n\n    [keystone_authtoken]\n    www_authenticate_uri  = http://controller:5000\n    auth_url = http://controller:5000\n    memcached_servers = controller:11211\n    auth_type = password\n    project_domain_name = Default\n    user_domain_name = Default\n    project_name = service\n    username = glance\n    password = GLANCE_PASS\n\n    [paste_deploy]\n    flavor = keystone\n\n    [glance_store]\n    stores = file,http\n    default_store = file\n    filesystem_store_datadir = /var/lib/glance/images/\n    ```\n\n    ***解释:***\n\n    [database]部分，配置数据库入口\n\n    [keystone_authtoken] [paste_deploy]部分，配置身份认证服务入口\n\n    [glance_store]部分，配置本地文件系统存储和镜像文件的位置\n\n5. 同步数据库\n\n    ```shell\n    su -s /bin/sh -c \"glance-manage db_sync\" glance\n    ```\n\n6. 启动服务：\n\n    ```shell\n    systemctl enable openstack-glance-api.service\n    systemctl start openstack-glance-api.service\n    ```\n\n7. 验证\n\n    - 导入环境变量\n\n    ```shell\n    source ~/.admin-openrcu\n    ```\n\n    - 下载镜像\n\n    ```shell\n    x86镜像下载：\n    wget http://download.cirros-cloud.net/0.4.0/cirros-0.4.0-x86_64-disk.img\n\n    arm镜像下载：\n    wget http://download.cirros-cloud.net/0.4.0/cirros-0.4.0-aarch64-disk.img\n    ```\n\n    ***注意***\n\n    **如果您使用的环境是鲲鹏架构，请下载aarch64版本的镜像；已对镜像cirros-0.5.2-aarch64-disk.img进行测试。**\n\n    - 向Image服务上传镜像：\n\n    ```shell\n    openstack image create --disk-format qcow2 --container-format bare \\\n                        --file cirros-0.4.0-x86_64-disk.img --public cirros\n    ```\n\n    - 确认镜像上传并验证属性：\n\n    ```shell\n    openstack image list\n    ```\n\n#### Placement\n\nPlacement是OpenStack提供的资源调度组件，一般不面向用户，由Nova等组件调用，安装在控制节点。\n\n安装、配置Placement服务前，需要先创建相应的数据库、服务凭证和API endpoints。\n\n1. 创建数据库\n\n    - 使用root用户访问数据库服务：\n\n    ```shell\n    mysql -u root -p\n    ```\n\n    - 创建placement数据库：\n\n    ```sql\n    MariaDB [(none)]> CREATE DATABASE placement;\n    ```\n\n    - 授权数据库访问：\n\n    ```sql\n    MariaDB [(none)]> GRANT ALL PRIVILEGES ON placement.* TO 'placement'@'localhost' \\\n        IDENTIFIED BY 'PLACEMENT_DBPASS';\n    MariaDB [(none)]> GRANT ALL PRIVILEGES ON placement.* TO 'placement'@'%' \\\n        IDENTIFIED BY 'PLACEMENT_DBPASS';\n    ```\n\n    替换`PLACEMENT_DBPASS`为placement数据库访问密码。\n\n    - 退出数据库访问客户端：\n\n    ```shell\n    exit\n    ```\n\n2. 配置用户和Endpoints\n\n    - source admin凭证，以获取admin命令行权限：\n\n    ```shell\n    source ~/.admin-openrc\n    ```\n\n    - 创建placement用户并设置用户密码：\n\n    ```shell\n    openstack user create --domain default --password-prompt placement\n    \n    User Password:\n    Repeat User Password:\n    ```\n\n    - 添加placement用户到service project并指定admin角色：\n\n    ```shell\n    openstack role add --project service --user placement admin\n    ```\n\n    - 创建placement服务实体：\n\n    ```shell\n    openstack service create --name placement \\\n        --description \"Placement API\" placement\n    ```\n\n    - 创建Placement API服务endpoints：\n\n    ```shell\n    openstack endpoint create --region RegionOne \\\n        placement public http://controller:8778\n    openstack endpoint create --region RegionOne \\\n        placement internal http://controller:8778\n    openstack endpoint create --region RegionOne \\\n        placement admin http://controller:8778\n    ```\n\n3. 安装及配置组件\n\n    - 安装软件包：\n\n    ```shell\n    dnf install openstack-placement-api\n    ```\n\n    - 编辑`/etc/placement/placement.conf`配置文件，完成如下操作：\n\n        - 在`[placement_database]`部分，配置数据库入口：\n\n        ```ini\n        [placement_database]\n        connection = mysql+pymysql://placement:PLACEMENT_DBPASS@controller/placement\n        ```\n\n        替换`PLACEMENT_DBPASS`为placement数据库的密码。\n\n        - 在`[api]`和`[keystone_authtoken]`部分，配置身份认证服务入口：\n\n        ```ini\n        [api]\n        auth_strategy = keystone\n        \n        [keystone_authtoken]\n        auth_url = http://controller:5000/v3\n        memcached_servers = controller:11211\n        auth_type = password\n        project_domain_name = Default\n        user_domain_name = Default\n        project_name = service\n        username = placement\n        password = PLACEMENT_PASS\n        ```\n\n        替换`PLACEMENT_PASS`为placement用户的密码。\n\n    - 数据库同步，填充Placement数据库：\n\n    ```shell\n    su -s /bin/sh -c \"placement-manage db sync\" placement\n    ```\n\n4. 启动服务\n\n    重启httpd服务：\n\n    ```shell\n    systemctl restart httpd\n    ```\n\n5. 验证\n\n    - source admin凭证，以获取admin命令行权限\n\n    ```shell\n    source ~/.admin-openrc\n    ```\n\n    - 执行状态检查：\n\n    ```shell\n    placement-status upgrade check\n    ```\n\n    ```ini\n    +----------------------------------------------------------------------+\n    | Upgrade Check Results                                                |\n    +----------------------------------------------------------------------+\n    | Check: Missing Root Provider IDs                                     |\n    | Result: Success                                                      |\n    | Details: None                                                        |\n    +----------------------------------------------------------------------+\n    | Check: Incomplete Consumers                                          |\n    | Result: Success                                                      |\n    | Details: None                                                        |\n    +----------------------------------------------------------------------+\n    | Check: Policy File JSON to YAML Migration                            |\n    | Result: Failure                                                      |\n    | Details: Your policy file is JSON-formatted which is deprecated. You |\n    |   need to switch to YAML-formatted file. Use the                     |\n    |   ``oslopolicy-convert-json-to-yaml`` tool to convert the            |\n    |   existing JSON-formatted files to YAML in a backwards-              |\n    |   compatible manner: https://docs.openstack.org/oslo.policy/         |\n    |   latest/cli/oslopolicy-convert-json-to-yaml.html.                   |\n    +----------------------------------------------------------------------+\n    ```\n\n    这里可以看到``Policy File JSON to YAML Migration``的结果为Failure。这是因为在Placement中，JSON格式的policy文件从Wallaby版本开始已处于`deprecated`状态。可以参考提示，使用[oslopolicy-convert-json-to-yaml](https://docs.openstack.org/oslo.policy/latest/cli/oslopolicy-convert-json-to-yaml.html)工具  将现有的JSON格式policy文件转化为YAML格式。\n\n    ```shell\n    oslopolicy-convert-json-to-yaml  --namespace placement \\\n        --policy-file /etc/placement/policy.json \\\n        --output-file /etc/placement/policy.yaml\n    mv /etc/placement/policy.json{,.bak}\n    ```\n\n    注：当前环境中此问题可忽略，不影响运行。\n    \n    - 针对placement API运行命令：\n    \n        - 安装osc-placement插件：\n\n        ```shell\n        dnf install python3-osc-placement\n        ```\n\n        - 列出可用的资源类别及特性：\n\n        ```shell\n        openstack --os-placement-api-version 1.2 resource class list --sort-column name\n        +----------------------------+\n        | name                       |\n        +----------------------------+\n        | DISK_GB                    |\n        | FPGA                       |\n        | ...                        |\n        \n        openstack --os-placement-api-version 1.6 trait list --sort-column name\n        +---------------------------------------+\n        | name                                  |\n        +---------------------------------------+\n        | COMPUTE_ACCELERATORS                  |\n        | COMPUTE_ARCH_AARCH64                  |\n        | ...                                   |\n        ```\n\n#### Nova\n\nNova是OpenStack的计算服务，负责虚拟机的创建、发放等功能。\n\n**Controller节点**\n\n在控制节点执行以下操作。\n\n1. 创建数据库\n\n    - 使用root用户访问数据库服务：\n\n    ```shell\n    mysql -u root -p\n    ```\n\n    - 创建`nova_api`、`nova`和`nova_cell0`数据库：\n\n    ```sql\n    MariaDB [(none)]> CREATE DATABASE nova_api;\n    MariaDB [(none)]> CREATE DATABASE nova;\n    MariaDB [(none)]> CREATE DATABASE nova_cell0;\n    ```\n\n    - 授权数据库访问：\n\n    ```sql\n    MariaDB [(none)]> GRANT ALL PRIVILEGES ON nova_api.* TO 'nova'@'localhost' \\\n        IDENTIFIED BY 'NOVA_DBPASS';\n    MariaDB [(none)]> GRANT ALL PRIVILEGES ON nova_api.* TO 'nova'@'%' \\\n        IDENTIFIED BY 'NOVA_DBPASS';\n    \n    MariaDB [(none)]> GRANT ALL PRIVILEGES ON nova.* TO 'nova'@'localhost' \\\n        IDENTIFIED BY 'NOVA_DBPASS';\n    MariaDB [(none)]> GRANT ALL PRIVILEGES ON nova.* TO 'nova'@'%' \\\n        IDENTIFIED BY 'NOVA_DBPASS';\n    \n    MariaDB [(none)]> GRANT ALL PRIVILEGES ON nova_cell0.* TO 'nova'@'localhost' \\\n        IDENTIFIED BY 'NOVA_DBPASS';\n    MariaDB [(none)]> GRANT ALL PRIVILEGES ON nova_cell0.* TO 'nova'@'%' \\\n        IDENTIFIED BY 'NOVA_DBPASS';\n    ```\n\n    替换`NOVA_DBPASS`为nova相关数据库访问密码。\n\n    - 退出数据库访问客户端：\n\n    ```sql\n    exit\n    ```\n\n2. 配置用户和Endpoints\n\n    - source admin凭证，以获取admin命令行权限：\n\n    ```shell\n    source ~/.admin-openrc\n    ```\n\n    - 创建nova用户并设置用户密码：\n\n    ```shell\n    openstack user create --domain default --password-prompt nova\n    \n    User Password:\n    Repeat User Password:\n    ```\n\n    - 添加nova用户到service project并指定admin角色：\n\n    ```shell\n    openstack role add --project service --user nova admin\n    ```\n\n    - 创建nova服务实体：\n\n    ```shell\n    openstack service create --name nova \\\n        --description \"OpenStack Compute\" compute\n    ```\n\n    - 创建Nova API服务endpoints：\n\n    ```shell\n    openstack endpoint create --region RegionOne \\\n        compute public http://controller:8774/v2.1\n    openstack endpoint create --region RegionOne \\\n        compute internal http://controller:8774/v2.1\n    openstack endpoint create --region RegionOne \\\n        compute admin http://controller:8774/v2.1\n    ```\n\n3. 安装及配置组件\n\n    - 安装软件包：\n\n    ```shell\n    dnf install openstack-nova-api openstack-nova-conductor \\\n        openstack-nova-novncproxy openstack-nova-scheduler\n    ```\n\n    - 编辑`/etc/nova/nova.conf`配置文件，完成如下操作：\n\n        - 在`[default]`部分，启用计算和元数据的API，配置RabbitMQ消息队列入口，使用controller节点管理IP配置my_ip，显式定义log_dir：\n\n        ```ini\n        [DEFAULT]\n        enabled_apis = osapi_compute,metadata\n        transport_url = rabbit://openstack:RABBIT_PASS@controller:5672/\n        my_ip = 192.168.0.2\n        log_dir = /var/log/nova\n        state_path = /var/lib/nova\n        ```\n\n        替换`RABBIT_PASS`为RabbitMQ中openstack账户的密码。\n        \n        - 在`[api_database]`和`[database]`部分，配置数据库入口：\n\n        ```ini\n        [api_database]\n        connection = mysql+pymysql://nova:NOVA_DBPASS@controller/nova_api\n        \n        [database]\n        connection = mysql+pymysql://nova:NOVA_DBPASS@controller/nova\n        ```\n\n        替换`NOVA_DBPASS`为nova相关数据库的密码。\n        \n        - 在`[api]`和`[keystone_authtoken]`部分，配置身份认证服务入口：\n\n        ```ini\n        [api]\n        auth_strategy = keystone\n        \n        [keystone_authtoken]\n        auth_url = http://controller:5000/v3\n        memcached_servers = controller:11211\n        auth_type = password\n        project_domain_name = Default\n        user_domain_name = Default\n        project_name = service\n        username = nova\n        password = NOVA_PASS\n        ```\n\n        替换`NOVA_PASS`为nova用户的密码。\n     \n        - 在`[vnc]`部分，启用并配置远程控制台入口：\n\n        ```ini\n        [vnc]\n        enabled = true\n        server_listen = $my_ip\n        server_proxyclient_address = $my_ip\n        ```\n\n        - 在`[glance]`部分，配置镜像服务API的地址：\n\n        ```ini\n        [glance]\n        api_servers = http://controller:9292\n        ```\n\n        - 在`[oslo_concurrency]`部分，配置lock path：\n\n        ```ini\n        [oslo_concurrency]\n        lock_path = /var/lib/nova/tmp\n        ```\n\n        - [placement]部分，配置placement服务的入口：\n\n        ```ini\n        [placement]\n        region_name = RegionOne\n        project_domain_name = Default\n        project_name = service\n        auth_type = password\n        user_domain_name = Default\n        auth_url = http://controller:5000/v3\n        username = placement\n        password = PLACEMENT_PASS\n        ```\n\n        替换`PLACEMENT_PASS`为placement用户的密码。\n\n    - 数据库同步：\n\n        - 同步nova-api数据库：\n\n        ```shell\n        su -s /bin/sh -c \"nova-manage api_db sync\" nova\n        ```\n\n        - 注册cell0数据库：\n\n        ```shell\n        su -s /bin/sh -c \"nova-manage cell_v2 map_cell0\" nova\n        ```\n\n        - 创建cell1 cell：\n\n        ```shell\n        su -s /bin/sh -c \"nova-manage cell_v2 create_cell --name=cell1 --verbose\" nova\n        ```\n\n        - 同步nova数据库：\n\n        ```shell\n        su -s /bin/sh -c \"nova-manage db sync\" nova\n        ```\n\n        - 验证cell0和cell1注册正确：\n\n        ```shell\n        su -s /bin/sh -c \"nova-manage cell_v2 list_cells\" nova\n        ```\n\n4. 启动服务\n\n    ```shell\n    systemctl enable \\\n      openstack-nova-api.service \\\n      openstack-nova-scheduler.service \\\n      openstack-nova-conductor.service \\\n      openstack-nova-novncproxy.service\n\n    systemctl start \\\n      openstack-nova-api.service \\\n      openstack-nova-scheduler.service \\\n      openstack-nova-conductor.service \\\n      openstack-nova-novncproxy.service\n    ```\n\n**Compute节点**\n\n在计算节点执行以下操作。\n\n1. 安装软件包\n\n    ```shell\n    dnf install openstack-nova-compute\n    ```\n\n2. 编辑`/etc/nova/nova.conf`配置文件\n\n    - 在`[default]`部分，启用计算和元数据的API，配置RabbitMQ消息队列入口，使用Compute节点管理IP配置my_ip，显式定义compute_driver、instances_path、log_dir：\n\n    ```ini\n    [DEFAULT]\n    enabled_apis = osapi_compute,metadata\n    transport_url = rabbit://openstack:RABBIT_PASS@controller:5672/\n    my_ip = 192.168.0.3\n    compute_driver = libvirt.LibvirtDriver\n    instances_path = /var/lib/nova/instances\n    log_dir = /var/log/nova\n    ```\n\n    替换`RABBIT_PASS`为RabbitMQ中openstack账户的密码。\n\n    - 在`[api]`和`[keystone_authtoken]`部分，配置身份认证服务入口：\n\n    ```ini\n    [api]\n    auth_strategy = keystone\n\n    [keystone_authtoken]\n    auth_url = http://controller:5000/v3\n    memcached_servers = controller:11211\n    auth_type = password\n    project_domain_name = Default\n    user_domain_name = Default\n    project_name = service\n    username = nova\n    password = NOVA_PASS\n    ```\n\n    替换`NOVA_PASS`为nova用户的密码。\n\n    - 在`[vnc]`部分，启用并配置远程控制台入口：\n\n    ```ini\n    [vnc]\n    enabled = true\n    server_listen = $my_ip\n    server_proxyclient_address = $my_ip\n    novncproxy_base_url = http://controller:6080/vnc_auto.html\n    ```\n\n    - 在`[glance]`部分，配置镜像服务API的地址：\n\n    ```ini\n    [glance]\n    api_servers = http://controller:9292\n    ```\n\n    - 在`[oslo_concurrency]`部分，配置lock path：\n\n    ```ini\n    [oslo_concurrency]\n    lock_path = /var/lib/nova/tmp\n    ```\n\n    - [placement]部分，配置placement服务的入口：\n\n    ```ini\n    [placement]\n    region_name = RegionOne\n    project_domain_name = Default\n    project_name = service\n    auth_type = password\n    user_domain_name = Default\n    auth_url = http://controller:5000/v3\n    username = placement\n    password = PLACEMENT_PASS\n    ```\n\n    替换`PLACEMENT_PASS`为placement用户的密码。\n\n3. 确认计算节点是否支持虚拟机硬件加速（x86_64）\n\n    处理器为x86_64架构时，可通过运行如下命令确认是否支持硬件加速：\n\n    ```shell\n    egrep -c '(vmx|svm)' /proc/cpuinfo\n    ```\n\n    如果返回值为0则不支持硬件加速，需要配置libvirt使用QEMU而不是默认的KVM。编辑`/etc/nova/nova.conf`的`[libvirt]`部分：\n\n    ```ini\n    [libvirt]\n    virt_type = qemu\n    ```\n\n    如果返回值为1或更大的值，则支持硬件加速，不需要进行额外的配置。\n\n4. 确认计算节点是否支持虚拟机硬件加速（arm64）\n\n    处理器为arm64架构时，可通过运行如下命令确认是否支持硬件加速：\n\n    ```shell\n    virt-host-validate\n    # 该命令由libvirt提供，此时libvirt应已作为openstack-nova-compute依赖被安装，环境中已有此命令\n    ```\n\n    显示FAIL时，表示不支持硬件加速，需要配置libvirt使用QEMU而不是默认的KVM。\n\n    ```shell\n    QEMU: Checking if device /dev/kvm exists: FAIL (Check that CPU and firmware supports virtualization and kvm module is loaded)\n    ```\n\n    编辑`/etc/nova/nova.conf`的`[libvirt]`部分：\n\n    ```ini\n    [libvirt]\n    virt_type = qemu\n    ```\n\n    显示PASS时，表示支持硬件加速，不需要进行额外的配置。\n\n    ```shell\n    QEMU: Checking if device /dev/kvm exists: PASS\n    ```\n\n5. 配置qemu（仅arm64）\n\n    仅当处理器为arm64架构时需要执行此操作。\n\n    - 编辑`/etc/libvirt/qemu.conf`:\n\n    ```ini\n    nvram = [\"/usr/share/AAVMF/AAVMF_CODE.fd: \\\n                /usr/share/AAVMF/AAVMF_VARS.fd\", \\\n                \"/usr/share/edk2/aarch64/QEMU_EFI-pflash.raw: \\\n                /usr/share/edk2/aarch64/vars-template-pflash.raw\"]\n    ```\n\n    - 编辑`/etc/qemu/firmware/edk2-aarch64.json`\n\n    ```json\n    {\n        \"description\": \"UEFI firmware for ARM64 virtual machines\",\n        \"interface-types\": [\n            \"uefi\"\n        ],\n        \"mapping\": {\n            \"device\": \"flash\",\n            \"executable\": {\n                \"filename\": \"/usr/share/edk2/aarch64/QEMU_EFI-pflash.raw\",\n                \"format\": \"raw\"\n            },\n            \"nvram-template\": {\n                \"filename\": \"/usr/share/edk2/aarch64/vars-template-pflash.raw\",\n                \"format\": \"raw\"\n            }\n        },\n        \"targets\": [\n            {\n                \"architecture\": \"aarch64\",\n                \"machines\": [\n                    \"virt-*\"\n                ]\n            }\n        ],\n        \"features\": [\n    \n        ],\n        \"tags\": [\n    \n        ]\n    }\n    ```\n\n6. 启动服务\n\n    ```shell\n    systemctl enable libvirtd.service openstack-nova-compute.service\n    systemctl start libvirtd.service openstack-nova-compute.service\n    ```\n\n**Controller节点**\n\n在控制节点执行以下操作。\n\n1. 添加计算节点到openstack集群\n\n    - source admin凭证，以获取admin命令行权限：\n\n    ```shell\n    source ~/.admin-openrc\n    ```\n\n    - 确认nova-compute服务已识别到数据库中：\n\n    ```shell\n    openstack compute service list --service nova-compute\n    ```\n\n    - 发现计算节点，将计算节点添加到cell数据库：\n\n    ```shell\n    su -s /bin/sh -c \"nova-manage cell_v2 discover_hosts --verbose\" nova\n    ```\n\n    结果如下：\n\n    ```ini\n    Modules with known eventlet monkey patching issues were imported prior to eventlet monkey patching: urllib3. This warning can usually be    ignored if the caller is only importing and not executing nova code.\n    Found 2 cell mappings.\n    Skipping cell0 since it does not contain hosts.\n    Getting computes from cell 'cell1': 6dae034e-b2d9-4a6c-b6f0-60ada6a6ddc2\n    Checking host mapping for compute host 'compute': 6286a86f-09d7-4786-9137-1185654c9e2e\n    Creating host mapping for compute host 'compute': 6286a86f-09d7-4786-9137-1185654c9e2e\n    Found 1 unmapped computes in cell: 6dae034e-b2d9-4a6c-b6f0-60ada6a6ddc2\n    ```\n\n2. 验证\n\n    - 列出服务组件，验证每个流程都成功启动和注册：\n\n    ```shell\n    openstack compute service list\n    ```\n\n    - 列出身份服务中的API端点，验证与身份服务的连接：\n\n    ```shell\n    openstack catalog list\n    ```\n\n    - 列出镜像服务中的镜像，验证与镜像服务的连接：\n\n    ```shell\n    openstack image list\n    ```\n\n    - 检查cells是否运作成功，以及其他必要条件是否已具备。\n\n    ```shell\n    nova-status upgrade check\n    ```\n\n#### Neutron\n\nNeutron是OpenStack的网络服务，提供虚拟交换机、IP路由、DHCP等功能。\n\n**Controller节点**\n\n1. 创建数据库、服务凭证和 API 服务端点\n\n    - 创建数据库：\n\n    ```sql\n    mysql -u root -p\n\n    MariaDB [(none)]> CREATE DATABASE neutron;\n    MariaDB [(none)]> GRANT ALL PRIVILEGES ON neutron.* TO 'neutron'@'localhost' IDENTIFIED BY 'NEUTRON_DBPASS';\n    MariaDB [(none)]> GRANT ALL PRIVILEGES ON neutron.* TO 'neutron'@'%' IDENTIFIED BY 'NEUTRON_DBPASS';\n    MariaDB [(none)]> exit;\n    ```\n\n    - 创建用户和服务，并记住创建neutron用户时输入的密码，用于配置NEUTRON_PASS：\n\n    ```shell\n    source ~/.admin-openrc\n    openstack user create --domain default --password-prompt neutron\n    openstack role add --project service --user neutron admin\n    openstack service create --name neutron --description \"OpenStack Networking\" network\n    ```\n\n    - 部署 Neutron API 服务：\n\n    ```shell\n    openstack endpoint create --region RegionOne network public http://controller:9696\n    openstack endpoint create --region RegionOne network internal http://controller:9696\n    openstack endpoint create --region RegionOne network admin http://controller:9696\n    ```\n\n2. 安装软件包\n\n    ```shell\n    dnf install -y openstack-neutron openstack-neutron-linuxbridge ebtables ipset openstack-neutron-ml2\n    ```\n\n3. 配置Neutron\n    \n    - 修改/etc/neutron/neutron.conf\n\n    ```ini\n    [database]\n    connection = mysql+pymysql://neutron:NEUTRON_DBPASS@controller/neutron\n\n    [DEFAULT]\n    core_plugin = ml2\n    service_plugins = router\n    allow_overlapping_ips = true\n    transport_url = rabbit://openstack:RABBIT_PASS@controller\n    auth_strategy = keystone\n    notify_nova_on_port_status_changes = true\n    notify_nova_on_port_data_changes = true\n\n    [keystone_authtoken]\n    www_authenticate_uri = http://controller:5000\n    auth_url = http://controller:5000\n    memcached_servers = controller:11211\n    auth_type = password\n    project_domain_name = Default\n    user_domain_name = Default\n    project_name = service\n    username = neutron\n    password = NEUTRON_PASS\n\n    [nova]\n    auth_url = http://controller:5000\n    auth_type = password\n    project_domain_name = Default\n    user_domain_name = Default\n    region_name = RegionOne\n    project_name = service\n    username = nova\n    password = NOVA_PASS\n\n    [oslo_concurrency]\n    lock_path = /var/lib/neutron/tmp\n\n    [experimental]\n    linuxbridge = true\n    ```\n\n    - 配置ML2，ML2具体配置可以根据用户需求自行修改，本文使用的是provider network + linuxbridge**\n    \n    - 修改/etc/neutron/plugins/ml2/ml2_conf.ini\n\n    ```shell\n    [ml2]\n    type_drivers = flat,vlan,vxlan\n    tenant_network_types = vxlan\n    mechanism_drivers = linuxbridge,l2population\n    extension_drivers = port_security\n\n    [ml2_type_flat]\n    flat_networks = provider\n\n    [ml2_type_vxlan]\n    vni_ranges = 1:1000\n\n    [securitygroup]\n    enable_ipset = true\n    ```\n\n    - 修改/etc/neutron/plugins/ml2/linuxbridge_agent.ini\n\n    ```ini\n    [linux_bridge]\n    physical_interface_mappings = provider:PROVIDER_INTERFACE_NAME\n\n    [vxlan]\n    enable_vxlan = true\n    local_ip = OVERLAY_INTERFACE_IP_ADDRESS\n    l2_population = true\n\n    [securitygroup]\n    enable_security_group = true\n    firewall_driver = neutron.agent.linux.iptables_firewall.IptablesFirewallDriver\n    ```\n\n    - 配置Layer-3代理\n\n    - 修改/etc/neutron/l3_agent.ini\n\n    ```shell\n    [DEFAULT]\n    interface_driver = linuxbridge\n    ```\n\n    配置DHCP代理\n    修改/etc/neutron/dhcp_agent.ini\n\n    ```ini\n    [DEFAULT]\n    interface_driver = linuxbridge\n    dhcp_driver = neutron.agent.linux.dhcp.Dnsmasq\n    enable_isolated_metadata = true\n    ```\n\n    - 配置metadata代理\n\n    - 修改/etc/neutron/metadata_agent.ini\n\n    ```shell\n    [DEFAULT]\n    nova_metadata_host = controller\n    metadata_proxy_shared_secret = METADATA_SECRET\n    ```\n\n4. 配置nova服务使用neutron，修改/etc/nova/nova.conf\n\n    ```ini\n    [neutron]\n    auth_url = http://controller:5000\n    auth_type = password\n    project_domain_name = default\n    user_domain_name = default\n    region_name = RegionOne\n    project_name = service\n    username = neutron\n    password = NEUTRON_PASS\n    service_metadata_proxy = true\n    metadata_proxy_shared_secret = METADATA_SECRET\n    ```\n\n5. 创建/etc/neutron/plugin.ini的符号链接\n\n    ```shell\n    ln -s /etc/neutron/plugins/ml2/ml2_conf.ini /etc/neutron/plugin.ini\n    ```\n\n6. 同步数据库\n\n    ```shell\n    su -s /bin/sh -c \"neutron-db-manage --config-file /etc/neutron/neutron.conf --config-file /etc/neutron/plugins/ml2/ml2_conf.ini upgrade head\" neutron\n    ```\n\n7. 重启nova api服务\n\n    ```shell\n    systemctl restart openstack-nova-api\n    ```\n\n8. 启动网络服务\n\n    ```shell\n    systemctl enable neutron-server.service neutron-linuxbridge-agent.service \\\n    neutron-dhcp-agent.service neutron-metadata-agent.service neutron-l3-agent.service\n    systemctl start neutron-server.service neutron-linuxbridge-agent.service \\\n    neutron-dhcp-agent.service neutron-metadata-agent.service neutron-l3-agent.service\n    ```\n\n**Compute节点**\n\n1. 安装软件包\n\n    ```shell\n    dnf install openstack-neutron-linuxbridge ebtables ipset -y\n    ```\n\n2. 配置Neutron\n\n    - 修改/etc/neutron/neutron.conf\n\n    ```ini\n    [DEFAULT]\n    transport_url = rabbit://openstack:RABBIT_PASS@controller\n    auth_strategy = keystone\n\n    [keystone_authtoken]\n    www_authenticate_uri = http://controller:5000\n    auth_url = http://controller:5000\n    memcached_servers = controller:11211\n    auth_type = password\n    project_domain_name = Default\n    user_domain_name = Default\n    project_name = service\n    username = neutron\n    password = NEUTRON_PASS\n\n    [oslo_concurrency]\n    lock_path = /var/lib/neutron/tmp\n    ```\n\n    - 修改/etc/neutron/plugins/ml2/linuxbridge_agent.ini\n\n    ```ini\n    [linux_bridge]\n    physical_interface_mappings = provider:PROVIDER_INTERFACE_NAME\n\n    [vxlan]\n    enable_vxlan = true\n    local_ip = OVERLAY_INTERFACE_IP_ADDRESS\n    l2_population = true\n\n    [securitygroup]\n    enable_security_group = true\n    firewall_driver = neutron.agent.linux.iptables_firewall.IptablesFirewallDriver\n    ```\n\n    - 配置nova compute服务使用neutron，修改/etc/nova/nova.conf\n\n    ```ini\n    [neutron]\n    auth_url = http://controller:5000\n    auth_type = password\n    project_domain_name = default\n    user_domain_name = default\n    region_name = RegionOne\n    project_name = service\n    username = neutron\n    password = NEUTRON_PASS\n    ```\n\n3. 重启nova-compute服务\n\n    ```shell\n    systemctl restart openstack-nova-compute.service\n    ```\n\n4. 启动Neutron linuxbridge agent服务\n\n    ```shell\n    systemctl enable neutron-linuxbridge-agent\n    systemctl start neutron-linuxbridge-agent\n    ```\n\n#### Cinder\n\nCinder是OpenStack的存储服务，提供块设备的创建、发放、备份等功能。\n\n**Controller节点**：\n\n1. 初始化数据库\n\n    `CINDER_DBPASS`是用户自定义的cinder数据库密码。\n\n    ```sql\n    mysql -u root -p\n\n    MariaDB [(none)]> CREATE DATABASE cinder;\n    MariaDB [(none)]> GRANT ALL PRIVILEGES ON cinder.* TO 'cinder'@'localhost' IDENTIFIED BY 'CINDER_DBPASS';\n    MariaDB [(none)]> GRANT ALL PRIVILEGES ON cinder.* TO 'cinder'@'%' IDENTIFIED BY 'CINDER_DBPASS';\n    MariaDB [(none)]> exit\n    ```\n\n2. 初始化Keystone资源对象\n\n    ```shell\n    source ~/.admin-openrc\n\n    #创建用户时，命令行会提示输入密码，请输入自定义的密码，下文涉及到`CINDER_PASS`的地方替换成该密码即可。\n    openstack user create --domain default --password-prompt cinder\n\n    openstack role add --project service --user cinder admin\n    openstack service create --name cinderv3 --description \"OpenStack Block Storage\" volumev3\n\n    openstack endpoint create --region RegionOne volumev3 public http://controller:8776/v3/%\\(project_id\\)s\n    openstack endpoint create --region RegionOne volumev3 internal http://controller:8776/v3/%\\(project_id\\)s\n    openstack endpoint create --region RegionOne volumev3 admin http://controller:8776/v3/%\\(project_id\\)s\n    ```\n\n3. 安装软件包\n\n    ```shell\n    dnf install openstack-cinder-api openstack-cinder-scheduler\n    ```\n\n4. 修改cinder配置文件`/etc/cinder/cinder.conf`\n\n    ```ini\n    [DEFAULT]\n    transport_url = rabbit://openstack:RABBIT_PASS@controller\n    auth_strategy = keystone\n    my_ip = 192.168.0.2\n\n    [database]\n    connection = mysql+pymysql://cinder:CINDER_DBPASS@controller/cinder\n\n    [keystone_authtoken]\n    www_authenticate_uri = http://controller:5000\n    auth_url = http://controller:5000\n    memcached_servers = controller:11211\n    auth_type = password\n    project_domain_name = Default\n    user_domain_name = Default\n    project_name = service\n    username = cinder\n    password = CINDER_PASS\n\n    [oslo_concurrency]\n    lock_path = /var/lib/cinder/tmp\n    ```\n\n5. 数据库同步\n\n    ```shell\n    su -s /bin/sh -c \"cinder-manage db sync\" cinder\n    ```\n\n6. 修改nova配置`/etc/nova/nova.conf`\n\n    ```ini\n    [cinder]\n    os_region_name = RegionOne\n    ```\n\n7. 启动服务\n\n    ```shell\n    systemctl restart openstack-nova-api\n    systemctl start openstack-cinder-api openstack-cinder-scheduler\n    ```\n\n**Storage节点**：\n\nStorage节点要提前准备至少一块硬盘，作为cinder的存储后端，下文默认storage节点已经存在一块未使用的硬盘，设备名称为`/dev/sdb`，用户在配置过程中，请按照真实环境信息进行名称替换。\n\nCinder支持很多类型的后端存储，本指导使用最简单的lvm为参考，如果您想使用如ceph等其他后端，请自行配置。\n\n1. 安装软件包\n\n    ```shell\n    dnf install lvm2 device-mapper-persistent-data scsi-target-utils rpcbind nfs-utils openstack-cinder-volume openstack-cinder-backup\n    ```\n\n2. 配置lvm卷组\n\n    ```shell\n    pvcreate /dev/sdb\n    vgcreate cinder-volumes /dev/sdb\n    ```\n\n3. 修改cinder配置`/etc/cinder/cinder.conf`\n\n    ```ini\n    [DEFAULT]\n    transport_url = rabbit://openstack:RABBIT_PASS@controller\n    auth_strategy = keystone\n    my_ip = 192.168.0.4\n    enabled_backends = lvm\n    glance_api_servers = http://controller:9292\n\n    [keystone_authtoken]\n    www_authenticate_uri = http://controller:5000\n    auth_url = http://controller:5000\n    memcached_servers = controller:11211\n    auth_type = password\n    project_domain_name = default\n    user_domain_name = default\n    project_name = service\n    username = cinder\n    password = CINDER_PASS\n\n    [database]\n    connection = mysql+pymysql://cinder:CINDER_DBPASS@controller/cinder\n\n    [lvm]\n    volume_driver = cinder.volume.drivers.lvm.LVMVolumeDriver\n    volume_group = cinder-volumes\n    target_protocol = iscsi\n    target_helper = lioadm\n\n    [oslo_concurrency]\n    lock_path = /var/lib/cinder/tmp\n    ```\n\n4. 配置cinder backup （可选）\n\n    cinder-backup是可选的备份服务，cinder同样支持很多种备份后端，本文使用swift存储，如果您想使用如NFS等后端，请自行配置，例如可以参考[OpenStack官方文档](https://docs.openstack.org/cinder/2023.1/admin/nfs-backend.html)对NFS的配置说明。\n\n    修改`/etc/cinder/cinder.conf`，在`[DEFAULT]`中新增\n\n    ```ini\n    [DEFAULT]\n    backup_driver = cinder.backup.drivers.swift.SwiftBackupDriver\n    backup_swift_url = SWIFT_URL\n    ```\n\n    这里的`SWIFT_URL`是指环境中swift服务的URL，在部署完swift服务后，执行`openstack catalog show object-store`命令获取。\n\n5. 启动服务\n\n    ```shell\n    systemctl start openstack-cinder-volume target\n    systemctl start openstack-cinder-backup (可选)\n    ```\n\n至此，Cinder服务的部署已全部完成，可以在controller通过以下命令进行简单的验证\n\n```shell\nsource ~/.admin-openrc\nopenstack storage service list\nopenstack volume list\n```\n\n#### Horizon\n\nHorizon是OpenStack提供的前端页面，可以让用户通过网页鼠标的操作来控制OpenStack集群，而不用繁琐的CLI命令行。Horizon一般部署在控制节点。\n\n1. 安装软件包\n\n    ```shell\n    dnf install openstack-dashboard\n    ```\n\n2. 修改配置文件`/etc/openstack-dashboard/local_settings`\n\n    ```ini\n    OPENSTACK_HOST = \"controller\"\n    ALLOWED_HOSTS = ['*', ]\n    OPENSTACK_KEYSTONE_URL =  \"http://controller:5000/v3\"\n    SESSION_ENGINE = 'django.contrib.sessions.backends.cache'\n    CACHES = {\n    'default': {\n        'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',\n        'LOCATION': 'controller:11211',\n        }\n    }\n    OPENSTACK_KEYSTONE_MULTIDOMAIN_SUPPORT = True\n    OPENSTACK_KEYSTONE_DEFAULT_DOMAIN = \"Default\"\n    OPENSTACK_KEYSTONE_DEFAULT_ROLE = \"member\"\n    WEBROOT = '/dashboard'\n    POLICY_FILES_PATH = \"/etc/openstack-dashboard\"\n\n    OPENSTACK_API_VERSIONS = {\n        \"identity\": 3,\n        \"image\": 2,\n        \"volume\": 3,\n    }\n    ```\n\n3. 重启服务\n\n    ```shell\n    systemctl restart httpd\n    ```\n\n至此，horizon服务的部署已全部完成，打开浏览器，输入`http://192.168.0.2/dashboard`，打开horizon登录页面。\n\n#### Ironic\n\nIronic是OpenStack的裸金属服务，如果用户需要进行裸机部署则推荐使用该组件。否则，可以不用安装。\n\n在控制节点执行以下操作。\n\n1. 设置数据库\n\n    裸金属服务在数据库中存储信息，创建一个**ironic**用户可以访问的**ironic**数据库，替换**IRONIC_DBPASS**为合适的密码\n\n    ```sql\n    mysql -u root -p\n    \n    MariaDB [(none)]> CREATE DATABASE ironic CHARACTER SET utf8;\n    MariaDB [(none)]> GRANT ALL PRIVILEGES ON ironic.* TO 'ironic'@'localhost' \\\n    IDENTIFIED BY 'IRONIC_DBPASS';\n    MariaDB [(none)]> GRANT ALL PRIVILEGES ON ironic.* TO 'ironic'@'%' \\\n    IDENTIFIED BY 'IRONIC_DBPASS';\n    MariaDB [(none)]> exit\n    Bye\n    ```\n\n2. 创建服务用户认证\n\n    - 创建Bare Metal服务用户\n\n    替换`IRONIC_PASS`为ironic用户密码，`IRONIC_INSPECTOR_PASS`为ironic_inspector用户密码。\n\n    ```shell\n    openstack user create --password IRONIC_PASS \\\n        --email ironic@example.com ironic\n    openstack role add --project service --user ironic admin\n    openstack service create --name ironic \\\n        --description \"Ironic baremetal provisioning service\" baremetal\n    \n    openstack service create --name ironic-inspector --description     \"Ironic inspector baremetal provisioning service\" baremetal-introspection\n    openstack user create --password IRONIC_INSPECTOR_PASS --email ironic_inspector@example.com ironic-inspector\n    openstack role add --project service --user ironic-inspector admin\n    ```\n\n    - 创建Bare Metal服务访问入口\n\n    ```shell\n    openstack endpoint create --region RegionOne baremetal admin http://192.168.0.2:6385\n    openstack endpoint create --region RegionOne baremetal public http://192.168.0.2:6385\n    openstack endpoint create --region RegionOne baremetal internal http://192.168.0.2:6385\n    openstack endpoint create --region RegionOne baremetal-introspection internal http://192.168.0.2:5050/v1\n    openstack endpoint create --region RegionOne baremetal-introspection public http://192.168.0.2:5050/v1\n    openstack endpoint create --region RegionOne baremetal-introspection admin http://192.168.0.2:5050/v1\n    ```\n\n3. 安装组件\n\n    ```shell\n    dnf install openstack-ironic-api openstack-ironic-conductor python3-ironicclient\n    ```\n\n4. 配置ironic-api服务\n\n    配置文件路径/etc/ironic/ironic.conf\n\n    - 通过**connection**选项配置数据库的位置，如下所示，替换**IRONIC_DBPASS**为**ironic**用户的密码，替换**DB_IP**为DB服务器所在的IP地址：\n\n    ```ini\n    [database]\n    \n    # The SQ LAlchemy connection string used to connect to the\n    # database (string value)\n    # connection = mysql+pymysql://ironic:IRONIC_DBPASS@DB_IP/ironic\n    connection = mysql+pymysql://ironic:IRONIC_DBPASS@controller/ironic\n    ```\n\n    - 通过以下选项配置ironic-api服务使用RabbitMQ消息代理，替换**RPC_\\***为RabbitMQ的详细地址和凭证\n\n    ```ini\n    [DEFAULT]\n    \n    # A URL representing the messaging driver to use and its full\n    # configuration. (string value)\n    # transport_url = rabbit://RPC_USER:RPC_PASSWORD@RPC_HOST:RPC_PORT/\n    transport_url = rabbit://openstack:RABBIT_PASS@controller:5672/\n    ```\n\n    用户也可自行使用json-rpc方式替换rabbitmq\n    \n    - 配置ironic-api服务使用身份认证服务的凭证，替换**PUBLIC_IDENTITY_IP**为身份认证服务器的公共IP，替换**PRIVATE_IDENTITY_IP**为身份认证服务器的私有IP，替换     **IRONIC_PASS**为身份认证服务中**ironic**用户的密码，替换**RABBIT_PASS**为RabbitMQ中openstack账户的密码。：\n\n    ```ini\n    [DEFAULT]\n\n    # Authentication strategy used by ironic-api: one of\n    # \"keystone\" or \"noauth\". \"noauth\" should not be used in a\n    # production environment because all authentication will be\n    # disabled. (string value)\n\n    auth_strategy=keystone\n    host = controller\n    memcache_servers = controller:11211\n    enabled_network_interfaces = flat,noop,neutron\n    default_network_interface = noop\n    enabled_hardware_types = ipmi\n    enabled_boot_interfaces = pxe\n    enabled_deploy_interfaces = direct\n    default_deploy_interface = direct\n    enabled_inspect_interfaces = inspector\n    enabled_management_interfaces = ipmitool\n    enabled_power_interfaces = ipmitool\n    enabled_rescue_interfaces = no-rescue,agent\n    isolinux_bin = /usr/share/syslinux/isolinux.bin\n    logging_context_format_string = %(asctime)s.%(msecs)03d %(process)d %(levelname)s %(name)s [%(global_request_id)s %(request_id)s %     (user_identity)s] %(instance)s%(message)s\n    \n    [keystone_authtoken]\n    # Authentication type to load (string value)\n    auth_type=password\n    # Complete public Identity API endpoint (string value)\n    # www_authenticate_uri=http://PUBLIC_IDENTITY_IP:5000\n    www_authenticate_uri=http://controller:5000\n    # Complete admin Identity API endpoint. (string value)\n    # auth_url=http://PRIVATE_IDENTITY_IP:5000\n    auth_url=http://controller:5000\n    # Service username. (string value)\n    username=ironic\n    # Service account password. (string value)\n    password=IRONIC_PASS\n    # Service tenant name. (string value)\n    project_name=service\n    # Domain name containing project (string value)\n    project_domain_name=Default\n    # User's domain name (string value)\n    user_domain_name=Default\n    \n    [agent]\n    deploy_logs_collect = always\n    deploy_logs_local_path = /var/log/ironic/deploy\n    deploy_logs_storage_backend = local\n    image_download_source = http\n    stream_raw_images = false\n    force_raw_images = false\n    verify_ca = False\n    \n    [oslo_concurrency]\n    \n    [oslo_messaging_notifications]\n    transport_url = rabbit://openstack:RABBIT_PASS@controller:5672/\n    topics = notifications\n    driver = messagingv2\n    \n    [oslo_messaging_rabbit]\n    amqp_durable_queues = True\n    rabbit_ha_queues = True\n    \n    [pxe]\n    ipxe_enabled = false\n    pxe_append_params = nofb nomodeset vga=normal coreos.autologin ipa-insecure=1\n    image_cache_size = 204800\n    tftp_root=/var/lib/tftpboot/cephfs/\n    tftp_master_path=/var/lib/tftpboot/cephfs/master_images\n    \n    [dhcp]\n    dhcp_provider = none\n    ```\n\n    - 创建裸金属服务数据库表\n\n    ```shell\n    ironic-dbsync --config-file /etc/ironic/ironic.conf create_schema\n    ```\n\n    - 重启ironic-api服务\n\n    ```shell\n    sudo systemctl restart openstack-ironic-api\n    ```\n\n5. 配置ironic-conductor服务\n\n    如下为ironic-conductor服务自身的标准配置，ironic-conductor服务可以与ironic-api服务分布于不同节点，本指南中均部署与控制节点，所以重复的配置项可跳过。\n\n    - 替换使用conductor服务所在host的IP配置my_ip：\n\n    ```ini\n    [DEFAULT]\n    \n    # IP address of this host. If unset, will determine the IP\n    # programmatically. If unable to do so, will use \"127.0.0.1\".\n    # (string value)\n    # my_ip=HOST_IP\n    my_ip = 192.168.0.2\n    ```\n\n    - 配置数据库的位置，ironic-conductor应该使用和ironic-api相同的配置。替换**IRONIC_DBPASS**为**ironic**用户的密码：\n\n    ```ini\n    [database]\n    \n    # The SQLAlchemy connection string to use to connect to the\n    # database. (string value)\n    connection = mysql+pymysql://ironic:IRONIC_DBPASS@controller/ironic\n    ```\n\n    - 通过以下选项配置ironic-api服务使用RabbitMQ消息代理，ironic-conductor应该使用和ironic-api相同的配置，替换**RABBIT_PASS**为RabbitMQ中openstack账户的密码：\n\n    ```ini\n    [DEFAULT]\n    \n    # A URL representing the messaging driver to use and its full\n    # configuration. (string value)\n    transport_url = rabbit://openstack:RABBIT_PASS@controller:5672/\n    ```\n\n    用户也可自行使用json-rpc方式替换rabbitmq\n\n    - 配置凭证访问其他OpenStack服务\n\n    为了与其他OpenStack服务进行通信，裸金属服务在请求其他服务时需要使用服务用户与OpenStack Identity服务进行认证。这些用户的凭据必须在与相应服务相关的每个配置文件中进行配置。\n\n    ```shell\n    [neutron] - 访问OpenStack网络服务\n    [glance] - 访问OpenStack镜像服务\n    [swift] - 访问OpenStack对象存储服务\n    [cinder] - 访问OpenStack块存储服务\n    [inspector] - 访问OpenStack裸金属introspection服务\n    [service_catalog] - 一个特殊项用于保存裸金属服务使用的凭证，该凭证用于发现注册在OpenStack身份认证服务目录中的自己的API URL端点\n    ```\n\n    简单起见，可以对所有服务使用同一个服务用户。为了向后兼容，该用户应该和ironic-api服务的[keystone_authtoken]所配置的为同一个用户。但这不是必须的，也可以为每个服务创建并配置不同的服务用户。\n\n    在下面的示例中，用户访问OpenStack网络服务的身份验证信息配置为：\n\n    ```ini\n    网络服务部署在名为RegionOne的身份认证服务域中，仅在服务目录中注册公共端点接口\n    \n    请求时使用特定的CA SSL证书进行HTTPS连接\n    \n    与ironic-api服务配置相同的服务用户\n    \n    动态密码认证插件基于其他选项发现合适的身份认证服务API版本\n    ```\n\n    替换IRONIC_PASS为ironic用户密码。\n\n    ```ini\n    [neutron]\n    \n    # Authentication type to load (string value)\n    auth_type = password\n    # Authentication URL (string value)\n    auth_url=https://IDENTITY_IP:5000/\n    # Username (string value)\n    username=ironic\n    # User's password (string value)\n    password=IRONIC_PASS\n    # Project name to scope to (string value)\n    project_name=service\n    # Domain ID containing project (string value)\n    project_domain_id=default\n    # User's domain id (string value)\n    user_domain_id=default\n    # PEM encoded Certificate Authority to use when verifying\n    # HTTPs connections. (string value)\n    cafile=/opt/stack/data/ca-bundle.pem\n    # The default region_name for endpoint URL discovery. (string\n    # value)\n    region_name = RegionOne\n    # List of interfaces, in order of preference, for endpoint\n    # URL. (list value)\n    valid_interfaces=public\n    \n    # 其他参考配置\n    [glance]\n    endpoint_override = http://controller:9292\n    www_authenticate_uri = http://controller:5000\n    auth_url = http://controller:5000\n    auth_type = password\n    username = ironic\n    password = IRONIC_PASS\n    project_domain_name = default\n    user_domain_name = default\n    region_name = RegionOne\n    project_name = service\n    \n    [service_catalog]  \n    region_name = RegionOne\n    project_domain_id = default\n    user_domain_id = default\n    project_name = service\n    password = IRONIC_PASS\n    username = ironic\n    auth_url = http://controller:5000\n    auth_type = password\n    ```\n\n    默认情况下，为了与其他服务进行通信，裸金属服务会尝试通过身份认证服务的服务目录发现该服务合适的端点。如果希望对一个特定服务使用一个不同的端点，则在裸金属服务的配置文件中通过endpoint_override选项进行指定：\n\n    ```ini\n    [neutron]\n    endpoint_override = <NEUTRON_API_ADDRESS>\n    ```\n\n    - 配置允许的驱动程序和硬件类型\n\n    通过设置enabled_hardware_types设置ironic-conductor服务允许使用的硬件类型：\n\n    ```ini\n    [DEFAULT]\n    enabled_hardware_types = ipmi\n    ```\n\n    配置硬件接口：\n\n    ```ini\n    enabled_boot_interfaces = pxe\n    enabled_deploy_interfaces = direct,iscsi\n    enabled_inspect_interfaces = inspector\n    enabled_management_interfaces = ipmitool\n    enabled_power_interfaces = ipmitool\n    ```\n\n    配置接口默认值：\n\n    ```ini\n    [DEFAULT]\n    default_deploy_interface = direct\n    default_network_interface = neutron\n    ```\n\n    如果启用了任何使用Direct deploy的驱动，必须安装和配置镜像服务的Swift后端。Ceph对象网关(RADOS网关)也支持作为镜像服务的后端。\n\n    - 重启ironic-conductor服务\n\n    ```shell\n    sudo systemctl restart openstack-ironic-conductor\n    ```\n\n6. 配置ironic-inspector服务\n\n    - 安装组件\n\n    ```shell\n    dnf install openstack-ironic-inspector\n    ```\n\n    - 创建数据库\n\n    ```sql\n    # mysql -u root -p\n    \n    MariaDB [(none)]> CREATE DATABASE ironic_inspector CHARACTER SET utf8;\n    \n    MariaDB [(none)]> GRANT ALL PRIVILEGES ON ironic_inspector.* TO 'ironic_inspector'@'localhost' \\\n    IDENTIFIED BY 'IRONIC_INSPECTOR_DBPASS';\n    MariaDB [(none)]> GRANT ALL PRIVILEGES ON ironic_inspector.* TO 'ironic_inspector'@'%' \\\n    IDENTIFIED BY 'IRONIC_INSPECTOR_DBPASS';\n    MariaDB [(none)]> exit\n    Bye\n    ```\n\n    - 配置`/etc/ironic-inspector/inspector.conf`\n\n    通过**connection**选项配置数据库的位置，如下所示，替换**IRONIC_INSPECTOR_DBPASS**为**ironic_inspector**用户的密码\n\n    ```ini\n    [database]\n    backend = sqlalchemy\n    connection = mysql+pymysql://ironic_inspector:IRONIC_INSPECTOR_DBPASS@controller/ironic_inspector\n    min_pool_size = 100\n    max_pool_size = 500\n    pool_timeout = 30\n    max_retries = 5\n    max_overflow = 200\n    db_retry_interval = 2\n    db_inc_retry_interval = True\n    db_max_retry_interval = 2\n    db_max_retries = 5\n    ```\n\n    - 配置消息队列通信地址\n\n    ```ini\n    [DEFAULT] \n    transport_url = rabbit://openstack:RABBIT_PASS@controller:5672/\n    ```\n\n    - 设置keystone认证\n\n    ```ini\n    [DEFAULT]\n    \n    auth_strategy = keystone\n    timeout = 900\n    rootwrap_config = /etc/ironic-inspector/rootwrap.conf\n    logging_context_format_string = %(asctime)s.%(msecs)03d %(process)d %(levelname)s %(name)s [%(global_request_id)s %(request_id)s %     (user_identity)s] %(instance)s%(message)s\n    log_dir = /var/log/ironic-inspector\n    state_path = /var/lib/ironic-inspector\n    use_stderr = False\n    \n    [ironic]\n    api_endpoint = http://IRONIC_API_HOST_ADDRRESS:6385\n    auth_type = password\n    auth_url = http://PUBLIC_IDENTITY_IP:5000\n    auth_strategy = keystone\n    ironic_url = http://IRONIC_API_HOST_ADDRRESS:6385\n    os_region = RegionOne\n    project_name = service\n    project_domain_name = Default\n    user_domain_name = Default\n    username = IRONIC_SERVICE_USER_NAME\n    password = IRONIC_SERVICE_USER_PASSWORD\n    \n    [keystone_authtoken]\n    auth_type = password\n    auth_url = http://controller:5000\n    www_authenticate_uri = http://controller:5000\n    project_domain_name = default\n    user_domain_name = default\n    project_name = service\n    username = ironic_inspector\n    password = IRONICPASSWD\n    region_name = RegionOne\n    memcache_servers = controller:11211\n    token_cache_time = 300\n    \n    [processing]\n    add_ports = active\n    processing_hooks = $default_processing_hooks,local_link_connection,lldp_basic\n    ramdisk_logs_dir = /var/log/ironic-inspector/ramdisk\n    always_store_ramdisk_logs = true\n    store_data =none\n    power_off = false\n    \n    [pxe_filter]\n    driver = iptables\n    \n    [capabilities]\n    boot_mode=True\n    ```\n\n    - 配置ironic inspector dnsmasq服务\n\n    ```ini\n    # 配置文件地址：/etc/ironic-inspector/dnsmasq.conf\n    port=0\n    interface=enp3s0                         #替换为实际监听网络接口\n    dhcp-range=192.168.0.40,192.168.0.50   #替换为实际dhcp地址范围\n    bind-interfaces\n    enable-tftp\n    \n    dhcp-match=set:efi,option:client-arch,7\n    dhcp-match=set:efi,option:client-arch,9\n    dhcp-match=aarch64, option:client-arch,11\n    dhcp-boot=tag:aarch64,grubaa64.efi\n    dhcp-boot=tag:!aarch64,tag:efi,grubx64.efi\n    dhcp-boot=tag:!aarch64,tag:!efi,pxelinux.0\n    \n    tftp-root=/tftpboot                       #替换为实际tftpboot目录\n    log-facility=/var/log/dnsmasq.log\n    ```\n\n    - 关闭ironic provision网络子网的dhcp\n\n    ```shell\n    openstack subnet set --no-dhcp 72426e89-f552-4dc4-9ac7-c4e131ce7f3c\n    ```\n\n    - 初始化ironic-inspector服务的数据库\n\n    ```shell\n    ironic-inspector-dbsync --config-file /etc/ironic-inspector/inspector.conf upgrade\n    ```\n\n    - 启动服务\n\n    ```shell\n    systemctl enable --now openstack-ironic-inspector.service\n    systemctl enable --now openstack-ironic-inspector-dnsmasq.service\n    ```\n\n7. 配置httpd服务\n\n    - 创建ironic要使用的httpd的root目录并设置属主属组，目录路径要和/etc/ironic/ironic.conf中[deploy]组中http_root 配置项指定的路径要一致。\n\n    ```shell\n    mkdir -p /var/lib/ironic/httproot\n    chown ironic.ironic /var/lib/ironic/httproot\n    ```\n\n    - 安装和配置httpd服务\n\n        - 安装httpd服务，已有请忽略\n\n        ```shell\n        dnf install httpd -y\n        ```\n\n        - 创建/etc/httpd/conf.d/openstack-ironic-httpd.conf文件，内容如下：\n\n        ```ini\n        Listen 8080\n        \n        <VirtualHost *:8080>\n            ServerName ironic.openeuler.com\n        \n            ErrorLog \"/var/log/httpd/openstack-ironic-httpd-error_log\"\n            CustomLog \"/var/log/httpd/openstack-ironic-httpd-access_log\" \"%h %l %u %t \\\"%r\\\" %>s %b\"\n        \n            DocumentRoot \"/var/lib/ironic/httproot\"\n            <Directory \"/var/lib/ironic/httproot\">\n                Options Indexes FollowSymLinks\n                Require all granted\n            </Directory>\n            LogLevel warn\n            AddDefaultCharset UTF-8\n            EnableSendfile on\n        </VirtualHost>\n        ```\n\n        注意监听的端口要和/etc/ironic/ironic.conf里[deploy]选项中http_url配置项中指定的端口一致。\n\n        - 重启httpd服务。\n\n        ```shell\n        systemctl restart httpd\n        ```\n\n8. deploy ramdisk镜像下载或制作\n\n    部署一个裸机节点总共需要两组镜像：deploy ramdisk images和user images。Deploy ramdisk images上运行有ironic-python-agent(IPA)服务，Ironic通过它进行裸机节点的环境准备。User images是最终被安装裸机节点上，供用户使用的镜像。\n\n    ramdisk镜像支持通过ironic-python-agent-builder或disk-image-builder工具制作。用户也可以自行选择其他工具制作。若使用原生工具，则需要安装对应的软件包。\n\n    具体的使用方法可以参考[官方文档](https://docs.openstack.org/ironic/2023.1/install/deploy-ramdisk.html)，同时官方也有提供制作好的deploy镜像，可尝试下载。\n\n    下文介绍通过ironic-python-agent-builder构建ironic使用的deploy镜像的完整过程。\n\n    - 安装 ironic-python-agent-builder\n\n    ```shell\n    dnf install python3-ironic-python-agent-builder\n\n    或\n    pip3 install ironic-python-agent-builder\n    dnf install qemu-img git\n    ```\n\n    - 制作镜像\n\n    基本用法：\n\n    ```shell\n    usage: ironic-python-agent-builder [-h] [-r RELEASE] [-o OUTPUT] [-e ELEMENT] [-b BRANCH]\n                                [-v] [--lzma] [--extra-args EXTRA_ARGS]\n                                [--elements-path ELEMENTS_PATH]\n                                distribution\n\n    positional arguments:\n        distribution          Distribution to use\n\n    options:\n        -h, --help            show this help message and exit\n        -r RELEASE, --release RELEASE\n                            Distribution release to use\n        -o OUTPUT, --output OUTPUT\n                            Output base file name\n        -e ELEMENT, --element ELEMENT\n                            Additional DIB element to use\n        -b BRANCH, --branch BRANCH\n                            If set, override the branch that is used for         ironic-python-agent\n                            and requirements\n        -v, --verbose         Enable verbose logging in diskimage-builder\n        --lzma                Use lzma compression for smaller images\n        --extra-args EXTRA_ARGS\n                            Extra arguments to pass to diskimage-builder\n        --elements-path ELEMENTS_PATH\n                            Path(s) to custom DIB elements separated by a colon\n    ```\n\n    操作实例：\n\n    ```shell\n    # -o选项指定生成的镜像名\n    # ubuntu指定生成ubuntu系统的镜像\n    ironic-python-agent-builder -o my-ubuntu-ipa ubuntu\n    ```\n\n    可通过设置`ARCH`环境变量（默认为amd64）指定所构建镜像的架构。如果是`arm`架构，需要添加：\n\n    ```shell\n    export ARCH=aarch64\n    ```\n\n    - 允许ssh登录\n\n    初始化环境变量,设置用户名、密码，启用`sodo`权限；并添加`-e`选项使用相应的DIB元素。制作镜像操作如下：\n\n    ```shell\n    export DIB_DEV_USER_USERNAME=ipa \\\n    export DIB_DEV_USER_PWDLESS_SUDO=yes \\\n    export DIB_DEV_USER_PASSWORD='123'\n    ironic-python-agent-builder -o my-ssh-ubuntu-ipa -e selinux-permissive -e devuser ubuntu\n    ```\n\n    - 指定代码仓库\n\n    初始化对应的环境变量，然后制作镜像：\n\n    ```shell\n    # 直接从gerrit上clone代码\n    DIB_REPOLOCATION_ironic_python_agent=https://opendev.org/openstack/ironic-python-agent\n    DIB_REPOREF_ironic_python_agent=stable/2023.1\n\n    # 指定本地仓库及分支\n    DIB_REPOLOCATION_ironic_python_agent=/home/user/path/to/repo\n    DIB_REPOREF_ironic_python_agent=my-test-branch\n\n    ironic-python-agent-builder ubuntu\n    ```\n\n    参考：[source-repositories](https://docs.openstack.org/diskimage-builder/latest/elements/source-repositories/README.html)。\n\n9. 注意\n\n    原生的openstack里的pxe配置文件的模版不支持arm64架构，需要自己对原生openstack代码进行修改：\n    在W版中，社区的ironic仍然不支持arm64位的uefi pxe启动，表现为生成的grub.cfg文件(一般位于/tftpboot/下)格式不对而导致pxe启动失败。\n\n    生成的错误配置文件：\n\n    ![ironic-err](../../img/install/ironic-err.png)\n\n    如上图所示，arm架构里寻找vmlinux和ramdisk镜像的命令分别是linux和initrd，上图所示的标红命令是x86架构下的uefi pxe启动。\n\n    需要用户对生成grub.cfg的代码逻辑自行修改。\n\n    ironic向ipa发送查询命令执行状态请求的tls报错：\n\n    当前版本的ipa和ironic默认都会开启tls认证的方式向对方发送请求，跟据官网的说明进行关闭即可。\n\n    - 修改ironic配置文件(/etc/ironic/ironic.conf)下面的配置中添加ipa-insecure=1：\n\n    ```ini\n    [agent]\n    verify_ca = False\n    [pxe]\n    pxe_append_params = nofb nomodeset vga=normal coreos.autologin ipa-insecure=1\n    ```\n\n    - ramdisk镜像中添加ipa配置文件/etc/ironic_python_agent/ironic_python_agent.conf并配置tls的配置如下：\n\n    /etc/ironic_python_agent/ironic_python_agent.conf (需要提前创建/etc/    ironic_python_agent目录）\n\n    ```ini\n    [DEFAULT]\n    enable_auto_tls = False\n    ```\n\n    设置权限：\n\n    ```shell\n    chown -R ipa.ipa /etc/ironic_python_agent/\n    ```\n\n    - ramdisk镜像中修改ipa服务的服务启动文件，添加配置文件选项\n\n    编辑/usr/lib/systemd/system/ironic-python-agent.service文件\n\n    ```ini\n    [Unit]\n    Description=Ironic Python Agent\n    After=network-online.target\n    [Service]\n    ExecStartPre=/sbin/modprobe vfat\n    ExecStart=/usr/local/bin/ironic-python-agent --config-file /etc/    ironic_python_agent/ironic_python_agent.conf\n    Restart=always\n    RestartSec=30s\n    [Install]\n    WantedBy=multi-user.target\n    ```\n\n#### Trove\n\nTrove是OpenStack的数据库服务，如果用户使用OpenStack提供的数据库服务则推荐使用该组件。否则，可以不用安装。\n\n**Controller节点**\n\n1. 创建数据库。\n\n    数据库服务在数据库中存储信息，创建一个trove用户可以访问的trove数据库，替换TROVE_DBPASS为合适的密码。\n\n    ```sql\n    CREATE DATABASE trove CHARACTER SET utf8;\n    GRANT ALL PRIVILEGES ON trove.* TO 'trove'@'localhost' IDENTIFIED BY 'TROVE_DBPASS';\n    GRANT ALL PRIVILEGES ON trove.* TO 'trove'@'%' IDENTIFIED BY 'TROVE_DBPASS';\n    ```\n\n2. 创建服务凭证以及API端点。\n\n    创建服务凭证。\n\n    ```shell\n    # 创建trove用户\n    openstack user create --domain default --password-prompt trove\n    # 添加admin角色\n    openstack role add --project service --user trove admin\n    # 创建database服务\n    openstack service create --name trove --description \"Database service\" database\n    ```\n\n    创建API端点。\n\n    ```shell\n    openstack endpoint create --region RegionOne database public http://controller:8779/v1.0/%\\(tenant_id\\)s\n    openstack endpoint create --region RegionOne database internal http://controller:8779/v1.0/%\\(tenant_id\\)s\n    openstack endpoint create --region RegionOne database admin http://controller:8779/v1.0/%\\(tenant_id\\)s\n    ```\n\n3. 安装Trove。\n\n    ```shell\n    dnf install openstack-trove python-troveclient\n    ```\n\n4. 修改配置文件。\n\n    编辑/etc/trove/trove.conf。\n\n    ```ini\n    [DEFAULT]\n    bind_host=192.168.0.2\n    log_dir = /var/log/trove\n    network_driver = trove.network.neutron.NeutronDriver\n    network_label_regex=.*\n    management_security_groups = <manage security group>\n    nova_keypair = trove-mgmt\n    default_datastore = mysql\n    taskmanager_manager = trove.taskmanager.manager.Manager\n    trove_api_workers = 5\n    transport_url = rabbit://openstack:RABBIT_PASS@controller:5672/\n    reboot_time_out = 300\n    usage_timeout = 900\n    agent_call_high_timeout = 1200\n    use_syslog = False\n    debug = True\n\n    [database]\n    connection = mysql+pymysql://trove:TROVE_DBPASS@controller/trove\n\n    [keystone_authtoken]\n    auth_url = http://controller:5000/v3/\n    auth_type = password\n    project_domain_name = Default\n    project_name = service\n    user_domain_name = Default\n    password = trove\n    username = TROVE_PASS\n    \n    [service_credentials]\n    auth_url = http://controller:5000/v3/\n    region_name = RegionOne\n    project_name = service\n    project_domain_name = Default\n    user_domain_name = Default\n    username = trove\n    password = TROVE_PASS\n\n    [mariadb]\n    tcp_ports = 3306,4444,4567,4568\n\n    [mysql]\n    tcp_ports = 3306\n\n    [postgresql]\n    tcp_ports = 5432\n    ```\n\n    **解释：**\n\n    > `[Default]`分组中`bind_host`配置为Trove控制节点的IP。\\\n    > `transport_url` 为`RabbitMQ`连接信息，`RABBIT_PASS`替换为RabbitMQ的密码。\\\n    > `[database]`分组中的`connection` 为前面在mysql中为Trove创建的数据库信息。\\\n    > Trove的用户信息中`TROVE_PASSWORD`替换为实际trove用户的密码。\n\n    编辑/etc/trove/trove-guestagent.conf。\n\n    ```ini\n    [DEFAULT]\n    log_file = trove-guestagent.log\n    log_dir = /var/log/trove/\n    ignore_users = os_admin\n    control_exchange = trove\n    transport_url = rabbit://openstack:RABBIT_PASS@controller:5672/\n    rpc_backend = rabbit\n    command_process_timeout = 60\n    use_syslog = False\n    debug = True\n\n    [service_credentials]\n    auth_url = http://controller:5000/v3/\n    region_name = RegionOne\n    project_name = service\n    password = TROVE_PASS\n    project_domain_name = Default\n    user_domain_name = Default\n    username = trove\n\n    [mysql]\n    docker_image = your-registry/your-repo/mysql\n    backup_docker_image = your-registry/your-repo/db-backup-mysql:1.1.0\n    ```\n\n    **解释：** \n\n    > `guestagent`是trove中一个独立组件，需要预先内置到Trove通过Nova创建的虚拟机镜像中，在创建好数据库实例后，会起guestagent进程，负责通过消息队列（RabbitMQ）向Trove上报心跳，因此需要配置RabbitMQ的用户和密码信息。\\\n    > `transport_url` 为`RabbitMQ`连接信息，`RABBIT_PASS`替换为RabbitMQ的密码。\\\n    > Trove的用户信息中`TROVE_PASSWORD`替换为实际trove用户的密码。\\\n    > 从Victoria版开始，Trove使用一个统一的镜像来跑不同类型的数据库，数据库服务运行在Guest虚拟机的Docker容器中。\n\n5. 数据库同步。\n\n    ```shell\n    su -s /bin/sh -c \"trove-manage db_sync\" trove\n    ```\n\n6. 完成安装。\n\n    ```shell\n    # 配置服务自启\n    systemctl enable openstack-trove-api.service openstack-trove-taskmanager.service \\ \n    openstack-trove-conductor.service\n\n    # 启动服务\n    systemctl start openstack-trove-api.service openstack-trove-taskmanager.service \\ \n    openstack-trove-conductor.service\n    ```\n\n#### Swift\n\nSwift 提供了弹性可伸缩、高可用的分布式对象存储服务，适合存储大规模非结构化数据。\n\n**Controller节点**\n\n1. 创建服务凭证以及API端点。\n\n    创建服务凭证。\n\n    ```shell\n    # 创建swift用户\n    openstack user create --domain default --password-prompt swift\n    # 添加admin角色\n    openstack role add --project service --user swift admin\n    # 创建对象存储服务\n    openstack service create --name swift --description \"OpenStack Object Storage\" object-store\n    ```\n\n    创建API端点。\n\n    ```shell\n    openstack endpoint create --region RegionOne object-store public http://controller:8080/v1/AUTH_%\\(project_id\\)s\n    openstack endpoint create --region RegionOne object-store internal http://controller:8080/v1/AUTH_%\\(project_id\\)s\n    openstack endpoint create --region RegionOne object-store admin http://controller:8080/v1 \n    ```\n\n2. 安装Swift。\n\n    ```shell\n    dnf install openstack-swift-proxy python3-swiftclient python3-keystoneclient \\ \n    python3-keystonemiddleware memcached\n    ```\n\n3. 配置proxy-server。\n\n    Swift RPM包里已经包含了一个基本可用的proxy-server.conf，只需要手动修改其中的ip和SWIFT_PASS即可。\n\n    ```ini\n    vim /etc/swift/proxy-server.conf\n\n    [filter:authtoken]\n    paste.filter_factory = keystonemiddleware.auth_token:filter_factory\n    www_authenticate_uri = http://controller:5000\n    auth_url = http://controller:5000\n    memcached_servers = controller:11211\n    auth_type = password\n    project_domain_id = default\n    user_domain_id = default\n    project_name = service\n    username = swift\n    password = SWIFT_PASS\n    delay_auth_decision = True\n    service_token_roles_required = True\n    ```\n\n**Storage节点**\n\n1. 安装支持的程序包。\n\n    ```shell\n    dnf install openstack-swift-account openstack-swift-container openstack-swift-object\n    dnf install xfsprogs rsync\n    ```\n\n2. 将设备/dev/sdb和/dev/sdc格式化为XFS。\n\n    ```shell\n    mkfs.xfs /dev/sdb\n    mkfs.xfs /dev/sdc\n    ```\n\n3. 创建挂载点目录结构。\n\n    ```shell\n    mkdir -p /srv/node/sdb\n    mkdir -p /srv/node/sdc\n    ```\n\n4. 找到新分区的UUID。\n\n    ```shell\n    blkid\n    ```\n\n5. 编辑/etc/fstab文件并将以下内容添加到其中。\n\n    ```shell\n    UUID=\"<UUID-from-output-above>\" /srv/node/sdb xfs noatime 0 2\n    UUID=\"<UUID-from-output-above>\" /srv/node/sdc xfs noatime 0 2\n    ```\n\n6. 挂载设备。\n\n    ```shell\n    mount /srv/node/sdb\n    mount /srv/node/sdc\n    ```\n\n    ***注意***\n\n    **如果用户不需要容灾功能，以上步骤只需要创建一个设备即可，同时可以跳过下面的rsync配置。**\n\n7. （可选）创建或编辑/etc/rsyncd.conf文件以包含以下内容:\n\n    ```ini\n    [DEFAULT]\n    uid = swift\n    gid = swift\n    log file = /var/log/rsyncd.log\n    pid file = /var/run/rsyncd.pid\n    address = MANAGEMENT_INTERFACE_IP_ADDRESS\n    \n    [account]\n    max connections = 2\n    path = /srv/node/\n    read only = False\n    lock file = /var/lock/account.lock\n    \n    [container]\n    max connections = 2\n    path = /srv/node/\n    read only = False\n    lock file = /var/lock/container.lock\n    \n    [object]\n    max connections = 2\n    path = /srv/node/\n    read only = False\n    lock file = /var/lock/object.lock\n    ```\n\n    **替换MANAGEMENT_INTERFACE_IP_ADDRESS为存储节点上管理网络的IP地址**\n\n    启动rsyncd服务并配置它在系统启动时启动:\n\n    ```shell\n    systemctl enable rsyncd.service\n    systemctl start rsyncd.service\n    ```\n\n8. 配置存储节点。\n\n    编辑/etc/swift目录的account-server.conf、container-server.conf和object-server.conf文件，替换bind_ip为存储节点上管理网络的IP地址。\n\n    ```ini\n    [DEFAULT]\n    bind_ip = 192.168.0.4\n    ```\n\n    确保挂载点目录结构的正确所有权。\n\n    ```shell\n    chown -R swift:swift /srv/node\n    ```\n\n    创建recon目录并确保其拥有正确的所有权。\n\n    ```shell\n    mkdir -p /var/cache/swift\n    chown -R root:swift /var/cache/swift\n    chmod -R 775 /var/cache/swift\n    ```\n\n**Controller节点创建并分发环**\n\n1. 创建账号环。\n\n    切换到`/etc/swift`目录。\n\n    ```shell\n    cd /etc/swift\n    ```\n\n    创建基础`account.builder`文件。\n\n    ```shell\n    swift-ring-builder account.builder create 10 1 1\n    ```\n\n    将每个存储节点添加到环中。\n\n    ```shell\n    swift-ring-builder account.builder add --region 1 --zone 1 \\\n    --ip STORAGE_NODE_MANAGEMENT_INTERFACE_IP_ADDRESS \\ \n    --port 6202  --device DEVICE_NAME \\ \n    --weight 100\n    ```\n\n    > 替换STORAGE_NODE_MANAGEMENT_INTERFACE_IP_ADDRESS为存储节点上管理网络的IP地址。\\\n    > 替换DEVICE_NAME为同一存储节点上的存储设备名称。\n\n    ***注意***\n\n    **对每个存储节点上的每个存储设备重复此命令**\n\n    验证账号环内容。\n\n    ```shell\n    swift-ring-builder account.builder\n    ```\n\n    重新平衡账号环。\n\n    ```shell\n    swift-ring-builder account.builder rebalance\n    ```\n\n2. 创建容器环。\n   \n    切换到`/etc/swift`目录。\n    \n    创建基础`container.builder`文件。\n\n    ```shell\n    swift-ring-builder container.builder create 10 1 1\n    ```\n\n    将每个存储节点添加到环中。\n\n    ```shell\n    swift-ring-builder container.builder add --region 1 --zone 1 \\\n    --ip STORAGE_NODE_MANAGEMENT_INTERFACE_IP_ADDRESS \n    --port 6201 --device DEVICE_NAME \\\n    --weight 100\n    ```\n\n    > 替换STORAGE_NODE_MANAGEMENT_INTERFACE_IP_ADDRESS为存储节点上管理网络的IP地址。\\\n    > 替换DEVICE_NAME为同一存储节点上的存储设备名称。\n    \n    ***注意***\n\n    **对每个存储节点上的每个存储设备重复此命令**\n    \n    验证容器环内容。\n\n    ```shell\n    swift-ring-builder container.builder\n    ```\n\n    重新平衡容器环。\n\n    ```shell\n    swift-ring-builder container.builder rebalance\n    ```\n\n3. 创建对象环。\n   \n    切换到`/etc/swift`目录。\n    \n    创建基础`object.builder`文件。\n\n    ```shell\n    swift-ring-builder object.builder create 10 1 1\n    ```\n\n    将每个存储节点添加到环中。\n\n    ```shell\n     swift-ring-builder object.builder add --region 1 --zone 1 \\\n     --ip STORAGE_NODE_MANAGEMENT_INTERFACE_IP_ADDRESS \\\n     --port 6200 --device DEVICE_NAME \\\n     --weight 100\n    ```\n\n    > 替换STORAGE_NODE_MANAGEMENT_INTERFACE_IP_ADDRESS为存储节点上管理网络的IP地址。\\\n    > 替换DEVICE_NAME为同一存储节点上的存储设备名称。\n    \n    ***注意***\n\n    **对每个存储节点上的每个存储设备重复此命令**\n    \n    验证对象环内容。\n\n    ```shell\n    swift-ring-builder object.builder\n    ```\n\n    重新平衡对象环。\n\n    ```shell\n    swift-ring-builder object.builder rebalance\n    ```\n\n4. 分发环配置文件。\n\n    将`account.ring.gz`，`container.ring.gz`以及 `object.ring.gz`文件复制到每个存储节点和运行代理服务的任何其他节点上的`/etc/swift`目录。\n\n5. 编辑配置文件/etc/swift/swift.conf。\n\n    ```ini\n    [swift-hash]\n    swift_hash_path_suffix = test-hash\n    swift_hash_path_prefix = test-hash\n\n    [storage-policy:0]\n    name = Policy-0\n    default = yes\n    ```\n\n    **用唯一值替换 test-hash**\n\n    将swift.conf文件复制到/etc/swift每个存储节点和运行代理服务的任何其他节点上的目录。\n    \n    在所有节点上，确保配置目录的正确所有权。\n\n    ```shell\n    chown -R root:swift /etc/swift\n    ```\n\n6. 完成安装\n\n    在控制节点和运行代理服务的任何其他节点上，启动对象存储代理服务及其依赖项，并将它们配置为在系统启动时启动。\n\n    ```shell\n    systemctl enable openstack-swift-proxy.service memcached.service\n    systemctl start openstack-swift-proxy.service memcached.service\n    ```\n\n    在存储节点上，启动对象存储服务并将它们配置为在系统启动时启动。\n\n    ```shell\n    systemctl enable openstack-swift-account.service \\\n    openstack-swift-account-auditor.service \\\n    openstack-swift-account-reaper.service \\\n    openstack-swift-account-replicator.service \\\n    openstack-swift-container.service \\\n    openstack-swift-container-auditor.service \\\n    openstack-swift-container-replicator.service \\\n    openstack-swift-container-updater.service \\\n    openstack-swift-object.service \\\n    openstack-swift-object-auditor.service \\\n    openstack-swift-object-replicator.service \\\n    openstack-swift-object-updater.service\n\n    systemctl start openstack-swift-account.service \\\n    openstack-swift-account-auditor.service \\\n    openstack-swift-account-reaper.service \\\n    openstack-swift-account-replicator.service \\\n    openstack-swift-container.service \\\n    openstack-swift-container-auditor.service \\\n    openstack-swift-container-replicator.service \\\n    openstack-swift-container-updater.service \\\n    openstack-swift-object.service \\\n    openstack-swift-object-auditor.service \\\n    openstack-swift-object-replicator.service \\\n    openstack-swift-object-updater.service\n    ```\n\n#### Cyborg\n\nCyborg为OpenStack提供加速器设备的支持，包括 GPU, FPGA, ASIC, NP, SoCs, NVMe/NOF SSDs, ODP, DPDK/SPDK等等。\n\n**Controller节点**\n\n1. 初始化对应数据库\n\n    ```sql\n    mysql -u root -p\n\n    MariaDB [(none)]> CREATE DATABASE cyborg;\n    MariaDB [(none)]> GRANT ALL PRIVILEGES ON cyborg.* TO 'cyborg'@'localhost' IDENTIFIED BY 'CYBORG_DBPASS';\n    MariaDB [(none)]> GRANT ALL PRIVILEGES ON cyborg.* TO 'cyborg'@'%' IDENTIFIED BY 'CYBORG_DBPASS';\n    MariaDB [(none)]> exit;\n    ```\n\n2. 创建用户和服务，并记住创建cybory用户时输入的密码，用于配置CYBORG_PASS\n\n    ```shell\n    source ~/.admin-openrc\n    openstack user create --domain default --password-prompt cyborg\n    openstack role add --project service --user cyborg admin\n    openstack service create --name cyborg --description \"Acceleration Service\" accelerator\n    ```\n\n3. 使用uwsgi部署Cyborg api服务\n\n    ```shell\n    openstack endpoint create --region RegionOne accelerator public http://controller/accelerator/v2\n    openstack endpoint create --region RegionOne accelerator internal http://controller/accelerator/v2\n    openstack endpoint create --region RegionOne accelerator admin http://controller/accelerator/v2\n    ```\n\n4. 安装Cyborg\n\n    ```shell\n    dnf install openstack-cyborg\n    ```\n\n5. 配置Cyborg\n\n    修改`/etc/cyborg/cyborg.conf`\n\n    ```ini\n    [DEFAULT]\n    transport_url = rabbit://openstack:RABBIT_PASS@controller:5672/\n    use_syslog = False\n    state_path = /var/lib/cyborg\n    debug = True\n\n    [api]\n    host_ip = 0.0.0.0\n\n    [database]\n    connection = mysql+pymysql://cyborg:CYBORG_DBPASS@controller/cyborg\n\n    [service_catalog]\n    cafile = /opt/stack/data/ca-bundle.pem\n    project_domain_id = default\n    user_domain_id = default\n    project_name = service\n    password = CYBORG_PASS\n    username = cyborg\n    auth_url = http://controller:5000/v3/\n    auth_type = password\n\n    [placement]\n    project_domain_name = Default\n    project_name = service\n    user_domain_name = Default\n    password = password\n    username = PLACEMENT_PASS\n    auth_url = http://controller:5000/v3/\n    auth_type = password\n    auth_section = keystone_authtoken\n\n    [nova]\n    project_domain_name = Default\n    project_name = service\n    user_domain_name = Default\n    password = NOVA_PASS\n    username = nova\n    auth_url = http://controller:5000/v3/\n    auth_type = password\n    auth_section = keystone_authtoken\n\n    [keystone_authtoken]\n    memcached_servers = localhost:11211\n    signing_dir = /var/cache/cyborg/api\n    cafile = /opt/stack/data/ca-bundle.pem\n    project_domain_name = Default\n    project_name = service\n    user_domain_name = Default\n    password = CYBORG_PASS\n    username = cyborg\n    auth_url = http://controller:5000/v3/\n    auth_type = password\n    ```\n\n6. 同步数据库表格\n\n    ```shell\n    cyborg-dbsync --config-file /etc/cyborg/cyborg.conf upgrade\n    ```\n\n7. 启动Cyborg服务\n\n    ```shell\n    systemctl enable openstack-cyborg-api openstack-cyborg-conductor openstack-cyborg-agent\n    systemctl start openstack-cyborg-api openstack-cyborg-conductor openstack-cyborg-agent\n    ```\n\n#### Aodh\n\nAodh可以根据由Ceilometer或者Gnocchi收集的监控数据创建告警，并设置触发规则。\n\n**Controller节点**\n\n1. 创建数据库。\n\n    ```sql\n    CREATE DATABASE aodh;\n    GRANT ALL PRIVILEGES ON aodh.* TO 'aodh'@'localhost' IDENTIFIED BY 'AODH_DBPASS';\n    GRANT ALL PRIVILEGES ON aodh.* TO 'aodh'@'%' IDENTIFIED BY 'AODH_DBPASS';\n    ```\n\n2. 创建服务凭证以及API端点。\n\n    创建服务凭证。\n\n    ```shell\n    openstack user create --domain default --password-prompt aodh\n    openstack role add --project service --user aodh admin\n    openstack service create --name aodh --description \"Telemetry\" alarming\n    ```\n\n    创建API端点。\n\n    ```shell\n    openstack endpoint create --region RegionOne alarming public http://controller:8042\n    openstack endpoint create --region RegionOne alarming internal http://controller:8042\n    openstack endpoint create --region RegionOne alarming admin http://controller:8042\n    ```\n\n3. 安装Aodh。\n\n    ```shell\n    dnf install openstack-aodh-api openstack-aodh-evaluator \\\n    openstack-aodh-notifier openstack-aodh-listener \\\n    openstack-aodh-expirer python3-aodhclient\n    ```\n\n4. 修改配置文件。\n\n    ```ini\n    vim /etc/aodh/aodh.conf\n\n    [database]\n    connection = mysql+pymysql://aodh:AODH_DBPASS@controller/aodh\n\n    [DEFAULT]\n    transport_url = rabbit://openstack:RABBIT_PASS@controller\n    auth_strategy = keystone\n\n    [keystone_authtoken]\n    www_authenticate_uri = http://controller:5000\n    auth_url = http://controller:5000\n    memcached_servers = controller:11211\n    auth_type = password\n    project_domain_id = default\n    user_domain_id = default\n    project_name = service\n    username = aodh\n    password = AODH_PASS\n\n    [service_credentials]\n    auth_type = password\n    auth_url = http://controller:5000/v3\n    project_domain_id = default\n    user_domain_id = default\n    project_name = service\n    username = aodh\n    password = AODH_PASS\n    interface = internalURL\n    region_name = RegionOne\n    ```\n\n5. 同步数据库。\n\n    ```shell\n    aodh-dbsync\n    ```\n\n6. 完成安装。\n\n    ```shell\n    # 配置服务自启\n    systemctl enable openstack-aodh-api.service openstack-aodh-evaluator.service \\\n    openstack-aodh-notifier.service openstack-aodh-listener.service\n\n    # 启动服务\n    systemctl start openstack-aodh-api.service openstack-aodh-evaluator.service \\\n    openstack-aodh-notifier.service openstack-aodh-listener.service\n    ```\n\n#### Gnocchi\n\nGnocchi是一个开源的时间序列数据库，可以对接Ceilometer。\n\n**Controller节点**\n\n1. 创建数据库。\n\n    ```sql\n    CREATE DATABASE gnocchi;\n    GRANT ALL PRIVILEGES ON gnocchi.* TO 'gnocchi'@'localhost' IDENTIFIED BY 'GNOCCHI_DBPASS';\n    GRANT ALL PRIVILEGES ON gnocchi.* TO 'gnocchi'@'%' IDENTIFIED BY 'GNOCCHI_DBPASS';\n    ```\n\n2. 创建服务凭证以及API端点。\n    \n    创建服务凭证。\n\n    ```shell\n    openstack user create --domain default --password-prompt gnocchi\n    openstack role add --project service --user gnocchi admin\n    openstack service create --name gnocchi --description \"Metric Service\" metric\n    ```\n\n    创建API端点。\n\n    ```shell\n    openstack endpoint create --region RegionOne metric public http://controller:8041\n    openstack endpoint create --region RegionOne metric internal http://controller:8041\n    openstack endpoint create --region RegionOne metric admin http://controller:8041\n    ```\n\n3. 安装Gnocchi。\n\n    ```shell\n    dnf install openstack-gnocchi-api openstack-gnocchi-metricd python3-gnocchiclient\n    ```\n\n4. 修改配置文件。\n\n    ```ini\n    vim /etc/gnocchi/gnocchi.conf\n    [api]\n    auth_mode = keystone\n    port = 8041\n    uwsgi_mode = http-socket\n\n    [keystone_authtoken]\n    auth_type = password\n    auth_url = http://controller:5000/v3\n    project_domain_name = Default\n    user_domain_name = Default\n    project_name = service\n    username = gnocchi\n    password = GNOCCHI_PASS\n    interface = internalURL\n    region_name = RegionOne\n\n    [indexer]\n    url = mysql+pymysql://gnocchi:GNOCCHI_DBPASS@controller/gnocchi\n\n    [storage]\n    # coordination_url is not required but specifying one will improve\n    # performance with better workload division across workers.\n    # coordination_url = redis://controller:6379\n    file_basepath = /var/lib/gnocchi\n    driver = file\n    ```\n\n5. 同步数据库。\n\n    ```shell\n    gnocchi-upgrade\n    ```\n\n6. 完成安装。\n\n    ```shell\n    # 配置服务自启\n    systemctl enable openstack-gnocchi-api.service openstack-gnocchi-metricd.service\n\n    # 启动服务\n    systemctl start openstack-gnocchi-api.service openstack-gnocchi-metricd.service\n    ```\n\n#### Ceilometer\n\nCeilometer是OpenStack中负责数据收集的服务。\n\n**Controller节点**\n\n1. 创建服务凭证。\n\n    ```shell\n    openstack user create --domain default --password-prompt ceilometer\n    openstack role add --project service --user ceilometer admin\n    openstack service create --name ceilometer --description \"Telemetry\" metering\n    ```\n\n2. 安装Ceilometer软件包。\n\n    ```shell\n    dnf install openstack-ceilometer-notification openstack-ceilometer-central\n    ```\n\n3. 编辑配置文件/etc/ceilometer/pipeline.yaml。 \n\n    ```yaml\n    publishers:\n        # set address of Gnocchi\n        # + filter out Gnocchi-related activity meters (Swift driver)\n        # + set default archive policy\n        - gnocchi://?filter_project=service&archive_policy=low\n    ```\n\n4. 编辑配置文件/etc/ceilometer/ceilometer.conf。\n\n    ```ini\n    [DEFAULT]\n    transport_url = rabbit://openstack:RABBIT_PASS@controller\n\n    [service_credentials]\n    auth_type = password\n    auth_url = http://controller:5000/v3\n    project_domain_id = default\n    user_domain_id = default\n    project_name = service\n    username = ceilometer\n    password = CEILOMETER_PASS\n    interface = internalURL\n    region_name = RegionOne\n    ```\n\n5. 数据库同步。\n\n    ```shell\n    ceilometer-upgrade\n    ```\n\n6. 完成控制节点Ceilometer安装。\n\n    ```shell\n    # 配置服务自启\n    systemctl enable openstack-ceilometer-notification.service openstack-ceilometer-central.service\n    # 启动服务\n    systemctl start openstack-ceilometer-notification.service openstack-ceilometer-central.service\n    ```\n\n**Compute节点**\n\n1. 安装Ceilometer软件包。\n\n    ```shell\n    dnf install openstack-ceilometer-compute\n    dnf install openstack-ceilometer-ipmi       # 可选\n    ```\n\n2. 编辑配置文件/etc/ceilometer/ceilometer.conf。\n\n    ```ini\n    [DEFAULT]\n    transport_url = rabbit://openstack:RABBIT_PASS@controller\n\n    [service_credentials]\n    auth_url = http://controller:5000\n    project_domain_id = default\n    user_domain_id = default\n    auth_type = password\n    username = ceilometer\n    project_name = service\n    password = CEILOMETER_PASS\n    interface = internalURL\n    region_name = RegionOne\n    ```\n\n3. 编辑配置文件/etc/nova/nova.conf。\n\n    ```ini\n    [DEFAULT]\n    instance_usage_audit = True\n    instance_usage_audit_period = hour\n\n    [notifications]\n    notify_on_state_change = vm_and_task_state\n\n    [oslo_messaging_notifications]\n    driver = messagingv2\n    ```\n\n4. 完成安装。\n\n    ```shell\n    systemctl enable openstack-ceilometer-compute.service\n    systemctl start openstack-ceilometer-compute.service\n    systemctl enable openstack-ceilometer-ipmi.service         # 可选\n    systemctl start openstack-ceilometer-ipmi.service          # 可选\n    \n    # 重启nova-compute服务\n    systemctl restart openstack-nova-compute.service\n    ```\n\n#### Heat\n\nHeat是 OpenStack 自动编排服务，基于描述性的模板来编排复合云应用，也称为`Orchestration Service`。Heat 的各服务一般安装在`Controller`节点上。\n\n**Controller节点**\n\n1. 创建**heat**数据库，并授予**heat**数据库正确的访问权限，替换**HEAT_DBPASS**为合适的密码\n\n    ```sql\n    mysql -u root -p\n\n    MariaDB [(none)]> CREATE DATABASE heat;\n    MariaDB [(none)]> GRANT ALL PRIVILEGES ON heat.* TO 'heat'@'localhost' IDENTIFIED BY 'HEAT_DBPASS';\n    MariaDB [(none)]> GRANT ALL PRIVILEGES ON heat.* TO 'heat'@'%' IDENTIFIED BY 'HEAT_DBPASS';\n    MariaDB [(none)]> exit;\n    ```\n\n2. 创建服务凭证，创建**heat**用户，并为其增加**admin**角色\n\n    ```shell\n    source ~/.admin-openrc\n\n    openstack user create --domain default --password-prompt heat\n    openstack role add --project service --user heat admin\n    ```\n\n3. 创建**heat**和**heat-cfn**服务及其对应的API端点\n\n    ```shell\n    openstack service create --name heat --description \"Orchestration\" orchestration\n    openstack service create --name heat-cfn --description \"Orchestration\"  cloudformation\n    openstack endpoint create --region RegionOne orchestration public http://controller:8004/v1/%\\(tenant_id\\)s\n    openstack endpoint create --region RegionOne orchestration internal http://controller:8004/v1/%\\(tenant_id\\)s\n    openstack endpoint create --region RegionOne orchestration admin http://controller:8004/v1/%\\(tenant_id\\)s\n    openstack endpoint create --region RegionOne cloudformation public http://controller:8000/v1\n    openstack endpoint create --region RegionOne cloudformation internal http://controller:8000/v1\n    openstack endpoint create --region RegionOne cloudformation admin http://controller:8000/v1\n    ```\n\n4. 创建stack管理的额外信息\n\n    创建 **heat** domain\n\n    ```shell\n    openstack domain create --description \"Stack projects and users\" heat\n    ```\n\n    在 **heat** domain下创建 **heat_domain_admin** 用户，并记下输入的密码，用于配置下面的`HEAT_DOMAIN_PASS`\n\n    ```shell\n    openstack user create --domain heat --password-prompt heat_domain_admin\n    ```\n\n    为 **heat_domain_admin** 用户增加 **admin** 角色\n\n    ```shell\n    openstack role add --domain heat --user-domain heat --user heat_domain_admin admin\n    ```\n\n    创建 **heat_stack_owner** 角色\n\n    ```shell\n    openstack role create heat_stack_owner\n    ```\n\n    创建 **heat_stack_user** 角色\n\n    ```shell\n    openstack role create heat_stack_user\n    ```\n\n5. 安装软件包\n\n    ```shell\n    dnf install openstack-heat-api openstack-heat-api-cfn openstack-heat-engine\n    ```\n\n6. 修改配置文件`/etc/heat/heat.conf`\n\n    ```ini\n    [DEFAULT]\n    transport_url = rabbit://openstack:RABBIT_PASS@controller\n    heat_metadata_server_url = http://controller:8000\n    heat_waitcondition_server_url = http://controller:8000/v1/waitcondition\n    stack_domain_admin = heat_domain_admin\n    stack_domain_admin_password = HEAT_DOMAIN_PASS\n    stack_user_domain_name = heat\n\n    [database]\n    connection = mysql+pymysql://heat:HEAT_DBPASS@controller/heat\n\n    [keystone_authtoken]\n    www_authenticate_uri = http://controller:5000\n    auth_url = http://controller:5000\n    memcached_servers = controller:11211\n    auth_type = password\n    project_domain_name = default\n    user_domain_name = default\n    project_name = service\n    username = heat\n    password = HEAT_PASS\n\n    [trustee]\n    auth_type = password\n    auth_url = http://controller:5000\n    username = heat\n    password = HEAT_PASS\n    user_domain_name = default\n\n    [clients_keystone]\n    auth_uri = http://controller:5000\n    ```\n\n7. 初始化**heat**数据库表\n\n    ```shell\n    su -s /bin/sh -c \"heat-manage db_sync\" heat\n    ```\n\n8. 启动服务\n\n    ```shell\n    systemctl enable openstack-heat-api.service openstack-heat-api-cfn.service openstack-heat-engine.service\n    systemctl start openstack-heat-api.service openstack-heat-api-cfn.service openstack-heat-engine.service\n    ```\n\n#### Tempest\n\nTempest是OpenStack的集成测试服务，如果用户需要全面自动化测试已安装的OpenStack环境的功能,则推荐使用该组件。否则，可以不用安装。\n\n**Controller节点**：\n\n1. 安装Tempest\n\n    ```shell\n    dnf install openstack-tempest\n    ```\n\n2. 初始化目录\n\n    ```shell\n    tempest init mytest\n    ```\n\n3. 修改配置文件。\n\n    ```shell\n    cd mytest\n    vi etc/tempest.conf\n    ```\n\n    tempest.conf中需要配置当前OpenStack环境的信息，具体内容可以参考[官方示例](https://docs.openstack.org/tempest/latest/sampleconf.html)\n\n4. 执行测试\n\n    ```shell\n    tempest run\n    ```\n\n5. 安装tempest扩展（可选）\n   OpenStack各个服务本身也提供了一些tempest测试包，用户可以安装这些包来丰富tempest的测试内容。在Antelope中，我们提供了Cinder、Glance、Keystone、Ironic、Trove的扩展测试，用户可以执行如下命令进行安装使用：\n\n   ```shell\n   dnf install python3-cinder-tempest-plugin python3-glance-tempest-plugin python3-ironic-tempest-plugin python3-keystone-tempest-plugin python3-trove-tempest-plugin\n   ```\n\n## 基于OpenStack SIG开发工具oos部署\n\n`oos`(openEuler OpenStack SIG)是OpenStack SIG提供的命令行工具。其中`oos env`系列命令提供了一键部署OpenStack （`all in one`或三节点`cluster`）的ansible脚本，用户可以使用该脚本快速部署一套基于 openEuler RPM 的 OpenStack 环境。`oos`工具支持对接云provider（目前仅支持华为云provider）和主机纳管两种方式来部署 OpenStack 环境，下面以对接华为云部署一套`all in one`的OpenStack环境为例说明`oos`工具的使用方法。\n\n1. 安装`oos`工具\n\n    ```shell\n    yum install openstack-sig-tool\n    ```\n\n2. 配置对接华为云provider的信息\n\n    打开`/usr/local/etc/oos/oos.conf`文件，修改配置为您拥有的华为云资源信息，AK/SK是用户的华为云登录密钥，其他配置保持默认即可（默认使用新加坡region），需要提前在云上创建对应的资源，包括：\n\n    - 一个安全组，名字默认是`oos`\n    - 一个openEuler镜像，名称格式是openEuler-%(release)s-%(arch)s，例如`openEuler-24.03-sp1-arm64`\n    - 一个VPC，名称是`oos_vpc`\n    - 该VPC下面两个子网，名称是`oos_subnet1`、`oos_subnet2`\n\n    ```ini\n    [huaweicloud]\n    ak = \n    sk = \n    region = ap-southeast-3\n    root_volume_size = 100\n    data_volume_size = 100\n    security_group_name = oos\n    image_format = openEuler-%%(release)s-%%(arch)s\n    vpc_name = oos_vpc\n    subnet1_name = oos_subnet1\n    subnet2_name = oos_subnet2\n    ```\n\n3. 配置 OpenStack 环境信息\n\n    打开`/usr/local/etc/oos/oos.conf`文件，根据当前机器环境和需求修改配置。内容如下：\n\n    ```shell\n    [environment]\n    mysql_root_password = root\n    mysql_project_password = root\n    rabbitmq_password = root\n    project_identity_password = root\n    enabled_service = keystone,neutron,cinder,placement,nova,glance,horizon,aodh,ceilometer,cyborg,gnocchi,kolla,heat,swift,trove,tempest\n    neutron_provider_interface_name = br-ex\n    default_ext_subnet_range = 10.100.100.0/24\n    default_ext_subnet_gateway = 10.100.100.1\n    neutron_dataplane_interface_name = eth1\n    cinder_block_device = vdb\n    swift_storage_devices = vdc\n    swift_hash_path_suffix = ash\n    swift_hash_path_prefix = has\n    glance_api_workers = 2\n    cinder_api_workers = 2\n    nova_api_workers = 2\n    nova_metadata_api_workers = 2\n    nova_conductor_workers = 2\n    nova_scheduler_workers = 2\n    neutron_api_workers = 2\n    horizon_allowed_host = *\n    kolla_openeuler_plugin = false\n    ```\n\n    **关键配置**\n\n    | 配置项   | 解释 |\n    |---|---|\n    | enabled_service  |  安装服务列表，根据用户需求自行删减 |\n    | neutron_provider_interface_name  | neutron L3网桥名称  |\n    | default_ext_subnet_range  | neutron私网IP段  |\n    | default_ext_subnet_gateway  | neutron私网gateway  |\n    | neutron_dataplane_interface_name  | neutron使用的网卡，推荐使用一张新的网卡，以免和现有网卡冲突，防止all in one主机断连的情况  |\n    | cinder_block_device  |  cinder使用的卷设备名 |\n    | swift_storage_devices  | swift使用的卷设备名 |\n    | kolla_openeuler_plugin | 是否启用kolla plugin。设置为True，kolla将支持部署openEuler容器(只在openEuler LTS上支持) |\n\n4. 华为云上面创建一台|openEuler 24.03 LTS SP1的x86_64虚拟机，用于部署`all in one` 的 OpenStack\n\n    ```shell\n    # sshpass在`oos env create`过程中被使用，用于配置对目标虚拟机的免密访问\n    dnf install sshpass\n    oos env create -r 24.03-lts-sp1 -f small -a x86 -n test-oos all_in_one\n    ```\n\n    具体的参数可以使用`oos env create --help`命令查看\n\n5. 部署OpenStack `all in one` 环境\n\n    ```shell\n    oos env setup test-oos -r antelope\n    ```\n\n    具体的参数可以使用`oos env setup --help`命令查看\n\n6. 初始化tempest环境\n\n    如果用户想使用该环境运行tempest测试的话，可以执行命令`oos env init`，会自动把tempest需要的OpenStack资源自动创建好\n\n    ```shell\n    oos env init test-oos\n    ```\n\n7. 执行tempest测试\n\n    用户可以使用oos自动执行：\n\n    ```shell\n    oos env test test-oos\n    ```\n\n    也可以手动登录目标节点，进入根目录下的`mytest`目录，手动执行`tempest run`\n\n如果是以主机纳管的方式部署 OpenStack 环境，总体逻辑与上文对接华为云时一致，1、3、5、6步操作不变，跳过第2步对华为云provider信息的配置，在第4步改为纳管主机操作。\n\n被纳管的虚机需要保证：\n\n- 至少有一张给oos使用的网卡，名称与配置保持一致，相关配置`neutron_dataplane_interface_name`\n- 至少有一块给oos使用的硬盘，名称与配置保持一致，相关配置`cinder_block_device`\n- 如果要部署swift服务，则需要新增一块硬盘，名称与配置保持一致，相关配置`swift_storage_devices`\n\n```shell\n# sshpass在`oos env create`过程中被使用，用于配置对目标主机的免密访问\ndnf install sshpass\noos env manage -r 24.03-lts-sp1 -i TARGET_MACHINE_IP -p TARGET_MACHINE_PASSWD -n test-oos\n```\n\n替换`TARGET_MACHINE_IP`为目标机ip、`TARGET_MACHINE_PASSWD`为目标机密码。具体的参数可以使用`oos env manage --help`命令查看。\n","source":"_posts/OpenEuler-24.03-LTS-SP1-Antelope.md","raw":"# OpenStack Antelope 部署指南\n\n[TOC]\n\n本文档是 openEuler OpenStack SIG 编写的基于 |openEuler 24.03 LTS SP1 的 OpenStack 部署指南，内容由 SIG 贡献者提供。在阅读过程中，如果您有任何疑问或者发现任何问题，请[联系](https://gitee.com/openeuler/openstack#%E8%81%94%E7%B3%BB%E6%96%B9%E5%BC%8F)SIG维护人员，或者直接[提交issue](https://gitee.com/openeuler/openstack/issues)\n\n**约定**\n\n本章节描述文档中的一些通用约定。\n\n| 名称 | 定义 |\n|:----:|:----:|\n| RABBIT_PASS | rabbitmq的密码，由用户设置，在OpenStack各个服务配置中使用 |\n| CINDER_PASS | cinder服务keystone用户的密码，在cinder配置中使用|\n| CINDER_DBPASS | cinder服务数据库密码，在cinder配置中使用|\n| KEYSTONE_DBPASS | keystone服务数据库密码，在keystone配置中使用|\n| GLANCE_PASS | glance服务keystone用户的密码，在glance配置中使用|\n| GLANCE_DBPASS | glance服务数据库密码，在glance配置中使用|\n| HEAT_PASS | 在keystone注册的heat用户密码，在heat配置中使用|\n| HEAT_DBPASS | heat服务数据库密码，在heat配置中使用 |\n| CYBORG_PASS | 在keystone注册的cyborg用户密码，在cyborg配置中使用|\n| CYBORG_DBPASS | cyborg服务数据库密码，在cyborg配置中使用 |\n| NEUTRON_PASS | 在keystone注册的neutron用户密码，在neutron配置中使用|\n| NEUTRON_DBPASS | neutron服务数据库密码，在neutron配置中使用 |\n| PROVIDER_INTERFACE_NAME | 物理网络接口的名称，在neutron配置中使用 |\n| OVERLAY_INTERFACE_IP_ADDRESS | Controller控制节点的管理ip地址，在neutron配置中使用 |\n| METADATA_SECRET | metadata proxy的secret密码，在nova和neutron配置中使用 |\n| PLACEMENT_DBPASS | placement服务数据库密码，在placement配置中使用 |\n| PLACEMENT_PASS | 在keystone注册的placement用户密码，在placement配置中使用 |\n| NOVA_DBPASS |  nova服务数据库密码，在nova配置中使用 |\n| NOVA_PASS | 在keystone注册的nova用户密码，在nova,cyborg,neutron等配置中使用 |\n| IRONIC_DBPASS | ironic服务数据库密码，在ironic配置中使用 |\n| IRONIC_PASS | 在keystone注册的ironic用户密码，在ironic配置中使用 |\n| IRONIC_INSPECTOR_DBPASS | ironic-inspector服务数据库密码，在ironic-inspector配置中使用|\n| IRONIC_INSPECTOR_PASS | 在keystone注册的ironic-inspector用户密码，在ironic-inspector配置中使用 |\n\nOpenStack SIG 提供了多种基于 openEuler 部署 OpenStack 的方法，以满足不同的用户场景，请按需选择。\n\n## 基于RPM部署\n\n### 环境准备\n\n本文档基于OpenStack经典的三节点环境进行部署，三个节点分别是控制节点(Controller)、计算节点(Compute)、存储节点(Storage)，其中存储节点一般只部署存储服务，在资源有限的情况下，可以不单独部署该节点，把存储节点上的服务部署到计算节点即可。\n\n首先准备三个|openEuler 24.03 LTS SP1环境，根据您的环境，下载对应的镜像并安装即可：[ISO镜像](https://repo.openeuler.org/openEuler-24.03-LTS-SP1/ISO/)、[qcow2镜像](https://repo.openeuler.org/openEuler-24.03-LTS-SP1/virtual_machine_img/)。\n\n下面的安装按照如下拓扑进行：\n\n```shell\ncontroller：192.168.0.2\ncompute：   192.168.0.3\nstorage：   192.168.0.4\n```\n\n如果您的环境IP不同，请按照您的环境IP修改相应的配置文件。\n\n本文档的三节点服务拓扑如下图所示(只包含Keystone、Glance、Nova、Cinder、Neutron这几个核心服务，其他服务请参考具体部署章节)：\n\n![topology1](../img/install/topology1.PNG)\n![topology2](../img/install/topology2.PNG)\n![topology3](../img/install/topology3.PNG)\n\n在正式部署之前，需要对每个节点做如下配置和检查：\n\n1. 配置 |openEuler 24.03 LTS SP1 官方 yum 源，需要启用 EPOL 软件仓以支持 OpenStack\n\n    ```shell\n    yum update\n    yum install openstack-release-antelope\n    yum clean all && yum makecache\n    ```\n\n    **注意**：如果你的环境的YUM源没有启用EPOL，需要同时配置EPOL，确保EPOL已配置，如下所示。\n\n    ```shell\n    vi /etc/yum.repos.d/openEuler.repo\n\n    [EPOL]\n    name=EPOL\n    baseurl=http://repo.openeuler.org/openEuler-24.03-LTS-SP1/EPOL/main/$basearch/\n    enabled=1\n    gpgcheck=1\n    gpgkey=http://repo.openeuler.org/openEuler-24.03-LTS-SP1/OS/$basearch/RPM-GPG-KEY-openEuler\n    EOF\n    ```\n\n2. 修改主机名以及映射\n\n    每个节点分别修改主机名，以controller为例：\n\n    ```shell\n    hostnamectl set-hostname controller\n\n    vi /etc/hostname\n    内容修改为controller\n    ```\n\n    然后修改每个节点的`/etc/hosts`文件，新增如下内容:\n\n    ```shell\n    192.168.0.2   controller\n    192.168.0.3   compute\n    192.168.0.4   storage\n    ```\n\n#### 时钟同步\n\n集群环境时刻要求每个节点的时间一致，一般由时钟同步软件保证。本文使用`chrony`软件。步骤如下：\n\n**Controller节点**：\n\n1. 安装服务\n\n    ```shell\n    dnf install chrony\n    ```\n\n2. 修改`/etc/chrony.conf`配置文件，新增一行\n\n    ```shell\n    # 表示允许哪些IP从本节点同步时钟\n    allow 192.168.0.0/24\n    ```\n\n3. 重启服务\n\n    ```shell\n    systemctl restart chronyd\n    ```\n\n**其他节点**\n\n1. 安装服务\n\n    ```shell\n    dnf install chrony\n    ```\n\n2. 修改`/etc/chrony.conf`配置文件，新增一行\n\n    ```shell\n    # NTP_SERVER是controller IP，表示从这个机器获取时间，这里我们填192.168.0.2，或者在`/etc/hosts`里配置好的controller名字即可。\n    server NTP_SERVER iburst\n    ```\n\n    同时，要把`pool pool.ntp.org iburst`这一行注释掉，表示不从公网同步时钟。\n\n3. 重启服务\n\n    ```shell\n    systemctl restart chronyd\n    ```\n\n配置完成后，检查一下结果，在其他非controller节点执行`chronyc sources`，返回结果类似如下内容，表示成功从controller同步时钟。\n\n```ini\nMS Name/IP address         Stratum Poll Reach LastRx Last sample\n===============================================================================\n^* 192.168.0.2                 4   6     7     0  -1406ns[  +55us] +/-   16ms\n```\n\n#### 安装数据库\n\n数据库安装在控制节点，这里推荐使用mariadb。\n\n1. 安装软件包\n\n    ```shell\n    dnf install mysql-config mariadb mariadb-server python3-PyMySQL\n    ```\n\n2. 新增配置文件`/etc/my.cnf.d/openstack.cnf`，内容如下\n\n    ```shell\n    [mysqld]\n    bind-address = 192.168.0.2\n    default-storage-engine = innodb\n    innodb_file_per_table = on\n    max_connections = 4096\n    collation-server = utf8_general_ci\n    character-set-server = utf8\n    ```\n\n3. 启动服务器\n\n    ```shell\n    systemctl start mariadb\n    ```\n\n4. 初始化数据库，根据提示进行即可\n\n    ```shell\n    mysql_secure_installation\n    ```\n\n    示例如下：\n\n    ```shell\n    NOTE: RUNNING ALL PARTS OF THIS SCRIPT IS RECOMMENDED FOR ALL MariaDB\n        SERVERS IN PRODUCTION USE!  PLEASE READ EACH STEP CAREFULLY!\n\n    In order to log into MariaDB to secure it, we'll need the current\n    password for the root user. If you've just installed MariaDB, and\n    haven't set the root password yet, you should just press enter here.\n\n    Enter current password for root (enter for none): \n    \n    #这里输入密码，由于我们是初始化DB，直接回车就行\n\n    OK, successfully used password, moving on...\n\n    Setting the root password or using the unix_socket ensures that nobody\n    can log into the MariaDB root user without the proper authorisation.\n\n    You already have your root account protected, so you can safely answer 'n'.\n\n    # 这里根据提示输入N\n\n    Switch to unix_socket authentication [Y/n] N\n\n    Enabled successfully!\n    Reloading privilege tables..\n    ... Success!\n\n\n    You already have your root account protected, so you can safely answer 'n'.\n\n    # 输入Y，修改密码\n\n    Change the root password? [Y/n] Y\n\n    New password: \n    Re-enter new password: \n    Password updated successfully!\n    Reloading privilege tables..\n    ... Success!\n\n\n    By default, a MariaDB installation has an anonymous user, allowing anyone\n    to log into MariaDB without having to have a user account created for\n    them.  This is intended only for testing, and to make the installation\n    go a bit smoother.  You should remove them before moving into a\n    production environment.\n\n    # 输入Y，删除匿名用户\n\n    Remove anonymous users? [Y/n] Y\n    ... Success!\n\n    Normally, root should only be allowed to connect from 'localhost'.  This\n    ensures that someone cannot guess at the root password from the network.\n\n    # 输入Y，关闭root远程登录权限\n\n    Disallow root login remotely? [Y/n] Y\n    ... Success!\n\n    By default, MariaDB comes with a database named 'test' that anyone can\n    access.  This is also intended only for testing, and should be removed\n    before moving into a production environment.\n\n    # 输入Y，删除test数据库\n\n    Remove test database and access to it? [Y/n] Y\n    - Dropping test database...\n    ... Success!\n    - Removing privileges on test database...\n    ... Success!\n\n    Reloading the privilege tables will ensure that all changes made so far\n    will take effect immediately.\n\n    # 输入Y，重载配置\n\n    Reload privilege tables now? [Y/n] Y\n    ... Success!\n\n    Cleaning up...\n\n    All done!  If you've completed all of the above steps, your MariaDB\n    installation should now be secure.\n    ```\n\n5. 验证，根据第四步设置的密码，检查是否能登录mariadb\n\n    ```shell\n    mysql -uroot -p\n    ```\n\n#### 安装消息队列\n\n消息队列安装在控制节点，这里推荐使用rabbitmq。\n\n1. 安装软件包\n\n    ```shell\n    dnf install rabbitmq-server\n    ```\n\n2. 启动服务\n\n    ```shell\n    systemctl start rabbitmq-server\n    ```\n\n3. 配置openstack用户，`RABBIT_PASS`是openstack服务登录消息队里的密码，需要和后面各个服务的配置保持一致。\n\n    ```shell\n    rabbitmqctl add_user openstack RABBIT_PASS\n    rabbitmqctl set_permissions openstack \".*\" \".*\" \".*\"\n    ```\n\n#### 安装缓存服务\n\n消息队列安装在控制节点，这里推荐使用Memcached。\n\n1. 安装软件包\n\n    ```shell\n    dnf install memcached python3-memcached\n    ```\n\n2. 修改配置文件`/etc/sysconfig/memcached`\n\n    ```shell\n    OPTIONS=\"-l 127.0.0.1,::1,controller\"\n    ```\n\n3. 启动服务\n\n    ```shell\n    systemctl start memcached\n    ```\n\n### 部署服务\n\n#### Keystone\n\nKeystone是OpenStack提供的鉴权服务，是整个OpenStack的入口，提供了租户隔离、用户认证、服务发现等功能，必须安装。\n\n1. 创建 keystone 数据库并授权\n\n    ``` sql\n    mysql -u root -p\n\n    MariaDB [(none)]> CREATE DATABASE keystone;\n    MariaDB [(none)]> GRANT ALL PRIVILEGES ON keystone.* TO 'keystone'@'localhost' \\\n    IDENTIFIED BY 'KEYSTONE_DBPASS';\n    MariaDB [(none)]> GRANT ALL PRIVILEGES ON keystone.* TO 'keystone'@'%' \\\n    IDENTIFIED BY 'KEYSTONE_DBPASS';\n    MariaDB [(none)]> exit\n    ```\n\n    ***注意***\n\n    **替换 `KEYSTONE_DBPASS`，为 Keystone 数据库设置密码**\n\n2. 安装软件包\n\n    ```shell\n    dnf install openstack-keystone httpd mod_wsgi\n    ```\n\n3. 配置keystone相关配置\n\n    ```shell\n    vim /etc/keystone/keystone.conf\n\n    [database]\n    connection = mysql+pymysql://keystone:KEYSTONE_DBPASS@controller/keystone\n\n    [token]\n    provider = fernet\n    ```\n\n    ***解释***\n\n    [database]部分，配置数据库入口\n\n    [token]部分，配置token provider\n\n4. 同步数据库\n\n    ```shell\n    su -s /bin/sh -c \"keystone-manage db_sync\" keystone\n    ```\n\n5. 初始化Fernet密钥仓库\n\n    ```shell\n    keystone-manage fernet_setup --keystone-user keystone --keystone-group keystone\n    keystone-manage credential_setup --keystone-user keystone --keystone-group keystone\n    ```\n\n6. 启动服务\n\n    ```shell\n    keystone-manage bootstrap --bootstrap-password ADMIN_PASS \\\n    --bootstrap-admin-url http://controller:5000/v3/ \\\n    --bootstrap-internal-url http://controller:5000/v3/ \\\n    --bootstrap-public-url http://controller:5000/v3/ \\\n    --bootstrap-region-id RegionOne\n    ```\n\n    ***注意***\n\n    **替换 `ADMIN_PASS`，为 admin 用户设置密码**\n\n7. 配置Apache HTTP server\n\n    - 打开httpd.conf并配置\n\n    ```shell\n    #需要修改的配置文件路径\n    vim /etc/httpd/conf/httpd.conf\n    \n    #修改以下项，如果没有则新添加\n    ServerName controller\n    ```\n\n    - 创建软链接\n\n    ```shell\n    ln -s /usr/share/keystone/wsgi-keystone.conf /etc/httpd/conf.d/\n    ```\n\n    ***解释***\n\n    配置 `ServerName` 项引用控制节点\n\n    ***注意***\n    **如果 `ServerName` 项不存在则需要创建**\n\n8. 启动Apache HTTP服务\n\n    ```shell\n    systemctl enable httpd.service\n    systemctl start httpd.service\n    ```\n\n9. 创建环境变量配置\n\n    ```shell\n    cat << EOF >> ~/.admin-openrc\n    export OS_PROJECT_DOMAIN_NAME=Default\n    export OS_USER_DOMAIN_NAME=Default\n    export OS_PROJECT_NAME=admin\n    export OS_USERNAME=admin\n    export OS_PASSWORD=ADMIN_PASS\n    export OS_AUTH_URL=http://controller:5000/v3\n    export OS_IDENTITY_API_VERSION=3\n    export OS_IMAGE_API_VERSION=2\n    EOF\n    ```\n\n    ***注意***\n\n    **替换 `ADMIN_PASS` 为 admin 用户的密码**\n\n10. 依次创建domain, projects, users, roles\n\n    - 需要先安装python3-openstackclient\n\n    ```shell\n    dnf install python3-openstackclient\n    ```\n\n    - 导入环境变量\n\n    ```shell\n    source ~/.admin-openrc\n    ```\n\n    - 创建project `service`，其中 domain `default` 在 keystone-manage bootstrap 时已创建\n\n    ```shell\n    openstack domain create --description \"An Example Domain\" example\n    ```\n\n    ```shell\n    openstack project create --domain default --description \"Service Project\" service\n    ```\n\n    - 创建（non-admin）project `myproject`，user `myuser` 和 role `myrole`，为 `myproject` 和 `myuser` 添加角色`myrole`\n\n    ```shell\n    openstack project create --domain default --description \"Demo Project\" myproject\n    openstack user create --domain default --password-prompt myuser\n    openstack role create myrole\n    openstack role add --project myproject --user myuser myrole\n    ```\n\n11. 验证\n\n    - 取消临时环境变量OS_AUTH_URL和OS_PASSWORD：\n\n    ```shell\n    source ~/.admin-openrc\n    unset OS_AUTH_URL OS_PASSWORD\n    ```\n\n    - 为admin用户请求token：\n\n    ```shell\n    openstack --os-auth-url http://controller:5000/v3 \\\n    --os-project-domain-name Default --os-user-domain-name Default \\\n    --os-project-name admin --os-username admin token issue\n    ```\n\n    - 为myuser用户请求token：\n\n    ```shell\n    openstack --os-auth-url http://controller:5000/v3 \\\n    --os-project-domain-name Default --os-user-domain-name Default \\\n    --os-project-name myproject --os-username myuser token issue\n    ```\n\n#### Glance\n\nGlance是OpenStack提供的镜像服务，负责虚拟机、裸机镜像的上传与下载，必须安装。\n\n**Controller节点**：\n\n1. 创建 glance 数据库并授权\n\n    ```sql\n    mysql -u root -p\n\n    MariaDB [(none)]> CREATE DATABASE glance;\n    MariaDB [(none)]> GRANT ALL PRIVILEGES ON glance.* TO 'glance'@'localhost' \\\n    IDENTIFIED BY 'GLANCE_DBPASS';\n    MariaDB [(none)]> GRANT ALL PRIVILEGES ON glance.* TO 'glance'@'%' \\\n    IDENTIFIED BY 'GLANCE_DBPASS';\n    MariaDB [(none)]> exit\n    ```\n\n    ***注意:***\n\n    **替换 `GLANCE_DBPASS`，为 glance 数据库设置密码**\n\n2. 初始化 glance 资源对象\n\n    - 导入环境变量\n\n    ```shell\n    source ~/.admin-openrc\n    ```\n\n    - 创建用户时，命令行会提示输入密码，请输入自定义的密码，下文涉及到`GLANCE_PASS`的地方替换成该密码即可。\n\n    ```shell\n    openstack user create --domain default --password-prompt glance\n    User Password:\n    Repeat User Password:\n    ```\n\n    - 添加glance用户到service project并指定admin角色：\n\n    ```shell\n    openstack role add --project service --user glance admin\n    ```\n\n    - 创建glance服务实体：\n\n    ```shell\n    openstack service create --name glance --description \"OpenStack Image\" image\n    ```\n\n    - 创建glance API服务：\n\n    ```shell\n    openstack endpoint create --region RegionOne image public http://controller:9292\n    openstack endpoint create --region RegionOne image internal http://controller:9292\n    openstack endpoint create --region RegionOne image admin http://controller:9292\n    ```\n\n3. 安装软件包\n\n    ```shell\n    dnf install openstack-glance\n    ```\n\n4. 修改 glance 配置文件\n\n    ```shell\n    vim /etc/glance/glance-api.conf\n\n    [database]\n    connection = mysql+pymysql://glance:GLANCE_DBPASS@controller/glance\n\n    [keystone_authtoken]\n    www_authenticate_uri  = http://controller:5000\n    auth_url = http://controller:5000\n    memcached_servers = controller:11211\n    auth_type = password\n    project_domain_name = Default\n    user_domain_name = Default\n    project_name = service\n    username = glance\n    password = GLANCE_PASS\n\n    [paste_deploy]\n    flavor = keystone\n\n    [glance_store]\n    stores = file,http\n    default_store = file\n    filesystem_store_datadir = /var/lib/glance/images/\n    ```\n\n    ***解释:***\n\n    [database]部分，配置数据库入口\n\n    [keystone_authtoken] [paste_deploy]部分，配置身份认证服务入口\n\n    [glance_store]部分，配置本地文件系统存储和镜像文件的位置\n\n5. 同步数据库\n\n    ```shell\n    su -s /bin/sh -c \"glance-manage db_sync\" glance\n    ```\n\n6. 启动服务：\n\n    ```shell\n    systemctl enable openstack-glance-api.service\n    systemctl start openstack-glance-api.service\n    ```\n\n7. 验证\n\n    - 导入环境变量\n\n    ```shell\n    source ~/.admin-openrcu\n    ```\n\n    - 下载镜像\n\n    ```shell\n    x86镜像下载：\n    wget http://download.cirros-cloud.net/0.4.0/cirros-0.4.0-x86_64-disk.img\n\n    arm镜像下载：\n    wget http://download.cirros-cloud.net/0.4.0/cirros-0.4.0-aarch64-disk.img\n    ```\n\n    ***注意***\n\n    **如果您使用的环境是鲲鹏架构，请下载aarch64版本的镜像；已对镜像cirros-0.5.2-aarch64-disk.img进行测试。**\n\n    - 向Image服务上传镜像：\n\n    ```shell\n    openstack image create --disk-format qcow2 --container-format bare \\\n                        --file cirros-0.4.0-x86_64-disk.img --public cirros\n    ```\n\n    - 确认镜像上传并验证属性：\n\n    ```shell\n    openstack image list\n    ```\n\n#### Placement\n\nPlacement是OpenStack提供的资源调度组件，一般不面向用户，由Nova等组件调用，安装在控制节点。\n\n安装、配置Placement服务前，需要先创建相应的数据库、服务凭证和API endpoints。\n\n1. 创建数据库\n\n    - 使用root用户访问数据库服务：\n\n    ```shell\n    mysql -u root -p\n    ```\n\n    - 创建placement数据库：\n\n    ```sql\n    MariaDB [(none)]> CREATE DATABASE placement;\n    ```\n\n    - 授权数据库访问：\n\n    ```sql\n    MariaDB [(none)]> GRANT ALL PRIVILEGES ON placement.* TO 'placement'@'localhost' \\\n        IDENTIFIED BY 'PLACEMENT_DBPASS';\n    MariaDB [(none)]> GRANT ALL PRIVILEGES ON placement.* TO 'placement'@'%' \\\n        IDENTIFIED BY 'PLACEMENT_DBPASS';\n    ```\n\n    替换`PLACEMENT_DBPASS`为placement数据库访问密码。\n\n    - 退出数据库访问客户端：\n\n    ```shell\n    exit\n    ```\n\n2. 配置用户和Endpoints\n\n    - source admin凭证，以获取admin命令行权限：\n\n    ```shell\n    source ~/.admin-openrc\n    ```\n\n    - 创建placement用户并设置用户密码：\n\n    ```shell\n    openstack user create --domain default --password-prompt placement\n    \n    User Password:\n    Repeat User Password:\n    ```\n\n    - 添加placement用户到service project并指定admin角色：\n\n    ```shell\n    openstack role add --project service --user placement admin\n    ```\n\n    - 创建placement服务实体：\n\n    ```shell\n    openstack service create --name placement \\\n        --description \"Placement API\" placement\n    ```\n\n    - 创建Placement API服务endpoints：\n\n    ```shell\n    openstack endpoint create --region RegionOne \\\n        placement public http://controller:8778\n    openstack endpoint create --region RegionOne \\\n        placement internal http://controller:8778\n    openstack endpoint create --region RegionOne \\\n        placement admin http://controller:8778\n    ```\n\n3. 安装及配置组件\n\n    - 安装软件包：\n\n    ```shell\n    dnf install openstack-placement-api\n    ```\n\n    - 编辑`/etc/placement/placement.conf`配置文件，完成如下操作：\n\n        - 在`[placement_database]`部分，配置数据库入口：\n\n        ```ini\n        [placement_database]\n        connection = mysql+pymysql://placement:PLACEMENT_DBPASS@controller/placement\n        ```\n\n        替换`PLACEMENT_DBPASS`为placement数据库的密码。\n\n        - 在`[api]`和`[keystone_authtoken]`部分，配置身份认证服务入口：\n\n        ```ini\n        [api]\n        auth_strategy = keystone\n        \n        [keystone_authtoken]\n        auth_url = http://controller:5000/v3\n        memcached_servers = controller:11211\n        auth_type = password\n        project_domain_name = Default\n        user_domain_name = Default\n        project_name = service\n        username = placement\n        password = PLACEMENT_PASS\n        ```\n\n        替换`PLACEMENT_PASS`为placement用户的密码。\n\n    - 数据库同步，填充Placement数据库：\n\n    ```shell\n    su -s /bin/sh -c \"placement-manage db sync\" placement\n    ```\n\n4. 启动服务\n\n    重启httpd服务：\n\n    ```shell\n    systemctl restart httpd\n    ```\n\n5. 验证\n\n    - source admin凭证，以获取admin命令行权限\n\n    ```shell\n    source ~/.admin-openrc\n    ```\n\n    - 执行状态检查：\n\n    ```shell\n    placement-status upgrade check\n    ```\n\n    ```ini\n    +----------------------------------------------------------------------+\n    | Upgrade Check Results                                                |\n    +----------------------------------------------------------------------+\n    | Check: Missing Root Provider IDs                                     |\n    | Result: Success                                                      |\n    | Details: None                                                        |\n    +----------------------------------------------------------------------+\n    | Check: Incomplete Consumers                                          |\n    | Result: Success                                                      |\n    | Details: None                                                        |\n    +----------------------------------------------------------------------+\n    | Check: Policy File JSON to YAML Migration                            |\n    | Result: Failure                                                      |\n    | Details: Your policy file is JSON-formatted which is deprecated. You |\n    |   need to switch to YAML-formatted file. Use the                     |\n    |   ``oslopolicy-convert-json-to-yaml`` tool to convert the            |\n    |   existing JSON-formatted files to YAML in a backwards-              |\n    |   compatible manner: https://docs.openstack.org/oslo.policy/         |\n    |   latest/cli/oslopolicy-convert-json-to-yaml.html.                   |\n    +----------------------------------------------------------------------+\n    ```\n\n    这里可以看到``Policy File JSON to YAML Migration``的结果为Failure。这是因为在Placement中，JSON格式的policy文件从Wallaby版本开始已处于`deprecated`状态。可以参考提示，使用[oslopolicy-convert-json-to-yaml](https://docs.openstack.org/oslo.policy/latest/cli/oslopolicy-convert-json-to-yaml.html)工具  将现有的JSON格式policy文件转化为YAML格式。\n\n    ```shell\n    oslopolicy-convert-json-to-yaml  --namespace placement \\\n        --policy-file /etc/placement/policy.json \\\n        --output-file /etc/placement/policy.yaml\n    mv /etc/placement/policy.json{,.bak}\n    ```\n\n    注：当前环境中此问题可忽略，不影响运行。\n    \n    - 针对placement API运行命令：\n    \n        - 安装osc-placement插件：\n\n        ```shell\n        dnf install python3-osc-placement\n        ```\n\n        - 列出可用的资源类别及特性：\n\n        ```shell\n        openstack --os-placement-api-version 1.2 resource class list --sort-column name\n        +----------------------------+\n        | name                       |\n        +----------------------------+\n        | DISK_GB                    |\n        | FPGA                       |\n        | ...                        |\n        \n        openstack --os-placement-api-version 1.6 trait list --sort-column name\n        +---------------------------------------+\n        | name                                  |\n        +---------------------------------------+\n        | COMPUTE_ACCELERATORS                  |\n        | COMPUTE_ARCH_AARCH64                  |\n        | ...                                   |\n        ```\n\n#### Nova\n\nNova是OpenStack的计算服务，负责虚拟机的创建、发放等功能。\n\n**Controller节点**\n\n在控制节点执行以下操作。\n\n1. 创建数据库\n\n    - 使用root用户访问数据库服务：\n\n    ```shell\n    mysql -u root -p\n    ```\n\n    - 创建`nova_api`、`nova`和`nova_cell0`数据库：\n\n    ```sql\n    MariaDB [(none)]> CREATE DATABASE nova_api;\n    MariaDB [(none)]> CREATE DATABASE nova;\n    MariaDB [(none)]> CREATE DATABASE nova_cell0;\n    ```\n\n    - 授权数据库访问：\n\n    ```sql\n    MariaDB [(none)]> GRANT ALL PRIVILEGES ON nova_api.* TO 'nova'@'localhost' \\\n        IDENTIFIED BY 'NOVA_DBPASS';\n    MariaDB [(none)]> GRANT ALL PRIVILEGES ON nova_api.* TO 'nova'@'%' \\\n        IDENTIFIED BY 'NOVA_DBPASS';\n    \n    MariaDB [(none)]> GRANT ALL PRIVILEGES ON nova.* TO 'nova'@'localhost' \\\n        IDENTIFIED BY 'NOVA_DBPASS';\n    MariaDB [(none)]> GRANT ALL PRIVILEGES ON nova.* TO 'nova'@'%' \\\n        IDENTIFIED BY 'NOVA_DBPASS';\n    \n    MariaDB [(none)]> GRANT ALL PRIVILEGES ON nova_cell0.* TO 'nova'@'localhost' \\\n        IDENTIFIED BY 'NOVA_DBPASS';\n    MariaDB [(none)]> GRANT ALL PRIVILEGES ON nova_cell0.* TO 'nova'@'%' \\\n        IDENTIFIED BY 'NOVA_DBPASS';\n    ```\n\n    替换`NOVA_DBPASS`为nova相关数据库访问密码。\n\n    - 退出数据库访问客户端：\n\n    ```sql\n    exit\n    ```\n\n2. 配置用户和Endpoints\n\n    - source admin凭证，以获取admin命令行权限：\n\n    ```shell\n    source ~/.admin-openrc\n    ```\n\n    - 创建nova用户并设置用户密码：\n\n    ```shell\n    openstack user create --domain default --password-prompt nova\n    \n    User Password:\n    Repeat User Password:\n    ```\n\n    - 添加nova用户到service project并指定admin角色：\n\n    ```shell\n    openstack role add --project service --user nova admin\n    ```\n\n    - 创建nova服务实体：\n\n    ```shell\n    openstack service create --name nova \\\n        --description \"OpenStack Compute\" compute\n    ```\n\n    - 创建Nova API服务endpoints：\n\n    ```shell\n    openstack endpoint create --region RegionOne \\\n        compute public http://controller:8774/v2.1\n    openstack endpoint create --region RegionOne \\\n        compute internal http://controller:8774/v2.1\n    openstack endpoint create --region RegionOne \\\n        compute admin http://controller:8774/v2.1\n    ```\n\n3. 安装及配置组件\n\n    - 安装软件包：\n\n    ```shell\n    dnf install openstack-nova-api openstack-nova-conductor \\\n        openstack-nova-novncproxy openstack-nova-scheduler\n    ```\n\n    - 编辑`/etc/nova/nova.conf`配置文件，完成如下操作：\n\n        - 在`[default]`部分，启用计算和元数据的API，配置RabbitMQ消息队列入口，使用controller节点管理IP配置my_ip，显式定义log_dir：\n\n        ```ini\n        [DEFAULT]\n        enabled_apis = osapi_compute,metadata\n        transport_url = rabbit://openstack:RABBIT_PASS@controller:5672/\n        my_ip = 192.168.0.2\n        log_dir = /var/log/nova\n        state_path = /var/lib/nova\n        ```\n\n        替换`RABBIT_PASS`为RabbitMQ中openstack账户的密码。\n        \n        - 在`[api_database]`和`[database]`部分，配置数据库入口：\n\n        ```ini\n        [api_database]\n        connection = mysql+pymysql://nova:NOVA_DBPASS@controller/nova_api\n        \n        [database]\n        connection = mysql+pymysql://nova:NOVA_DBPASS@controller/nova\n        ```\n\n        替换`NOVA_DBPASS`为nova相关数据库的密码。\n        \n        - 在`[api]`和`[keystone_authtoken]`部分，配置身份认证服务入口：\n\n        ```ini\n        [api]\n        auth_strategy = keystone\n        \n        [keystone_authtoken]\n        auth_url = http://controller:5000/v3\n        memcached_servers = controller:11211\n        auth_type = password\n        project_domain_name = Default\n        user_domain_name = Default\n        project_name = service\n        username = nova\n        password = NOVA_PASS\n        ```\n\n        替换`NOVA_PASS`为nova用户的密码。\n     \n        - 在`[vnc]`部分，启用并配置远程控制台入口：\n\n        ```ini\n        [vnc]\n        enabled = true\n        server_listen = $my_ip\n        server_proxyclient_address = $my_ip\n        ```\n\n        - 在`[glance]`部分，配置镜像服务API的地址：\n\n        ```ini\n        [glance]\n        api_servers = http://controller:9292\n        ```\n\n        - 在`[oslo_concurrency]`部分，配置lock path：\n\n        ```ini\n        [oslo_concurrency]\n        lock_path = /var/lib/nova/tmp\n        ```\n\n        - [placement]部分，配置placement服务的入口：\n\n        ```ini\n        [placement]\n        region_name = RegionOne\n        project_domain_name = Default\n        project_name = service\n        auth_type = password\n        user_domain_name = Default\n        auth_url = http://controller:5000/v3\n        username = placement\n        password = PLACEMENT_PASS\n        ```\n\n        替换`PLACEMENT_PASS`为placement用户的密码。\n\n    - 数据库同步：\n\n        - 同步nova-api数据库：\n\n        ```shell\n        su -s /bin/sh -c \"nova-manage api_db sync\" nova\n        ```\n\n        - 注册cell0数据库：\n\n        ```shell\n        su -s /bin/sh -c \"nova-manage cell_v2 map_cell0\" nova\n        ```\n\n        - 创建cell1 cell：\n\n        ```shell\n        su -s /bin/sh -c \"nova-manage cell_v2 create_cell --name=cell1 --verbose\" nova\n        ```\n\n        - 同步nova数据库：\n\n        ```shell\n        su -s /bin/sh -c \"nova-manage db sync\" nova\n        ```\n\n        - 验证cell0和cell1注册正确：\n\n        ```shell\n        su -s /bin/sh -c \"nova-manage cell_v2 list_cells\" nova\n        ```\n\n4. 启动服务\n\n    ```shell\n    systemctl enable \\\n      openstack-nova-api.service \\\n      openstack-nova-scheduler.service \\\n      openstack-nova-conductor.service \\\n      openstack-nova-novncproxy.service\n\n    systemctl start \\\n      openstack-nova-api.service \\\n      openstack-nova-scheduler.service \\\n      openstack-nova-conductor.service \\\n      openstack-nova-novncproxy.service\n    ```\n\n**Compute节点**\n\n在计算节点执行以下操作。\n\n1. 安装软件包\n\n    ```shell\n    dnf install openstack-nova-compute\n    ```\n\n2. 编辑`/etc/nova/nova.conf`配置文件\n\n    - 在`[default]`部分，启用计算和元数据的API，配置RabbitMQ消息队列入口，使用Compute节点管理IP配置my_ip，显式定义compute_driver、instances_path、log_dir：\n\n    ```ini\n    [DEFAULT]\n    enabled_apis = osapi_compute,metadata\n    transport_url = rabbit://openstack:RABBIT_PASS@controller:5672/\n    my_ip = 192.168.0.3\n    compute_driver = libvirt.LibvirtDriver\n    instances_path = /var/lib/nova/instances\n    log_dir = /var/log/nova\n    ```\n\n    替换`RABBIT_PASS`为RabbitMQ中openstack账户的密码。\n\n    - 在`[api]`和`[keystone_authtoken]`部分，配置身份认证服务入口：\n\n    ```ini\n    [api]\n    auth_strategy = keystone\n\n    [keystone_authtoken]\n    auth_url = http://controller:5000/v3\n    memcached_servers = controller:11211\n    auth_type = password\n    project_domain_name = Default\n    user_domain_name = Default\n    project_name = service\n    username = nova\n    password = NOVA_PASS\n    ```\n\n    替换`NOVA_PASS`为nova用户的密码。\n\n    - 在`[vnc]`部分，启用并配置远程控制台入口：\n\n    ```ini\n    [vnc]\n    enabled = true\n    server_listen = $my_ip\n    server_proxyclient_address = $my_ip\n    novncproxy_base_url = http://controller:6080/vnc_auto.html\n    ```\n\n    - 在`[glance]`部分，配置镜像服务API的地址：\n\n    ```ini\n    [glance]\n    api_servers = http://controller:9292\n    ```\n\n    - 在`[oslo_concurrency]`部分，配置lock path：\n\n    ```ini\n    [oslo_concurrency]\n    lock_path = /var/lib/nova/tmp\n    ```\n\n    - [placement]部分，配置placement服务的入口：\n\n    ```ini\n    [placement]\n    region_name = RegionOne\n    project_domain_name = Default\n    project_name = service\n    auth_type = password\n    user_domain_name = Default\n    auth_url = http://controller:5000/v3\n    username = placement\n    password = PLACEMENT_PASS\n    ```\n\n    替换`PLACEMENT_PASS`为placement用户的密码。\n\n3. 确认计算节点是否支持虚拟机硬件加速（x86_64）\n\n    处理器为x86_64架构时，可通过运行如下命令确认是否支持硬件加速：\n\n    ```shell\n    egrep -c '(vmx|svm)' /proc/cpuinfo\n    ```\n\n    如果返回值为0则不支持硬件加速，需要配置libvirt使用QEMU而不是默认的KVM。编辑`/etc/nova/nova.conf`的`[libvirt]`部分：\n\n    ```ini\n    [libvirt]\n    virt_type = qemu\n    ```\n\n    如果返回值为1或更大的值，则支持硬件加速，不需要进行额外的配置。\n\n4. 确认计算节点是否支持虚拟机硬件加速（arm64）\n\n    处理器为arm64架构时，可通过运行如下命令确认是否支持硬件加速：\n\n    ```shell\n    virt-host-validate\n    # 该命令由libvirt提供，此时libvirt应已作为openstack-nova-compute依赖被安装，环境中已有此命令\n    ```\n\n    显示FAIL时，表示不支持硬件加速，需要配置libvirt使用QEMU而不是默认的KVM。\n\n    ```shell\n    QEMU: Checking if device /dev/kvm exists: FAIL (Check that CPU and firmware supports virtualization and kvm module is loaded)\n    ```\n\n    编辑`/etc/nova/nova.conf`的`[libvirt]`部分：\n\n    ```ini\n    [libvirt]\n    virt_type = qemu\n    ```\n\n    显示PASS时，表示支持硬件加速，不需要进行额外的配置。\n\n    ```shell\n    QEMU: Checking if device /dev/kvm exists: PASS\n    ```\n\n5. 配置qemu（仅arm64）\n\n    仅当处理器为arm64架构时需要执行此操作。\n\n    - 编辑`/etc/libvirt/qemu.conf`:\n\n    ```ini\n    nvram = [\"/usr/share/AAVMF/AAVMF_CODE.fd: \\\n                /usr/share/AAVMF/AAVMF_VARS.fd\", \\\n                \"/usr/share/edk2/aarch64/QEMU_EFI-pflash.raw: \\\n                /usr/share/edk2/aarch64/vars-template-pflash.raw\"]\n    ```\n\n    - 编辑`/etc/qemu/firmware/edk2-aarch64.json`\n\n    ```json\n    {\n        \"description\": \"UEFI firmware for ARM64 virtual machines\",\n        \"interface-types\": [\n            \"uefi\"\n        ],\n        \"mapping\": {\n            \"device\": \"flash\",\n            \"executable\": {\n                \"filename\": \"/usr/share/edk2/aarch64/QEMU_EFI-pflash.raw\",\n                \"format\": \"raw\"\n            },\n            \"nvram-template\": {\n                \"filename\": \"/usr/share/edk2/aarch64/vars-template-pflash.raw\",\n                \"format\": \"raw\"\n            }\n        },\n        \"targets\": [\n            {\n                \"architecture\": \"aarch64\",\n                \"machines\": [\n                    \"virt-*\"\n                ]\n            }\n        ],\n        \"features\": [\n    \n        ],\n        \"tags\": [\n    \n        ]\n    }\n    ```\n\n6. 启动服务\n\n    ```shell\n    systemctl enable libvirtd.service openstack-nova-compute.service\n    systemctl start libvirtd.service openstack-nova-compute.service\n    ```\n\n**Controller节点**\n\n在控制节点执行以下操作。\n\n1. 添加计算节点到openstack集群\n\n    - source admin凭证，以获取admin命令行权限：\n\n    ```shell\n    source ~/.admin-openrc\n    ```\n\n    - 确认nova-compute服务已识别到数据库中：\n\n    ```shell\n    openstack compute service list --service nova-compute\n    ```\n\n    - 发现计算节点，将计算节点添加到cell数据库：\n\n    ```shell\n    su -s /bin/sh -c \"nova-manage cell_v2 discover_hosts --verbose\" nova\n    ```\n\n    结果如下：\n\n    ```ini\n    Modules with known eventlet monkey patching issues were imported prior to eventlet monkey patching: urllib3. This warning can usually be    ignored if the caller is only importing and not executing nova code.\n    Found 2 cell mappings.\n    Skipping cell0 since it does not contain hosts.\n    Getting computes from cell 'cell1': 6dae034e-b2d9-4a6c-b6f0-60ada6a6ddc2\n    Checking host mapping for compute host 'compute': 6286a86f-09d7-4786-9137-1185654c9e2e\n    Creating host mapping for compute host 'compute': 6286a86f-09d7-4786-9137-1185654c9e2e\n    Found 1 unmapped computes in cell: 6dae034e-b2d9-4a6c-b6f0-60ada6a6ddc2\n    ```\n\n2. 验证\n\n    - 列出服务组件，验证每个流程都成功启动和注册：\n\n    ```shell\n    openstack compute service list\n    ```\n\n    - 列出身份服务中的API端点，验证与身份服务的连接：\n\n    ```shell\n    openstack catalog list\n    ```\n\n    - 列出镜像服务中的镜像，验证与镜像服务的连接：\n\n    ```shell\n    openstack image list\n    ```\n\n    - 检查cells是否运作成功，以及其他必要条件是否已具备。\n\n    ```shell\n    nova-status upgrade check\n    ```\n\n#### Neutron\n\nNeutron是OpenStack的网络服务，提供虚拟交换机、IP路由、DHCP等功能。\n\n**Controller节点**\n\n1. 创建数据库、服务凭证和 API 服务端点\n\n    - 创建数据库：\n\n    ```sql\n    mysql -u root -p\n\n    MariaDB [(none)]> CREATE DATABASE neutron;\n    MariaDB [(none)]> GRANT ALL PRIVILEGES ON neutron.* TO 'neutron'@'localhost' IDENTIFIED BY 'NEUTRON_DBPASS';\n    MariaDB [(none)]> GRANT ALL PRIVILEGES ON neutron.* TO 'neutron'@'%' IDENTIFIED BY 'NEUTRON_DBPASS';\n    MariaDB [(none)]> exit;\n    ```\n\n    - 创建用户和服务，并记住创建neutron用户时输入的密码，用于配置NEUTRON_PASS：\n\n    ```shell\n    source ~/.admin-openrc\n    openstack user create --domain default --password-prompt neutron\n    openstack role add --project service --user neutron admin\n    openstack service create --name neutron --description \"OpenStack Networking\" network\n    ```\n\n    - 部署 Neutron API 服务：\n\n    ```shell\n    openstack endpoint create --region RegionOne network public http://controller:9696\n    openstack endpoint create --region RegionOne network internal http://controller:9696\n    openstack endpoint create --region RegionOne network admin http://controller:9696\n    ```\n\n2. 安装软件包\n\n    ```shell\n    dnf install -y openstack-neutron openstack-neutron-linuxbridge ebtables ipset openstack-neutron-ml2\n    ```\n\n3. 配置Neutron\n    \n    - 修改/etc/neutron/neutron.conf\n\n    ```ini\n    [database]\n    connection = mysql+pymysql://neutron:NEUTRON_DBPASS@controller/neutron\n\n    [DEFAULT]\n    core_plugin = ml2\n    service_plugins = router\n    allow_overlapping_ips = true\n    transport_url = rabbit://openstack:RABBIT_PASS@controller\n    auth_strategy = keystone\n    notify_nova_on_port_status_changes = true\n    notify_nova_on_port_data_changes = true\n\n    [keystone_authtoken]\n    www_authenticate_uri = http://controller:5000\n    auth_url = http://controller:5000\n    memcached_servers = controller:11211\n    auth_type = password\n    project_domain_name = Default\n    user_domain_name = Default\n    project_name = service\n    username = neutron\n    password = NEUTRON_PASS\n\n    [nova]\n    auth_url = http://controller:5000\n    auth_type = password\n    project_domain_name = Default\n    user_domain_name = Default\n    region_name = RegionOne\n    project_name = service\n    username = nova\n    password = NOVA_PASS\n\n    [oslo_concurrency]\n    lock_path = /var/lib/neutron/tmp\n\n    [experimental]\n    linuxbridge = true\n    ```\n\n    - 配置ML2，ML2具体配置可以根据用户需求自行修改，本文使用的是provider network + linuxbridge**\n    \n    - 修改/etc/neutron/plugins/ml2/ml2_conf.ini\n\n    ```shell\n    [ml2]\n    type_drivers = flat,vlan,vxlan\n    tenant_network_types = vxlan\n    mechanism_drivers = linuxbridge,l2population\n    extension_drivers = port_security\n\n    [ml2_type_flat]\n    flat_networks = provider\n\n    [ml2_type_vxlan]\n    vni_ranges = 1:1000\n\n    [securitygroup]\n    enable_ipset = true\n    ```\n\n    - 修改/etc/neutron/plugins/ml2/linuxbridge_agent.ini\n\n    ```ini\n    [linux_bridge]\n    physical_interface_mappings = provider:PROVIDER_INTERFACE_NAME\n\n    [vxlan]\n    enable_vxlan = true\n    local_ip = OVERLAY_INTERFACE_IP_ADDRESS\n    l2_population = true\n\n    [securitygroup]\n    enable_security_group = true\n    firewall_driver = neutron.agent.linux.iptables_firewall.IptablesFirewallDriver\n    ```\n\n    - 配置Layer-3代理\n\n    - 修改/etc/neutron/l3_agent.ini\n\n    ```shell\n    [DEFAULT]\n    interface_driver = linuxbridge\n    ```\n\n    配置DHCP代理\n    修改/etc/neutron/dhcp_agent.ini\n\n    ```ini\n    [DEFAULT]\n    interface_driver = linuxbridge\n    dhcp_driver = neutron.agent.linux.dhcp.Dnsmasq\n    enable_isolated_metadata = true\n    ```\n\n    - 配置metadata代理\n\n    - 修改/etc/neutron/metadata_agent.ini\n\n    ```shell\n    [DEFAULT]\n    nova_metadata_host = controller\n    metadata_proxy_shared_secret = METADATA_SECRET\n    ```\n\n4. 配置nova服务使用neutron，修改/etc/nova/nova.conf\n\n    ```ini\n    [neutron]\n    auth_url = http://controller:5000\n    auth_type = password\n    project_domain_name = default\n    user_domain_name = default\n    region_name = RegionOne\n    project_name = service\n    username = neutron\n    password = NEUTRON_PASS\n    service_metadata_proxy = true\n    metadata_proxy_shared_secret = METADATA_SECRET\n    ```\n\n5. 创建/etc/neutron/plugin.ini的符号链接\n\n    ```shell\n    ln -s /etc/neutron/plugins/ml2/ml2_conf.ini /etc/neutron/plugin.ini\n    ```\n\n6. 同步数据库\n\n    ```shell\n    su -s /bin/sh -c \"neutron-db-manage --config-file /etc/neutron/neutron.conf --config-file /etc/neutron/plugins/ml2/ml2_conf.ini upgrade head\" neutron\n    ```\n\n7. 重启nova api服务\n\n    ```shell\n    systemctl restart openstack-nova-api\n    ```\n\n8. 启动网络服务\n\n    ```shell\n    systemctl enable neutron-server.service neutron-linuxbridge-agent.service \\\n    neutron-dhcp-agent.service neutron-metadata-agent.service neutron-l3-agent.service\n    systemctl start neutron-server.service neutron-linuxbridge-agent.service \\\n    neutron-dhcp-agent.service neutron-metadata-agent.service neutron-l3-agent.service\n    ```\n\n**Compute节点**\n\n1. 安装软件包\n\n    ```shell\n    dnf install openstack-neutron-linuxbridge ebtables ipset -y\n    ```\n\n2. 配置Neutron\n\n    - 修改/etc/neutron/neutron.conf\n\n    ```ini\n    [DEFAULT]\n    transport_url = rabbit://openstack:RABBIT_PASS@controller\n    auth_strategy = keystone\n\n    [keystone_authtoken]\n    www_authenticate_uri = http://controller:5000\n    auth_url = http://controller:5000\n    memcached_servers = controller:11211\n    auth_type = password\n    project_domain_name = Default\n    user_domain_name = Default\n    project_name = service\n    username = neutron\n    password = NEUTRON_PASS\n\n    [oslo_concurrency]\n    lock_path = /var/lib/neutron/tmp\n    ```\n\n    - 修改/etc/neutron/plugins/ml2/linuxbridge_agent.ini\n\n    ```ini\n    [linux_bridge]\n    physical_interface_mappings = provider:PROVIDER_INTERFACE_NAME\n\n    [vxlan]\n    enable_vxlan = true\n    local_ip = OVERLAY_INTERFACE_IP_ADDRESS\n    l2_population = true\n\n    [securitygroup]\n    enable_security_group = true\n    firewall_driver = neutron.agent.linux.iptables_firewall.IptablesFirewallDriver\n    ```\n\n    - 配置nova compute服务使用neutron，修改/etc/nova/nova.conf\n\n    ```ini\n    [neutron]\n    auth_url = http://controller:5000\n    auth_type = password\n    project_domain_name = default\n    user_domain_name = default\n    region_name = RegionOne\n    project_name = service\n    username = neutron\n    password = NEUTRON_PASS\n    ```\n\n3. 重启nova-compute服务\n\n    ```shell\n    systemctl restart openstack-nova-compute.service\n    ```\n\n4. 启动Neutron linuxbridge agent服务\n\n    ```shell\n    systemctl enable neutron-linuxbridge-agent\n    systemctl start neutron-linuxbridge-agent\n    ```\n\n#### Cinder\n\nCinder是OpenStack的存储服务，提供块设备的创建、发放、备份等功能。\n\n**Controller节点**：\n\n1. 初始化数据库\n\n    `CINDER_DBPASS`是用户自定义的cinder数据库密码。\n\n    ```sql\n    mysql -u root -p\n\n    MariaDB [(none)]> CREATE DATABASE cinder;\n    MariaDB [(none)]> GRANT ALL PRIVILEGES ON cinder.* TO 'cinder'@'localhost' IDENTIFIED BY 'CINDER_DBPASS';\n    MariaDB [(none)]> GRANT ALL PRIVILEGES ON cinder.* TO 'cinder'@'%' IDENTIFIED BY 'CINDER_DBPASS';\n    MariaDB [(none)]> exit\n    ```\n\n2. 初始化Keystone资源对象\n\n    ```shell\n    source ~/.admin-openrc\n\n    #创建用户时，命令行会提示输入密码，请输入自定义的密码，下文涉及到`CINDER_PASS`的地方替换成该密码即可。\n    openstack user create --domain default --password-prompt cinder\n\n    openstack role add --project service --user cinder admin\n    openstack service create --name cinderv3 --description \"OpenStack Block Storage\" volumev3\n\n    openstack endpoint create --region RegionOne volumev3 public http://controller:8776/v3/%\\(project_id\\)s\n    openstack endpoint create --region RegionOne volumev3 internal http://controller:8776/v3/%\\(project_id\\)s\n    openstack endpoint create --region RegionOne volumev3 admin http://controller:8776/v3/%\\(project_id\\)s\n    ```\n\n3. 安装软件包\n\n    ```shell\n    dnf install openstack-cinder-api openstack-cinder-scheduler\n    ```\n\n4. 修改cinder配置文件`/etc/cinder/cinder.conf`\n\n    ```ini\n    [DEFAULT]\n    transport_url = rabbit://openstack:RABBIT_PASS@controller\n    auth_strategy = keystone\n    my_ip = 192.168.0.2\n\n    [database]\n    connection = mysql+pymysql://cinder:CINDER_DBPASS@controller/cinder\n\n    [keystone_authtoken]\n    www_authenticate_uri = http://controller:5000\n    auth_url = http://controller:5000\n    memcached_servers = controller:11211\n    auth_type = password\n    project_domain_name = Default\n    user_domain_name = Default\n    project_name = service\n    username = cinder\n    password = CINDER_PASS\n\n    [oslo_concurrency]\n    lock_path = /var/lib/cinder/tmp\n    ```\n\n5. 数据库同步\n\n    ```shell\n    su -s /bin/sh -c \"cinder-manage db sync\" cinder\n    ```\n\n6. 修改nova配置`/etc/nova/nova.conf`\n\n    ```ini\n    [cinder]\n    os_region_name = RegionOne\n    ```\n\n7. 启动服务\n\n    ```shell\n    systemctl restart openstack-nova-api\n    systemctl start openstack-cinder-api openstack-cinder-scheduler\n    ```\n\n**Storage节点**：\n\nStorage节点要提前准备至少一块硬盘，作为cinder的存储后端，下文默认storage节点已经存在一块未使用的硬盘，设备名称为`/dev/sdb`，用户在配置过程中，请按照真实环境信息进行名称替换。\n\nCinder支持很多类型的后端存储，本指导使用最简单的lvm为参考，如果您想使用如ceph等其他后端，请自行配置。\n\n1. 安装软件包\n\n    ```shell\n    dnf install lvm2 device-mapper-persistent-data scsi-target-utils rpcbind nfs-utils openstack-cinder-volume openstack-cinder-backup\n    ```\n\n2. 配置lvm卷组\n\n    ```shell\n    pvcreate /dev/sdb\n    vgcreate cinder-volumes /dev/sdb\n    ```\n\n3. 修改cinder配置`/etc/cinder/cinder.conf`\n\n    ```ini\n    [DEFAULT]\n    transport_url = rabbit://openstack:RABBIT_PASS@controller\n    auth_strategy = keystone\n    my_ip = 192.168.0.4\n    enabled_backends = lvm\n    glance_api_servers = http://controller:9292\n\n    [keystone_authtoken]\n    www_authenticate_uri = http://controller:5000\n    auth_url = http://controller:5000\n    memcached_servers = controller:11211\n    auth_type = password\n    project_domain_name = default\n    user_domain_name = default\n    project_name = service\n    username = cinder\n    password = CINDER_PASS\n\n    [database]\n    connection = mysql+pymysql://cinder:CINDER_DBPASS@controller/cinder\n\n    [lvm]\n    volume_driver = cinder.volume.drivers.lvm.LVMVolumeDriver\n    volume_group = cinder-volumes\n    target_protocol = iscsi\n    target_helper = lioadm\n\n    [oslo_concurrency]\n    lock_path = /var/lib/cinder/tmp\n    ```\n\n4. 配置cinder backup （可选）\n\n    cinder-backup是可选的备份服务，cinder同样支持很多种备份后端，本文使用swift存储，如果您想使用如NFS等后端，请自行配置，例如可以参考[OpenStack官方文档](https://docs.openstack.org/cinder/2023.1/admin/nfs-backend.html)对NFS的配置说明。\n\n    修改`/etc/cinder/cinder.conf`，在`[DEFAULT]`中新增\n\n    ```ini\n    [DEFAULT]\n    backup_driver = cinder.backup.drivers.swift.SwiftBackupDriver\n    backup_swift_url = SWIFT_URL\n    ```\n\n    这里的`SWIFT_URL`是指环境中swift服务的URL，在部署完swift服务后，执行`openstack catalog show object-store`命令获取。\n\n5. 启动服务\n\n    ```shell\n    systemctl start openstack-cinder-volume target\n    systemctl start openstack-cinder-backup (可选)\n    ```\n\n至此，Cinder服务的部署已全部完成，可以在controller通过以下命令进行简单的验证\n\n```shell\nsource ~/.admin-openrc\nopenstack storage service list\nopenstack volume list\n```\n\n#### Horizon\n\nHorizon是OpenStack提供的前端页面，可以让用户通过网页鼠标的操作来控制OpenStack集群，而不用繁琐的CLI命令行。Horizon一般部署在控制节点。\n\n1. 安装软件包\n\n    ```shell\n    dnf install openstack-dashboard\n    ```\n\n2. 修改配置文件`/etc/openstack-dashboard/local_settings`\n\n    ```ini\n    OPENSTACK_HOST = \"controller\"\n    ALLOWED_HOSTS = ['*', ]\n    OPENSTACK_KEYSTONE_URL =  \"http://controller:5000/v3\"\n    SESSION_ENGINE = 'django.contrib.sessions.backends.cache'\n    CACHES = {\n    'default': {\n        'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',\n        'LOCATION': 'controller:11211',\n        }\n    }\n    OPENSTACK_KEYSTONE_MULTIDOMAIN_SUPPORT = True\n    OPENSTACK_KEYSTONE_DEFAULT_DOMAIN = \"Default\"\n    OPENSTACK_KEYSTONE_DEFAULT_ROLE = \"member\"\n    WEBROOT = '/dashboard'\n    POLICY_FILES_PATH = \"/etc/openstack-dashboard\"\n\n    OPENSTACK_API_VERSIONS = {\n        \"identity\": 3,\n        \"image\": 2,\n        \"volume\": 3,\n    }\n    ```\n\n3. 重启服务\n\n    ```shell\n    systemctl restart httpd\n    ```\n\n至此，horizon服务的部署已全部完成，打开浏览器，输入`http://192.168.0.2/dashboard`，打开horizon登录页面。\n\n#### Ironic\n\nIronic是OpenStack的裸金属服务，如果用户需要进行裸机部署则推荐使用该组件。否则，可以不用安装。\n\n在控制节点执行以下操作。\n\n1. 设置数据库\n\n    裸金属服务在数据库中存储信息，创建一个**ironic**用户可以访问的**ironic**数据库，替换**IRONIC_DBPASS**为合适的密码\n\n    ```sql\n    mysql -u root -p\n    \n    MariaDB [(none)]> CREATE DATABASE ironic CHARACTER SET utf8;\n    MariaDB [(none)]> GRANT ALL PRIVILEGES ON ironic.* TO 'ironic'@'localhost' \\\n    IDENTIFIED BY 'IRONIC_DBPASS';\n    MariaDB [(none)]> GRANT ALL PRIVILEGES ON ironic.* TO 'ironic'@'%' \\\n    IDENTIFIED BY 'IRONIC_DBPASS';\n    MariaDB [(none)]> exit\n    Bye\n    ```\n\n2. 创建服务用户认证\n\n    - 创建Bare Metal服务用户\n\n    替换`IRONIC_PASS`为ironic用户密码，`IRONIC_INSPECTOR_PASS`为ironic_inspector用户密码。\n\n    ```shell\n    openstack user create --password IRONIC_PASS \\\n        --email ironic@example.com ironic\n    openstack role add --project service --user ironic admin\n    openstack service create --name ironic \\\n        --description \"Ironic baremetal provisioning service\" baremetal\n    \n    openstack service create --name ironic-inspector --description     \"Ironic inspector baremetal provisioning service\" baremetal-introspection\n    openstack user create --password IRONIC_INSPECTOR_PASS --email ironic_inspector@example.com ironic-inspector\n    openstack role add --project service --user ironic-inspector admin\n    ```\n\n    - 创建Bare Metal服务访问入口\n\n    ```shell\n    openstack endpoint create --region RegionOne baremetal admin http://192.168.0.2:6385\n    openstack endpoint create --region RegionOne baremetal public http://192.168.0.2:6385\n    openstack endpoint create --region RegionOne baremetal internal http://192.168.0.2:6385\n    openstack endpoint create --region RegionOne baremetal-introspection internal http://192.168.0.2:5050/v1\n    openstack endpoint create --region RegionOne baremetal-introspection public http://192.168.0.2:5050/v1\n    openstack endpoint create --region RegionOne baremetal-introspection admin http://192.168.0.2:5050/v1\n    ```\n\n3. 安装组件\n\n    ```shell\n    dnf install openstack-ironic-api openstack-ironic-conductor python3-ironicclient\n    ```\n\n4. 配置ironic-api服务\n\n    配置文件路径/etc/ironic/ironic.conf\n\n    - 通过**connection**选项配置数据库的位置，如下所示，替换**IRONIC_DBPASS**为**ironic**用户的密码，替换**DB_IP**为DB服务器所在的IP地址：\n\n    ```ini\n    [database]\n    \n    # The SQ LAlchemy connection string used to connect to the\n    # database (string value)\n    # connection = mysql+pymysql://ironic:IRONIC_DBPASS@DB_IP/ironic\n    connection = mysql+pymysql://ironic:IRONIC_DBPASS@controller/ironic\n    ```\n\n    - 通过以下选项配置ironic-api服务使用RabbitMQ消息代理，替换**RPC_\\***为RabbitMQ的详细地址和凭证\n\n    ```ini\n    [DEFAULT]\n    \n    # A URL representing the messaging driver to use and its full\n    # configuration. (string value)\n    # transport_url = rabbit://RPC_USER:RPC_PASSWORD@RPC_HOST:RPC_PORT/\n    transport_url = rabbit://openstack:RABBIT_PASS@controller:5672/\n    ```\n\n    用户也可自行使用json-rpc方式替换rabbitmq\n    \n    - 配置ironic-api服务使用身份认证服务的凭证，替换**PUBLIC_IDENTITY_IP**为身份认证服务器的公共IP，替换**PRIVATE_IDENTITY_IP**为身份认证服务器的私有IP，替换     **IRONIC_PASS**为身份认证服务中**ironic**用户的密码，替换**RABBIT_PASS**为RabbitMQ中openstack账户的密码。：\n\n    ```ini\n    [DEFAULT]\n\n    # Authentication strategy used by ironic-api: one of\n    # \"keystone\" or \"noauth\". \"noauth\" should not be used in a\n    # production environment because all authentication will be\n    # disabled. (string value)\n\n    auth_strategy=keystone\n    host = controller\n    memcache_servers = controller:11211\n    enabled_network_interfaces = flat,noop,neutron\n    default_network_interface = noop\n    enabled_hardware_types = ipmi\n    enabled_boot_interfaces = pxe\n    enabled_deploy_interfaces = direct\n    default_deploy_interface = direct\n    enabled_inspect_interfaces = inspector\n    enabled_management_interfaces = ipmitool\n    enabled_power_interfaces = ipmitool\n    enabled_rescue_interfaces = no-rescue,agent\n    isolinux_bin = /usr/share/syslinux/isolinux.bin\n    logging_context_format_string = %(asctime)s.%(msecs)03d %(process)d %(levelname)s %(name)s [%(global_request_id)s %(request_id)s %     (user_identity)s] %(instance)s%(message)s\n    \n    [keystone_authtoken]\n    # Authentication type to load (string value)\n    auth_type=password\n    # Complete public Identity API endpoint (string value)\n    # www_authenticate_uri=http://PUBLIC_IDENTITY_IP:5000\n    www_authenticate_uri=http://controller:5000\n    # Complete admin Identity API endpoint. (string value)\n    # auth_url=http://PRIVATE_IDENTITY_IP:5000\n    auth_url=http://controller:5000\n    # Service username. (string value)\n    username=ironic\n    # Service account password. (string value)\n    password=IRONIC_PASS\n    # Service tenant name. (string value)\n    project_name=service\n    # Domain name containing project (string value)\n    project_domain_name=Default\n    # User's domain name (string value)\n    user_domain_name=Default\n    \n    [agent]\n    deploy_logs_collect = always\n    deploy_logs_local_path = /var/log/ironic/deploy\n    deploy_logs_storage_backend = local\n    image_download_source = http\n    stream_raw_images = false\n    force_raw_images = false\n    verify_ca = False\n    \n    [oslo_concurrency]\n    \n    [oslo_messaging_notifications]\n    transport_url = rabbit://openstack:RABBIT_PASS@controller:5672/\n    topics = notifications\n    driver = messagingv2\n    \n    [oslo_messaging_rabbit]\n    amqp_durable_queues = True\n    rabbit_ha_queues = True\n    \n    [pxe]\n    ipxe_enabled = false\n    pxe_append_params = nofb nomodeset vga=normal coreos.autologin ipa-insecure=1\n    image_cache_size = 204800\n    tftp_root=/var/lib/tftpboot/cephfs/\n    tftp_master_path=/var/lib/tftpboot/cephfs/master_images\n    \n    [dhcp]\n    dhcp_provider = none\n    ```\n\n    - 创建裸金属服务数据库表\n\n    ```shell\n    ironic-dbsync --config-file /etc/ironic/ironic.conf create_schema\n    ```\n\n    - 重启ironic-api服务\n\n    ```shell\n    sudo systemctl restart openstack-ironic-api\n    ```\n\n5. 配置ironic-conductor服务\n\n    如下为ironic-conductor服务自身的标准配置，ironic-conductor服务可以与ironic-api服务分布于不同节点，本指南中均部署与控制节点，所以重复的配置项可跳过。\n\n    - 替换使用conductor服务所在host的IP配置my_ip：\n\n    ```ini\n    [DEFAULT]\n    \n    # IP address of this host. If unset, will determine the IP\n    # programmatically. If unable to do so, will use \"127.0.0.1\".\n    # (string value)\n    # my_ip=HOST_IP\n    my_ip = 192.168.0.2\n    ```\n\n    - 配置数据库的位置，ironic-conductor应该使用和ironic-api相同的配置。替换**IRONIC_DBPASS**为**ironic**用户的密码：\n\n    ```ini\n    [database]\n    \n    # The SQLAlchemy connection string to use to connect to the\n    # database. (string value)\n    connection = mysql+pymysql://ironic:IRONIC_DBPASS@controller/ironic\n    ```\n\n    - 通过以下选项配置ironic-api服务使用RabbitMQ消息代理，ironic-conductor应该使用和ironic-api相同的配置，替换**RABBIT_PASS**为RabbitMQ中openstack账户的密码：\n\n    ```ini\n    [DEFAULT]\n    \n    # A URL representing the messaging driver to use and its full\n    # configuration. (string value)\n    transport_url = rabbit://openstack:RABBIT_PASS@controller:5672/\n    ```\n\n    用户也可自行使用json-rpc方式替换rabbitmq\n\n    - 配置凭证访问其他OpenStack服务\n\n    为了与其他OpenStack服务进行通信，裸金属服务在请求其他服务时需要使用服务用户与OpenStack Identity服务进行认证。这些用户的凭据必须在与相应服务相关的每个配置文件中进行配置。\n\n    ```shell\n    [neutron] - 访问OpenStack网络服务\n    [glance] - 访问OpenStack镜像服务\n    [swift] - 访问OpenStack对象存储服务\n    [cinder] - 访问OpenStack块存储服务\n    [inspector] - 访问OpenStack裸金属introspection服务\n    [service_catalog] - 一个特殊项用于保存裸金属服务使用的凭证，该凭证用于发现注册在OpenStack身份认证服务目录中的自己的API URL端点\n    ```\n\n    简单起见，可以对所有服务使用同一个服务用户。为了向后兼容，该用户应该和ironic-api服务的[keystone_authtoken]所配置的为同一个用户。但这不是必须的，也可以为每个服务创建并配置不同的服务用户。\n\n    在下面的示例中，用户访问OpenStack网络服务的身份验证信息配置为：\n\n    ```ini\n    网络服务部署在名为RegionOne的身份认证服务域中，仅在服务目录中注册公共端点接口\n    \n    请求时使用特定的CA SSL证书进行HTTPS连接\n    \n    与ironic-api服务配置相同的服务用户\n    \n    动态密码认证插件基于其他选项发现合适的身份认证服务API版本\n    ```\n\n    替换IRONIC_PASS为ironic用户密码。\n\n    ```ini\n    [neutron]\n    \n    # Authentication type to load (string value)\n    auth_type = password\n    # Authentication URL (string value)\n    auth_url=https://IDENTITY_IP:5000/\n    # Username (string value)\n    username=ironic\n    # User's password (string value)\n    password=IRONIC_PASS\n    # Project name to scope to (string value)\n    project_name=service\n    # Domain ID containing project (string value)\n    project_domain_id=default\n    # User's domain id (string value)\n    user_domain_id=default\n    # PEM encoded Certificate Authority to use when verifying\n    # HTTPs connections. (string value)\n    cafile=/opt/stack/data/ca-bundle.pem\n    # The default region_name for endpoint URL discovery. (string\n    # value)\n    region_name = RegionOne\n    # List of interfaces, in order of preference, for endpoint\n    # URL. (list value)\n    valid_interfaces=public\n    \n    # 其他参考配置\n    [glance]\n    endpoint_override = http://controller:9292\n    www_authenticate_uri = http://controller:5000\n    auth_url = http://controller:5000\n    auth_type = password\n    username = ironic\n    password = IRONIC_PASS\n    project_domain_name = default\n    user_domain_name = default\n    region_name = RegionOne\n    project_name = service\n    \n    [service_catalog]  \n    region_name = RegionOne\n    project_domain_id = default\n    user_domain_id = default\n    project_name = service\n    password = IRONIC_PASS\n    username = ironic\n    auth_url = http://controller:5000\n    auth_type = password\n    ```\n\n    默认情况下，为了与其他服务进行通信，裸金属服务会尝试通过身份认证服务的服务目录发现该服务合适的端点。如果希望对一个特定服务使用一个不同的端点，则在裸金属服务的配置文件中通过endpoint_override选项进行指定：\n\n    ```ini\n    [neutron]\n    endpoint_override = <NEUTRON_API_ADDRESS>\n    ```\n\n    - 配置允许的驱动程序和硬件类型\n\n    通过设置enabled_hardware_types设置ironic-conductor服务允许使用的硬件类型：\n\n    ```ini\n    [DEFAULT]\n    enabled_hardware_types = ipmi\n    ```\n\n    配置硬件接口：\n\n    ```ini\n    enabled_boot_interfaces = pxe\n    enabled_deploy_interfaces = direct,iscsi\n    enabled_inspect_interfaces = inspector\n    enabled_management_interfaces = ipmitool\n    enabled_power_interfaces = ipmitool\n    ```\n\n    配置接口默认值：\n\n    ```ini\n    [DEFAULT]\n    default_deploy_interface = direct\n    default_network_interface = neutron\n    ```\n\n    如果启用了任何使用Direct deploy的驱动，必须安装和配置镜像服务的Swift后端。Ceph对象网关(RADOS网关)也支持作为镜像服务的后端。\n\n    - 重启ironic-conductor服务\n\n    ```shell\n    sudo systemctl restart openstack-ironic-conductor\n    ```\n\n6. 配置ironic-inspector服务\n\n    - 安装组件\n\n    ```shell\n    dnf install openstack-ironic-inspector\n    ```\n\n    - 创建数据库\n\n    ```sql\n    # mysql -u root -p\n    \n    MariaDB [(none)]> CREATE DATABASE ironic_inspector CHARACTER SET utf8;\n    \n    MariaDB [(none)]> GRANT ALL PRIVILEGES ON ironic_inspector.* TO 'ironic_inspector'@'localhost' \\\n    IDENTIFIED BY 'IRONIC_INSPECTOR_DBPASS';\n    MariaDB [(none)]> GRANT ALL PRIVILEGES ON ironic_inspector.* TO 'ironic_inspector'@'%' \\\n    IDENTIFIED BY 'IRONIC_INSPECTOR_DBPASS';\n    MariaDB [(none)]> exit\n    Bye\n    ```\n\n    - 配置`/etc/ironic-inspector/inspector.conf`\n\n    通过**connection**选项配置数据库的位置，如下所示，替换**IRONIC_INSPECTOR_DBPASS**为**ironic_inspector**用户的密码\n\n    ```ini\n    [database]\n    backend = sqlalchemy\n    connection = mysql+pymysql://ironic_inspector:IRONIC_INSPECTOR_DBPASS@controller/ironic_inspector\n    min_pool_size = 100\n    max_pool_size = 500\n    pool_timeout = 30\n    max_retries = 5\n    max_overflow = 200\n    db_retry_interval = 2\n    db_inc_retry_interval = True\n    db_max_retry_interval = 2\n    db_max_retries = 5\n    ```\n\n    - 配置消息队列通信地址\n\n    ```ini\n    [DEFAULT] \n    transport_url = rabbit://openstack:RABBIT_PASS@controller:5672/\n    ```\n\n    - 设置keystone认证\n\n    ```ini\n    [DEFAULT]\n    \n    auth_strategy = keystone\n    timeout = 900\n    rootwrap_config = /etc/ironic-inspector/rootwrap.conf\n    logging_context_format_string = %(asctime)s.%(msecs)03d %(process)d %(levelname)s %(name)s [%(global_request_id)s %(request_id)s %     (user_identity)s] %(instance)s%(message)s\n    log_dir = /var/log/ironic-inspector\n    state_path = /var/lib/ironic-inspector\n    use_stderr = False\n    \n    [ironic]\n    api_endpoint = http://IRONIC_API_HOST_ADDRRESS:6385\n    auth_type = password\n    auth_url = http://PUBLIC_IDENTITY_IP:5000\n    auth_strategy = keystone\n    ironic_url = http://IRONIC_API_HOST_ADDRRESS:6385\n    os_region = RegionOne\n    project_name = service\n    project_domain_name = Default\n    user_domain_name = Default\n    username = IRONIC_SERVICE_USER_NAME\n    password = IRONIC_SERVICE_USER_PASSWORD\n    \n    [keystone_authtoken]\n    auth_type = password\n    auth_url = http://controller:5000\n    www_authenticate_uri = http://controller:5000\n    project_domain_name = default\n    user_domain_name = default\n    project_name = service\n    username = ironic_inspector\n    password = IRONICPASSWD\n    region_name = RegionOne\n    memcache_servers = controller:11211\n    token_cache_time = 300\n    \n    [processing]\n    add_ports = active\n    processing_hooks = $default_processing_hooks,local_link_connection,lldp_basic\n    ramdisk_logs_dir = /var/log/ironic-inspector/ramdisk\n    always_store_ramdisk_logs = true\n    store_data =none\n    power_off = false\n    \n    [pxe_filter]\n    driver = iptables\n    \n    [capabilities]\n    boot_mode=True\n    ```\n\n    - 配置ironic inspector dnsmasq服务\n\n    ```ini\n    # 配置文件地址：/etc/ironic-inspector/dnsmasq.conf\n    port=0\n    interface=enp3s0                         #替换为实际监听网络接口\n    dhcp-range=192.168.0.40,192.168.0.50   #替换为实际dhcp地址范围\n    bind-interfaces\n    enable-tftp\n    \n    dhcp-match=set:efi,option:client-arch,7\n    dhcp-match=set:efi,option:client-arch,9\n    dhcp-match=aarch64, option:client-arch,11\n    dhcp-boot=tag:aarch64,grubaa64.efi\n    dhcp-boot=tag:!aarch64,tag:efi,grubx64.efi\n    dhcp-boot=tag:!aarch64,tag:!efi,pxelinux.0\n    \n    tftp-root=/tftpboot                       #替换为实际tftpboot目录\n    log-facility=/var/log/dnsmasq.log\n    ```\n\n    - 关闭ironic provision网络子网的dhcp\n\n    ```shell\n    openstack subnet set --no-dhcp 72426e89-f552-4dc4-9ac7-c4e131ce7f3c\n    ```\n\n    - 初始化ironic-inspector服务的数据库\n\n    ```shell\n    ironic-inspector-dbsync --config-file /etc/ironic-inspector/inspector.conf upgrade\n    ```\n\n    - 启动服务\n\n    ```shell\n    systemctl enable --now openstack-ironic-inspector.service\n    systemctl enable --now openstack-ironic-inspector-dnsmasq.service\n    ```\n\n7. 配置httpd服务\n\n    - 创建ironic要使用的httpd的root目录并设置属主属组，目录路径要和/etc/ironic/ironic.conf中[deploy]组中http_root 配置项指定的路径要一致。\n\n    ```shell\n    mkdir -p /var/lib/ironic/httproot\n    chown ironic.ironic /var/lib/ironic/httproot\n    ```\n\n    - 安装和配置httpd服务\n\n        - 安装httpd服务，已有请忽略\n\n        ```shell\n        dnf install httpd -y\n        ```\n\n        - 创建/etc/httpd/conf.d/openstack-ironic-httpd.conf文件，内容如下：\n\n        ```ini\n        Listen 8080\n        \n        <VirtualHost *:8080>\n            ServerName ironic.openeuler.com\n        \n            ErrorLog \"/var/log/httpd/openstack-ironic-httpd-error_log\"\n            CustomLog \"/var/log/httpd/openstack-ironic-httpd-access_log\" \"%h %l %u %t \\\"%r\\\" %>s %b\"\n        \n            DocumentRoot \"/var/lib/ironic/httproot\"\n            <Directory \"/var/lib/ironic/httproot\">\n                Options Indexes FollowSymLinks\n                Require all granted\n            </Directory>\n            LogLevel warn\n            AddDefaultCharset UTF-8\n            EnableSendfile on\n        </VirtualHost>\n        ```\n\n        注意监听的端口要和/etc/ironic/ironic.conf里[deploy]选项中http_url配置项中指定的端口一致。\n\n        - 重启httpd服务。\n\n        ```shell\n        systemctl restart httpd\n        ```\n\n8. deploy ramdisk镜像下载或制作\n\n    部署一个裸机节点总共需要两组镜像：deploy ramdisk images和user images。Deploy ramdisk images上运行有ironic-python-agent(IPA)服务，Ironic通过它进行裸机节点的环境准备。User images是最终被安装裸机节点上，供用户使用的镜像。\n\n    ramdisk镜像支持通过ironic-python-agent-builder或disk-image-builder工具制作。用户也可以自行选择其他工具制作。若使用原生工具，则需要安装对应的软件包。\n\n    具体的使用方法可以参考[官方文档](https://docs.openstack.org/ironic/2023.1/install/deploy-ramdisk.html)，同时官方也有提供制作好的deploy镜像，可尝试下载。\n\n    下文介绍通过ironic-python-agent-builder构建ironic使用的deploy镜像的完整过程。\n\n    - 安装 ironic-python-agent-builder\n\n    ```shell\n    dnf install python3-ironic-python-agent-builder\n\n    或\n    pip3 install ironic-python-agent-builder\n    dnf install qemu-img git\n    ```\n\n    - 制作镜像\n\n    基本用法：\n\n    ```shell\n    usage: ironic-python-agent-builder [-h] [-r RELEASE] [-o OUTPUT] [-e ELEMENT] [-b BRANCH]\n                                [-v] [--lzma] [--extra-args EXTRA_ARGS]\n                                [--elements-path ELEMENTS_PATH]\n                                distribution\n\n    positional arguments:\n        distribution          Distribution to use\n\n    options:\n        -h, --help            show this help message and exit\n        -r RELEASE, --release RELEASE\n                            Distribution release to use\n        -o OUTPUT, --output OUTPUT\n                            Output base file name\n        -e ELEMENT, --element ELEMENT\n                            Additional DIB element to use\n        -b BRANCH, --branch BRANCH\n                            If set, override the branch that is used for         ironic-python-agent\n                            and requirements\n        -v, --verbose         Enable verbose logging in diskimage-builder\n        --lzma                Use lzma compression for smaller images\n        --extra-args EXTRA_ARGS\n                            Extra arguments to pass to diskimage-builder\n        --elements-path ELEMENTS_PATH\n                            Path(s) to custom DIB elements separated by a colon\n    ```\n\n    操作实例：\n\n    ```shell\n    # -o选项指定生成的镜像名\n    # ubuntu指定生成ubuntu系统的镜像\n    ironic-python-agent-builder -o my-ubuntu-ipa ubuntu\n    ```\n\n    可通过设置`ARCH`环境变量（默认为amd64）指定所构建镜像的架构。如果是`arm`架构，需要添加：\n\n    ```shell\n    export ARCH=aarch64\n    ```\n\n    - 允许ssh登录\n\n    初始化环境变量,设置用户名、密码，启用`sodo`权限；并添加`-e`选项使用相应的DIB元素。制作镜像操作如下：\n\n    ```shell\n    export DIB_DEV_USER_USERNAME=ipa \\\n    export DIB_DEV_USER_PWDLESS_SUDO=yes \\\n    export DIB_DEV_USER_PASSWORD='123'\n    ironic-python-agent-builder -o my-ssh-ubuntu-ipa -e selinux-permissive -e devuser ubuntu\n    ```\n\n    - 指定代码仓库\n\n    初始化对应的环境变量，然后制作镜像：\n\n    ```shell\n    # 直接从gerrit上clone代码\n    DIB_REPOLOCATION_ironic_python_agent=https://opendev.org/openstack/ironic-python-agent\n    DIB_REPOREF_ironic_python_agent=stable/2023.1\n\n    # 指定本地仓库及分支\n    DIB_REPOLOCATION_ironic_python_agent=/home/user/path/to/repo\n    DIB_REPOREF_ironic_python_agent=my-test-branch\n\n    ironic-python-agent-builder ubuntu\n    ```\n\n    参考：[source-repositories](https://docs.openstack.org/diskimage-builder/latest/elements/source-repositories/README.html)。\n\n9. 注意\n\n    原生的openstack里的pxe配置文件的模版不支持arm64架构，需要自己对原生openstack代码进行修改：\n    在W版中，社区的ironic仍然不支持arm64位的uefi pxe启动，表现为生成的grub.cfg文件(一般位于/tftpboot/下)格式不对而导致pxe启动失败。\n\n    生成的错误配置文件：\n\n    ![ironic-err](../../img/install/ironic-err.png)\n\n    如上图所示，arm架构里寻找vmlinux和ramdisk镜像的命令分别是linux和initrd，上图所示的标红命令是x86架构下的uefi pxe启动。\n\n    需要用户对生成grub.cfg的代码逻辑自行修改。\n\n    ironic向ipa发送查询命令执行状态请求的tls报错：\n\n    当前版本的ipa和ironic默认都会开启tls认证的方式向对方发送请求，跟据官网的说明进行关闭即可。\n\n    - 修改ironic配置文件(/etc/ironic/ironic.conf)下面的配置中添加ipa-insecure=1：\n\n    ```ini\n    [agent]\n    verify_ca = False\n    [pxe]\n    pxe_append_params = nofb nomodeset vga=normal coreos.autologin ipa-insecure=1\n    ```\n\n    - ramdisk镜像中添加ipa配置文件/etc/ironic_python_agent/ironic_python_agent.conf并配置tls的配置如下：\n\n    /etc/ironic_python_agent/ironic_python_agent.conf (需要提前创建/etc/    ironic_python_agent目录）\n\n    ```ini\n    [DEFAULT]\n    enable_auto_tls = False\n    ```\n\n    设置权限：\n\n    ```shell\n    chown -R ipa.ipa /etc/ironic_python_agent/\n    ```\n\n    - ramdisk镜像中修改ipa服务的服务启动文件，添加配置文件选项\n\n    编辑/usr/lib/systemd/system/ironic-python-agent.service文件\n\n    ```ini\n    [Unit]\n    Description=Ironic Python Agent\n    After=network-online.target\n    [Service]\n    ExecStartPre=/sbin/modprobe vfat\n    ExecStart=/usr/local/bin/ironic-python-agent --config-file /etc/    ironic_python_agent/ironic_python_agent.conf\n    Restart=always\n    RestartSec=30s\n    [Install]\n    WantedBy=multi-user.target\n    ```\n\n#### Trove\n\nTrove是OpenStack的数据库服务，如果用户使用OpenStack提供的数据库服务则推荐使用该组件。否则，可以不用安装。\n\n**Controller节点**\n\n1. 创建数据库。\n\n    数据库服务在数据库中存储信息，创建一个trove用户可以访问的trove数据库，替换TROVE_DBPASS为合适的密码。\n\n    ```sql\n    CREATE DATABASE trove CHARACTER SET utf8;\n    GRANT ALL PRIVILEGES ON trove.* TO 'trove'@'localhost' IDENTIFIED BY 'TROVE_DBPASS';\n    GRANT ALL PRIVILEGES ON trove.* TO 'trove'@'%' IDENTIFIED BY 'TROVE_DBPASS';\n    ```\n\n2. 创建服务凭证以及API端点。\n\n    创建服务凭证。\n\n    ```shell\n    # 创建trove用户\n    openstack user create --domain default --password-prompt trove\n    # 添加admin角色\n    openstack role add --project service --user trove admin\n    # 创建database服务\n    openstack service create --name trove --description \"Database service\" database\n    ```\n\n    创建API端点。\n\n    ```shell\n    openstack endpoint create --region RegionOne database public http://controller:8779/v1.0/%\\(tenant_id\\)s\n    openstack endpoint create --region RegionOne database internal http://controller:8779/v1.0/%\\(tenant_id\\)s\n    openstack endpoint create --region RegionOne database admin http://controller:8779/v1.0/%\\(tenant_id\\)s\n    ```\n\n3. 安装Trove。\n\n    ```shell\n    dnf install openstack-trove python-troveclient\n    ```\n\n4. 修改配置文件。\n\n    编辑/etc/trove/trove.conf。\n\n    ```ini\n    [DEFAULT]\n    bind_host=192.168.0.2\n    log_dir = /var/log/trove\n    network_driver = trove.network.neutron.NeutronDriver\n    network_label_regex=.*\n    management_security_groups = <manage security group>\n    nova_keypair = trove-mgmt\n    default_datastore = mysql\n    taskmanager_manager = trove.taskmanager.manager.Manager\n    trove_api_workers = 5\n    transport_url = rabbit://openstack:RABBIT_PASS@controller:5672/\n    reboot_time_out = 300\n    usage_timeout = 900\n    agent_call_high_timeout = 1200\n    use_syslog = False\n    debug = True\n\n    [database]\n    connection = mysql+pymysql://trove:TROVE_DBPASS@controller/trove\n\n    [keystone_authtoken]\n    auth_url = http://controller:5000/v3/\n    auth_type = password\n    project_domain_name = Default\n    project_name = service\n    user_domain_name = Default\n    password = trove\n    username = TROVE_PASS\n    \n    [service_credentials]\n    auth_url = http://controller:5000/v3/\n    region_name = RegionOne\n    project_name = service\n    project_domain_name = Default\n    user_domain_name = Default\n    username = trove\n    password = TROVE_PASS\n\n    [mariadb]\n    tcp_ports = 3306,4444,4567,4568\n\n    [mysql]\n    tcp_ports = 3306\n\n    [postgresql]\n    tcp_ports = 5432\n    ```\n\n    **解释：**\n\n    > `[Default]`分组中`bind_host`配置为Trove控制节点的IP。\\\n    > `transport_url` 为`RabbitMQ`连接信息，`RABBIT_PASS`替换为RabbitMQ的密码。\\\n    > `[database]`分组中的`connection` 为前面在mysql中为Trove创建的数据库信息。\\\n    > Trove的用户信息中`TROVE_PASSWORD`替换为实际trove用户的密码。\n\n    编辑/etc/trove/trove-guestagent.conf。\n\n    ```ini\n    [DEFAULT]\n    log_file = trove-guestagent.log\n    log_dir = /var/log/trove/\n    ignore_users = os_admin\n    control_exchange = trove\n    transport_url = rabbit://openstack:RABBIT_PASS@controller:5672/\n    rpc_backend = rabbit\n    command_process_timeout = 60\n    use_syslog = False\n    debug = True\n\n    [service_credentials]\n    auth_url = http://controller:5000/v3/\n    region_name = RegionOne\n    project_name = service\n    password = TROVE_PASS\n    project_domain_name = Default\n    user_domain_name = Default\n    username = trove\n\n    [mysql]\n    docker_image = your-registry/your-repo/mysql\n    backup_docker_image = your-registry/your-repo/db-backup-mysql:1.1.0\n    ```\n\n    **解释：** \n\n    > `guestagent`是trove中一个独立组件，需要预先内置到Trove通过Nova创建的虚拟机镜像中，在创建好数据库实例后，会起guestagent进程，负责通过消息队列（RabbitMQ）向Trove上报心跳，因此需要配置RabbitMQ的用户和密码信息。\\\n    > `transport_url` 为`RabbitMQ`连接信息，`RABBIT_PASS`替换为RabbitMQ的密码。\\\n    > Trove的用户信息中`TROVE_PASSWORD`替换为实际trove用户的密码。\\\n    > 从Victoria版开始，Trove使用一个统一的镜像来跑不同类型的数据库，数据库服务运行在Guest虚拟机的Docker容器中。\n\n5. 数据库同步。\n\n    ```shell\n    su -s /bin/sh -c \"trove-manage db_sync\" trove\n    ```\n\n6. 完成安装。\n\n    ```shell\n    # 配置服务自启\n    systemctl enable openstack-trove-api.service openstack-trove-taskmanager.service \\ \n    openstack-trove-conductor.service\n\n    # 启动服务\n    systemctl start openstack-trove-api.service openstack-trove-taskmanager.service \\ \n    openstack-trove-conductor.service\n    ```\n\n#### Swift\n\nSwift 提供了弹性可伸缩、高可用的分布式对象存储服务，适合存储大规模非结构化数据。\n\n**Controller节点**\n\n1. 创建服务凭证以及API端点。\n\n    创建服务凭证。\n\n    ```shell\n    # 创建swift用户\n    openstack user create --domain default --password-prompt swift\n    # 添加admin角色\n    openstack role add --project service --user swift admin\n    # 创建对象存储服务\n    openstack service create --name swift --description \"OpenStack Object Storage\" object-store\n    ```\n\n    创建API端点。\n\n    ```shell\n    openstack endpoint create --region RegionOne object-store public http://controller:8080/v1/AUTH_%\\(project_id\\)s\n    openstack endpoint create --region RegionOne object-store internal http://controller:8080/v1/AUTH_%\\(project_id\\)s\n    openstack endpoint create --region RegionOne object-store admin http://controller:8080/v1 \n    ```\n\n2. 安装Swift。\n\n    ```shell\n    dnf install openstack-swift-proxy python3-swiftclient python3-keystoneclient \\ \n    python3-keystonemiddleware memcached\n    ```\n\n3. 配置proxy-server。\n\n    Swift RPM包里已经包含了一个基本可用的proxy-server.conf，只需要手动修改其中的ip和SWIFT_PASS即可。\n\n    ```ini\n    vim /etc/swift/proxy-server.conf\n\n    [filter:authtoken]\n    paste.filter_factory = keystonemiddleware.auth_token:filter_factory\n    www_authenticate_uri = http://controller:5000\n    auth_url = http://controller:5000\n    memcached_servers = controller:11211\n    auth_type = password\n    project_domain_id = default\n    user_domain_id = default\n    project_name = service\n    username = swift\n    password = SWIFT_PASS\n    delay_auth_decision = True\n    service_token_roles_required = True\n    ```\n\n**Storage节点**\n\n1. 安装支持的程序包。\n\n    ```shell\n    dnf install openstack-swift-account openstack-swift-container openstack-swift-object\n    dnf install xfsprogs rsync\n    ```\n\n2. 将设备/dev/sdb和/dev/sdc格式化为XFS。\n\n    ```shell\n    mkfs.xfs /dev/sdb\n    mkfs.xfs /dev/sdc\n    ```\n\n3. 创建挂载点目录结构。\n\n    ```shell\n    mkdir -p /srv/node/sdb\n    mkdir -p /srv/node/sdc\n    ```\n\n4. 找到新分区的UUID。\n\n    ```shell\n    blkid\n    ```\n\n5. 编辑/etc/fstab文件并将以下内容添加到其中。\n\n    ```shell\n    UUID=\"<UUID-from-output-above>\" /srv/node/sdb xfs noatime 0 2\n    UUID=\"<UUID-from-output-above>\" /srv/node/sdc xfs noatime 0 2\n    ```\n\n6. 挂载设备。\n\n    ```shell\n    mount /srv/node/sdb\n    mount /srv/node/sdc\n    ```\n\n    ***注意***\n\n    **如果用户不需要容灾功能，以上步骤只需要创建一个设备即可，同时可以跳过下面的rsync配置。**\n\n7. （可选）创建或编辑/etc/rsyncd.conf文件以包含以下内容:\n\n    ```ini\n    [DEFAULT]\n    uid = swift\n    gid = swift\n    log file = /var/log/rsyncd.log\n    pid file = /var/run/rsyncd.pid\n    address = MANAGEMENT_INTERFACE_IP_ADDRESS\n    \n    [account]\n    max connections = 2\n    path = /srv/node/\n    read only = False\n    lock file = /var/lock/account.lock\n    \n    [container]\n    max connections = 2\n    path = /srv/node/\n    read only = False\n    lock file = /var/lock/container.lock\n    \n    [object]\n    max connections = 2\n    path = /srv/node/\n    read only = False\n    lock file = /var/lock/object.lock\n    ```\n\n    **替换MANAGEMENT_INTERFACE_IP_ADDRESS为存储节点上管理网络的IP地址**\n\n    启动rsyncd服务并配置它在系统启动时启动:\n\n    ```shell\n    systemctl enable rsyncd.service\n    systemctl start rsyncd.service\n    ```\n\n8. 配置存储节点。\n\n    编辑/etc/swift目录的account-server.conf、container-server.conf和object-server.conf文件，替换bind_ip为存储节点上管理网络的IP地址。\n\n    ```ini\n    [DEFAULT]\n    bind_ip = 192.168.0.4\n    ```\n\n    确保挂载点目录结构的正确所有权。\n\n    ```shell\n    chown -R swift:swift /srv/node\n    ```\n\n    创建recon目录并确保其拥有正确的所有权。\n\n    ```shell\n    mkdir -p /var/cache/swift\n    chown -R root:swift /var/cache/swift\n    chmod -R 775 /var/cache/swift\n    ```\n\n**Controller节点创建并分发环**\n\n1. 创建账号环。\n\n    切换到`/etc/swift`目录。\n\n    ```shell\n    cd /etc/swift\n    ```\n\n    创建基础`account.builder`文件。\n\n    ```shell\n    swift-ring-builder account.builder create 10 1 1\n    ```\n\n    将每个存储节点添加到环中。\n\n    ```shell\n    swift-ring-builder account.builder add --region 1 --zone 1 \\\n    --ip STORAGE_NODE_MANAGEMENT_INTERFACE_IP_ADDRESS \\ \n    --port 6202  --device DEVICE_NAME \\ \n    --weight 100\n    ```\n\n    > 替换STORAGE_NODE_MANAGEMENT_INTERFACE_IP_ADDRESS为存储节点上管理网络的IP地址。\\\n    > 替换DEVICE_NAME为同一存储节点上的存储设备名称。\n\n    ***注意***\n\n    **对每个存储节点上的每个存储设备重复此命令**\n\n    验证账号环内容。\n\n    ```shell\n    swift-ring-builder account.builder\n    ```\n\n    重新平衡账号环。\n\n    ```shell\n    swift-ring-builder account.builder rebalance\n    ```\n\n2. 创建容器环。\n   \n    切换到`/etc/swift`目录。\n    \n    创建基础`container.builder`文件。\n\n    ```shell\n    swift-ring-builder container.builder create 10 1 1\n    ```\n\n    将每个存储节点添加到环中。\n\n    ```shell\n    swift-ring-builder container.builder add --region 1 --zone 1 \\\n    --ip STORAGE_NODE_MANAGEMENT_INTERFACE_IP_ADDRESS \n    --port 6201 --device DEVICE_NAME \\\n    --weight 100\n    ```\n\n    > 替换STORAGE_NODE_MANAGEMENT_INTERFACE_IP_ADDRESS为存储节点上管理网络的IP地址。\\\n    > 替换DEVICE_NAME为同一存储节点上的存储设备名称。\n    \n    ***注意***\n\n    **对每个存储节点上的每个存储设备重复此命令**\n    \n    验证容器环内容。\n\n    ```shell\n    swift-ring-builder container.builder\n    ```\n\n    重新平衡容器环。\n\n    ```shell\n    swift-ring-builder container.builder rebalance\n    ```\n\n3. 创建对象环。\n   \n    切换到`/etc/swift`目录。\n    \n    创建基础`object.builder`文件。\n\n    ```shell\n    swift-ring-builder object.builder create 10 1 1\n    ```\n\n    将每个存储节点添加到环中。\n\n    ```shell\n     swift-ring-builder object.builder add --region 1 --zone 1 \\\n     --ip STORAGE_NODE_MANAGEMENT_INTERFACE_IP_ADDRESS \\\n     --port 6200 --device DEVICE_NAME \\\n     --weight 100\n    ```\n\n    > 替换STORAGE_NODE_MANAGEMENT_INTERFACE_IP_ADDRESS为存储节点上管理网络的IP地址。\\\n    > 替换DEVICE_NAME为同一存储节点上的存储设备名称。\n    \n    ***注意***\n\n    **对每个存储节点上的每个存储设备重复此命令**\n    \n    验证对象环内容。\n\n    ```shell\n    swift-ring-builder object.builder\n    ```\n\n    重新平衡对象环。\n\n    ```shell\n    swift-ring-builder object.builder rebalance\n    ```\n\n4. 分发环配置文件。\n\n    将`account.ring.gz`，`container.ring.gz`以及 `object.ring.gz`文件复制到每个存储节点和运行代理服务的任何其他节点上的`/etc/swift`目录。\n\n5. 编辑配置文件/etc/swift/swift.conf。\n\n    ```ini\n    [swift-hash]\n    swift_hash_path_suffix = test-hash\n    swift_hash_path_prefix = test-hash\n\n    [storage-policy:0]\n    name = Policy-0\n    default = yes\n    ```\n\n    **用唯一值替换 test-hash**\n\n    将swift.conf文件复制到/etc/swift每个存储节点和运行代理服务的任何其他节点上的目录。\n    \n    在所有节点上，确保配置目录的正确所有权。\n\n    ```shell\n    chown -R root:swift /etc/swift\n    ```\n\n6. 完成安装\n\n    在控制节点和运行代理服务的任何其他节点上，启动对象存储代理服务及其依赖项，并将它们配置为在系统启动时启动。\n\n    ```shell\n    systemctl enable openstack-swift-proxy.service memcached.service\n    systemctl start openstack-swift-proxy.service memcached.service\n    ```\n\n    在存储节点上，启动对象存储服务并将它们配置为在系统启动时启动。\n\n    ```shell\n    systemctl enable openstack-swift-account.service \\\n    openstack-swift-account-auditor.service \\\n    openstack-swift-account-reaper.service \\\n    openstack-swift-account-replicator.service \\\n    openstack-swift-container.service \\\n    openstack-swift-container-auditor.service \\\n    openstack-swift-container-replicator.service \\\n    openstack-swift-container-updater.service \\\n    openstack-swift-object.service \\\n    openstack-swift-object-auditor.service \\\n    openstack-swift-object-replicator.service \\\n    openstack-swift-object-updater.service\n\n    systemctl start openstack-swift-account.service \\\n    openstack-swift-account-auditor.service \\\n    openstack-swift-account-reaper.service \\\n    openstack-swift-account-replicator.service \\\n    openstack-swift-container.service \\\n    openstack-swift-container-auditor.service \\\n    openstack-swift-container-replicator.service \\\n    openstack-swift-container-updater.service \\\n    openstack-swift-object.service \\\n    openstack-swift-object-auditor.service \\\n    openstack-swift-object-replicator.service \\\n    openstack-swift-object-updater.service\n    ```\n\n#### Cyborg\n\nCyborg为OpenStack提供加速器设备的支持，包括 GPU, FPGA, ASIC, NP, SoCs, NVMe/NOF SSDs, ODP, DPDK/SPDK等等。\n\n**Controller节点**\n\n1. 初始化对应数据库\n\n    ```sql\n    mysql -u root -p\n\n    MariaDB [(none)]> CREATE DATABASE cyborg;\n    MariaDB [(none)]> GRANT ALL PRIVILEGES ON cyborg.* TO 'cyborg'@'localhost' IDENTIFIED BY 'CYBORG_DBPASS';\n    MariaDB [(none)]> GRANT ALL PRIVILEGES ON cyborg.* TO 'cyborg'@'%' IDENTIFIED BY 'CYBORG_DBPASS';\n    MariaDB [(none)]> exit;\n    ```\n\n2. 创建用户和服务，并记住创建cybory用户时输入的密码，用于配置CYBORG_PASS\n\n    ```shell\n    source ~/.admin-openrc\n    openstack user create --domain default --password-prompt cyborg\n    openstack role add --project service --user cyborg admin\n    openstack service create --name cyborg --description \"Acceleration Service\" accelerator\n    ```\n\n3. 使用uwsgi部署Cyborg api服务\n\n    ```shell\n    openstack endpoint create --region RegionOne accelerator public http://controller/accelerator/v2\n    openstack endpoint create --region RegionOne accelerator internal http://controller/accelerator/v2\n    openstack endpoint create --region RegionOne accelerator admin http://controller/accelerator/v2\n    ```\n\n4. 安装Cyborg\n\n    ```shell\n    dnf install openstack-cyborg\n    ```\n\n5. 配置Cyborg\n\n    修改`/etc/cyborg/cyborg.conf`\n\n    ```ini\n    [DEFAULT]\n    transport_url = rabbit://openstack:RABBIT_PASS@controller:5672/\n    use_syslog = False\n    state_path = /var/lib/cyborg\n    debug = True\n\n    [api]\n    host_ip = 0.0.0.0\n\n    [database]\n    connection = mysql+pymysql://cyborg:CYBORG_DBPASS@controller/cyborg\n\n    [service_catalog]\n    cafile = /opt/stack/data/ca-bundle.pem\n    project_domain_id = default\n    user_domain_id = default\n    project_name = service\n    password = CYBORG_PASS\n    username = cyborg\n    auth_url = http://controller:5000/v3/\n    auth_type = password\n\n    [placement]\n    project_domain_name = Default\n    project_name = service\n    user_domain_name = Default\n    password = password\n    username = PLACEMENT_PASS\n    auth_url = http://controller:5000/v3/\n    auth_type = password\n    auth_section = keystone_authtoken\n\n    [nova]\n    project_domain_name = Default\n    project_name = service\n    user_domain_name = Default\n    password = NOVA_PASS\n    username = nova\n    auth_url = http://controller:5000/v3/\n    auth_type = password\n    auth_section = keystone_authtoken\n\n    [keystone_authtoken]\n    memcached_servers = localhost:11211\n    signing_dir = /var/cache/cyborg/api\n    cafile = /opt/stack/data/ca-bundle.pem\n    project_domain_name = Default\n    project_name = service\n    user_domain_name = Default\n    password = CYBORG_PASS\n    username = cyborg\n    auth_url = http://controller:5000/v3/\n    auth_type = password\n    ```\n\n6. 同步数据库表格\n\n    ```shell\n    cyborg-dbsync --config-file /etc/cyborg/cyborg.conf upgrade\n    ```\n\n7. 启动Cyborg服务\n\n    ```shell\n    systemctl enable openstack-cyborg-api openstack-cyborg-conductor openstack-cyborg-agent\n    systemctl start openstack-cyborg-api openstack-cyborg-conductor openstack-cyborg-agent\n    ```\n\n#### Aodh\n\nAodh可以根据由Ceilometer或者Gnocchi收集的监控数据创建告警，并设置触发规则。\n\n**Controller节点**\n\n1. 创建数据库。\n\n    ```sql\n    CREATE DATABASE aodh;\n    GRANT ALL PRIVILEGES ON aodh.* TO 'aodh'@'localhost' IDENTIFIED BY 'AODH_DBPASS';\n    GRANT ALL PRIVILEGES ON aodh.* TO 'aodh'@'%' IDENTIFIED BY 'AODH_DBPASS';\n    ```\n\n2. 创建服务凭证以及API端点。\n\n    创建服务凭证。\n\n    ```shell\n    openstack user create --domain default --password-prompt aodh\n    openstack role add --project service --user aodh admin\n    openstack service create --name aodh --description \"Telemetry\" alarming\n    ```\n\n    创建API端点。\n\n    ```shell\n    openstack endpoint create --region RegionOne alarming public http://controller:8042\n    openstack endpoint create --region RegionOne alarming internal http://controller:8042\n    openstack endpoint create --region RegionOne alarming admin http://controller:8042\n    ```\n\n3. 安装Aodh。\n\n    ```shell\n    dnf install openstack-aodh-api openstack-aodh-evaluator \\\n    openstack-aodh-notifier openstack-aodh-listener \\\n    openstack-aodh-expirer python3-aodhclient\n    ```\n\n4. 修改配置文件。\n\n    ```ini\n    vim /etc/aodh/aodh.conf\n\n    [database]\n    connection = mysql+pymysql://aodh:AODH_DBPASS@controller/aodh\n\n    [DEFAULT]\n    transport_url = rabbit://openstack:RABBIT_PASS@controller\n    auth_strategy = keystone\n\n    [keystone_authtoken]\n    www_authenticate_uri = http://controller:5000\n    auth_url = http://controller:5000\n    memcached_servers = controller:11211\n    auth_type = password\n    project_domain_id = default\n    user_domain_id = default\n    project_name = service\n    username = aodh\n    password = AODH_PASS\n\n    [service_credentials]\n    auth_type = password\n    auth_url = http://controller:5000/v3\n    project_domain_id = default\n    user_domain_id = default\n    project_name = service\n    username = aodh\n    password = AODH_PASS\n    interface = internalURL\n    region_name = RegionOne\n    ```\n\n5. 同步数据库。\n\n    ```shell\n    aodh-dbsync\n    ```\n\n6. 完成安装。\n\n    ```shell\n    # 配置服务自启\n    systemctl enable openstack-aodh-api.service openstack-aodh-evaluator.service \\\n    openstack-aodh-notifier.service openstack-aodh-listener.service\n\n    # 启动服务\n    systemctl start openstack-aodh-api.service openstack-aodh-evaluator.service \\\n    openstack-aodh-notifier.service openstack-aodh-listener.service\n    ```\n\n#### Gnocchi\n\nGnocchi是一个开源的时间序列数据库，可以对接Ceilometer。\n\n**Controller节点**\n\n1. 创建数据库。\n\n    ```sql\n    CREATE DATABASE gnocchi;\n    GRANT ALL PRIVILEGES ON gnocchi.* TO 'gnocchi'@'localhost' IDENTIFIED BY 'GNOCCHI_DBPASS';\n    GRANT ALL PRIVILEGES ON gnocchi.* TO 'gnocchi'@'%' IDENTIFIED BY 'GNOCCHI_DBPASS';\n    ```\n\n2. 创建服务凭证以及API端点。\n    \n    创建服务凭证。\n\n    ```shell\n    openstack user create --domain default --password-prompt gnocchi\n    openstack role add --project service --user gnocchi admin\n    openstack service create --name gnocchi --description \"Metric Service\" metric\n    ```\n\n    创建API端点。\n\n    ```shell\n    openstack endpoint create --region RegionOne metric public http://controller:8041\n    openstack endpoint create --region RegionOne metric internal http://controller:8041\n    openstack endpoint create --region RegionOne metric admin http://controller:8041\n    ```\n\n3. 安装Gnocchi。\n\n    ```shell\n    dnf install openstack-gnocchi-api openstack-gnocchi-metricd python3-gnocchiclient\n    ```\n\n4. 修改配置文件。\n\n    ```ini\n    vim /etc/gnocchi/gnocchi.conf\n    [api]\n    auth_mode = keystone\n    port = 8041\n    uwsgi_mode = http-socket\n\n    [keystone_authtoken]\n    auth_type = password\n    auth_url = http://controller:5000/v3\n    project_domain_name = Default\n    user_domain_name = Default\n    project_name = service\n    username = gnocchi\n    password = GNOCCHI_PASS\n    interface = internalURL\n    region_name = RegionOne\n\n    [indexer]\n    url = mysql+pymysql://gnocchi:GNOCCHI_DBPASS@controller/gnocchi\n\n    [storage]\n    # coordination_url is not required but specifying one will improve\n    # performance with better workload division across workers.\n    # coordination_url = redis://controller:6379\n    file_basepath = /var/lib/gnocchi\n    driver = file\n    ```\n\n5. 同步数据库。\n\n    ```shell\n    gnocchi-upgrade\n    ```\n\n6. 完成安装。\n\n    ```shell\n    # 配置服务自启\n    systemctl enable openstack-gnocchi-api.service openstack-gnocchi-metricd.service\n\n    # 启动服务\n    systemctl start openstack-gnocchi-api.service openstack-gnocchi-metricd.service\n    ```\n\n#### Ceilometer\n\nCeilometer是OpenStack中负责数据收集的服务。\n\n**Controller节点**\n\n1. 创建服务凭证。\n\n    ```shell\n    openstack user create --domain default --password-prompt ceilometer\n    openstack role add --project service --user ceilometer admin\n    openstack service create --name ceilometer --description \"Telemetry\" metering\n    ```\n\n2. 安装Ceilometer软件包。\n\n    ```shell\n    dnf install openstack-ceilometer-notification openstack-ceilometer-central\n    ```\n\n3. 编辑配置文件/etc/ceilometer/pipeline.yaml。 \n\n    ```yaml\n    publishers:\n        # set address of Gnocchi\n        # + filter out Gnocchi-related activity meters (Swift driver)\n        # + set default archive policy\n        - gnocchi://?filter_project=service&archive_policy=low\n    ```\n\n4. 编辑配置文件/etc/ceilometer/ceilometer.conf。\n\n    ```ini\n    [DEFAULT]\n    transport_url = rabbit://openstack:RABBIT_PASS@controller\n\n    [service_credentials]\n    auth_type = password\n    auth_url = http://controller:5000/v3\n    project_domain_id = default\n    user_domain_id = default\n    project_name = service\n    username = ceilometer\n    password = CEILOMETER_PASS\n    interface = internalURL\n    region_name = RegionOne\n    ```\n\n5. 数据库同步。\n\n    ```shell\n    ceilometer-upgrade\n    ```\n\n6. 完成控制节点Ceilometer安装。\n\n    ```shell\n    # 配置服务自启\n    systemctl enable openstack-ceilometer-notification.service openstack-ceilometer-central.service\n    # 启动服务\n    systemctl start openstack-ceilometer-notification.service openstack-ceilometer-central.service\n    ```\n\n**Compute节点**\n\n1. 安装Ceilometer软件包。\n\n    ```shell\n    dnf install openstack-ceilometer-compute\n    dnf install openstack-ceilometer-ipmi       # 可选\n    ```\n\n2. 编辑配置文件/etc/ceilometer/ceilometer.conf。\n\n    ```ini\n    [DEFAULT]\n    transport_url = rabbit://openstack:RABBIT_PASS@controller\n\n    [service_credentials]\n    auth_url = http://controller:5000\n    project_domain_id = default\n    user_domain_id = default\n    auth_type = password\n    username = ceilometer\n    project_name = service\n    password = CEILOMETER_PASS\n    interface = internalURL\n    region_name = RegionOne\n    ```\n\n3. 编辑配置文件/etc/nova/nova.conf。\n\n    ```ini\n    [DEFAULT]\n    instance_usage_audit = True\n    instance_usage_audit_period = hour\n\n    [notifications]\n    notify_on_state_change = vm_and_task_state\n\n    [oslo_messaging_notifications]\n    driver = messagingv2\n    ```\n\n4. 完成安装。\n\n    ```shell\n    systemctl enable openstack-ceilometer-compute.service\n    systemctl start openstack-ceilometer-compute.service\n    systemctl enable openstack-ceilometer-ipmi.service         # 可选\n    systemctl start openstack-ceilometer-ipmi.service          # 可选\n    \n    # 重启nova-compute服务\n    systemctl restart openstack-nova-compute.service\n    ```\n\n#### Heat\n\nHeat是 OpenStack 自动编排服务，基于描述性的模板来编排复合云应用，也称为`Orchestration Service`。Heat 的各服务一般安装在`Controller`节点上。\n\n**Controller节点**\n\n1. 创建**heat**数据库，并授予**heat**数据库正确的访问权限，替换**HEAT_DBPASS**为合适的密码\n\n    ```sql\n    mysql -u root -p\n\n    MariaDB [(none)]> CREATE DATABASE heat;\n    MariaDB [(none)]> GRANT ALL PRIVILEGES ON heat.* TO 'heat'@'localhost' IDENTIFIED BY 'HEAT_DBPASS';\n    MariaDB [(none)]> GRANT ALL PRIVILEGES ON heat.* TO 'heat'@'%' IDENTIFIED BY 'HEAT_DBPASS';\n    MariaDB [(none)]> exit;\n    ```\n\n2. 创建服务凭证，创建**heat**用户，并为其增加**admin**角色\n\n    ```shell\n    source ~/.admin-openrc\n\n    openstack user create --domain default --password-prompt heat\n    openstack role add --project service --user heat admin\n    ```\n\n3. 创建**heat**和**heat-cfn**服务及其对应的API端点\n\n    ```shell\n    openstack service create --name heat --description \"Orchestration\" orchestration\n    openstack service create --name heat-cfn --description \"Orchestration\"  cloudformation\n    openstack endpoint create --region RegionOne orchestration public http://controller:8004/v1/%\\(tenant_id\\)s\n    openstack endpoint create --region RegionOne orchestration internal http://controller:8004/v1/%\\(tenant_id\\)s\n    openstack endpoint create --region RegionOne orchestration admin http://controller:8004/v1/%\\(tenant_id\\)s\n    openstack endpoint create --region RegionOne cloudformation public http://controller:8000/v1\n    openstack endpoint create --region RegionOne cloudformation internal http://controller:8000/v1\n    openstack endpoint create --region RegionOne cloudformation admin http://controller:8000/v1\n    ```\n\n4. 创建stack管理的额外信息\n\n    创建 **heat** domain\n\n    ```shell\n    openstack domain create --description \"Stack projects and users\" heat\n    ```\n\n    在 **heat** domain下创建 **heat_domain_admin** 用户，并记下输入的密码，用于配置下面的`HEAT_DOMAIN_PASS`\n\n    ```shell\n    openstack user create --domain heat --password-prompt heat_domain_admin\n    ```\n\n    为 **heat_domain_admin** 用户增加 **admin** 角色\n\n    ```shell\n    openstack role add --domain heat --user-domain heat --user heat_domain_admin admin\n    ```\n\n    创建 **heat_stack_owner** 角色\n\n    ```shell\n    openstack role create heat_stack_owner\n    ```\n\n    创建 **heat_stack_user** 角色\n\n    ```shell\n    openstack role create heat_stack_user\n    ```\n\n5. 安装软件包\n\n    ```shell\n    dnf install openstack-heat-api openstack-heat-api-cfn openstack-heat-engine\n    ```\n\n6. 修改配置文件`/etc/heat/heat.conf`\n\n    ```ini\n    [DEFAULT]\n    transport_url = rabbit://openstack:RABBIT_PASS@controller\n    heat_metadata_server_url = http://controller:8000\n    heat_waitcondition_server_url = http://controller:8000/v1/waitcondition\n    stack_domain_admin = heat_domain_admin\n    stack_domain_admin_password = HEAT_DOMAIN_PASS\n    stack_user_domain_name = heat\n\n    [database]\n    connection = mysql+pymysql://heat:HEAT_DBPASS@controller/heat\n\n    [keystone_authtoken]\n    www_authenticate_uri = http://controller:5000\n    auth_url = http://controller:5000\n    memcached_servers = controller:11211\n    auth_type = password\n    project_domain_name = default\n    user_domain_name = default\n    project_name = service\n    username = heat\n    password = HEAT_PASS\n\n    [trustee]\n    auth_type = password\n    auth_url = http://controller:5000\n    username = heat\n    password = HEAT_PASS\n    user_domain_name = default\n\n    [clients_keystone]\n    auth_uri = http://controller:5000\n    ```\n\n7. 初始化**heat**数据库表\n\n    ```shell\n    su -s /bin/sh -c \"heat-manage db_sync\" heat\n    ```\n\n8. 启动服务\n\n    ```shell\n    systemctl enable openstack-heat-api.service openstack-heat-api-cfn.service openstack-heat-engine.service\n    systemctl start openstack-heat-api.service openstack-heat-api-cfn.service openstack-heat-engine.service\n    ```\n\n#### Tempest\n\nTempest是OpenStack的集成测试服务，如果用户需要全面自动化测试已安装的OpenStack环境的功能,则推荐使用该组件。否则，可以不用安装。\n\n**Controller节点**：\n\n1. 安装Tempest\n\n    ```shell\n    dnf install openstack-tempest\n    ```\n\n2. 初始化目录\n\n    ```shell\n    tempest init mytest\n    ```\n\n3. 修改配置文件。\n\n    ```shell\n    cd mytest\n    vi etc/tempest.conf\n    ```\n\n    tempest.conf中需要配置当前OpenStack环境的信息，具体内容可以参考[官方示例](https://docs.openstack.org/tempest/latest/sampleconf.html)\n\n4. 执行测试\n\n    ```shell\n    tempest run\n    ```\n\n5. 安装tempest扩展（可选）\n   OpenStack各个服务本身也提供了一些tempest测试包，用户可以安装这些包来丰富tempest的测试内容。在Antelope中，我们提供了Cinder、Glance、Keystone、Ironic、Trove的扩展测试，用户可以执行如下命令进行安装使用：\n\n   ```shell\n   dnf install python3-cinder-tempest-plugin python3-glance-tempest-plugin python3-ironic-tempest-plugin python3-keystone-tempest-plugin python3-trove-tempest-plugin\n   ```\n\n## 基于OpenStack SIG开发工具oos部署\n\n`oos`(openEuler OpenStack SIG)是OpenStack SIG提供的命令行工具。其中`oos env`系列命令提供了一键部署OpenStack （`all in one`或三节点`cluster`）的ansible脚本，用户可以使用该脚本快速部署一套基于 openEuler RPM 的 OpenStack 环境。`oos`工具支持对接云provider（目前仅支持华为云provider）和主机纳管两种方式来部署 OpenStack 环境，下面以对接华为云部署一套`all in one`的OpenStack环境为例说明`oos`工具的使用方法。\n\n1. 安装`oos`工具\n\n    ```shell\n    yum install openstack-sig-tool\n    ```\n\n2. 配置对接华为云provider的信息\n\n    打开`/usr/local/etc/oos/oos.conf`文件，修改配置为您拥有的华为云资源信息，AK/SK是用户的华为云登录密钥，其他配置保持默认即可（默认使用新加坡region），需要提前在云上创建对应的资源，包括：\n\n    - 一个安全组，名字默认是`oos`\n    - 一个openEuler镜像，名称格式是openEuler-%(release)s-%(arch)s，例如`openEuler-24.03-sp1-arm64`\n    - 一个VPC，名称是`oos_vpc`\n    - 该VPC下面两个子网，名称是`oos_subnet1`、`oos_subnet2`\n\n    ```ini\n    [huaweicloud]\n    ak = \n    sk = \n    region = ap-southeast-3\n    root_volume_size = 100\n    data_volume_size = 100\n    security_group_name = oos\n    image_format = openEuler-%%(release)s-%%(arch)s\n    vpc_name = oos_vpc\n    subnet1_name = oos_subnet1\n    subnet2_name = oos_subnet2\n    ```\n\n3. 配置 OpenStack 环境信息\n\n    打开`/usr/local/etc/oos/oos.conf`文件，根据当前机器环境和需求修改配置。内容如下：\n\n    ```shell\n    [environment]\n    mysql_root_password = root\n    mysql_project_password = root\n    rabbitmq_password = root\n    project_identity_password = root\n    enabled_service = keystone,neutron,cinder,placement,nova,glance,horizon,aodh,ceilometer,cyborg,gnocchi,kolla,heat,swift,trove,tempest\n    neutron_provider_interface_name = br-ex\n    default_ext_subnet_range = 10.100.100.0/24\n    default_ext_subnet_gateway = 10.100.100.1\n    neutron_dataplane_interface_name = eth1\n    cinder_block_device = vdb\n    swift_storage_devices = vdc\n    swift_hash_path_suffix = ash\n    swift_hash_path_prefix = has\n    glance_api_workers = 2\n    cinder_api_workers = 2\n    nova_api_workers = 2\n    nova_metadata_api_workers = 2\n    nova_conductor_workers = 2\n    nova_scheduler_workers = 2\n    neutron_api_workers = 2\n    horizon_allowed_host = *\n    kolla_openeuler_plugin = false\n    ```\n\n    **关键配置**\n\n    | 配置项   | 解释 |\n    |---|---|\n    | enabled_service  |  安装服务列表，根据用户需求自行删减 |\n    | neutron_provider_interface_name  | neutron L3网桥名称  |\n    | default_ext_subnet_range  | neutron私网IP段  |\n    | default_ext_subnet_gateway  | neutron私网gateway  |\n    | neutron_dataplane_interface_name  | neutron使用的网卡，推荐使用一张新的网卡，以免和现有网卡冲突，防止all in one主机断连的情况  |\n    | cinder_block_device  |  cinder使用的卷设备名 |\n    | swift_storage_devices  | swift使用的卷设备名 |\n    | kolla_openeuler_plugin | 是否启用kolla plugin。设置为True，kolla将支持部署openEuler容器(只在openEuler LTS上支持) |\n\n4. 华为云上面创建一台|openEuler 24.03 LTS SP1的x86_64虚拟机，用于部署`all in one` 的 OpenStack\n\n    ```shell\n    # sshpass在`oos env create`过程中被使用，用于配置对目标虚拟机的免密访问\n    dnf install sshpass\n    oos env create -r 24.03-lts-sp1 -f small -a x86 -n test-oos all_in_one\n    ```\n\n    具体的参数可以使用`oos env create --help`命令查看\n\n5. 部署OpenStack `all in one` 环境\n\n    ```shell\n    oos env setup test-oos -r antelope\n    ```\n\n    具体的参数可以使用`oos env setup --help`命令查看\n\n6. 初始化tempest环境\n\n    如果用户想使用该环境运行tempest测试的话，可以执行命令`oos env init`，会自动把tempest需要的OpenStack资源自动创建好\n\n    ```shell\n    oos env init test-oos\n    ```\n\n7. 执行tempest测试\n\n    用户可以使用oos自动执行：\n\n    ```shell\n    oos env test test-oos\n    ```\n\n    也可以手动登录目标节点，进入根目录下的`mytest`目录，手动执行`tempest run`\n\n如果是以主机纳管的方式部署 OpenStack 环境，总体逻辑与上文对接华为云时一致，1、3、5、6步操作不变，跳过第2步对华为云provider信息的配置，在第4步改为纳管主机操作。\n\n被纳管的虚机需要保证：\n\n- 至少有一张给oos使用的网卡，名称与配置保持一致，相关配置`neutron_dataplane_interface_name`\n- 至少有一块给oos使用的硬盘，名称与配置保持一致，相关配置`cinder_block_device`\n- 如果要部署swift服务，则需要新增一块硬盘，名称与配置保持一致，相关配置`swift_storage_devices`\n\n```shell\n# sshpass在`oos env create`过程中被使用，用于配置对目标主机的免密访问\ndnf install sshpass\noos env manage -r 24.03-lts-sp1 -i TARGET_MACHINE_IP -p TARGET_MACHINE_PASSWD -n test-oos\n```\n\n替换`TARGET_MACHINE_IP`为目标机ip、`TARGET_MACHINE_PASSWD`为目标机密码。具体的参数可以使用`oos env manage --help`命令查看。\n","slug":"OpenEuler-24.03-LTS-SP1-Antelope","published":1,"date":"2025-05-13T11:38:58.262Z","updated":"2025-05-13T11:38:58.262Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cmamklq710019fkd16ijuchwy","content":"<h1 id=\"OpenStack-Antelope-部署指南\"><a href=\"#OpenStack-Antelope-部署指南\" class=\"headerlink\" title=\"OpenStack Antelope 部署指南\"></a>OpenStack Antelope 部署指南</h1><p>[TOC]</p>\n<p>本文档是 openEuler OpenStack SIG 编写的基于 |openEuler 24.03 LTS SP1 的 OpenStack 部署指南，内容由 SIG 贡献者提供。在阅读过程中，如果您有任何疑问或者发现任何问题，请<a href=\"https://gitee.com/openeuler/openstack#%E8%81%94%E7%B3%BB%E6%96%B9%E5%BC%8F\">联系</a>SIG维护人员，或者直接<a href=\"https://gitee.com/openeuler/openstack/issues\">提交issue</a></p>\n<p><strong>约定</strong></p>\n<p>本章节描述文档中的一些通用约定。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">名称</th>\n<th align=\"center\">定义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">RABBIT_PASS</td>\n<td align=\"center\">rabbitmq的密码，由用户设置，在OpenStack各个服务配置中使用</td>\n</tr>\n<tr>\n<td align=\"center\">CINDER_PASS</td>\n<td align=\"center\">cinder服务keystone用户的密码，在cinder配置中使用</td>\n</tr>\n<tr>\n<td align=\"center\">CINDER_DBPASS</td>\n<td align=\"center\">cinder服务数据库密码，在cinder配置中使用</td>\n</tr>\n<tr>\n<td align=\"center\">KEYSTONE_DBPASS</td>\n<td align=\"center\">keystone服务数据库密码，在keystone配置中使用</td>\n</tr>\n<tr>\n<td align=\"center\">GLANCE_PASS</td>\n<td align=\"center\">glance服务keystone用户的密码，在glance配置中使用</td>\n</tr>\n<tr>\n<td align=\"center\">GLANCE_DBPASS</td>\n<td align=\"center\">glance服务数据库密码，在glance配置中使用</td>\n</tr>\n<tr>\n<td align=\"center\">HEAT_PASS</td>\n<td align=\"center\">在keystone注册的heat用户密码，在heat配置中使用</td>\n</tr>\n<tr>\n<td align=\"center\">HEAT_DBPASS</td>\n<td align=\"center\">heat服务数据库密码，在heat配置中使用</td>\n</tr>\n<tr>\n<td align=\"center\">CYBORG_PASS</td>\n<td align=\"center\">在keystone注册的cyborg用户密码，在cyborg配置中使用</td>\n</tr>\n<tr>\n<td align=\"center\">CYBORG_DBPASS</td>\n<td align=\"center\">cyborg服务数据库密码，在cyborg配置中使用</td>\n</tr>\n<tr>\n<td align=\"center\">NEUTRON_PASS</td>\n<td align=\"center\">在keystone注册的neutron用户密码，在neutron配置中使用</td>\n</tr>\n<tr>\n<td align=\"center\">NEUTRON_DBPASS</td>\n<td align=\"center\">neutron服务数据库密码，在neutron配置中使用</td>\n</tr>\n<tr>\n<td align=\"center\">PROVIDER_INTERFACE_NAME</td>\n<td align=\"center\">物理网络接口的名称，在neutron配置中使用</td>\n</tr>\n<tr>\n<td align=\"center\">OVERLAY_INTERFACE_IP_ADDRESS</td>\n<td align=\"center\">Controller控制节点的管理ip地址，在neutron配置中使用</td>\n</tr>\n<tr>\n<td align=\"center\">METADATA_SECRET</td>\n<td align=\"center\">metadata proxy的secret密码，在nova和neutron配置中使用</td>\n</tr>\n<tr>\n<td align=\"center\">PLACEMENT_DBPASS</td>\n<td align=\"center\">placement服务数据库密码，在placement配置中使用</td>\n</tr>\n<tr>\n<td align=\"center\">PLACEMENT_PASS</td>\n<td align=\"center\">在keystone注册的placement用户密码，在placement配置中使用</td>\n</tr>\n<tr>\n<td align=\"center\">NOVA_DBPASS</td>\n<td align=\"center\">nova服务数据库密码，在nova配置中使用</td>\n</tr>\n<tr>\n<td align=\"center\">NOVA_PASS</td>\n<td align=\"center\">在keystone注册的nova用户密码，在nova,cyborg,neutron等配置中使用</td>\n</tr>\n<tr>\n<td align=\"center\">IRONIC_DBPASS</td>\n<td align=\"center\">ironic服务数据库密码，在ironic配置中使用</td>\n</tr>\n<tr>\n<td align=\"center\">IRONIC_PASS</td>\n<td align=\"center\">在keystone注册的ironic用户密码，在ironic配置中使用</td>\n</tr>\n<tr>\n<td align=\"center\">IRONIC_INSPECTOR_DBPASS</td>\n<td align=\"center\">ironic-inspector服务数据库密码，在ironic-inspector配置中使用</td>\n</tr>\n<tr>\n<td align=\"center\">IRONIC_INSPECTOR_PASS</td>\n<td align=\"center\">在keystone注册的ironic-inspector用户密码，在ironic-inspector配置中使用</td>\n</tr>\n</tbody></table>\n<p>OpenStack SIG 提供了多种基于 openEuler 部署 OpenStack 的方法，以满足不同的用户场景，请按需选择。</p>\n<h2 id=\"基于RPM部署\"><a href=\"#基于RPM部署\" class=\"headerlink\" title=\"基于RPM部署\"></a>基于RPM部署</h2><h3 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h3><p>本文档基于OpenStack经典的三节点环境进行部署，三个节点分别是控制节点(Controller)、计算节点(Compute)、存储节点(Storage)，其中存储节点一般只部署存储服务，在资源有限的情况下，可以不单独部署该节点，把存储节点上的服务部署到计算节点即可。</p>\n<p>首先准备三个|openEuler 24.03 LTS SP1环境，根据您的环境，下载对应的镜像并安装即可：<a href=\"https://repo.openeuler.org/openEuler-24.03-LTS-SP1/ISO/\">ISO镜像</a>、<a href=\"https://repo.openeuler.org/openEuler-24.03-LTS-SP1/virtual_machine_img/\">qcow2镜像</a>。</p>\n<p>下面的安装按照如下拓扑进行：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">controller：192.168.0.2</span><br><span class=\"line\">compute：   192.168.0.3</span><br><span class=\"line\">storage：   192.168.0.4</span><br></pre></td></tr></table></figure>\n\n<p>如果您的环境IP不同，请按照您的环境IP修改相应的配置文件。</p>\n<p>本文档的三节点服务拓扑如下图所示(只包含Keystone、Glance、Nova、Cinder、Neutron这几个核心服务，其他服务请参考具体部署章节)：</p>\n<p><img src=\"/../img/install/topology1.PNG\" alt=\"topology1\"><br><img src=\"/../img/install/topology2.PNG\" alt=\"topology2\"><br><img src=\"/../img/install/topology3.PNG\" alt=\"topology3\"></p>\n<p>在正式部署之前，需要对每个节点做如下配置和检查：</p>\n<ol>\n<li><p>配置 |openEuler 24.03 LTS SP1 官方 yum 源，需要启用 EPOL 软件仓以支持 OpenStack</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum update</span><br><span class=\"line\">yum install openstack-release-antelope</span><br><span class=\"line\">yum clean all &amp;&amp; yum makecache</span><br></pre></td></tr></table></figure>\n\n<p> <strong>注意</strong>：如果你的环境的YUM源没有启用EPOL，需要同时配置EPOL，确保EPOL已配置，如下所示。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/yum.repos.d/openEuler.repo</span><br><span class=\"line\"></span><br><span class=\"line\">[EPOL]</span><br><span class=\"line\">name=EPOL</span><br><span class=\"line\">baseurl=http://repo.openeuler.org/openEuler-24.03-LTS-SP1/EPOL/main/$basearch/</span><br><span class=\"line\">enabled=1</span><br><span class=\"line\">gpgcheck=1</span><br><span class=\"line\">gpgkey=http://repo.openeuler.org/openEuler-24.03-LTS-SP1/OS/$basearch/RPM-GPG-KEY-openEuler</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改主机名以及映射</p>\n<p> 每个节点分别修改主机名，以controller为例：</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hostnamectl set-hostname controller</span><br><span class=\"line\"></span><br><span class=\"line\">vi /etc/hostname</span><br><span class=\"line\">内容修改为controller</span><br></pre></td></tr></table></figure>\n\n<p> 然后修改每个节点的<code>/etc/hosts</code>文件，新增如下内容:</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">192.168.0.2   controller</span><br><span class=\"line\">192.168.0.3   compute</span><br><span class=\"line\">192.168.0.4   storage</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"时钟同步\"><a href=\"#时钟同步\" class=\"headerlink\" title=\"时钟同步\"></a>时钟同步</h4><p>集群环境时刻要求每个节点的时间一致，一般由时钟同步软件保证。本文使用<code>chrony</code>软件。步骤如下：</p>\n<p><strong>Controller节点</strong>：</p>\n<ol>\n<li><p>安装服务</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dnf install chrony</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改<code>/etc/chrony.conf</code>配置文件，新增一行</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">表示允许哪些IP从本节点同步时钟</span></span><br><span class=\"line\">allow 192.168.0.0/24</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>重启服务</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart chronyd</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><strong>其他节点</strong></p>\n<ol>\n<li><p>安装服务</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dnf install chrony</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改<code>/etc/chrony.conf</code>配置文件，新增一行</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">NTP_SERVER是controller IP，表示从这个机器获取时间，这里我们填192.168.0.2，或者在`/etc/hosts`里配置好的controller名字即可。</span></span><br><span class=\"line\">server NTP_SERVER iburst</span><br></pre></td></tr></table></figure>\n\n<p> 同时，要把<code>pool pool.ntp.org iburst</code>这一行注释掉，表示不从公网同步时钟。</p>\n</li>\n<li><p>重启服务</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart chronyd</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>配置完成后，检查一下结果，在其他非controller节点执行<code>chronyc sources</code>，返回结果类似如下内容，表示成功从controller同步时钟。</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MS Name/IP address         Stratum Poll Reach LastRx Last <span class=\"attr\">sample</span></span><br><span class=\"line\">===============================================================================</span><br><span class=\"line\">^* 192.168.0.2                 4   6     7     0  -1406ns<span class=\"section\">[  +55us]</span> +/-   16ms</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"安装数据库\"><a href=\"#安装数据库\" class=\"headerlink\" title=\"安装数据库\"></a>安装数据库</h4><p>数据库安装在控制节点，这里推荐使用mariadb。</p>\n<ol>\n<li><p>安装软件包</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dnf install mysql-config mariadb mariadb-server python3-PyMySQL</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>新增配置文件<code>/etc/my.cnf.d/openstack.cnf</code>，内容如下</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\">bind-address = 192.168.0.2</span><br><span class=\"line\">default-storage-engine = innodb</span><br><span class=\"line\">innodb_file_per_table = on</span><br><span class=\"line\">max_connections = 4096</span><br><span class=\"line\">collation-server = utf8_general_ci</span><br><span class=\"line\">character-set-server = utf8</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动服务器</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start mariadb</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>初始化数据库，根据提示进行即可</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql_secure_installation</span><br></pre></td></tr></table></figure>\n\n<p> 示例如下：</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NOTE: RUNNING ALL PARTS OF THIS SCRIPT IS RECOMMENDED FOR ALL MariaDB</span><br><span class=\"line\">    SERVERS IN PRODUCTION USE!  PLEASE READ EACH STEP CAREFULLY!</span><br><span class=\"line\"></span><br><span class=\"line\">In order to log into MariaDB to secure it, we&#x27;ll need the current</span><br><span class=\"line\">password for the root user. If you&#x27;ve just installed MariaDB, and</span><br><span class=\"line\">haven&#x27;t set the root password yet, you should just press enter here.</span><br><span class=\"line\"></span><br><span class=\"line\">Enter current password for root (enter for none): </span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">这里输入密码，由于我们是初始化DB，直接回车就行</span></span><br><span class=\"line\"></span><br><span class=\"line\">OK, successfully used password, moving on...</span><br><span class=\"line\"></span><br><span class=\"line\">Setting the root password or using the unix_socket ensures that nobody</span><br><span class=\"line\">can log into the MariaDB root user without the proper authorisation.</span><br><span class=\"line\"></span><br><span class=\"line\">You already have your root account protected, so you can safely answer &#x27;n&#x27;.</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">这里根据提示输入N</span></span><br><span class=\"line\"></span><br><span class=\"line\">Switch to unix_socket authentication [Y/n] N</span><br><span class=\"line\"></span><br><span class=\"line\">Enabled successfully!</span><br><span class=\"line\">Reloading privilege tables..</span><br><span class=\"line\">... Success!</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">You already have your root account protected, so you can safely answer &#x27;n&#x27;.</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">输入Y，修改密码</span></span><br><span class=\"line\"></span><br><span class=\"line\">Change the root password? [Y/n] Y</span><br><span class=\"line\"></span><br><span class=\"line\">New password: </span><br><span class=\"line\">Re-enter new password: </span><br><span class=\"line\">Password updated successfully!</span><br><span class=\"line\">Reloading privilege tables..</span><br><span class=\"line\">... Success!</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">By default, a MariaDB installation has an anonymous user, allowing anyone</span><br><span class=\"line\">to log into MariaDB without having to have a user account created for</span><br><span class=\"line\">them.  This is intended only for testing, and to make the installation</span><br><span class=\"line\">go a bit smoother.  You should remove them before moving into a</span><br><span class=\"line\">production environment.</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">输入Y，删除匿名用户</span></span><br><span class=\"line\"></span><br><span class=\"line\">Remove anonymous users? [Y/n] Y</span><br><span class=\"line\">... Success!</span><br><span class=\"line\"></span><br><span class=\"line\">Normally, root should only be allowed to connect from &#x27;localhost&#x27;.  This</span><br><span class=\"line\">ensures that someone cannot guess at the root password from the network.</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">输入Y，关闭root远程登录权限</span></span><br><span class=\"line\"></span><br><span class=\"line\">Disallow root login remotely? [Y/n] Y</span><br><span class=\"line\">... Success!</span><br><span class=\"line\"></span><br><span class=\"line\">By default, MariaDB comes with a database named &#x27;test&#x27; that anyone can</span><br><span class=\"line\">access.  This is also intended only for testing, and should be removed</span><br><span class=\"line\">before moving into a production environment.</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">输入Y，删除<span class=\"built_in\">test</span>数据库</span></span><br><span class=\"line\"></span><br><span class=\"line\">Remove test database and access to it? [Y/n] Y</span><br><span class=\"line\">- Dropping test database...</span><br><span class=\"line\">... Success!</span><br><span class=\"line\">- Removing privileges on test database...</span><br><span class=\"line\">... Success!</span><br><span class=\"line\"></span><br><span class=\"line\">Reloading the privilege tables will ensure that all changes made so far</span><br><span class=\"line\">will take effect immediately.</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">输入Y，重载配置</span></span><br><span class=\"line\"></span><br><span class=\"line\">Reload privilege tables now? [Y/n] Y</span><br><span class=\"line\">... Success!</span><br><span class=\"line\"></span><br><span class=\"line\">Cleaning up...</span><br><span class=\"line\"></span><br><span class=\"line\">All done!  If you&#x27;ve completed all of the above steps, your MariaDB</span><br><span class=\"line\">installation should now be secure.</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>验证，根据第四步设置的密码，检查是否能登录mariadb</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -uroot -p</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"安装消息队列\"><a href=\"#安装消息队列\" class=\"headerlink\" title=\"安装消息队列\"></a>安装消息队列</h4><p>消息队列安装在控制节点，这里推荐使用rabbitmq。</p>\n<ol>\n<li><p>安装软件包</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dnf install rabbitmq-server</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动服务</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start rabbitmq-server</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置openstack用户，<code>RABBIT_PASS</code>是openstack服务登录消息队里的密码，需要和后面各个服务的配置保持一致。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rabbitmqctl add_user openstack RABBIT_PASS</span><br><span class=\"line\">rabbitmqctl set_permissions openstack &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"安装缓存服务\"><a href=\"#安装缓存服务\" class=\"headerlink\" title=\"安装缓存服务\"></a>安装缓存服务</h4><p>消息队列安装在控制节点，这里推荐使用Memcached。</p>\n<ol>\n<li><p>安装软件包</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dnf install memcached python3-memcached</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改配置文件<code>/etc/sysconfig/memcached</code></p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">OPTIONS=&quot;-l 127.0.0.1,::1,controller&quot;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动服务</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start memcached</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"部署服务\"><a href=\"#部署服务\" class=\"headerlink\" title=\"部署服务\"></a>部署服务</h3><h4 id=\"Keystone\"><a href=\"#Keystone\" class=\"headerlink\" title=\"Keystone\"></a>Keystone</h4><p>Keystone是OpenStack提供的鉴权服务，是整个OpenStack的入口，提供了租户隔离、用户认证、服务发现等功能，必须安装。</p>\n<ol>\n<li><p>创建 keystone 数据库并授权</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql <span class=\"operator\">-</span>u root <span class=\"operator\">-</span>p</span><br><span class=\"line\"></span><br><span class=\"line\">MariaDB [(<span class=\"keyword\">none</span>)]<span class=\"operator\">&gt;</span> <span class=\"keyword\">CREATE</span> DATABASE keystone;</span><br><span class=\"line\">MariaDB [(<span class=\"keyword\">none</span>)]<span class=\"operator\">&gt;</span> <span class=\"keyword\">GRANT</span> <span class=\"keyword\">ALL</span> PRIVILEGES <span class=\"keyword\">ON</span> keystone.<span class=\"operator\">*</span> <span class=\"keyword\">TO</span> <span class=\"string\">&#x27;keystone&#x27;</span>@<span class=\"string\">&#x27;localhost&#x27;</span> \\</span><br><span class=\"line\">IDENTIFIED <span class=\"keyword\">BY</span> <span class=\"string\">&#x27;KEYSTONE_DBPASS&#x27;</span>;</span><br><span class=\"line\">MariaDB [(<span class=\"keyword\">none</span>)]<span class=\"operator\">&gt;</span> <span class=\"keyword\">GRANT</span> <span class=\"keyword\">ALL</span> PRIVILEGES <span class=\"keyword\">ON</span> keystone.<span class=\"operator\">*</span> <span class=\"keyword\">TO</span> <span class=\"string\">&#x27;keystone&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span> \\</span><br><span class=\"line\">IDENTIFIED <span class=\"keyword\">BY</span> <span class=\"string\">&#x27;KEYSTONE_DBPASS&#x27;</span>;</span><br><span class=\"line\">MariaDB [(<span class=\"keyword\">none</span>)]<span class=\"operator\">&gt;</span> exit</span><br></pre></td></tr></table></figure>\n\n<p> <em><strong>注意</strong></em></p>\n<p> <strong>替换 <code>KEYSTONE_DBPASS</code>，为 Keystone 数据库设置密码</strong></p>\n</li>\n<li><p>安装软件包</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dnf install openstack-keystone httpd mod_wsgi</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置keystone相关配置</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/keystone/keystone.conf</span><br><span class=\"line\"></span><br><span class=\"line\">[database]</span><br><span class=\"line\">connection = mysql+pymysql://keystone:KEYSTONE_DBPASS@controller/keystone</span><br><span class=\"line\"></span><br><span class=\"line\">[token]</span><br><span class=\"line\">provider = fernet</span><br></pre></td></tr></table></figure>\n\n<p> <em><strong>解释</strong></em></p>\n<p> [database]部分，配置数据库入口</p>\n<p> [token]部分，配置token provider</p>\n</li>\n<li><p>同步数据库</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">su -s /bin/sh -c &quot;keystone-manage db_sync&quot; keystone</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>初始化Fernet密钥仓库</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">keystone-manage fernet_setup --keystone-user keystone --keystone-group keystone</span><br><span class=\"line\">keystone-manage credential_setup --keystone-user keystone --keystone-group keystone</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动服务</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">keystone-manage bootstrap --bootstrap-password ADMIN_PASS \\</span><br><span class=\"line\">--bootstrap-admin-url http://controller:5000/v3/ \\</span><br><span class=\"line\">--bootstrap-internal-url http://controller:5000/v3/ \\</span><br><span class=\"line\">--bootstrap-public-url http://controller:5000/v3/ \\</span><br><span class=\"line\">--bootstrap-region-id RegionOne</span><br></pre></td></tr></table></figure>\n\n<p> <em><strong>注意</strong></em></p>\n<p> <strong>替换 <code>ADMIN_PASS</code>，为 admin 用户设置密码</strong></p>\n</li>\n<li><p>配置Apache HTTP server</p>\n<ul>\n<li>打开httpd.conf并配置</li>\n</ul>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">需要修改的配置文件路径</span></span><br><span class=\"line\">vim /etc/httpd/conf/httpd.conf</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">修改以下项，如果没有则新添加</span></span><br><span class=\"line\">ServerName controller</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>创建软链接</li>\n</ul>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -s /usr/share/keystone/wsgi-keystone.conf /etc/httpd/conf.d/</span><br></pre></td></tr></table></figure>\n\n<p> <em><strong>解释</strong></em></p>\n<p> 配置 <code>ServerName</code> 项引用控制节点</p>\n<p> <em><strong>注意</strong></em><br> <strong>如果 <code>ServerName</code> 项不存在则需要创建</strong></p>\n</li>\n<li><p>启动Apache HTTP服务</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl enable httpd.service</span><br><span class=\"line\">systemctl start httpd.service</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建环境变量配置</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &lt;&lt; EOF &gt;&gt; ~/.admin-openrc</span><br><span class=\"line\">export OS_PROJECT_DOMAIN_NAME=Default</span><br><span class=\"line\">export OS_USER_DOMAIN_NAME=Default</span><br><span class=\"line\">export OS_PROJECT_NAME=admin</span><br><span class=\"line\">export OS_USERNAME=admin</span><br><span class=\"line\">export OS_PASSWORD=ADMIN_PASS</span><br><span class=\"line\">export OS_AUTH_URL=http://controller:5000/v3</span><br><span class=\"line\">export OS_IDENTITY_API_VERSION=3</span><br><span class=\"line\">export OS_IMAGE_API_VERSION=2</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n\n<p> <em><strong>注意</strong></em></p>\n<p> <strong>替换 <code>ADMIN_PASS</code> 为 admin 用户的密码</strong></p>\n</li>\n<li><p>依次创建domain, projects, users, roles</p>\n<ul>\n<li>需要先安装python3-openstackclient</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dnf install python3-openstackclient</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>导入环境变量</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source ~/.admin-openrc</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>创建project <code>service</code>，其中 domain <code>default</code> 在 keystone-manage bootstrap 时已创建</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openstack domain create --description &quot;An Example Domain&quot; example</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openstack project create --domain default --description &quot;Service Project&quot; service</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>创建（non-admin）project <code>myproject</code>，user <code>myuser</code> 和 role <code>myrole</code>，为 <code>myproject</code> 和 <code>myuser</code> 添加角色<code>myrole</code></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openstack project create --domain default --description &quot;Demo Project&quot; myproject</span><br><span class=\"line\">openstack user create --domain default --password-prompt myuser</span><br><span class=\"line\">openstack role create myrole</span><br><span class=\"line\">openstack role add --project myproject --user myuser myrole</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>验证</p>\n<ul>\n<li>取消临时环境变量OS_AUTH_URL和OS_PASSWORD：</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source ~/.admin-openrc</span><br><span class=\"line\">unset OS_AUTH_URL OS_PASSWORD</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>为admin用户请求token：</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openstack --os-auth-url http://controller:5000/v3 \\</span><br><span class=\"line\">--os-project-domain-name Default --os-user-domain-name Default \\</span><br><span class=\"line\">--os-project-name admin --os-username admin token issue</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>为myuser用户请求token：</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openstack --os-auth-url http://controller:5000/v3 \\</span><br><span class=\"line\">--os-project-domain-name Default --os-user-domain-name Default \\</span><br><span class=\"line\">--os-project-name myproject --os-username myuser token issue</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"Glance\"><a href=\"#Glance\" class=\"headerlink\" title=\"Glance\"></a>Glance</h4><p>Glance是OpenStack提供的镜像服务，负责虚拟机、裸机镜像的上传与下载，必须安装。</p>\n<p><strong>Controller节点</strong>：</p>\n<ol>\n<li><p>创建 glance 数据库并授权</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql <span class=\"operator\">-</span>u root <span class=\"operator\">-</span>p</span><br><span class=\"line\"></span><br><span class=\"line\">MariaDB [(<span class=\"keyword\">none</span>)]<span class=\"operator\">&gt;</span> <span class=\"keyword\">CREATE</span> DATABASE glance;</span><br><span class=\"line\">MariaDB [(<span class=\"keyword\">none</span>)]<span class=\"operator\">&gt;</span> <span class=\"keyword\">GRANT</span> <span class=\"keyword\">ALL</span> PRIVILEGES <span class=\"keyword\">ON</span> glance.<span class=\"operator\">*</span> <span class=\"keyword\">TO</span> <span class=\"string\">&#x27;glance&#x27;</span>@<span class=\"string\">&#x27;localhost&#x27;</span> \\</span><br><span class=\"line\">IDENTIFIED <span class=\"keyword\">BY</span> <span class=\"string\">&#x27;GLANCE_DBPASS&#x27;</span>;</span><br><span class=\"line\">MariaDB [(<span class=\"keyword\">none</span>)]<span class=\"operator\">&gt;</span> <span class=\"keyword\">GRANT</span> <span class=\"keyword\">ALL</span> PRIVILEGES <span class=\"keyword\">ON</span> glance.<span class=\"operator\">*</span> <span class=\"keyword\">TO</span> <span class=\"string\">&#x27;glance&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span> \\</span><br><span class=\"line\">IDENTIFIED <span class=\"keyword\">BY</span> <span class=\"string\">&#x27;GLANCE_DBPASS&#x27;</span>;</span><br><span class=\"line\">MariaDB [(<span class=\"keyword\">none</span>)]<span class=\"operator\">&gt;</span> exit</span><br></pre></td></tr></table></figure>\n\n<p> <em><strong>注意:</strong></em></p>\n<p> <strong>替换 <code>GLANCE_DBPASS</code>，为 glance 数据库设置密码</strong></p>\n</li>\n<li><p>初始化 glance 资源对象</p>\n<ul>\n<li>导入环境变量</li>\n</ul>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source ~/.admin-openrc</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>创建用户时，命令行会提示输入密码，请输入自定义的密码，下文涉及到<code>GLANCE_PASS</code>的地方替换成该密码即可。</li>\n</ul>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openstack user create --domain default --password-prompt glance</span><br><span class=\"line\">User Password:</span><br><span class=\"line\">Repeat User Password:</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>添加glance用户到service project并指定admin角色：</li>\n</ul>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openstack role add --project service --user glance admin</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>创建glance服务实体：</li>\n</ul>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openstack service create --name glance --description &quot;OpenStack Image&quot; image</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>创建glance API服务：</li>\n</ul>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openstack endpoint create --region RegionOne image public http://controller:9292</span><br><span class=\"line\">openstack endpoint create --region RegionOne image internal http://controller:9292</span><br><span class=\"line\">openstack endpoint create --region RegionOne image admin http://controller:9292</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装软件包</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dnf install openstack-glance</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改 glance 配置文件</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/glance/glance-api.conf</span><br><span class=\"line\"></span><br><span class=\"line\">[database]</span><br><span class=\"line\">connection = mysql+pymysql://glance:GLANCE_DBPASS@controller/glance</span><br><span class=\"line\"></span><br><span class=\"line\">[keystone_authtoken]</span><br><span class=\"line\">www_authenticate_uri  = http://controller:5000</span><br><span class=\"line\">auth_url = http://controller:5000</span><br><span class=\"line\">memcached_servers = controller:11211</span><br><span class=\"line\">auth_type = password</span><br><span class=\"line\">project_domain_name = Default</span><br><span class=\"line\">user_domain_name = Default</span><br><span class=\"line\">project_name = service</span><br><span class=\"line\">username = glance</span><br><span class=\"line\">password = GLANCE_PASS</span><br><span class=\"line\"></span><br><span class=\"line\">[paste_deploy]</span><br><span class=\"line\">flavor = keystone</span><br><span class=\"line\"></span><br><span class=\"line\">[glance_store]</span><br><span class=\"line\">stores = file,http</span><br><span class=\"line\">default_store = file</span><br><span class=\"line\">filesystem_store_datadir = /var/lib/glance/images/</span><br></pre></td></tr></table></figure>\n\n<p> <em><strong>解释:</strong></em></p>\n<p> [database]部分，配置数据库入口</p>\n<p> [keystone_authtoken] [paste_deploy]部分，配置身份认证服务入口</p>\n<p> [glance_store]部分，配置本地文件系统存储和镜像文件的位置</p>\n</li>\n<li><p>同步数据库</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">su -s /bin/sh -c &quot;glance-manage db_sync&quot; glance</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动服务：</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl enable openstack-glance-api.service</span><br><span class=\"line\">systemctl start openstack-glance-api.service</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>验证</p>\n<ul>\n<li>导入环境变量</li>\n</ul>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source ~/.admin-openrcu</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>下载镜像</li>\n</ul>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x86镜像下载：</span><br><span class=\"line\">wget http://download.cirros-cloud.net/0.4.0/cirros-0.4.0-x86_64-disk.img</span><br><span class=\"line\"></span><br><span class=\"line\">arm镜像下载：</span><br><span class=\"line\">wget http://download.cirros-cloud.net/0.4.0/cirros-0.4.0-aarch64-disk.img</span><br></pre></td></tr></table></figure>\n\n<p> <em><strong>注意</strong></em></p>\n<p> <strong>如果您使用的环境是鲲鹏架构，请下载aarch64版本的镜像；已对镜像cirros-0.5.2-aarch64-disk.img进行测试。</strong></p>\n<ul>\n<li>向Image服务上传镜像：</li>\n</ul>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openstack image create --disk-format qcow2 --container-format bare \\</span><br><span class=\"line\">                    --file cirros-0.4.0-x86_64-disk.img --public cirros</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>确认镜像上传并验证属性：</li>\n</ul>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openstack image list</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"Placement\"><a href=\"#Placement\" class=\"headerlink\" title=\"Placement\"></a>Placement</h4><p>Placement是OpenStack提供的资源调度组件，一般不面向用户，由Nova等组件调用，安装在控制节点。</p>\n<p>安装、配置Placement服务前，需要先创建相应的数据库、服务凭证和API endpoints。</p>\n<ol>\n<li><p>创建数据库</p>\n<ul>\n<li>使用root用户访问数据库服务：</li>\n</ul>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -u root -p</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>创建placement数据库：</li>\n</ul>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MariaDB [(<span class=\"keyword\">none</span>)]<span class=\"operator\">&gt;</span> <span class=\"keyword\">CREATE</span> DATABASE placement;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>授权数据库访问：</li>\n</ul>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MariaDB [(<span class=\"keyword\">none</span>)]<span class=\"operator\">&gt;</span> <span class=\"keyword\">GRANT</span> <span class=\"keyword\">ALL</span> PRIVILEGES <span class=\"keyword\">ON</span> placement.<span class=\"operator\">*</span> <span class=\"keyword\">TO</span> <span class=\"string\">&#x27;placement&#x27;</span>@<span class=\"string\">&#x27;localhost&#x27;</span> \\</span><br><span class=\"line\">    IDENTIFIED <span class=\"keyword\">BY</span> <span class=\"string\">&#x27;PLACEMENT_DBPASS&#x27;</span>;</span><br><span class=\"line\">MariaDB [(<span class=\"keyword\">none</span>)]<span class=\"operator\">&gt;</span> <span class=\"keyword\">GRANT</span> <span class=\"keyword\">ALL</span> PRIVILEGES <span class=\"keyword\">ON</span> placement.<span class=\"operator\">*</span> <span class=\"keyword\">TO</span> <span class=\"string\">&#x27;placement&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span> \\</span><br><span class=\"line\">    IDENTIFIED <span class=\"keyword\">BY</span> <span class=\"string\">&#x27;PLACEMENT_DBPASS&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p> 替换<code>PLACEMENT_DBPASS</code>为placement数据库访问密码。</p>\n<ul>\n<li>退出数据库访问客户端：</li>\n</ul>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exit</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置用户和Endpoints</p>\n<ul>\n<li>source admin凭证，以获取admin命令行权限：</li>\n</ul>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source ~/.admin-openrc</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>创建placement用户并设置用户密码：</li>\n</ul>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openstack user create --domain default --password-prompt placement</span><br><span class=\"line\"></span><br><span class=\"line\">User Password:</span><br><span class=\"line\">Repeat User Password:</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>添加placement用户到service project并指定admin角色：</li>\n</ul>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openstack role add --project service --user placement admin</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>创建placement服务实体：</li>\n</ul>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openstack service create --name placement \\</span><br><span class=\"line\">    --description &quot;Placement API&quot; placement</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>创建Placement API服务endpoints：</li>\n</ul>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openstack endpoint create --region RegionOne \\</span><br><span class=\"line\">    placement public http://controller:8778</span><br><span class=\"line\">openstack endpoint create --region RegionOne \\</span><br><span class=\"line\">    placement internal http://controller:8778</span><br><span class=\"line\">openstack endpoint create --region RegionOne \\</span><br><span class=\"line\">    placement admin http://controller:8778</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装及配置组件</p>\n<ul>\n<li>安装软件包：</li>\n</ul>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dnf install openstack-placement-api</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>编辑<code>/etc/placement/placement.conf</code>配置文件，完成如下操作：</p>\n<ul>\n<li>在<code>[placement_database]</code>部分，配置数据库入口：</li>\n</ul>\n  <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[placement_database]</span></span><br><span class=\"line\"><span class=\"attr\">connection</span> = mysql+pymysql://placement:PLACEMENT_DBPASS@controller/placement</span><br></pre></td></tr></table></figure>\n\n<p>  替换<code>PLACEMENT_DBPASS</code>为placement数据库的密码。</p>\n<ul>\n<li>在<code>[api]</code>和<code>[keystone_authtoken]</code>部分，配置身份认证服务入口：</li>\n</ul>\n  <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[api]</span></span><br><span class=\"line\"><span class=\"attr\">auth_strategy</span> = keystone</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[keystone_authtoken]</span></span><br><span class=\"line\"><span class=\"attr\">auth_url</span> = http://controller:<span class=\"number\">5000</span>/v3</span><br><span class=\"line\"><span class=\"attr\">memcached_servers</span> = controller:<span class=\"number\">11211</span></span><br><span class=\"line\"><span class=\"attr\">auth_type</span> = password</span><br><span class=\"line\"><span class=\"attr\">project_domain_name</span> = Default</span><br><span class=\"line\"><span class=\"attr\">user_domain_name</span> = Default</span><br><span class=\"line\"><span class=\"attr\">project_name</span> = service</span><br><span class=\"line\"><span class=\"attr\">username</span> = placement</span><br><span class=\"line\"><span class=\"attr\">password</span> = PLACEMENT_PASS</span><br></pre></td></tr></table></figure>\n\n<p>  替换<code>PLACEMENT_PASS</code>为placement用户的密码。</p>\n</li>\n<li><p>数据库同步，填充Placement数据库：</p>\n</li>\n</ul>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">su -s /bin/sh -c &quot;placement-manage db sync&quot; placement</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动服务</p>\n<p> 重启httpd服务：</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart httpd</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>验证</p>\n<ul>\n<li>source admin凭证，以获取admin命令行权限</li>\n</ul>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source ~/.admin-openrc</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>执行状态检查：</li>\n</ul>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">placement-status upgrade check</span><br></pre></td></tr></table></figure>\n\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+----------------------------------------------------------------------+</span><br><span class=\"line\">| Upgrade Check Results                                                |</span><br><span class=\"line\">+----------------------------------------------------------------------+</span><br><span class=\"line\">| Check: Missing Root Provider IDs                                     |</span><br><span class=\"line\">| Result: Success                                                      |</span><br><span class=\"line\">| Details: None                                                        |</span><br><span class=\"line\">+----------------------------------------------------------------------+</span><br><span class=\"line\">| Check: Incomplete Consumers                                          |</span><br><span class=\"line\">| Result: Success                                                      |</span><br><span class=\"line\">| Details: None                                                        |</span><br><span class=\"line\">+----------------------------------------------------------------------+</span><br><span class=\"line\">| Check: Policy File JSON to YAML Migration                            |</span><br><span class=\"line\">| Result: Failure                                                      |</span><br><span class=\"line\">| Details: Your policy file is JSON-formatted which is deprecated. You |</span><br><span class=\"line\">|   need to switch to YAML-formatted file. Use the                     |</span><br><span class=\"line\">|   ``oslopolicy-convert-json-to-yaml`` tool to convert the            |</span><br><span class=\"line\">|   existing JSON-formatted files to YAML in a backwards-              |</span><br><span class=\"line\">|   compatible manner: https://docs.openstack.org/oslo.policy/         |</span><br><span class=\"line\">|   latest/cli/oslopolicy-convert-json-to-yaml.html.                   |</span><br><span class=\"line\">+----------------------------------------------------------------------+</span><br></pre></td></tr></table></figure>\n\n<p> 这里可以看到<code>Policy File JSON to YAML Migration</code>的结果为Failure。这是因为在Placement中，JSON格式的policy文件从Wallaby版本开始已处于<code>deprecated</code>状态。可以参考提示，使用<a href=\"https://docs.openstack.org/oslo.policy/latest/cli/oslopolicy-convert-json-to-yaml.html\">oslopolicy-convert-json-to-yaml</a>工具  将现有的JSON格式policy文件转化为YAML格式。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">oslopolicy-convert-json-to-yaml  --namespace placement \\</span><br><span class=\"line\">    --policy-file /etc/placement/policy.json \\</span><br><span class=\"line\">    --output-file /etc/placement/policy.yaml</span><br><span class=\"line\">mv /etc/placement/policy.json&#123;,.bak&#125;</span><br></pre></td></tr></table></figure>\n\n<p> 注：当前环境中此问题可忽略，不影响运行。</p>\n<ul>\n<li><p>针对placement API运行命令：</p>\n<ul>\n<li>安装osc-placement插件：</li>\n</ul>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dnf install python3-osc-placement</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>列出可用的资源类别及特性：</li>\n</ul>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openstack --os-placement-api-version 1.2 resource class list --sort-column name</span><br><span class=\"line\">+----------------------------+</span><br><span class=\"line\">| name                       |</span><br><span class=\"line\">+----------------------------+</span><br><span class=\"line\">| DISK_GB                    |</span><br><span class=\"line\">| FPGA                       |</span><br><span class=\"line\">| ...                        |</span><br><span class=\"line\"></span><br><span class=\"line\">openstack --os-placement-api-version 1.6 trait list --sort-column name</span><br><span class=\"line\">+---------------------------------------+</span><br><span class=\"line\">| name                                  |</span><br><span class=\"line\">+---------------------------------------+</span><br><span class=\"line\">| COMPUTE_ACCELERATORS                  |</span><br><span class=\"line\">| COMPUTE_ARCH_AARCH64                  |</span><br><span class=\"line\">| ...                                   |</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ol>\n<h4 id=\"Nova\"><a href=\"#Nova\" class=\"headerlink\" title=\"Nova\"></a>Nova</h4><p>Nova是OpenStack的计算服务，负责虚拟机的创建、发放等功能。</p>\n<p><strong>Controller节点</strong></p>\n<p>在控制节点执行以下操作。</p>\n<ol>\n<li><p>创建数据库</p>\n<ul>\n<li>使用root用户访问数据库服务：</li>\n</ul>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -u root -p</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>创建<code>nova_api</code>、<code>nova</code>和<code>nova_cell0</code>数据库：</li>\n</ul>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MariaDB [(<span class=\"keyword\">none</span>)]<span class=\"operator\">&gt;</span> <span class=\"keyword\">CREATE</span> DATABASE nova_api;</span><br><span class=\"line\">MariaDB [(<span class=\"keyword\">none</span>)]<span class=\"operator\">&gt;</span> <span class=\"keyword\">CREATE</span> DATABASE nova;</span><br><span class=\"line\">MariaDB [(<span class=\"keyword\">none</span>)]<span class=\"operator\">&gt;</span> <span class=\"keyword\">CREATE</span> DATABASE nova_cell0;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>授权数据库访问：</li>\n</ul>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MariaDB [(<span class=\"keyword\">none</span>)]<span class=\"operator\">&gt;</span> <span class=\"keyword\">GRANT</span> <span class=\"keyword\">ALL</span> PRIVILEGES <span class=\"keyword\">ON</span> nova_api.<span class=\"operator\">*</span> <span class=\"keyword\">TO</span> <span class=\"string\">&#x27;nova&#x27;</span>@<span class=\"string\">&#x27;localhost&#x27;</span> \\</span><br><span class=\"line\">    IDENTIFIED <span class=\"keyword\">BY</span> <span class=\"string\">&#x27;NOVA_DBPASS&#x27;</span>;</span><br><span class=\"line\">MariaDB [(<span class=\"keyword\">none</span>)]<span class=\"operator\">&gt;</span> <span class=\"keyword\">GRANT</span> <span class=\"keyword\">ALL</span> PRIVILEGES <span class=\"keyword\">ON</span> nova_api.<span class=\"operator\">*</span> <span class=\"keyword\">TO</span> <span class=\"string\">&#x27;nova&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span> \\</span><br><span class=\"line\">    IDENTIFIED <span class=\"keyword\">BY</span> <span class=\"string\">&#x27;NOVA_DBPASS&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">MariaDB [(<span class=\"keyword\">none</span>)]<span class=\"operator\">&gt;</span> <span class=\"keyword\">GRANT</span> <span class=\"keyword\">ALL</span> PRIVILEGES <span class=\"keyword\">ON</span> nova.<span class=\"operator\">*</span> <span class=\"keyword\">TO</span> <span class=\"string\">&#x27;nova&#x27;</span>@<span class=\"string\">&#x27;localhost&#x27;</span> \\</span><br><span class=\"line\">    IDENTIFIED <span class=\"keyword\">BY</span> <span class=\"string\">&#x27;NOVA_DBPASS&#x27;</span>;</span><br><span class=\"line\">MariaDB [(<span class=\"keyword\">none</span>)]<span class=\"operator\">&gt;</span> <span class=\"keyword\">GRANT</span> <span class=\"keyword\">ALL</span> PRIVILEGES <span class=\"keyword\">ON</span> nova.<span class=\"operator\">*</span> <span class=\"keyword\">TO</span> <span class=\"string\">&#x27;nova&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span> \\</span><br><span class=\"line\">    IDENTIFIED <span class=\"keyword\">BY</span> <span class=\"string\">&#x27;NOVA_DBPASS&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">MariaDB [(<span class=\"keyword\">none</span>)]<span class=\"operator\">&gt;</span> <span class=\"keyword\">GRANT</span> <span class=\"keyword\">ALL</span> PRIVILEGES <span class=\"keyword\">ON</span> nova_cell0.<span class=\"operator\">*</span> <span class=\"keyword\">TO</span> <span class=\"string\">&#x27;nova&#x27;</span>@<span class=\"string\">&#x27;localhost&#x27;</span> \\</span><br><span class=\"line\">    IDENTIFIED <span class=\"keyword\">BY</span> <span class=\"string\">&#x27;NOVA_DBPASS&#x27;</span>;</span><br><span class=\"line\">MariaDB [(<span class=\"keyword\">none</span>)]<span class=\"operator\">&gt;</span> <span class=\"keyword\">GRANT</span> <span class=\"keyword\">ALL</span> PRIVILEGES <span class=\"keyword\">ON</span> nova_cell0.<span class=\"operator\">*</span> <span class=\"keyword\">TO</span> <span class=\"string\">&#x27;nova&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span> \\</span><br><span class=\"line\">    IDENTIFIED <span class=\"keyword\">BY</span> <span class=\"string\">&#x27;NOVA_DBPASS&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p> 替换<code>NOVA_DBPASS</code>为nova相关数据库访问密码。</p>\n<ul>\n<li>退出数据库访问客户端：</li>\n</ul>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exit</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置用户和Endpoints</p>\n<ul>\n<li>source admin凭证，以获取admin命令行权限：</li>\n</ul>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source ~/.admin-openrc</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>创建nova用户并设置用户密码：</li>\n</ul>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openstack user create --domain default --password-prompt nova</span><br><span class=\"line\"></span><br><span class=\"line\">User Password:</span><br><span class=\"line\">Repeat User Password:</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>添加nova用户到service project并指定admin角色：</li>\n</ul>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openstack role add --project service --user nova admin</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>创建nova服务实体：</li>\n</ul>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openstack service create --name nova \\</span><br><span class=\"line\">    --description &quot;OpenStack Compute&quot; compute</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>创建Nova API服务endpoints：</li>\n</ul>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openstack endpoint create --region RegionOne \\</span><br><span class=\"line\">    compute public http://controller:8774/v2.1</span><br><span class=\"line\">openstack endpoint create --region RegionOne \\</span><br><span class=\"line\">    compute internal http://controller:8774/v2.1</span><br><span class=\"line\">openstack endpoint create --region RegionOne \\</span><br><span class=\"line\">    compute admin http://controller:8774/v2.1</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装及配置组件</p>\n<ul>\n<li>安装软件包：</li>\n</ul>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dnf install openstack-nova-api openstack-nova-conductor \\</span><br><span class=\"line\">    openstack-nova-novncproxy openstack-nova-scheduler</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>编辑<code>/etc/nova/nova.conf</code>配置文件，完成如下操作：</p>\n<ul>\n<li>在<code>[default]</code>部分，启用计算和元数据的API，配置RabbitMQ消息队列入口，使用controller节点管理IP配置my_ip，显式定义log_dir：</li>\n</ul>\n  <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[DEFAULT]</span></span><br><span class=\"line\"><span class=\"attr\">enabled_apis</span> = osapi_compute,metadata</span><br><span class=\"line\"><span class=\"attr\">transport_url</span> = rabbit://openstack:RABBIT_PASS@controller:<span class=\"number\">5672</span>/</span><br><span class=\"line\"><span class=\"attr\">my_ip</span> = <span class=\"number\">192.168</span>.<span class=\"number\">0.2</span></span><br><span class=\"line\"><span class=\"attr\">log_dir</span> = /var/log/nova</span><br><span class=\"line\"><span class=\"attr\">state_path</span> = /var/lib/nova</span><br></pre></td></tr></table></figure>\n\n<p>  替换<code>RABBIT_PASS</code>为RabbitMQ中openstack账户的密码。</p>\n<ul>\n<li>在<code>[api_database]</code>和<code>[database]</code>部分，配置数据库入口：</li>\n</ul>\n  <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[api_database]</span></span><br><span class=\"line\"><span class=\"attr\">connection</span> = mysql+pymysql://nova:NOVA_DBPASS@controller/nova_api</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[database]</span></span><br><span class=\"line\"><span class=\"attr\">connection</span> = mysql+pymysql://nova:NOVA_DBPASS@controller/nova</span><br></pre></td></tr></table></figure>\n\n<p>  替换<code>NOVA_DBPASS</code>为nova相关数据库的密码。</p>\n<ul>\n<li>在<code>[api]</code>和<code>[keystone_authtoken]</code>部分，配置身份认证服务入口：</li>\n</ul>\n  <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[api]</span></span><br><span class=\"line\"><span class=\"attr\">auth_strategy</span> = keystone</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[keystone_authtoken]</span></span><br><span class=\"line\"><span class=\"attr\">auth_url</span> = http://controller:<span class=\"number\">5000</span>/v3</span><br><span class=\"line\"><span class=\"attr\">memcached_servers</span> = controller:<span class=\"number\">11211</span></span><br><span class=\"line\"><span class=\"attr\">auth_type</span> = password</span><br><span class=\"line\"><span class=\"attr\">project_domain_name</span> = Default</span><br><span class=\"line\"><span class=\"attr\">user_domain_name</span> = Default</span><br><span class=\"line\"><span class=\"attr\">project_name</span> = service</span><br><span class=\"line\"><span class=\"attr\">username</span> = nova</span><br><span class=\"line\"><span class=\"attr\">password</span> = NOVA_PASS</span><br></pre></td></tr></table></figure>\n\n<p>  替换<code>NOVA_PASS</code>为nova用户的密码。</p>\n<ul>\n<li>在<code>[vnc]</code>部分，启用并配置远程控制台入口：</li>\n</ul>\n  <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[vnc]</span></span><br><span class=\"line\"><span class=\"attr\">enabled</span> = <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">server_listen</span> = <span class=\"variable\">$my_ip</span></span><br><span class=\"line\"><span class=\"attr\">server_proxyclient_address</span> = <span class=\"variable\">$my_ip</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在<code>[glance]</code>部分，配置镜像服务API的地址：</li>\n</ul>\n  <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[glance]</span></span><br><span class=\"line\"><span class=\"attr\">api_servers</span> = http://controller:<span class=\"number\">9292</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在<code>[oslo_concurrency]</code>部分，配置lock path：</li>\n</ul>\n  <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[oslo_concurrency]</span></span><br><span class=\"line\"><span class=\"attr\">lock_path</span> = /var/lib/nova/tmp</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>[placement]部分，配置placement服务的入口：</li>\n</ul>\n  <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[placement]</span></span><br><span class=\"line\"><span class=\"attr\">region_name</span> = RegionOne</span><br><span class=\"line\"><span class=\"attr\">project_domain_name</span> = Default</span><br><span class=\"line\"><span class=\"attr\">project_name</span> = service</span><br><span class=\"line\"><span class=\"attr\">auth_type</span> = password</span><br><span class=\"line\"><span class=\"attr\">user_domain_name</span> = Default</span><br><span class=\"line\"><span class=\"attr\">auth_url</span> = http://controller:<span class=\"number\">5000</span>/v3</span><br><span class=\"line\"><span class=\"attr\">username</span> = placement</span><br><span class=\"line\"><span class=\"attr\">password</span> = PLACEMENT_PASS</span><br></pre></td></tr></table></figure>\n\n<p>  替换<code>PLACEMENT_PASS</code>为placement用户的密码。</p>\n</li>\n<li><p>数据库同步：</p>\n<ul>\n<li>同步nova-api数据库：</li>\n</ul>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">su -s /bin/sh -c &quot;nova-manage api_db sync&quot; nova</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>注册cell0数据库：</li>\n</ul>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">su -s /bin/sh -c &quot;nova-manage cell_v2 map_cell0&quot; nova</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>创建cell1 cell：</li>\n</ul>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">su -s /bin/sh -c &quot;nova-manage cell_v2 create_cell --name=cell1 --verbose&quot; nova</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>同步nova数据库：</li>\n</ul>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">su -s /bin/sh -c &quot;nova-manage db sync&quot; nova</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>验证cell0和cell1注册正确：</li>\n</ul>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">su -s /bin/sh -c &quot;nova-manage cell_v2 list_cells&quot; nova</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>启动服务</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl enable \\</span><br><span class=\"line\">  openstack-nova-api.service \\</span><br><span class=\"line\">  openstack-nova-scheduler.service \\</span><br><span class=\"line\">  openstack-nova-conductor.service \\</span><br><span class=\"line\">  openstack-nova-novncproxy.service</span><br><span class=\"line\"></span><br><span class=\"line\">systemctl start \\</span><br><span class=\"line\">  openstack-nova-api.service \\</span><br><span class=\"line\">  openstack-nova-scheduler.service \\</span><br><span class=\"line\">  openstack-nova-conductor.service \\</span><br><span class=\"line\">  openstack-nova-novncproxy.service</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><strong>Compute节点</strong></p>\n<p>在计算节点执行以下操作。</p>\n<ol>\n<li><p>安装软件包</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dnf install openstack-nova-compute</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>编辑<code>/etc/nova/nova.conf</code>配置文件</p>\n<ul>\n<li>在<code>[default]</code>部分，启用计算和元数据的API，配置RabbitMQ消息队列入口，使用Compute节点管理IP配置my_ip，显式定义compute_driver、instances_path、log_dir：</li>\n</ul>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[DEFAULT]</span></span><br><span class=\"line\"><span class=\"attr\">enabled_apis</span> = osapi_compute,metadata</span><br><span class=\"line\"><span class=\"attr\">transport_url</span> = rabbit://openstack:RABBIT_PASS@controller:<span class=\"number\">5672</span>/</span><br><span class=\"line\"><span class=\"attr\">my_ip</span> = <span class=\"number\">192.168</span>.<span class=\"number\">0.3</span></span><br><span class=\"line\"><span class=\"attr\">compute_driver</span> = libvirt.LibvirtDriver</span><br><span class=\"line\"><span class=\"attr\">instances_path</span> = /var/lib/nova/instances</span><br><span class=\"line\"><span class=\"attr\">log_dir</span> = /var/log/nova</span><br></pre></td></tr></table></figure>\n\n<p> 替换<code>RABBIT_PASS</code>为RabbitMQ中openstack账户的密码。</p>\n<ul>\n<li>在<code>[api]</code>和<code>[keystone_authtoken]</code>部分，配置身份认证服务入口：</li>\n</ul>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[api]</span></span><br><span class=\"line\"><span class=\"attr\">auth_strategy</span> = keystone</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[keystone_authtoken]</span></span><br><span class=\"line\"><span class=\"attr\">auth_url</span> = http://controller:<span class=\"number\">5000</span>/v3</span><br><span class=\"line\"><span class=\"attr\">memcached_servers</span> = controller:<span class=\"number\">11211</span></span><br><span class=\"line\"><span class=\"attr\">auth_type</span> = password</span><br><span class=\"line\"><span class=\"attr\">project_domain_name</span> = Default</span><br><span class=\"line\"><span class=\"attr\">user_domain_name</span> = Default</span><br><span class=\"line\"><span class=\"attr\">project_name</span> = service</span><br><span class=\"line\"><span class=\"attr\">username</span> = nova</span><br><span class=\"line\"><span class=\"attr\">password</span> = NOVA_PASS</span><br></pre></td></tr></table></figure>\n\n<p> 替换<code>NOVA_PASS</code>为nova用户的密码。</p>\n<ul>\n<li>在<code>[vnc]</code>部分，启用并配置远程控制台入口：</li>\n</ul>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[vnc]</span></span><br><span class=\"line\"><span class=\"attr\">enabled</span> = <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">server_listen</span> = <span class=\"variable\">$my_ip</span></span><br><span class=\"line\"><span class=\"attr\">server_proxyclient_address</span> = <span class=\"variable\">$my_ip</span></span><br><span class=\"line\"><span class=\"attr\">novncproxy_base_url</span> = http://controller:<span class=\"number\">6080</span>/vnc_auto.html</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在<code>[glance]</code>部分，配置镜像服务API的地址：</li>\n</ul>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[glance]</span></span><br><span class=\"line\"><span class=\"attr\">api_servers</span> = http://controller:<span class=\"number\">9292</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在<code>[oslo_concurrency]</code>部分，配置lock path：</li>\n</ul>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[oslo_concurrency]</span></span><br><span class=\"line\"><span class=\"attr\">lock_path</span> = /var/lib/nova/tmp</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>[placement]部分，配置placement服务的入口：</li>\n</ul>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[placement]</span></span><br><span class=\"line\"><span class=\"attr\">region_name</span> = RegionOne</span><br><span class=\"line\"><span class=\"attr\">project_domain_name</span> = Default</span><br><span class=\"line\"><span class=\"attr\">project_name</span> = service</span><br><span class=\"line\"><span class=\"attr\">auth_type</span> = password</span><br><span class=\"line\"><span class=\"attr\">user_domain_name</span> = Default</span><br><span class=\"line\"><span class=\"attr\">auth_url</span> = http://controller:<span class=\"number\">5000</span>/v3</span><br><span class=\"line\"><span class=\"attr\">username</span> = placement</span><br><span class=\"line\"><span class=\"attr\">password</span> = PLACEMENT_PASS</span><br></pre></td></tr></table></figure>\n\n<p> 替换<code>PLACEMENT_PASS</code>为placement用户的密码。</p>\n</li>\n<li><p>确认计算节点是否支持虚拟机硬件加速（x86_64）</p>\n<p> 处理器为x86_64架构时，可通过运行如下命令确认是否支持硬件加速：</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">egrep -c &#x27;(vmx|svm)&#x27; /proc/cpuinfo</span><br></pre></td></tr></table></figure>\n\n<p> 如果返回值为0则不支持硬件加速，需要配置libvirt使用QEMU而不是默认的KVM。编辑<code>/etc/nova/nova.conf</code>的<code>[libvirt]</code>部分：</p>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[libvirt]</span></span><br><span class=\"line\"><span class=\"attr\">virt_type</span> = qemu</span><br></pre></td></tr></table></figure>\n\n<p> 如果返回值为1或更大的值，则支持硬件加速，不需要进行额外的配置。</p>\n</li>\n<li><p>确认计算节点是否支持虚拟机硬件加速（arm64）</p>\n<p> 处理器为arm64架构时，可通过运行如下命令确认是否支持硬件加速：</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">virt-host-validate</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">该命令由libvirt提供，此时libvirt应已作为openstack-nova-compute依赖被安装，环境中已有此命令</span></span><br></pre></td></tr></table></figure>\n\n<p> 显示FAIL时，表示不支持硬件加速，需要配置libvirt使用QEMU而不是默认的KVM。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">QEMU: Checking if device /dev/kvm exists: FAIL (Check that CPU and firmware supports virtualization and kvm module is loaded)</span><br></pre></td></tr></table></figure>\n\n<p> 编辑<code>/etc/nova/nova.conf</code>的<code>[libvirt]</code>部分：</p>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[libvirt]</span></span><br><span class=\"line\"><span class=\"attr\">virt_type</span> = qemu</span><br></pre></td></tr></table></figure>\n\n<p> 显示PASS时，表示支持硬件加速，不需要进行额外的配置。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">QEMU: Checking if device /dev/kvm exists: PASS</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置qemu（仅arm64）</p>\n<p> 仅当处理器为arm64架构时需要执行此操作。</p>\n<ul>\n<li>编辑<code>/etc/libvirt/qemu.conf</code>:</li>\n</ul>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">nvram</span> = [<span class=\"string\">&quot;/usr/share/AAVMF/AAVMF_CODE.fd: \\</span></span><br><span class=\"line\"><span class=\"string\">            /usr/share/AAVMF/AAVMF_VARS.fd&quot;</span>, \\</span><br><span class=\"line\">            <span class=\"string\">&quot;/usr/share/edk2/aarch64/QEMU_EFI-pflash.raw: \\</span></span><br><span class=\"line\"><span class=\"string\">            /usr/share/edk2/aarch64/vars-template-pflash.raw&quot;</span>]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>编辑<code>/etc/qemu/firmware/edk2-aarch64.json</code></li>\n</ul>\n <figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;description&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;UEFI firmware for ARM64 virtual machines&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;interface-types&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">        <span class=\"string\">&quot;uefi&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;mapping&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;device&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;flash&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;executable&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;filename&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;/usr/share/edk2/aarch64/QEMU_EFI-pflash.raw&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;format&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;raw&quot;</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;nvram-template&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;filename&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;/usr/share/edk2/aarch64/vars-template-pflash.raw&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;format&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;raw&quot;</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;targets&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;architecture&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;aarch64&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;machines&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">                <span class=\"string\">&quot;virt-*&quot;</span></span><br><span class=\"line\">            <span class=\"punctuation\">]</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;features&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;tags&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动服务</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl enable libvirtd.service openstack-nova-compute.service</span><br><span class=\"line\">systemctl start libvirtd.service openstack-nova-compute.service</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><strong>Controller节点</strong></p>\n<p>在控制节点执行以下操作。</p>\n<ol>\n<li><p>添加计算节点到openstack集群</p>\n<ul>\n<li>source admin凭证，以获取admin命令行权限：</li>\n</ul>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source ~/.admin-openrc</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>确认nova-compute服务已识别到数据库中：</li>\n</ul>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openstack compute service list --service nova-compute</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>发现计算节点，将计算节点添加到cell数据库：</li>\n</ul>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">su -s /bin/sh -c &quot;nova-manage cell_v2 discover_hosts --verbose&quot; nova</span><br></pre></td></tr></table></figure>\n\n<p> 结果如下：</p>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Modules with known eventlet monkey patching issues were imported prior to eventlet monkey patching: urllib3. This warning can usually be    ignored if the caller is only importing and not executing nova code.</span><br><span class=\"line\">Found 2 cell mappings.</span><br><span class=\"line\">Skipping cell0 since it does not contain hosts.</span><br><span class=\"line\">Getting computes from cell &#x27;cell1&#x27;: 6dae034e-b2d9-4a6c-b6f0-60ada6a6ddc2</span><br><span class=\"line\">Checking host mapping for compute host &#x27;compute&#x27;: 6286a86f-09d7-4786-9137-1185654c9e2e</span><br><span class=\"line\">Creating host mapping for compute host &#x27;compute&#x27;: 6286a86f-09d7-4786-9137-1185654c9e2e</span><br><span class=\"line\">Found 1 unmapped computes in cell: 6dae034e-b2d9-4a6c-b6f0-60ada6a6ddc2</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>验证</p>\n<ul>\n<li>列出服务组件，验证每个流程都成功启动和注册：</li>\n</ul>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openstack compute service list</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>列出身份服务中的API端点，验证与身份服务的连接：</li>\n</ul>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openstack catalog list</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>列出镜像服务中的镜像，验证与镜像服务的连接：</li>\n</ul>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openstack image list</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>检查cells是否运作成功，以及其他必要条件是否已具备。</li>\n</ul>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nova-status upgrade check</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"Neutron\"><a href=\"#Neutron\" class=\"headerlink\" title=\"Neutron\"></a>Neutron</h4><p>Neutron是OpenStack的网络服务，提供虚拟交换机、IP路由、DHCP等功能。</p>\n<p><strong>Controller节点</strong></p>\n<ol>\n<li><p>创建数据库、服务凭证和 API 服务端点</p>\n<ul>\n<li>创建数据库：</li>\n</ul>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql <span class=\"operator\">-</span>u root <span class=\"operator\">-</span>p</span><br><span class=\"line\"></span><br><span class=\"line\">MariaDB [(<span class=\"keyword\">none</span>)]<span class=\"operator\">&gt;</span> <span class=\"keyword\">CREATE</span> DATABASE neutron;</span><br><span class=\"line\">MariaDB [(<span class=\"keyword\">none</span>)]<span class=\"operator\">&gt;</span> <span class=\"keyword\">GRANT</span> <span class=\"keyword\">ALL</span> PRIVILEGES <span class=\"keyword\">ON</span> neutron.<span class=\"operator\">*</span> <span class=\"keyword\">TO</span> <span class=\"string\">&#x27;neutron&#x27;</span>@<span class=\"string\">&#x27;localhost&#x27;</span> IDENTIFIED <span class=\"keyword\">BY</span> <span class=\"string\">&#x27;NEUTRON_DBPASS&#x27;</span>;</span><br><span class=\"line\">MariaDB [(<span class=\"keyword\">none</span>)]<span class=\"operator\">&gt;</span> <span class=\"keyword\">GRANT</span> <span class=\"keyword\">ALL</span> PRIVILEGES <span class=\"keyword\">ON</span> neutron.<span class=\"operator\">*</span> <span class=\"keyword\">TO</span> <span class=\"string\">&#x27;neutron&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span> IDENTIFIED <span class=\"keyword\">BY</span> <span class=\"string\">&#x27;NEUTRON_DBPASS&#x27;</span>;</span><br><span class=\"line\">MariaDB [(<span class=\"keyword\">none</span>)]<span class=\"operator\">&gt;</span> exit;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>创建用户和服务，并记住创建neutron用户时输入的密码，用于配置NEUTRON_PASS：</li>\n</ul>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source ~/.admin-openrc</span><br><span class=\"line\">openstack user create --domain default --password-prompt neutron</span><br><span class=\"line\">openstack role add --project service --user neutron admin</span><br><span class=\"line\">openstack service create --name neutron --description &quot;OpenStack Networking&quot; network</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>部署 Neutron API 服务：</li>\n</ul>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openstack endpoint create --region RegionOne network public http://controller:9696</span><br><span class=\"line\">openstack endpoint create --region RegionOne network internal http://controller:9696</span><br><span class=\"line\">openstack endpoint create --region RegionOne network admin http://controller:9696</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装软件包</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dnf install -y openstack-neutron openstack-neutron-linuxbridge ebtables ipset openstack-neutron-ml2</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置Neutron</p>\n<ul>\n<li>修改&#x2F;etc&#x2F;neutron&#x2F;neutron.conf</li>\n</ul>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[database]</span></span><br><span class=\"line\"><span class=\"attr\">connection</span> = mysql+pymysql://neutron:NEUTRON_DBPASS@controller/neutron</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[DEFAULT]</span></span><br><span class=\"line\"><span class=\"attr\">core_plugin</span> = ml2</span><br><span class=\"line\"><span class=\"attr\">service_plugins</span> = router</span><br><span class=\"line\"><span class=\"attr\">allow_overlapping_ips</span> = <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">transport_url</span> = rabbit://openstack:RABBIT_PASS@controller</span><br><span class=\"line\"><span class=\"attr\">auth_strategy</span> = keystone</span><br><span class=\"line\"><span class=\"attr\">notify_nova_on_port_status_changes</span> = <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">notify_nova_on_port_data_changes</span> = <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[keystone_authtoken]</span></span><br><span class=\"line\"><span class=\"attr\">www_authenticate_uri</span> = http://controller:<span class=\"number\">5000</span></span><br><span class=\"line\"><span class=\"attr\">auth_url</span> = http://controller:<span class=\"number\">5000</span></span><br><span class=\"line\"><span class=\"attr\">memcached_servers</span> = controller:<span class=\"number\">11211</span></span><br><span class=\"line\"><span class=\"attr\">auth_type</span> = password</span><br><span class=\"line\"><span class=\"attr\">project_domain_name</span> = Default</span><br><span class=\"line\"><span class=\"attr\">user_domain_name</span> = Default</span><br><span class=\"line\"><span class=\"attr\">project_name</span> = service</span><br><span class=\"line\"><span class=\"attr\">username</span> = neutron</span><br><span class=\"line\"><span class=\"attr\">password</span> = NEUTRON_PASS</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[nova]</span></span><br><span class=\"line\"><span class=\"attr\">auth_url</span> = http://controller:<span class=\"number\">5000</span></span><br><span class=\"line\"><span class=\"attr\">auth_type</span> = password</span><br><span class=\"line\"><span class=\"attr\">project_domain_name</span> = Default</span><br><span class=\"line\"><span class=\"attr\">user_domain_name</span> = Default</span><br><span class=\"line\"><span class=\"attr\">region_name</span> = RegionOne</span><br><span class=\"line\"><span class=\"attr\">project_name</span> = service</span><br><span class=\"line\"><span class=\"attr\">username</span> = nova</span><br><span class=\"line\"><span class=\"attr\">password</span> = NOVA_PASS</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[oslo_concurrency]</span></span><br><span class=\"line\"><span class=\"attr\">lock_path</span> = /var/lib/neutron/tmp</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[experimental]</span></span><br><span class=\"line\"><span class=\"attr\">linuxbridge</span> = <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>配置ML2，ML2具体配置可以根据用户需求自行修改，本文使用的是provider network + linuxbridge**</p>\n</li>\n<li><p>修改&#x2F;etc&#x2F;neutron&#x2F;plugins&#x2F;ml2&#x2F;ml2_conf.ini</p>\n</li>\n</ul>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[ml2]</span><br><span class=\"line\">type_drivers = flat,vlan,vxlan</span><br><span class=\"line\">tenant_network_types = vxlan</span><br><span class=\"line\">mechanism_drivers = linuxbridge,l2population</span><br><span class=\"line\">extension_drivers = port_security</span><br><span class=\"line\"></span><br><span class=\"line\">[ml2_type_flat]</span><br><span class=\"line\">flat_networks = provider</span><br><span class=\"line\"></span><br><span class=\"line\">[ml2_type_vxlan]</span><br><span class=\"line\">vni_ranges = 1:1000</span><br><span class=\"line\"></span><br><span class=\"line\">[securitygroup]</span><br><span class=\"line\">enable_ipset = true</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>修改&#x2F;etc&#x2F;neutron&#x2F;plugins&#x2F;ml2&#x2F;linuxbridge_agent.ini</li>\n</ul>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[linux_bridge]</span></span><br><span class=\"line\"><span class=\"attr\">physical_interface_mappings</span> = provider:PROVIDER_INTERFACE_NAME</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[vxlan]</span></span><br><span class=\"line\"><span class=\"attr\">enable_vxlan</span> = <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">local_ip</span> = OVERLAY_INTERFACE_IP_ADDRESS</span><br><span class=\"line\"><span class=\"attr\">l2_population</span> = <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[securitygroup]</span></span><br><span class=\"line\"><span class=\"attr\">enable_security_group</span> = <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">firewall_driver</span> = neutron.agent.linux.iptables_firewall.IptablesFirewallDriver</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>配置Layer-3代理</p>\n</li>\n<li><p>修改&#x2F;etc&#x2F;neutron&#x2F;l3_agent.ini</p>\n</li>\n</ul>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[DEFAULT]</span><br><span class=\"line\">interface_driver = linuxbridge</span><br></pre></td></tr></table></figure>\n\n<p> 配置DHCP代理<br> 修改&#x2F;etc&#x2F;neutron&#x2F;dhcp_agent.ini</p>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[DEFAULT]</span></span><br><span class=\"line\"><span class=\"attr\">interface_driver</span> = linuxbridge</span><br><span class=\"line\"><span class=\"attr\">dhcp_driver</span> = neutron.agent.linux.dhcp.Dnsmasq</span><br><span class=\"line\"><span class=\"attr\">enable_isolated_metadata</span> = <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>配置metadata代理</p>\n</li>\n<li><p>修改&#x2F;etc&#x2F;neutron&#x2F;metadata_agent.ini</p>\n</li>\n</ul>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[DEFAULT]</span><br><span class=\"line\">nova_metadata_host = controller</span><br><span class=\"line\">metadata_proxy_shared_secret = METADATA_SECRET</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置nova服务使用neutron，修改&#x2F;etc&#x2F;nova&#x2F;nova.conf</p>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[neutron]</span></span><br><span class=\"line\"><span class=\"attr\">auth_url</span> = http://controller:<span class=\"number\">5000</span></span><br><span class=\"line\"><span class=\"attr\">auth_type</span> = password</span><br><span class=\"line\"><span class=\"attr\">project_domain_name</span> = default</span><br><span class=\"line\"><span class=\"attr\">user_domain_name</span> = default</span><br><span class=\"line\"><span class=\"attr\">region_name</span> = RegionOne</span><br><span class=\"line\"><span class=\"attr\">project_name</span> = service</span><br><span class=\"line\"><span class=\"attr\">username</span> = neutron</span><br><span class=\"line\"><span class=\"attr\">password</span> = NEUTRON_PASS</span><br><span class=\"line\"><span class=\"attr\">service_metadata_proxy</span> = <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">metadata_proxy_shared_secret</span> = METADATA_SECRET</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建&#x2F;etc&#x2F;neutron&#x2F;plugin.ini的符号链接</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -s /etc/neutron/plugins/ml2/ml2_conf.ini /etc/neutron/plugin.ini</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>同步数据库</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">su -s /bin/sh -c &quot;neutron-db-manage --config-file /etc/neutron/neutron.conf --config-file /etc/neutron/plugins/ml2/ml2_conf.ini upgrade head&quot; neutron</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>重启nova api服务</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart openstack-nova-api</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动网络服务</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl enable neutron-server.service neutron-linuxbridge-agent.service \\</span><br><span class=\"line\">neutron-dhcp-agent.service neutron-metadata-agent.service neutron-l3-agent.service</span><br><span class=\"line\">systemctl start neutron-server.service neutron-linuxbridge-agent.service \\</span><br><span class=\"line\">neutron-dhcp-agent.service neutron-metadata-agent.service neutron-l3-agent.service</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><strong>Compute节点</strong></p>\n<ol>\n<li><p>安装软件包</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dnf install openstack-neutron-linuxbridge ebtables ipset -y</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置Neutron</p>\n<ul>\n<li>修改&#x2F;etc&#x2F;neutron&#x2F;neutron.conf</li>\n</ul>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[DEFAULT]</span></span><br><span class=\"line\"><span class=\"attr\">transport_url</span> = rabbit://openstack:RABBIT_PASS@controller</span><br><span class=\"line\"><span class=\"attr\">auth_strategy</span> = keystone</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[keystone_authtoken]</span></span><br><span class=\"line\"><span class=\"attr\">www_authenticate_uri</span> = http://controller:<span class=\"number\">5000</span></span><br><span class=\"line\"><span class=\"attr\">auth_url</span> = http://controller:<span class=\"number\">5000</span></span><br><span class=\"line\"><span class=\"attr\">memcached_servers</span> = controller:<span class=\"number\">11211</span></span><br><span class=\"line\"><span class=\"attr\">auth_type</span> = password</span><br><span class=\"line\"><span class=\"attr\">project_domain_name</span> = Default</span><br><span class=\"line\"><span class=\"attr\">user_domain_name</span> = Default</span><br><span class=\"line\"><span class=\"attr\">project_name</span> = service</span><br><span class=\"line\"><span class=\"attr\">username</span> = neutron</span><br><span class=\"line\"><span class=\"attr\">password</span> = NEUTRON_PASS</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[oslo_concurrency]</span></span><br><span class=\"line\"><span class=\"attr\">lock_path</span> = /var/lib/neutron/tmp</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>修改&#x2F;etc&#x2F;neutron&#x2F;plugins&#x2F;ml2&#x2F;linuxbridge_agent.ini</li>\n</ul>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[linux_bridge]</span></span><br><span class=\"line\"><span class=\"attr\">physical_interface_mappings</span> = provider:PROVIDER_INTERFACE_NAME</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[vxlan]</span></span><br><span class=\"line\"><span class=\"attr\">enable_vxlan</span> = <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">local_ip</span> = OVERLAY_INTERFACE_IP_ADDRESS</span><br><span class=\"line\"><span class=\"attr\">l2_population</span> = <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[securitygroup]</span></span><br><span class=\"line\"><span class=\"attr\">enable_security_group</span> = <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">firewall_driver</span> = neutron.agent.linux.iptables_firewall.IptablesFirewallDriver</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>配置nova compute服务使用neutron，修改&#x2F;etc&#x2F;nova&#x2F;nova.conf</li>\n</ul>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[neutron]</span></span><br><span class=\"line\"><span class=\"attr\">auth_url</span> = http://controller:<span class=\"number\">5000</span></span><br><span class=\"line\"><span class=\"attr\">auth_type</span> = password</span><br><span class=\"line\"><span class=\"attr\">project_domain_name</span> = default</span><br><span class=\"line\"><span class=\"attr\">user_domain_name</span> = default</span><br><span class=\"line\"><span class=\"attr\">region_name</span> = RegionOne</span><br><span class=\"line\"><span class=\"attr\">project_name</span> = service</span><br><span class=\"line\"><span class=\"attr\">username</span> = neutron</span><br><span class=\"line\"><span class=\"attr\">password</span> = NEUTRON_PASS</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>重启nova-compute服务</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart openstack-nova-compute.service</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动Neutron linuxbridge agent服务</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl enable neutron-linuxbridge-agent</span><br><span class=\"line\">systemctl start neutron-linuxbridge-agent</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"Cinder\"><a href=\"#Cinder\" class=\"headerlink\" title=\"Cinder\"></a>Cinder</h4><p>Cinder是OpenStack的存储服务，提供块设备的创建、发放、备份等功能。</p>\n<p><strong>Controller节点</strong>：</p>\n<ol>\n<li><p>初始化数据库</p>\n<p> <code>CINDER_DBPASS</code>是用户自定义的cinder数据库密码。</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql <span class=\"operator\">-</span>u root <span class=\"operator\">-</span>p</span><br><span class=\"line\"></span><br><span class=\"line\">MariaDB [(<span class=\"keyword\">none</span>)]<span class=\"operator\">&gt;</span> <span class=\"keyword\">CREATE</span> DATABASE cinder;</span><br><span class=\"line\">MariaDB [(<span class=\"keyword\">none</span>)]<span class=\"operator\">&gt;</span> <span class=\"keyword\">GRANT</span> <span class=\"keyword\">ALL</span> PRIVILEGES <span class=\"keyword\">ON</span> cinder.<span class=\"operator\">*</span> <span class=\"keyword\">TO</span> <span class=\"string\">&#x27;cinder&#x27;</span>@<span class=\"string\">&#x27;localhost&#x27;</span> IDENTIFIED <span class=\"keyword\">BY</span> <span class=\"string\">&#x27;CINDER_DBPASS&#x27;</span>;</span><br><span class=\"line\">MariaDB [(<span class=\"keyword\">none</span>)]<span class=\"operator\">&gt;</span> <span class=\"keyword\">GRANT</span> <span class=\"keyword\">ALL</span> PRIVILEGES <span class=\"keyword\">ON</span> cinder.<span class=\"operator\">*</span> <span class=\"keyword\">TO</span> <span class=\"string\">&#x27;cinder&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span> IDENTIFIED <span class=\"keyword\">BY</span> <span class=\"string\">&#x27;CINDER_DBPASS&#x27;</span>;</span><br><span class=\"line\">MariaDB [(<span class=\"keyword\">none</span>)]<span class=\"operator\">&gt;</span> exit</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>初始化Keystone资源对象</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source ~/.admin-openrc</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">创建用户时，命令行会提示输入密码，请输入自定义的密码，下文涉及到`CINDER_PASS`的地方替换成该密码即可。</span></span><br><span class=\"line\">openstack user create --domain default --password-prompt cinder</span><br><span class=\"line\"></span><br><span class=\"line\">openstack role add --project service --user cinder admin</span><br><span class=\"line\">openstack service create --name cinderv3 --description &quot;OpenStack Block Storage&quot; volumev3</span><br><span class=\"line\"></span><br><span class=\"line\">openstack endpoint create --region RegionOne volumev3 public http://controller:8776/v3/%\\(project_id\\)s</span><br><span class=\"line\">openstack endpoint create --region RegionOne volumev3 internal http://controller:8776/v3/%\\(project_id\\)s</span><br><span class=\"line\">openstack endpoint create --region RegionOne volumev3 admin http://controller:8776/v3/%\\(project_id\\)s</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装软件包</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dnf install openstack-cinder-api openstack-cinder-scheduler</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改cinder配置文件<code>/etc/cinder/cinder.conf</code></p>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[DEFAULT]</span></span><br><span class=\"line\"><span class=\"attr\">transport_url</span> = rabbit://openstack:RABBIT_PASS@controller</span><br><span class=\"line\"><span class=\"attr\">auth_strategy</span> = keystone</span><br><span class=\"line\"><span class=\"attr\">my_ip</span> = <span class=\"number\">192.168</span>.<span class=\"number\">0.2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[database]</span></span><br><span class=\"line\"><span class=\"attr\">connection</span> = mysql+pymysql://cinder:CINDER_DBPASS@controller/cinder</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[keystone_authtoken]</span></span><br><span class=\"line\"><span class=\"attr\">www_authenticate_uri</span> = http://controller:<span class=\"number\">5000</span></span><br><span class=\"line\"><span class=\"attr\">auth_url</span> = http://controller:<span class=\"number\">5000</span></span><br><span class=\"line\"><span class=\"attr\">memcached_servers</span> = controller:<span class=\"number\">11211</span></span><br><span class=\"line\"><span class=\"attr\">auth_type</span> = password</span><br><span class=\"line\"><span class=\"attr\">project_domain_name</span> = Default</span><br><span class=\"line\"><span class=\"attr\">user_domain_name</span> = Default</span><br><span class=\"line\"><span class=\"attr\">project_name</span> = service</span><br><span class=\"line\"><span class=\"attr\">username</span> = cinder</span><br><span class=\"line\"><span class=\"attr\">password</span> = CINDER_PASS</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[oslo_concurrency]</span></span><br><span class=\"line\"><span class=\"attr\">lock_path</span> = /var/lib/cinder/tmp</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>数据库同步</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">su -s /bin/sh -c &quot;cinder-manage db sync&quot; cinder</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改nova配置<code>/etc/nova/nova.conf</code></p>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[cinder]</span></span><br><span class=\"line\"><span class=\"attr\">os_region_name</span> = RegionOne</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动服务</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart openstack-nova-api</span><br><span class=\"line\">systemctl start openstack-cinder-api openstack-cinder-scheduler</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><strong>Storage节点</strong>：</p>\n<p>Storage节点要提前准备至少一块硬盘，作为cinder的存储后端，下文默认storage节点已经存在一块未使用的硬盘，设备名称为<code>/dev/sdb</code>，用户在配置过程中，请按照真实环境信息进行名称替换。</p>\n<p>Cinder支持很多类型的后端存储，本指导使用最简单的lvm为参考，如果您想使用如ceph等其他后端，请自行配置。</p>\n<ol>\n<li><p>安装软件包</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dnf install lvm2 device-mapper-persistent-data scsi-target-utils rpcbind nfs-utils openstack-cinder-volume openstack-cinder-backup</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置lvm卷组</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pvcreate /dev/sdb</span><br><span class=\"line\">vgcreate cinder-volumes /dev/sdb</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改cinder配置<code>/etc/cinder/cinder.conf</code></p>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[DEFAULT]</span></span><br><span class=\"line\"><span class=\"attr\">transport_url</span> = rabbit://openstack:RABBIT_PASS@controller</span><br><span class=\"line\"><span class=\"attr\">auth_strategy</span> = keystone</span><br><span class=\"line\"><span class=\"attr\">my_ip</span> = <span class=\"number\">192.168</span>.<span class=\"number\">0.4</span></span><br><span class=\"line\"><span class=\"attr\">enabled_backends</span> = lvm</span><br><span class=\"line\"><span class=\"attr\">glance_api_servers</span> = http://controller:<span class=\"number\">9292</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[keystone_authtoken]</span></span><br><span class=\"line\"><span class=\"attr\">www_authenticate_uri</span> = http://controller:<span class=\"number\">5000</span></span><br><span class=\"line\"><span class=\"attr\">auth_url</span> = http://controller:<span class=\"number\">5000</span></span><br><span class=\"line\"><span class=\"attr\">memcached_servers</span> = controller:<span class=\"number\">11211</span></span><br><span class=\"line\"><span class=\"attr\">auth_type</span> = password</span><br><span class=\"line\"><span class=\"attr\">project_domain_name</span> = default</span><br><span class=\"line\"><span class=\"attr\">user_domain_name</span> = default</span><br><span class=\"line\"><span class=\"attr\">project_name</span> = service</span><br><span class=\"line\"><span class=\"attr\">username</span> = cinder</span><br><span class=\"line\"><span class=\"attr\">password</span> = CINDER_PASS</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[database]</span></span><br><span class=\"line\"><span class=\"attr\">connection</span> = mysql+pymysql://cinder:CINDER_DBPASS@controller/cinder</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[lvm]</span></span><br><span class=\"line\"><span class=\"attr\">volume_driver</span> = cinder.volume.drivers.lvm.LVMVolumeDriver</span><br><span class=\"line\"><span class=\"attr\">volume_group</span> = cinder-volumes</span><br><span class=\"line\"><span class=\"attr\">target_protocol</span> = iscsi</span><br><span class=\"line\"><span class=\"attr\">target_helper</span> = lioadm</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[oslo_concurrency]</span></span><br><span class=\"line\"><span class=\"attr\">lock_path</span> = /var/lib/cinder/tmp</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置cinder backup （可选）</p>\n<p> cinder-backup是可选的备份服务，cinder同样支持很多种备份后端，本文使用swift存储，如果您想使用如NFS等后端，请自行配置，例如可以参考<a href=\"https://docs.openstack.org/cinder/2023.1/admin/nfs-backend.html\">OpenStack官方文档</a>对NFS的配置说明。</p>\n<p> 修改<code>/etc/cinder/cinder.conf</code>，在<code>[DEFAULT]</code>中新增</p>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[DEFAULT]</span></span><br><span class=\"line\"><span class=\"attr\">backup_driver</span> = cinder.backup.drivers.swift.SwiftBackupDriver</span><br><span class=\"line\"><span class=\"attr\">backup_swift_url</span> = SWIFT_URL</span><br></pre></td></tr></table></figure>\n\n<p> 这里的<code>SWIFT_URL</code>是指环境中swift服务的URL，在部署完swift服务后，执行<code>openstack catalog show object-store</code>命令获取。</p>\n</li>\n<li><p>启动服务</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start openstack-cinder-volume target</span><br><span class=\"line\">systemctl start openstack-cinder-backup (可选)</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>至此，Cinder服务的部署已全部完成，可以在controller通过以下命令进行简单的验证</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source ~/.admin-openrc</span><br><span class=\"line\">openstack storage service list</span><br><span class=\"line\">openstack volume list</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Horizon\"><a href=\"#Horizon\" class=\"headerlink\" title=\"Horizon\"></a>Horizon</h4><p>Horizon是OpenStack提供的前端页面，可以让用户通过网页鼠标的操作来控制OpenStack集群，而不用繁琐的CLI命令行。Horizon一般部署在控制节点。</p>\n<ol>\n<li><p>安装软件包</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dnf install openstack-dashboard</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改配置文件<code>/etc/openstack-dashboard/local_settings</code></p>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">OPENSTACK_HOST</span> = <span class=\"string\">&quot;controller&quot;</span></span><br><span class=\"line\"><span class=\"attr\">ALLOWED_HOSTS</span> = [<span class=\"string\">&#x27;*&#x27;</span>, ]</span><br><span class=\"line\"><span class=\"attr\">OPENSTACK_KEYSTONE_URL</span> =  <span class=\"string\">&quot;http://controller:5000/v3&quot;</span></span><br><span class=\"line\"><span class=\"attr\">SESSION_ENGINE</span> = <span class=\"string\">&#x27;django.contrib.sessions.backends.cache&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">CACHES</span> = &#123;</span><br><span class=\"line\">&#x27;default&#x27;: &#123;</span><br><span class=\"line\">    &#x27;BACKEND&#x27;: &#x27;django.core.cache.backends.memcached.MemcachedCache&#x27;,</span><br><span class=\"line\">    &#x27;LOCATION&#x27;: &#x27;controller:11211&#x27;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"attr\">OPENSTACK_KEYSTONE_MULTIDOMAIN_SUPPORT</span> = <span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"attr\">OPENSTACK_KEYSTONE_DEFAULT_DOMAIN</span> = <span class=\"string\">&quot;Default&quot;</span></span><br><span class=\"line\"><span class=\"attr\">OPENSTACK_KEYSTONE_DEFAULT_ROLE</span> = <span class=\"string\">&quot;member&quot;</span></span><br><span class=\"line\"><span class=\"attr\">WEBROOT</span> = <span class=\"string\">&#x27;/dashboard&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">POLICY_FILES_PATH</span> = <span class=\"string\">&quot;/etc/openstack-dashboard&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">OPENSTACK_API_VERSIONS</span> = &#123;</span><br><span class=\"line\">    &quot;identity&quot;: 3,</span><br><span class=\"line\">    &quot;image&quot;: 2,</span><br><span class=\"line\">    &quot;volume&quot;: 3,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>重启服务</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart httpd</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>至此，horizon服务的部署已全部完成，打开浏览器，输入<code>http://192.168.0.2/dashboard</code>，打开horizon登录页面。</p>\n<h4 id=\"Ironic\"><a href=\"#Ironic\" class=\"headerlink\" title=\"Ironic\"></a>Ironic</h4><p>Ironic是OpenStack的裸金属服务，如果用户需要进行裸机部署则推荐使用该组件。否则，可以不用安装。</p>\n<p>在控制节点执行以下操作。</p>\n<ol>\n<li><p>设置数据库</p>\n<p> 裸金属服务在数据库中存储信息，创建一个<strong>ironic</strong>用户可以访问的<strong>ironic</strong>数据库，替换<strong>IRONIC_DBPASS</strong>为合适的密码</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql <span class=\"operator\">-</span>u root <span class=\"operator\">-</span>p</span><br><span class=\"line\"></span><br><span class=\"line\">MariaDB [(<span class=\"keyword\">none</span>)]<span class=\"operator\">&gt;</span> <span class=\"keyword\">CREATE</span> DATABASE ironic <span class=\"type\">CHARACTER</span> <span class=\"keyword\">SET</span> utf8;</span><br><span class=\"line\">MariaDB [(<span class=\"keyword\">none</span>)]<span class=\"operator\">&gt;</span> <span class=\"keyword\">GRANT</span> <span class=\"keyword\">ALL</span> PRIVILEGES <span class=\"keyword\">ON</span> ironic.<span class=\"operator\">*</span> <span class=\"keyword\">TO</span> <span class=\"string\">&#x27;ironic&#x27;</span>@<span class=\"string\">&#x27;localhost&#x27;</span> \\</span><br><span class=\"line\">IDENTIFIED <span class=\"keyword\">BY</span> <span class=\"string\">&#x27;IRONIC_DBPASS&#x27;</span>;</span><br><span class=\"line\">MariaDB [(<span class=\"keyword\">none</span>)]<span class=\"operator\">&gt;</span> <span class=\"keyword\">GRANT</span> <span class=\"keyword\">ALL</span> PRIVILEGES <span class=\"keyword\">ON</span> ironic.<span class=\"operator\">*</span> <span class=\"keyword\">TO</span> <span class=\"string\">&#x27;ironic&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span> \\</span><br><span class=\"line\">IDENTIFIED <span class=\"keyword\">BY</span> <span class=\"string\">&#x27;IRONIC_DBPASS&#x27;</span>;</span><br><span class=\"line\">MariaDB [(<span class=\"keyword\">none</span>)]<span class=\"operator\">&gt;</span> exit</span><br><span class=\"line\">Bye</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建服务用户认证</p>\n<ul>\n<li>创建Bare Metal服务用户</li>\n</ul>\n<p> 替换<code>IRONIC_PASS</code>为ironic用户密码，<code>IRONIC_INSPECTOR_PASS</code>为ironic_inspector用户密码。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openstack user create --password IRONIC_PASS \\</span><br><span class=\"line\">    --email ironic@example.com ironic</span><br><span class=\"line\">openstack role add --project service --user ironic admin</span><br><span class=\"line\">openstack service create --name ironic \\</span><br><span class=\"line\">    --description &quot;Ironic baremetal provisioning service&quot; baremetal</span><br><span class=\"line\"></span><br><span class=\"line\">openstack service create --name ironic-inspector --description     &quot;Ironic inspector baremetal provisioning service&quot; baremetal-introspection</span><br><span class=\"line\">openstack user create --password IRONIC_INSPECTOR_PASS --email ironic_inspector@example.com ironic-inspector</span><br><span class=\"line\">openstack role add --project service --user ironic-inspector admin</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>创建Bare Metal服务访问入口</li>\n</ul>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openstack endpoint create --region RegionOne baremetal admin http://192.168.0.2:6385</span><br><span class=\"line\">openstack endpoint create --region RegionOne baremetal public http://192.168.0.2:6385</span><br><span class=\"line\">openstack endpoint create --region RegionOne baremetal internal http://192.168.0.2:6385</span><br><span class=\"line\">openstack endpoint create --region RegionOne baremetal-introspection internal http://192.168.0.2:5050/v1</span><br><span class=\"line\">openstack endpoint create --region RegionOne baremetal-introspection public http://192.168.0.2:5050/v1</span><br><span class=\"line\">openstack endpoint create --region RegionOne baremetal-introspection admin http://192.168.0.2:5050/v1</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装组件</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dnf install openstack-ironic-api openstack-ironic-conductor python3-ironicclient</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置ironic-api服务</p>\n<p> 配置文件路径&#x2F;etc&#x2F;ironic&#x2F;ironic.conf</p>\n<ul>\n<li>通过<strong>connection</strong>选项配置数据库的位置，如下所示，替换<strong>IRONIC_DBPASS</strong>为<strong>ironic</strong>用户的密码，替换<strong>DB_IP</strong>为DB服务器所在的IP地址：</li>\n</ul>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[database]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># The SQ LAlchemy connection string used to connect to the</span></span><br><span class=\"line\"><span class=\"comment\"># database (string value)</span></span><br><span class=\"line\"><span class=\"comment\"># connection = mysql+pymysql://ironic:IRONIC_DBPASS@DB_IP/ironic</span></span><br><span class=\"line\"><span class=\"attr\">connection</span> = mysql+pymysql://ironic:IRONIC_DBPASS@controller/ironic</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>通过以下选项配置ironic-api服务使用RabbitMQ消息代理，替换**RPC_***为RabbitMQ的详细地址和凭证</li>\n</ul>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[DEFAULT]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># A URL representing the messaging driver to use and its full</span></span><br><span class=\"line\"><span class=\"comment\"># configuration. (string value)</span></span><br><span class=\"line\"><span class=\"comment\"># transport_url = rabbit://RPC_USER:RPC_PASSWORD@RPC_HOST:RPC_PORT/</span></span><br><span class=\"line\"><span class=\"attr\">transport_url</span> = rabbit://openstack:RABBIT_PASS@controller:<span class=\"number\">5672</span>/</span><br></pre></td></tr></table></figure>\n\n<p> 用户也可自行使用json-rpc方式替换rabbitmq</p>\n<ul>\n<li>配置ironic-api服务使用身份认证服务的凭证，替换<strong>PUBLIC_IDENTITY_IP</strong>为身份认证服务器的公共IP，替换<strong>PRIVATE_IDENTITY_IP</strong>为身份认证服务器的私有IP，替换     <strong>IRONIC_PASS</strong>为身份认证服务中<strong>ironic</strong>用户的密码，替换<strong>RABBIT_PASS</strong>为RabbitMQ中openstack账户的密码。：</li>\n</ul>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[DEFAULT]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Authentication strategy used by ironic-api: one of</span></span><br><span class=\"line\"><span class=\"comment\"># &quot;keystone&quot; or &quot;noauth&quot;. &quot;noauth&quot; should not be used in a</span></span><br><span class=\"line\"><span class=\"comment\"># production environment because all authentication will be</span></span><br><span class=\"line\"><span class=\"comment\"># disabled. (string value)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">auth_strategy</span>=keystone</span><br><span class=\"line\"><span class=\"attr\">host</span> = controller</span><br><span class=\"line\"><span class=\"attr\">memcache_servers</span> = controller:<span class=\"number\">11211</span></span><br><span class=\"line\"><span class=\"attr\">enabled_network_interfaces</span> = flat,noop,neutron</span><br><span class=\"line\"><span class=\"attr\">default_network_interface</span> = noop</span><br><span class=\"line\"><span class=\"attr\">enabled_hardware_types</span> = ipmi</span><br><span class=\"line\"><span class=\"attr\">enabled_boot_interfaces</span> = pxe</span><br><span class=\"line\"><span class=\"attr\">enabled_deploy_interfaces</span> = direct</span><br><span class=\"line\"><span class=\"attr\">default_deploy_interface</span> = direct</span><br><span class=\"line\"><span class=\"attr\">enabled_inspect_interfaces</span> = inspector</span><br><span class=\"line\"><span class=\"attr\">enabled_management_interfaces</span> = ipmitool</span><br><span class=\"line\"><span class=\"attr\">enabled_power_interfaces</span> = ipmitool</span><br><span class=\"line\"><span class=\"attr\">enabled_rescue_interfaces</span> = <span class=\"literal\">no</span>-rescue,agent</span><br><span class=\"line\"><span class=\"attr\">isolinux_bin</span> = /usr/share/syslinux/isolinux.bin</span><br><span class=\"line\"><span class=\"attr\">logging_context_format_string</span> = %(asctime)s.%(msecs)<span class=\"number\">03</span>d %(process)d %(levelname)s %(name)s [%(global_request_id)s %(request_id)s %     (user_identity)s] %(instance)s%(message)s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[keystone_authtoken]</span></span><br><span class=\"line\"><span class=\"comment\"># Authentication type to load (string value)</span></span><br><span class=\"line\"><span class=\"attr\">auth_type</span>=password</span><br><span class=\"line\"><span class=\"comment\"># Complete public Identity API endpoint (string value)</span></span><br><span class=\"line\"><span class=\"comment\"># www_authenticate_uri=http://PUBLIC_IDENTITY_IP:5000</span></span><br><span class=\"line\"><span class=\"attr\">www_authenticate_uri</span>=http://controller:<span class=\"number\">5000</span></span><br><span class=\"line\"><span class=\"comment\"># Complete admin Identity API endpoint. (string value)</span></span><br><span class=\"line\"><span class=\"comment\"># auth_url=http://PRIVATE_IDENTITY_IP:5000</span></span><br><span class=\"line\"><span class=\"attr\">auth_url</span>=http://controller:<span class=\"number\">5000</span></span><br><span class=\"line\"><span class=\"comment\"># Service username. (string value)</span></span><br><span class=\"line\"><span class=\"attr\">username</span>=ironic</span><br><span class=\"line\"><span class=\"comment\"># Service account password. (string value)</span></span><br><span class=\"line\"><span class=\"attr\">password</span>=IRONIC_PASS</span><br><span class=\"line\"><span class=\"comment\"># Service tenant name. (string value)</span></span><br><span class=\"line\"><span class=\"attr\">project_name</span>=service</span><br><span class=\"line\"><span class=\"comment\"># Domain name containing project (string value)</span></span><br><span class=\"line\"><span class=\"attr\">project_domain_name</span>=Default</span><br><span class=\"line\"><span class=\"comment\"># User&#x27;s domain name (string value)</span></span><br><span class=\"line\"><span class=\"attr\">user_domain_name</span>=Default</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[agent]</span></span><br><span class=\"line\"><span class=\"attr\">deploy_logs_collect</span> = always</span><br><span class=\"line\"><span class=\"attr\">deploy_logs_local_path</span> = /var/log/ironic/deploy</span><br><span class=\"line\"><span class=\"attr\">deploy_logs_storage_backend</span> = local</span><br><span class=\"line\"><span class=\"attr\">image_download_source</span> = http</span><br><span class=\"line\"><span class=\"attr\">stream_raw_images</span> = <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">force_raw_images</span> = <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">verify_ca</span> = <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[oslo_concurrency]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[oslo_messaging_notifications]</span></span><br><span class=\"line\"><span class=\"attr\">transport_url</span> = rabbit://openstack:RABBIT_PASS@controller:<span class=\"number\">5672</span>/</span><br><span class=\"line\"><span class=\"attr\">topics</span> = notifications</span><br><span class=\"line\"><span class=\"attr\">driver</span> = messagingv2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[oslo_messaging_rabbit]</span></span><br><span class=\"line\"><span class=\"attr\">amqp_durable_queues</span> = <span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"attr\">rabbit_ha_queues</span> = <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[pxe]</span></span><br><span class=\"line\"><span class=\"attr\">ipxe_enabled</span> = <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">pxe_append_params</span> = nofb nomodeset vga=normal coreos.autologin ipa-insecure=<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"attr\">image_cache_size</span> = <span class=\"number\">204800</span></span><br><span class=\"line\"><span class=\"attr\">tftp_root</span>=/var/lib/tftpboot/cephfs/</span><br><span class=\"line\"><span class=\"attr\">tftp_master_path</span>=/var/lib/tftpboot/cephfs/master_images</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[dhcp]</span></span><br><span class=\"line\"><span class=\"attr\">dhcp_provider</span> = none</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>创建裸金属服务数据库表</li>\n</ul>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ironic-dbsync --config-file /etc/ironic/ironic.conf create_schema</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>重启ironic-api服务</li>\n</ul>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl restart openstack-ironic-api</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置ironic-conductor服务</p>\n<p> 如下为ironic-conductor服务自身的标准配置，ironic-conductor服务可以与ironic-api服务分布于不同节点，本指南中均部署与控制节点，所以重复的配置项可跳过。</p>\n<ul>\n<li>替换使用conductor服务所在host的IP配置my_ip：</li>\n</ul>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[DEFAULT]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># IP address of this host. If unset, will determine the IP</span></span><br><span class=\"line\"><span class=\"comment\"># programmatically. If unable to do so, will use &quot;127.0.0.1&quot;.</span></span><br><span class=\"line\"><span class=\"comment\"># (string value)</span></span><br><span class=\"line\"><span class=\"comment\"># my_ip=HOST_IP</span></span><br><span class=\"line\"><span class=\"attr\">my_ip</span> = <span class=\"number\">192.168</span>.<span class=\"number\">0.2</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>配置数据库的位置，ironic-conductor应该使用和ironic-api相同的配置。替换<strong>IRONIC_DBPASS</strong>为<strong>ironic</strong>用户的密码：</li>\n</ul>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[database]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># The SQLAlchemy connection string to use to connect to the</span></span><br><span class=\"line\"><span class=\"comment\"># database. (string value)</span></span><br><span class=\"line\"><span class=\"attr\">connection</span> = mysql+pymysql://ironic:IRONIC_DBPASS@controller/ironic</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>通过以下选项配置ironic-api服务使用RabbitMQ消息代理，ironic-conductor应该使用和ironic-api相同的配置，替换<strong>RABBIT_PASS</strong>为RabbitMQ中openstack账户的密码：</li>\n</ul>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[DEFAULT]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># A URL representing the messaging driver to use and its full</span></span><br><span class=\"line\"><span class=\"comment\"># configuration. (string value)</span></span><br><span class=\"line\"><span class=\"attr\">transport_url</span> = rabbit://openstack:RABBIT_PASS@controller:<span class=\"number\">5672</span>/</span><br></pre></td></tr></table></figure>\n\n<p> 用户也可自行使用json-rpc方式替换rabbitmq</p>\n<ul>\n<li>配置凭证访问其他OpenStack服务</li>\n</ul>\n<p> 为了与其他OpenStack服务进行通信，裸金属服务在请求其他服务时需要使用服务用户与OpenStack Identity服务进行认证。这些用户的凭据必须在与相应服务相关的每个配置文件中进行配置。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[neutron] - 访问OpenStack网络服务</span><br><span class=\"line\">[glance] - 访问OpenStack镜像服务</span><br><span class=\"line\">[swift] - 访问OpenStack对象存储服务</span><br><span class=\"line\">[cinder] - 访问OpenStack块存储服务</span><br><span class=\"line\">[inspector] - 访问OpenStack裸金属introspection服务</span><br><span class=\"line\">[service_catalog] - 一个特殊项用于保存裸金属服务使用的凭证，该凭证用于发现注册在OpenStack身份认证服务目录中的自己的API URL端点</span><br></pre></td></tr></table></figure>\n\n<p> 简单起见，可以对所有服务使用同一个服务用户。为了向后兼容，该用户应该和ironic-api服务的[keystone_authtoken]所配置的为同一个用户。但这不是必须的，也可以为每个服务创建并配置不同的服务用户。</p>\n<p> 在下面的示例中，用户访问OpenStack网络服务的身份验证信息配置为：</p>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">网络服务部署在名为RegionOne的身份认证服务域中，仅在服务目录中注册公共端点接口</span><br><span class=\"line\"></span><br><span class=\"line\">请求时使用特定的CA SSL证书进行HTTPS连接</span><br><span class=\"line\"></span><br><span class=\"line\">与ironic-api服务配置相同的服务用户</span><br><span class=\"line\"></span><br><span class=\"line\">动态密码认证插件基于其他选项发现合适的身份认证服务API版本</span><br></pre></td></tr></table></figure>\n\n<p> 替换IRONIC_PASS为ironic用户密码。</p>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[neutron]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Authentication type to load (string value)</span></span><br><span class=\"line\"><span class=\"attr\">auth_type</span> = password</span><br><span class=\"line\"><span class=\"comment\"># Authentication URL (string value)</span></span><br><span class=\"line\"><span class=\"attr\">auth_url</span>=https://IDENTITY_IP:<span class=\"number\">5000</span>/</span><br><span class=\"line\"><span class=\"comment\"># Username (string value)</span></span><br><span class=\"line\"><span class=\"attr\">username</span>=ironic</span><br><span class=\"line\"><span class=\"comment\"># User&#x27;s password (string value)</span></span><br><span class=\"line\"><span class=\"attr\">password</span>=IRONIC_PASS</span><br><span class=\"line\"><span class=\"comment\"># Project name to scope to (string value)</span></span><br><span class=\"line\"><span class=\"attr\">project_name</span>=service</span><br><span class=\"line\"><span class=\"comment\"># Domain ID containing project (string value)</span></span><br><span class=\"line\"><span class=\"attr\">project_domain_id</span>=default</span><br><span class=\"line\"><span class=\"comment\"># User&#x27;s domain id (string value)</span></span><br><span class=\"line\"><span class=\"attr\">user_domain_id</span>=default</span><br><span class=\"line\"><span class=\"comment\"># PEM encoded Certificate Authority to use when verifying</span></span><br><span class=\"line\"><span class=\"comment\"># HTTPs connections. (string value)</span></span><br><span class=\"line\"><span class=\"attr\">cafile</span>=/opt/stack/data/ca-bundle.pem</span><br><span class=\"line\"><span class=\"comment\"># The default region_name for endpoint URL discovery. (string</span></span><br><span class=\"line\"><span class=\"comment\"># value)</span></span><br><span class=\"line\"><span class=\"attr\">region_name</span> = RegionOne</span><br><span class=\"line\"><span class=\"comment\"># List of interfaces, in order of preference, for endpoint</span></span><br><span class=\"line\"><span class=\"comment\"># URL. (list value)</span></span><br><span class=\"line\"><span class=\"attr\">valid_interfaces</span>=public</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 其他参考配置</span></span><br><span class=\"line\"><span class=\"section\">[glance]</span></span><br><span class=\"line\"><span class=\"attr\">endpoint_override</span> = http://controller:<span class=\"number\">9292</span></span><br><span class=\"line\"><span class=\"attr\">www_authenticate_uri</span> = http://controller:<span class=\"number\">5000</span></span><br><span class=\"line\"><span class=\"attr\">auth_url</span> = http://controller:<span class=\"number\">5000</span></span><br><span class=\"line\"><span class=\"attr\">auth_type</span> = password</span><br><span class=\"line\"><span class=\"attr\">username</span> = ironic</span><br><span class=\"line\"><span class=\"attr\">password</span> = IRONIC_PASS</span><br><span class=\"line\"><span class=\"attr\">project_domain_name</span> = default</span><br><span class=\"line\"><span class=\"attr\">user_domain_name</span> = default</span><br><span class=\"line\"><span class=\"attr\">region_name</span> = RegionOne</span><br><span class=\"line\"><span class=\"attr\">project_name</span> = service</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[service_catalog]</span>  </span><br><span class=\"line\"><span class=\"attr\">region_name</span> = RegionOne</span><br><span class=\"line\"><span class=\"attr\">project_domain_id</span> = default</span><br><span class=\"line\"><span class=\"attr\">user_domain_id</span> = default</span><br><span class=\"line\"><span class=\"attr\">project_name</span> = service</span><br><span class=\"line\"><span class=\"attr\">password</span> = IRONIC_PASS</span><br><span class=\"line\"><span class=\"attr\">username</span> = ironic</span><br><span class=\"line\"><span class=\"attr\">auth_url</span> = http://controller:<span class=\"number\">5000</span></span><br><span class=\"line\"><span class=\"attr\">auth_type</span> = password</span><br></pre></td></tr></table></figure>\n\n<p> 默认情况下，为了与其他服务进行通信，裸金属服务会尝试通过身份认证服务的服务目录发现该服务合适的端点。如果希望对一个特定服务使用一个不同的端点，则在裸金属服务的配置文件中通过endpoint_override选项进行指定：</p>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[neutron]</span></span><br><span class=\"line\"><span class=\"attr\">endpoint_override</span> = &lt;NEUTRON_API_ADDRESS&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>配置允许的驱动程序和硬件类型</li>\n</ul>\n<p> 通过设置enabled_hardware_types设置ironic-conductor服务允许使用的硬件类型：</p>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[DEFAULT]</span></span><br><span class=\"line\"><span class=\"attr\">enabled_hardware_types</span> = ipmi</span><br></pre></td></tr></table></figure>\n\n<p> 配置硬件接口：</p>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">enabled_boot_interfaces</span> = pxe</span><br><span class=\"line\"><span class=\"attr\">enabled_deploy_interfaces</span> = direct,iscsi</span><br><span class=\"line\"><span class=\"attr\">enabled_inspect_interfaces</span> = inspector</span><br><span class=\"line\"><span class=\"attr\">enabled_management_interfaces</span> = ipmitool</span><br><span class=\"line\"><span class=\"attr\">enabled_power_interfaces</span> = ipmitool</span><br></pre></td></tr></table></figure>\n\n<p> 配置接口默认值：</p>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[DEFAULT]</span></span><br><span class=\"line\"><span class=\"attr\">default_deploy_interface</span> = direct</span><br><span class=\"line\"><span class=\"attr\">default_network_interface</span> = neutron</span><br></pre></td></tr></table></figure>\n\n<p> 如果启用了任何使用Direct deploy的驱动，必须安装和配置镜像服务的Swift后端。Ceph对象网关(RADOS网关)也支持作为镜像服务的后端。</p>\n<ul>\n<li>重启ironic-conductor服务</li>\n</ul>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl restart openstack-ironic-conductor</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置ironic-inspector服务</p>\n<ul>\n<li>安装组件</li>\n</ul>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dnf install openstack-ironic-inspector</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>创建数据库</li>\n</ul>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># mysql <span class=\"operator\">-</span>u root <span class=\"operator\">-</span>p</span><br><span class=\"line\"></span><br><span class=\"line\">MariaDB [(<span class=\"keyword\">none</span>)]<span class=\"operator\">&gt;</span> <span class=\"keyword\">CREATE</span> DATABASE ironic_inspector <span class=\"type\">CHARACTER</span> <span class=\"keyword\">SET</span> utf8;</span><br><span class=\"line\"></span><br><span class=\"line\">MariaDB [(<span class=\"keyword\">none</span>)]<span class=\"operator\">&gt;</span> <span class=\"keyword\">GRANT</span> <span class=\"keyword\">ALL</span> PRIVILEGES <span class=\"keyword\">ON</span> ironic_inspector.<span class=\"operator\">*</span> <span class=\"keyword\">TO</span> <span class=\"string\">&#x27;ironic_inspector&#x27;</span>@<span class=\"string\">&#x27;localhost&#x27;</span> \\</span><br><span class=\"line\">IDENTIFIED <span class=\"keyword\">BY</span> <span class=\"string\">&#x27;IRONIC_INSPECTOR_DBPASS&#x27;</span>;</span><br><span class=\"line\">MariaDB [(<span class=\"keyword\">none</span>)]<span class=\"operator\">&gt;</span> <span class=\"keyword\">GRANT</span> <span class=\"keyword\">ALL</span> PRIVILEGES <span class=\"keyword\">ON</span> ironic_inspector.<span class=\"operator\">*</span> <span class=\"keyword\">TO</span> <span class=\"string\">&#x27;ironic_inspector&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span> \\</span><br><span class=\"line\">IDENTIFIED <span class=\"keyword\">BY</span> <span class=\"string\">&#x27;IRONIC_INSPECTOR_DBPASS&#x27;</span>;</span><br><span class=\"line\">MariaDB [(<span class=\"keyword\">none</span>)]<span class=\"operator\">&gt;</span> exit</span><br><span class=\"line\">Bye</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>配置<code>/etc/ironic-inspector/inspector.conf</code></li>\n</ul>\n<p> 通过<strong>connection</strong>选项配置数据库的位置，如下所示，替换<strong>IRONIC_INSPECTOR_DBPASS</strong>为<strong>ironic_inspector</strong>用户的密码</p>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[database]</span></span><br><span class=\"line\"><span class=\"attr\">backend</span> = sqlalchemy</span><br><span class=\"line\"><span class=\"attr\">connection</span> = mysql+pymysql://ironic_inspector:IRONIC_INSPECTOR_DBPASS@controller/ironic_inspector</span><br><span class=\"line\"><span class=\"attr\">min_pool_size</span> = <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"attr\">max_pool_size</span> = <span class=\"number\">500</span></span><br><span class=\"line\"><span class=\"attr\">pool_timeout</span> = <span class=\"number\">30</span></span><br><span class=\"line\"><span class=\"attr\">max_retries</span> = <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"attr\">max_overflow</span> = <span class=\"number\">200</span></span><br><span class=\"line\"><span class=\"attr\">db_retry_interval</span> = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"attr\">db_inc_retry_interval</span> = <span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"attr\">db_max_retry_interval</span> = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"attr\">db_max_retries</span> = <span class=\"number\">5</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>配置消息队列通信地址</li>\n</ul>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[DEFAULT]</span> </span><br><span class=\"line\"><span class=\"attr\">transport_url</span> = rabbit://openstack:RABBIT_PASS@controller:<span class=\"number\">5672</span>/</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>设置keystone认证</li>\n</ul>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[DEFAULT]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">auth_strategy</span> = keystone</span><br><span class=\"line\"><span class=\"attr\">timeout</span> = <span class=\"number\">900</span></span><br><span class=\"line\"><span class=\"attr\">rootwrap_config</span> = /etc/ironic-inspector/rootwrap.conf</span><br><span class=\"line\"><span class=\"attr\">logging_context_format_string</span> = %(asctime)s.%(msecs)<span class=\"number\">03</span>d %(process)d %(levelname)s %(name)s [%(global_request_id)s %(request_id)s %     (user_identity)s] %(instance)s%(message)s</span><br><span class=\"line\"><span class=\"attr\">log_dir</span> = /var/log/ironic-inspector</span><br><span class=\"line\"><span class=\"attr\">state_path</span> = /var/lib/ironic-inspector</span><br><span class=\"line\"><span class=\"attr\">use_stderr</span> = <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[ironic]</span></span><br><span class=\"line\"><span class=\"attr\">api_endpoint</span> = http://IRONIC_API_HOST_ADDRRESS:<span class=\"number\">6385</span></span><br><span class=\"line\"><span class=\"attr\">auth_type</span> = password</span><br><span class=\"line\"><span class=\"attr\">auth_url</span> = http://PUBLIC_IDENTITY_IP:<span class=\"number\">5000</span></span><br><span class=\"line\"><span class=\"attr\">auth_strategy</span> = keystone</span><br><span class=\"line\"><span class=\"attr\">ironic_url</span> = http://IRONIC_API_HOST_ADDRRESS:<span class=\"number\">6385</span></span><br><span class=\"line\"><span class=\"attr\">os_region</span> = RegionOne</span><br><span class=\"line\"><span class=\"attr\">project_name</span> = service</span><br><span class=\"line\"><span class=\"attr\">project_domain_name</span> = Default</span><br><span class=\"line\"><span class=\"attr\">user_domain_name</span> = Default</span><br><span class=\"line\"><span class=\"attr\">username</span> = IRONIC_SERVICE_USER_NAME</span><br><span class=\"line\"><span class=\"attr\">password</span> = IRONIC_SERVICE_USER_PASSWORD</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[keystone_authtoken]</span></span><br><span class=\"line\"><span class=\"attr\">auth_type</span> = password</span><br><span class=\"line\"><span class=\"attr\">auth_url</span> = http://controller:<span class=\"number\">5000</span></span><br><span class=\"line\"><span class=\"attr\">www_authenticate_uri</span> = http://controller:<span class=\"number\">5000</span></span><br><span class=\"line\"><span class=\"attr\">project_domain_name</span> = default</span><br><span class=\"line\"><span class=\"attr\">user_domain_name</span> = default</span><br><span class=\"line\"><span class=\"attr\">project_name</span> = service</span><br><span class=\"line\"><span class=\"attr\">username</span> = ironic_inspector</span><br><span class=\"line\"><span class=\"attr\">password</span> = IRONICPASSWD</span><br><span class=\"line\"><span class=\"attr\">region_name</span> = RegionOne</span><br><span class=\"line\"><span class=\"attr\">memcache_servers</span> = controller:<span class=\"number\">11211</span></span><br><span class=\"line\"><span class=\"attr\">token_cache_time</span> = <span class=\"number\">300</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[processing]</span></span><br><span class=\"line\"><span class=\"attr\">add_ports</span> = active</span><br><span class=\"line\"><span class=\"attr\">processing_hooks</span> = <span class=\"variable\">$default_processing_hooks</span>,local_link_connection,lldp_basic</span><br><span class=\"line\"><span class=\"attr\">ramdisk_logs_dir</span> = /var/log/ironic-inspector/ramdisk</span><br><span class=\"line\"><span class=\"attr\">always_store_ramdisk_logs</span> = <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">store_data</span> =none</span><br><span class=\"line\"><span class=\"attr\">power_off</span> = <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[pxe_filter]</span></span><br><span class=\"line\"><span class=\"attr\">driver</span> = iptables</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[capabilities]</span></span><br><span class=\"line\"><span class=\"attr\">boot_mode</span>=<span class=\"literal\">True</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>配置ironic inspector dnsmasq服务</li>\n</ul>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 配置文件地址：/etc/ironic-inspector/dnsmasq.conf</span></span><br><span class=\"line\"><span class=\"attr\">port</span>=<span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"attr\">interface</span>=enp3s0                         <span class=\"comment\">#替换为实际监听网络接口</span></span><br><span class=\"line\"><span class=\"attr\">dhcp-range</span>=<span class=\"number\">192.168</span>.<span class=\"number\">0.40</span>,<span class=\"number\">192.168</span>.<span class=\"number\">0.50</span>   <span class=\"comment\">#替换为实际dhcp地址范围</span></span><br><span class=\"line\">bind-interfaces</span><br><span class=\"line\">enable-tftp</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">dhcp-match</span>=set:efi,option:client-arch,<span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"attr\">dhcp-match</span>=set:efi,option:client-arch,<span class=\"number\">9</span></span><br><span class=\"line\"><span class=\"attr\">dhcp-match</span>=aarch64, option:client-arch,<span class=\"number\">11</span></span><br><span class=\"line\"><span class=\"attr\">dhcp-boot</span>=tag:aarch64,grubaa64.efi</span><br><span class=\"line\"><span class=\"attr\">dhcp-boot</span>=tag:!aarch64,tag:efi,grubx64.efi</span><br><span class=\"line\"><span class=\"attr\">dhcp-boot</span>=tag:!aarch64,tag:!efi,pxelinux.<span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">tftp-root</span>=/tftpboot                       <span class=\"comment\">#替换为实际tftpboot目录</span></span><br><span class=\"line\"><span class=\"attr\">log-facility</span>=/var/log/dnsmasq.log</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>关闭ironic provision网络子网的dhcp</li>\n</ul>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openstack subnet set --no-dhcp 72426e89-f552-4dc4-9ac7-c4e131ce7f3c</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>初始化ironic-inspector服务的数据库</li>\n</ul>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ironic-inspector-dbsync --config-file /etc/ironic-inspector/inspector.conf upgrade</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>启动服务</li>\n</ul>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl enable --now openstack-ironic-inspector.service</span><br><span class=\"line\">systemctl enable --now openstack-ironic-inspector-dnsmasq.service</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置httpd服务</p>\n<ul>\n<li>创建ironic要使用的httpd的root目录并设置属主属组，目录路径要和&#x2F;etc&#x2F;ironic&#x2F;ironic.conf中[deploy]组中http_root 配置项指定的路径要一致。</li>\n</ul>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p /var/lib/ironic/httproot</span><br><span class=\"line\">chown ironic.ironic /var/lib/ironic/httproot</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>安装和配置httpd服务</p>\n<ul>\n<li>安装httpd服务，已有请忽略</li>\n</ul>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dnf install httpd -y</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>创建&#x2F;etc&#x2F;httpd&#x2F;conf.d&#x2F;openstack-ironic-httpd.conf文件，内容如下：</li>\n</ul>\n  <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Listen 8080</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;VirtualHost *:8080&gt;</span><br><span class=\"line\">    ServerName ironic.openeuler.com</span><br><span class=\"line\"></span><br><span class=\"line\">    ErrorLog &quot;/var/log/httpd/openstack-ironic-httpd-error_log&quot;</span><br><span class=\"line\">    CustomLog &quot;/var/log/httpd/openstack-ironic-httpd-access_log&quot; &quot;%h %l %u %t \\&quot;%r\\&quot; %&gt;s %b&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">    DocumentRoot &quot;/var/lib/ironic/httproot&quot;</span><br><span class=\"line\">    &lt;Directory &quot;/var/lib/ironic/httproot&quot;&gt;</span><br><span class=\"line\">        Options Indexes FollowSymLinks</span><br><span class=\"line\">        Require all granted</span><br><span class=\"line\">    &lt;/Directory&gt;</span><br><span class=\"line\">    LogLevel warn</span><br><span class=\"line\">    AddDefaultCharset UTF-8</span><br><span class=\"line\">    EnableSendfile on</span><br><span class=\"line\">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure>\n\n<p>  注意监听的端口要和&#x2F;etc&#x2F;ironic&#x2F;ironic.conf里[deploy]选项中http_url配置项中指定的端口一致。</p>\n<ul>\n<li>重启httpd服务。</li>\n</ul>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart httpd</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>deploy ramdisk镜像下载或制作</p>\n<p> 部署一个裸机节点总共需要两组镜像：deploy ramdisk images和user images。Deploy ramdisk images上运行有ironic-python-agent(IPA)服务，Ironic通过它进行裸机节点的环境准备。User images是最终被安装裸机节点上，供用户使用的镜像。</p>\n<p> ramdisk镜像支持通过ironic-python-agent-builder或disk-image-builder工具制作。用户也可以自行选择其他工具制作。若使用原生工具，则需要安装对应的软件包。</p>\n<p> 具体的使用方法可以参考<a href=\"https://docs.openstack.org/ironic/2023.1/install/deploy-ramdisk.html\">官方文档</a>，同时官方也有提供制作好的deploy镜像，可尝试下载。</p>\n<p> 下文介绍通过ironic-python-agent-builder构建ironic使用的deploy镜像的完整过程。</p>\n<ul>\n<li>安装 ironic-python-agent-builder</li>\n</ul>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dnf install python3-ironic-python-agent-builder</span><br><span class=\"line\"></span><br><span class=\"line\">或</span><br><span class=\"line\">pip3 install ironic-python-agent-builder</span><br><span class=\"line\">dnf install qemu-img git</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>制作镜像</li>\n</ul>\n<p> 基本用法：</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">usage: ironic-python-agent-builder [-h] [-r RELEASE] [-o OUTPUT] [-e ELEMENT] [-b BRANCH]</span><br><span class=\"line\">                            [-v] [--lzma] [--extra-args EXTRA_ARGS]</span><br><span class=\"line\">                            [--elements-path ELEMENTS_PATH]</span><br><span class=\"line\">                            distribution</span><br><span class=\"line\"></span><br><span class=\"line\">positional arguments:</span><br><span class=\"line\">    distribution          Distribution to use</span><br><span class=\"line\"></span><br><span class=\"line\">options:</span><br><span class=\"line\">    -h, --help            show this help message and exit</span><br><span class=\"line\">    -r RELEASE, --release RELEASE</span><br><span class=\"line\">                        Distribution release to use</span><br><span class=\"line\">    -o OUTPUT, --output OUTPUT</span><br><span class=\"line\">                        Output base file name</span><br><span class=\"line\">    -e ELEMENT, --element ELEMENT</span><br><span class=\"line\">                        Additional DIB element to use</span><br><span class=\"line\">    -b BRANCH, --branch BRANCH</span><br><span class=\"line\">                        If set, override the branch that is used for         ironic-python-agent</span><br><span class=\"line\">                        and requirements</span><br><span class=\"line\">    -v, --verbose         Enable verbose logging in diskimage-builder</span><br><span class=\"line\">    --lzma                Use lzma compression for smaller images</span><br><span class=\"line\">    --extra-args EXTRA_ARGS</span><br><span class=\"line\">                        Extra arguments to pass to diskimage-builder</span><br><span class=\"line\">    --elements-path ELEMENTS_PATH</span><br><span class=\"line\">                        Path(s) to custom DIB elements separated by a colon</span><br></pre></td></tr></table></figure>\n\n<p> 操作实例：</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">-o选项指定生成的镜像名</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">ubuntu指定生成ubuntu系统的镜像</span></span><br><span class=\"line\">ironic-python-agent-builder -o my-ubuntu-ipa ubuntu</span><br></pre></td></tr></table></figure>\n\n<p> 可通过设置<code>ARCH</code>环境变量（默认为amd64）指定所构建镜像的架构。如果是<code>arm</code>架构，需要添加：</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export ARCH=aarch64</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>允许ssh登录</li>\n</ul>\n<p> 初始化环境变量,设置用户名、密码，启用<code>sodo</code>权限；并添加<code>-e</code>选项使用相应的DIB元素。制作镜像操作如下：</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export DIB_DEV_USER_USERNAME=ipa \\</span><br><span class=\"line\">export DIB_DEV_USER_PWDLESS_SUDO=yes \\</span><br><span class=\"line\">export DIB_DEV_USER_PASSWORD=&#x27;123&#x27;</span><br><span class=\"line\">ironic-python-agent-builder -o my-ssh-ubuntu-ipa -e selinux-permissive -e devuser ubuntu</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>指定代码仓库</li>\n</ul>\n<p> 初始化对应的环境变量，然后制作镜像：</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">直接从gerrit上<span class=\"built_in\">clone</span>代码</span></span><br><span class=\"line\">DIB_REPOLOCATION_ironic_python_agent=https://opendev.org/openstack/ironic-python-agent</span><br><span class=\"line\">DIB_REPOREF_ironic_python_agent=stable/2023.1</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">指定本地仓库及分支</span></span><br><span class=\"line\">DIB_REPOLOCATION_ironic_python_agent=/home/user/path/to/repo</span><br><span class=\"line\">DIB_REPOREF_ironic_python_agent=my-test-branch</span><br><span class=\"line\"></span><br><span class=\"line\">ironic-python-agent-builder ubuntu</span><br></pre></td></tr></table></figure>\n\n<p> 参考：<a href=\"https://docs.openstack.org/diskimage-builder/latest/elements/source-repositories/README.html\">source-repositories</a>。</p>\n</li>\n<li><p>注意</p>\n<p> 原生的openstack里的pxe配置文件的模版不支持arm64架构，需要自己对原生openstack代码进行修改：<br> 在W版中，社区的ironic仍然不支持arm64位的uefi pxe启动，表现为生成的grub.cfg文件(一般位于&#x2F;tftpboot&#x2F;下)格式不对而导致pxe启动失败。</p>\n<p> 生成的错误配置文件：</p>\n<p> <img src=\"/../../img/install/ironic-err.png\" alt=\"ironic-err\"></p>\n<p> 如上图所示，arm架构里寻找vmlinux和ramdisk镜像的命令分别是linux和initrd，上图所示的标红命令是x86架构下的uefi pxe启动。</p>\n<p> 需要用户对生成grub.cfg的代码逻辑自行修改。</p>\n<p> ironic向ipa发送查询命令执行状态请求的tls报错：</p>\n<p> 当前版本的ipa和ironic默认都会开启tls认证的方式向对方发送请求，跟据官网的说明进行关闭即可。</p>\n<ul>\n<li>修改ironic配置文件(&#x2F;etc&#x2F;ironic&#x2F;ironic.conf)下面的配置中添加ipa-insecure&#x3D;1：</li>\n</ul>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[agent]</span></span><br><span class=\"line\"><span class=\"attr\">verify_ca</span> = <span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"section\">[pxe]</span></span><br><span class=\"line\"><span class=\"attr\">pxe_append_params</span> = nofb nomodeset vga=normal coreos.autologin ipa-insecure=<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>ramdisk镜像中添加ipa配置文件&#x2F;etc&#x2F;ironic_python_agent&#x2F;ironic_python_agent.conf并配置tls的配置如下：</li>\n</ul>\n<p> &#x2F;etc&#x2F;ironic_python_agent&#x2F;ironic_python_agent.conf (需要提前创建&#x2F;etc&#x2F;    ironic_python_agent目录）</p>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[DEFAULT]</span></span><br><span class=\"line\"><span class=\"attr\">enable_auto_tls</span> = <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n\n<p> 设置权限：</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chown -R ipa.ipa /etc/ironic_python_agent/</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>ramdisk镜像中修改ipa服务的服务启动文件，添加配置文件选项</li>\n</ul>\n<p> 编辑&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;ironic-python-agent.service文件</p>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[Unit]</span></span><br><span class=\"line\"><span class=\"attr\">Description</span>=Ironic Python Agent</span><br><span class=\"line\"><span class=\"attr\">After</span>=network-<span class=\"literal\">on</span>line.target</span><br><span class=\"line\"><span class=\"section\">[Service]</span></span><br><span class=\"line\"><span class=\"attr\">ExecStartPre</span>=/sbin/modprobe vfat</span><br><span class=\"line\"><span class=\"attr\">ExecStart</span>=/usr/local/bin/ironic-python-agent --config-file /etc/    ironic_python_agent/ironic_python_agent.conf</span><br><span class=\"line\"><span class=\"attr\">Restart</span>=always</span><br><span class=\"line\"><span class=\"attr\">RestartSec</span>=<span class=\"number\">30</span>s</span><br><span class=\"line\"><span class=\"section\">[Install]</span></span><br><span class=\"line\"><span class=\"attr\">WantedBy</span>=multi-user.target</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"Trove\"><a href=\"#Trove\" class=\"headerlink\" title=\"Trove\"></a>Trove</h4><p>Trove是OpenStack的数据库服务，如果用户使用OpenStack提供的数据库服务则推荐使用该组件。否则，可以不用安装。</p>\n<p><strong>Controller节点</strong></p>\n<ol>\n<li><p>创建数据库。</p>\n<p> 数据库服务在数据库中存储信息，创建一个trove用户可以访问的trove数据库，替换TROVE_DBPASS为合适的密码。</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> DATABASE trove <span class=\"type\">CHARACTER</span> <span class=\"keyword\">SET</span> utf8;</span><br><span class=\"line\"><span class=\"keyword\">GRANT</span> <span class=\"keyword\">ALL</span> PRIVILEGES <span class=\"keyword\">ON</span> trove.<span class=\"operator\">*</span> <span class=\"keyword\">TO</span> <span class=\"string\">&#x27;trove&#x27;</span>@<span class=\"string\">&#x27;localhost&#x27;</span> IDENTIFIED <span class=\"keyword\">BY</span> <span class=\"string\">&#x27;TROVE_DBPASS&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">GRANT</span> <span class=\"keyword\">ALL</span> PRIVILEGES <span class=\"keyword\">ON</span> trove.<span class=\"operator\">*</span> <span class=\"keyword\">TO</span> <span class=\"string\">&#x27;trove&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span> IDENTIFIED <span class=\"keyword\">BY</span> <span class=\"string\">&#x27;TROVE_DBPASS&#x27;</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建服务凭证以及API端点。</p>\n<p> 创建服务凭证。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建trove用户</span></span><br><span class=\"line\">openstack user create --domain default --password-prompt trove</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">添加admin角色</span></span><br><span class=\"line\">openstack role add --project service --user trove admin</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建database服务</span></span><br><span class=\"line\">openstack service create --name trove --description &quot;Database service&quot; database</span><br></pre></td></tr></table></figure>\n\n<p> 创建API端点。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openstack endpoint create --region RegionOne database public http://controller:8779/v1.0/%\\(tenant_id\\)s</span><br><span class=\"line\">openstack endpoint create --region RegionOne database internal http://controller:8779/v1.0/%\\(tenant_id\\)s</span><br><span class=\"line\">openstack endpoint create --region RegionOne database admin http://controller:8779/v1.0/%\\(tenant_id\\)s</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装Trove。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dnf install openstack-trove python-troveclient</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改配置文件。</p>\n<p> 编辑&#x2F;etc&#x2F;trove&#x2F;trove.conf。</p>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[DEFAULT]</span></span><br><span class=\"line\"><span class=\"attr\">bind_host</span>=<span class=\"number\">192.168</span>.<span class=\"number\">0.2</span></span><br><span class=\"line\"><span class=\"attr\">log_dir</span> = /var/log/trove</span><br><span class=\"line\"><span class=\"attr\">network_driver</span> = trove.network.neutron.NeutronDriver</span><br><span class=\"line\"><span class=\"attr\">network_label_regex</span>=.*</span><br><span class=\"line\"><span class=\"attr\">management_security_groups</span> = &lt;manage security group&gt;</span><br><span class=\"line\"><span class=\"attr\">nova_keypair</span> = trove-mgmt</span><br><span class=\"line\"><span class=\"attr\">default_datastore</span> = mysql</span><br><span class=\"line\"><span class=\"attr\">taskmanager_manager</span> = trove.taskmanager.manager.Manager</span><br><span class=\"line\"><span class=\"attr\">trove_api_workers</span> = <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"attr\">transport_url</span> = rabbit://openstack:RABBIT_PASS@controller:<span class=\"number\">5672</span>/</span><br><span class=\"line\"><span class=\"attr\">reboot_time_out</span> = <span class=\"number\">300</span></span><br><span class=\"line\"><span class=\"attr\">usage_timeout</span> = <span class=\"number\">900</span></span><br><span class=\"line\"><span class=\"attr\">agent_call_high_timeout</span> = <span class=\"number\">1200</span></span><br><span class=\"line\"><span class=\"attr\">use_syslog</span> = <span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"attr\">debug</span> = <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[database]</span></span><br><span class=\"line\"><span class=\"attr\">connection</span> = mysql+pymysql://trove:TROVE_DBPASS@controller/trove</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[keystone_authtoken]</span></span><br><span class=\"line\"><span class=\"attr\">auth_url</span> = http://controller:<span class=\"number\">5000</span>/v3/</span><br><span class=\"line\"><span class=\"attr\">auth_type</span> = password</span><br><span class=\"line\"><span class=\"attr\">project_domain_name</span> = Default</span><br><span class=\"line\"><span class=\"attr\">project_name</span> = service</span><br><span class=\"line\"><span class=\"attr\">user_domain_name</span> = Default</span><br><span class=\"line\"><span class=\"attr\">password</span> = trove</span><br><span class=\"line\"><span class=\"attr\">username</span> = TROVE_PASS</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[service_credentials]</span></span><br><span class=\"line\"><span class=\"attr\">auth_url</span> = http://controller:<span class=\"number\">5000</span>/v3/</span><br><span class=\"line\"><span class=\"attr\">region_name</span> = RegionOne</span><br><span class=\"line\"><span class=\"attr\">project_name</span> = service</span><br><span class=\"line\"><span class=\"attr\">project_domain_name</span> = Default</span><br><span class=\"line\"><span class=\"attr\">user_domain_name</span> = Default</span><br><span class=\"line\"><span class=\"attr\">username</span> = trove</span><br><span class=\"line\"><span class=\"attr\">password</span> = TROVE_PASS</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[mariadb]</span></span><br><span class=\"line\"><span class=\"attr\">tcp_ports</span> = <span class=\"number\">3306</span>,<span class=\"number\">4444</span>,<span class=\"number\">4567</span>,<span class=\"number\">4568</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[mysql]</span></span><br><span class=\"line\"><span class=\"attr\">tcp_ports</span> = <span class=\"number\">3306</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[postgresql]</span></span><br><span class=\"line\"><span class=\"attr\">tcp_ports</span> = <span class=\"number\">5432</span></span><br></pre></td></tr></table></figure>\n\n<p> <strong>解释：</strong></p>\n<blockquote>\n<p><code>[Default]</code>分组中<code>bind_host</code>配置为Trove控制节点的IP。<br><code>transport_url</code> 为<code>RabbitMQ</code>连接信息，<code>RABBIT_PASS</code>替换为RabbitMQ的密码。<br><code>[database]</code>分组中的<code>connection</code> 为前面在mysql中为Trove创建的数据库信息。<br>Trove的用户信息中<code>TROVE_PASSWORD</code>替换为实际trove用户的密码。</p>\n</blockquote>\n<p> 编辑&#x2F;etc&#x2F;trove&#x2F;trove-guestagent.conf。</p>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[DEFAULT]</span></span><br><span class=\"line\"><span class=\"attr\">log_file</span> = trove-guestagent.log</span><br><span class=\"line\"><span class=\"attr\">log_dir</span> = /var/log/trove/</span><br><span class=\"line\"><span class=\"attr\">ignore_users</span> = os_admin</span><br><span class=\"line\"><span class=\"attr\">control_exchange</span> = trove</span><br><span class=\"line\"><span class=\"attr\">transport_url</span> = rabbit://openstack:RABBIT_PASS@controller:<span class=\"number\">5672</span>/</span><br><span class=\"line\"><span class=\"attr\">rpc_backend</span> = rabbit</span><br><span class=\"line\"><span class=\"attr\">command_process_timeout</span> = <span class=\"number\">60</span></span><br><span class=\"line\"><span class=\"attr\">use_syslog</span> = <span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"attr\">debug</span> = <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[service_credentials]</span></span><br><span class=\"line\"><span class=\"attr\">auth_url</span> = http://controller:<span class=\"number\">5000</span>/v3/</span><br><span class=\"line\"><span class=\"attr\">region_name</span> = RegionOne</span><br><span class=\"line\"><span class=\"attr\">project_name</span> = service</span><br><span class=\"line\"><span class=\"attr\">password</span> = TROVE_PASS</span><br><span class=\"line\"><span class=\"attr\">project_domain_name</span> = Default</span><br><span class=\"line\"><span class=\"attr\">user_domain_name</span> = Default</span><br><span class=\"line\"><span class=\"attr\">username</span> = trove</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[mysql]</span></span><br><span class=\"line\"><span class=\"attr\">docker_image</span> = your-registry/your-repo/mysql</span><br><span class=\"line\"><span class=\"attr\">backup_docker_image</span> = your-registry/your-repo/db-backup-mysql:<span class=\"number\">1.1</span>.<span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n<p> <strong>解释：</strong> </p>\n<blockquote>\n<p><code>guestagent</code>是trove中一个独立组件，需要预先内置到Trove通过Nova创建的虚拟机镜像中，在创建好数据库实例后，会起guestagent进程，负责通过消息队列（RabbitMQ）向Trove上报心跳，因此需要配置RabbitMQ的用户和密码信息。<br><code>transport_url</code> 为<code>RabbitMQ</code>连接信息，<code>RABBIT_PASS</code>替换为RabbitMQ的密码。<br>Trove的用户信息中<code>TROVE_PASSWORD</code>替换为实际trove用户的密码。<br>从Victoria版开始，Trove使用一个统一的镜像来跑不同类型的数据库，数据库服务运行在Guest虚拟机的Docker容器中。</p>\n</blockquote>\n</li>\n<li><p>数据库同步。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">su -s /bin/sh -c &quot;trove-manage db_sync&quot; trove</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>完成安装。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">配置服务自启</span></span><br><span class=\"line\">systemctl enable openstack-trove-api.service openstack-trove-taskmanager.service \\ </span><br><span class=\"line\">openstack-trove-conductor.service</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">启动服务</span></span><br><span class=\"line\">systemctl start openstack-trove-api.service openstack-trove-taskmanager.service \\ </span><br><span class=\"line\">openstack-trove-conductor.service</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"Swift\"><a href=\"#Swift\" class=\"headerlink\" title=\"Swift\"></a>Swift</h4><p>Swift 提供了弹性可伸缩、高可用的分布式对象存储服务，适合存储大规模非结构化数据。</p>\n<p><strong>Controller节点</strong></p>\n<ol>\n<li><p>创建服务凭证以及API端点。</p>\n<p> 创建服务凭证。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建swift用户</span></span><br><span class=\"line\">openstack user create --domain default --password-prompt swift</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">添加admin角色</span></span><br><span class=\"line\">openstack role add --project service --user swift admin</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建对象存储服务</span></span><br><span class=\"line\">openstack service create --name swift --description &quot;OpenStack Object Storage&quot; object-store</span><br></pre></td></tr></table></figure>\n\n<p> 创建API端点。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openstack endpoint create --region RegionOne object-store public http://controller:8080/v1/AUTH_%\\(project_id\\)s</span><br><span class=\"line\">openstack endpoint create --region RegionOne object-store internal http://controller:8080/v1/AUTH_%\\(project_id\\)s</span><br><span class=\"line\">openstack endpoint create --region RegionOne object-store admin http://controller:8080/v1 </span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装Swift。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dnf install openstack-swift-proxy python3-swiftclient python3-keystoneclient \\ </span><br><span class=\"line\">python3-keystonemiddleware memcached</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置proxy-server。</p>\n<p> Swift RPM包里已经包含了一个基本可用的proxy-server.conf，只需要手动修改其中的ip和SWIFT_PASS即可。</p>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/swift/proxy-server.conf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[filter:authtoken]</span></span><br><span class=\"line\"><span class=\"attr\">paste.filter_factory</span> = keystonemiddleware.auth_token:filter_factory</span><br><span class=\"line\"><span class=\"attr\">www_authenticate_uri</span> = http://controller:<span class=\"number\">5000</span></span><br><span class=\"line\"><span class=\"attr\">auth_url</span> = http://controller:<span class=\"number\">5000</span></span><br><span class=\"line\"><span class=\"attr\">memcached_servers</span> = controller:<span class=\"number\">11211</span></span><br><span class=\"line\"><span class=\"attr\">auth_type</span> = password</span><br><span class=\"line\"><span class=\"attr\">project_domain_id</span> = default</span><br><span class=\"line\"><span class=\"attr\">user_domain_id</span> = default</span><br><span class=\"line\"><span class=\"attr\">project_name</span> = service</span><br><span class=\"line\"><span class=\"attr\">username</span> = swift</span><br><span class=\"line\"><span class=\"attr\">password</span> = SWIFT_PASS</span><br><span class=\"line\"><span class=\"attr\">delay_auth_decision</span> = <span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"attr\">service_token_roles_required</span> = <span class=\"literal\">True</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><strong>Storage节点</strong></p>\n<ol>\n<li><p>安装支持的程序包。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dnf install openstack-swift-account openstack-swift-container openstack-swift-object</span><br><span class=\"line\">dnf install xfsprogs rsync</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>将设备&#x2F;dev&#x2F;sdb和&#x2F;dev&#x2F;sdc格式化为XFS。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkfs.xfs /dev/sdb</span><br><span class=\"line\">mkfs.xfs /dev/sdc</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建挂载点目录结构。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p /srv/node/sdb</span><br><span class=\"line\">mkdir -p /srv/node/sdc</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>找到新分区的UUID。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">blkid</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>编辑&#x2F;etc&#x2F;fstab文件并将以下内容添加到其中。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UUID=&quot;&lt;UUID-from-output-above&gt;&quot; /srv/node/sdb xfs noatime 0 2</span><br><span class=\"line\">UUID=&quot;&lt;UUID-from-output-above&gt;&quot; /srv/node/sdc xfs noatime 0 2</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>挂载设备。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mount /srv/node/sdb</span><br><span class=\"line\">mount /srv/node/sdc</span><br></pre></td></tr></table></figure>\n\n<p> <em><strong>注意</strong></em></p>\n<p> <strong>如果用户不需要容灾功能，以上步骤只需要创建一个设备即可，同时可以跳过下面的rsync配置。</strong></p>\n</li>\n<li><p>（可选）创建或编辑&#x2F;etc&#x2F;rsyncd.conf文件以包含以下内容:</p>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[DEFAULT]</span></span><br><span class=\"line\"><span class=\"attr\">uid</span> = swift</span><br><span class=\"line\"><span class=\"attr\">gid</span> = swift</span><br><span class=\"line\">log <span class=\"attr\">file</span> = /var/log/rsyncd.log</span><br><span class=\"line\">pid <span class=\"attr\">file</span> = /var/run/rsyncd.pid</span><br><span class=\"line\"><span class=\"attr\">address</span> = MANAGEMENT_INTERFACE_IP_ADDRESS</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[account]</span></span><br><span class=\"line\">max <span class=\"attr\">connections</span> = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"attr\">path</span> = /srv/node/</span><br><span class=\"line\">read <span class=\"attr\">only</span> = <span class=\"literal\">False</span></span><br><span class=\"line\">lock <span class=\"attr\">file</span> = /var/lock/account.lock</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[container]</span></span><br><span class=\"line\">max <span class=\"attr\">connections</span> = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"attr\">path</span> = /srv/node/</span><br><span class=\"line\">read <span class=\"attr\">only</span> = <span class=\"literal\">False</span></span><br><span class=\"line\">lock <span class=\"attr\">file</span> = /var/lock/container.lock</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[object]</span></span><br><span class=\"line\">max <span class=\"attr\">connections</span> = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"attr\">path</span> = /srv/node/</span><br><span class=\"line\">read <span class=\"attr\">only</span> = <span class=\"literal\">False</span></span><br><span class=\"line\">lock <span class=\"attr\">file</span> = /var/lock/object.lock</span><br></pre></td></tr></table></figure>\n\n<p> <strong>替换MANAGEMENT_INTERFACE_IP_ADDRESS为存储节点上管理网络的IP地址</strong></p>\n<p> 启动rsyncd服务并配置它在系统启动时启动:</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl enable rsyncd.service</span><br><span class=\"line\">systemctl start rsyncd.service</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置存储节点。</p>\n<p> 编辑&#x2F;etc&#x2F;swift目录的account-server.conf、container-server.conf和object-server.conf文件，替换bind_ip为存储节点上管理网络的IP地址。</p>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[DEFAULT]</span></span><br><span class=\"line\"><span class=\"attr\">bind_ip</span> = <span class=\"number\">192.168</span>.<span class=\"number\">0.4</span></span><br></pre></td></tr></table></figure>\n\n<p> 确保挂载点目录结构的正确所有权。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chown -R swift:swift /srv/node</span><br></pre></td></tr></table></figure>\n\n<p> 创建recon目录并确保其拥有正确的所有权。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p /var/cache/swift</span><br><span class=\"line\">chown -R root:swift /var/cache/swift</span><br><span class=\"line\">chmod -R 775 /var/cache/swift</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><strong>Controller节点创建并分发环</strong></p>\n<ol>\n<li><p>创建账号环。</p>\n<p> 切换到<code>/etc/swift</code>目录。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /etc/swift</span><br></pre></td></tr></table></figure>\n\n<p> 创建基础<code>account.builder</code>文件。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">swift-ring-builder account.builder create 10 1 1</span><br></pre></td></tr></table></figure>\n\n<p> 将每个存储节点添加到环中。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">swift-ring-builder account.builder add --region 1 --zone 1 \\</span><br><span class=\"line\">--ip STORAGE_NODE_MANAGEMENT_INTERFACE_IP_ADDRESS \\ </span><br><span class=\"line\">--port 6202  --device DEVICE_NAME \\ </span><br><span class=\"line\">--weight 100</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>替换STORAGE_NODE_MANAGEMENT_INTERFACE_IP_ADDRESS为存储节点上管理网络的IP地址。<br>替换DEVICE_NAME为同一存储节点上的存储设备名称。</p>\n</blockquote>\n<p> <em><strong>注意</strong></em></p>\n<p> <strong>对每个存储节点上的每个存储设备重复此命令</strong></p>\n<p> 验证账号环内容。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">swift-ring-builder account.builder</span><br></pre></td></tr></table></figure>\n\n<p> 重新平衡账号环。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">swift-ring-builder account.builder rebalance</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建容器环。</p>\n<p> 切换到<code>/etc/swift</code>目录。</p>\n<p> 创建基础<code>container.builder</code>文件。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">swift-ring-builder container.builder create 10 1 1</span><br></pre></td></tr></table></figure>\n\n<p> 将每个存储节点添加到环中。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">swift-ring-builder container.builder add --region 1 --zone 1 \\</span><br><span class=\"line\">--ip STORAGE_NODE_MANAGEMENT_INTERFACE_IP_ADDRESS </span><br><span class=\"line\">--port 6201 --device DEVICE_NAME \\</span><br><span class=\"line\">--weight 100</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>替换STORAGE_NODE_MANAGEMENT_INTERFACE_IP_ADDRESS为存储节点上管理网络的IP地址。<br>替换DEVICE_NAME为同一存储节点上的存储设备名称。</p>\n</blockquote>\n<p> <em><strong>注意</strong></em></p>\n<p> <strong>对每个存储节点上的每个存储设备重复此命令</strong></p>\n<p> 验证容器环内容。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">swift-ring-builder container.builder</span><br></pre></td></tr></table></figure>\n\n<p> 重新平衡容器环。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">swift-ring-builder container.builder rebalance</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建对象环。</p>\n<p> 切换到<code>/etc/swift</code>目录。</p>\n<p> 创建基础<code>object.builder</code>文件。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">swift-ring-builder object.builder create 10 1 1</span><br></pre></td></tr></table></figure>\n\n<p> 将每个存储节点添加到环中。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">swift-ring-builder object.builder add --region 1 --zone 1 \\</span><br><span class=\"line\">--ip STORAGE_NODE_MANAGEMENT_INTERFACE_IP_ADDRESS \\</span><br><span class=\"line\">--port 6200 --device DEVICE_NAME \\</span><br><span class=\"line\">--weight 100</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>替换STORAGE_NODE_MANAGEMENT_INTERFACE_IP_ADDRESS为存储节点上管理网络的IP地址。<br>替换DEVICE_NAME为同一存储节点上的存储设备名称。</p>\n</blockquote>\n<p> <em><strong>注意</strong></em></p>\n<p> <strong>对每个存储节点上的每个存储设备重复此命令</strong></p>\n<p> 验证对象环内容。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">swift-ring-builder object.builder</span><br></pre></td></tr></table></figure>\n\n<p> 重新平衡对象环。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">swift-ring-builder object.builder rebalance</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>分发环配置文件。</p>\n<p> 将<code>account.ring.gz</code>，<code>container.ring.gz</code>以及 <code>object.ring.gz</code>文件复制到每个存储节点和运行代理服务的任何其他节点上的<code>/etc/swift</code>目录。</p>\n</li>\n<li><p>编辑配置文件&#x2F;etc&#x2F;swift&#x2F;swift.conf。</p>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[swift-hash]</span></span><br><span class=\"line\"><span class=\"attr\">swift_hash_path_suffix</span> = test-hash</span><br><span class=\"line\"><span class=\"attr\">swift_hash_path_prefix</span> = test-hash</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[storage-policy:0]</span></span><br><span class=\"line\"><span class=\"attr\">name</span> = Policy-<span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"attr\">default</span> = <span class=\"literal\">yes</span></span><br></pre></td></tr></table></figure>\n\n<p> <strong>用唯一值替换 test-hash</strong></p>\n<p> 将swift.conf文件复制到&#x2F;etc&#x2F;swift每个存储节点和运行代理服务的任何其他节点上的目录。</p>\n<p> 在所有节点上，确保配置目录的正确所有权。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chown -R root:swift /etc/swift</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>完成安装</p>\n<p> 在控制节点和运行代理服务的任何其他节点上，启动对象存储代理服务及其依赖项，并将它们配置为在系统启动时启动。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl enable openstack-swift-proxy.service memcached.service</span><br><span class=\"line\">systemctl start openstack-swift-proxy.service memcached.service</span><br></pre></td></tr></table></figure>\n\n<p> 在存储节点上，启动对象存储服务并将它们配置为在系统启动时启动。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl enable openstack-swift-account.service \\</span><br><span class=\"line\">openstack-swift-account-auditor.service \\</span><br><span class=\"line\">openstack-swift-account-reaper.service \\</span><br><span class=\"line\">openstack-swift-account-replicator.service \\</span><br><span class=\"line\">openstack-swift-container.service \\</span><br><span class=\"line\">openstack-swift-container-auditor.service \\</span><br><span class=\"line\">openstack-swift-container-replicator.service \\</span><br><span class=\"line\">openstack-swift-container-updater.service \\</span><br><span class=\"line\">openstack-swift-object.service \\</span><br><span class=\"line\">openstack-swift-object-auditor.service \\</span><br><span class=\"line\">openstack-swift-object-replicator.service \\</span><br><span class=\"line\">openstack-swift-object-updater.service</span><br><span class=\"line\"></span><br><span class=\"line\">systemctl start openstack-swift-account.service \\</span><br><span class=\"line\">openstack-swift-account-auditor.service \\</span><br><span class=\"line\">openstack-swift-account-reaper.service \\</span><br><span class=\"line\">openstack-swift-account-replicator.service \\</span><br><span class=\"line\">openstack-swift-container.service \\</span><br><span class=\"line\">openstack-swift-container-auditor.service \\</span><br><span class=\"line\">openstack-swift-container-replicator.service \\</span><br><span class=\"line\">openstack-swift-container-updater.service \\</span><br><span class=\"line\">openstack-swift-object.service \\</span><br><span class=\"line\">openstack-swift-object-auditor.service \\</span><br><span class=\"line\">openstack-swift-object-replicator.service \\</span><br><span class=\"line\">openstack-swift-object-updater.service</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"Cyborg\"><a href=\"#Cyborg\" class=\"headerlink\" title=\"Cyborg\"></a>Cyborg</h4><p>Cyborg为OpenStack提供加速器设备的支持，包括 GPU, FPGA, ASIC, NP, SoCs, NVMe&#x2F;NOF SSDs, ODP, DPDK&#x2F;SPDK等等。</p>\n<p><strong>Controller节点</strong></p>\n<ol>\n<li><p>初始化对应数据库</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql <span class=\"operator\">-</span>u root <span class=\"operator\">-</span>p</span><br><span class=\"line\"></span><br><span class=\"line\">MariaDB [(<span class=\"keyword\">none</span>)]<span class=\"operator\">&gt;</span> <span class=\"keyword\">CREATE</span> DATABASE cyborg;</span><br><span class=\"line\">MariaDB [(<span class=\"keyword\">none</span>)]<span class=\"operator\">&gt;</span> <span class=\"keyword\">GRANT</span> <span class=\"keyword\">ALL</span> PRIVILEGES <span class=\"keyword\">ON</span> cyborg.<span class=\"operator\">*</span> <span class=\"keyword\">TO</span> <span class=\"string\">&#x27;cyborg&#x27;</span>@<span class=\"string\">&#x27;localhost&#x27;</span> IDENTIFIED <span class=\"keyword\">BY</span> <span class=\"string\">&#x27;CYBORG_DBPASS&#x27;</span>;</span><br><span class=\"line\">MariaDB [(<span class=\"keyword\">none</span>)]<span class=\"operator\">&gt;</span> <span class=\"keyword\">GRANT</span> <span class=\"keyword\">ALL</span> PRIVILEGES <span class=\"keyword\">ON</span> cyborg.<span class=\"operator\">*</span> <span class=\"keyword\">TO</span> <span class=\"string\">&#x27;cyborg&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span> IDENTIFIED <span class=\"keyword\">BY</span> <span class=\"string\">&#x27;CYBORG_DBPASS&#x27;</span>;</span><br><span class=\"line\">MariaDB [(<span class=\"keyword\">none</span>)]<span class=\"operator\">&gt;</span> exit;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建用户和服务，并记住创建cybory用户时输入的密码，用于配置CYBORG_PASS</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source ~/.admin-openrc</span><br><span class=\"line\">openstack user create --domain default --password-prompt cyborg</span><br><span class=\"line\">openstack role add --project service --user cyborg admin</span><br><span class=\"line\">openstack service create --name cyborg --description &quot;Acceleration Service&quot; accelerator</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用uwsgi部署Cyborg api服务</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openstack endpoint create --region RegionOne accelerator public http://controller/accelerator/v2</span><br><span class=\"line\">openstack endpoint create --region RegionOne accelerator internal http://controller/accelerator/v2</span><br><span class=\"line\">openstack endpoint create --region RegionOne accelerator admin http://controller/accelerator/v2</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装Cyborg</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dnf install openstack-cyborg</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置Cyborg</p>\n<p> 修改<code>/etc/cyborg/cyborg.conf</code></p>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[DEFAULT]</span></span><br><span class=\"line\"><span class=\"attr\">transport_url</span> = rabbit://openstack:RABBIT_PASS@controller:<span class=\"number\">5672</span>/</span><br><span class=\"line\"><span class=\"attr\">use_syslog</span> = <span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"attr\">state_path</span> = /var/lib/cyborg</span><br><span class=\"line\"><span class=\"attr\">debug</span> = <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[api]</span></span><br><span class=\"line\"><span class=\"attr\">host_ip</span> = <span class=\"number\">0.0</span>.<span class=\"number\">0.0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[database]</span></span><br><span class=\"line\"><span class=\"attr\">connection</span> = mysql+pymysql://cyborg:CYBORG_DBPASS@controller/cyborg</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[service_catalog]</span></span><br><span class=\"line\"><span class=\"attr\">cafile</span> = /opt/stack/data/ca-bundle.pem</span><br><span class=\"line\"><span class=\"attr\">project_domain_id</span> = default</span><br><span class=\"line\"><span class=\"attr\">user_domain_id</span> = default</span><br><span class=\"line\"><span class=\"attr\">project_name</span> = service</span><br><span class=\"line\"><span class=\"attr\">password</span> = CYBORG_PASS</span><br><span class=\"line\"><span class=\"attr\">username</span> = cyborg</span><br><span class=\"line\"><span class=\"attr\">auth_url</span> = http://controller:<span class=\"number\">5000</span>/v3/</span><br><span class=\"line\"><span class=\"attr\">auth_type</span> = password</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[placement]</span></span><br><span class=\"line\"><span class=\"attr\">project_domain_name</span> = Default</span><br><span class=\"line\"><span class=\"attr\">project_name</span> = service</span><br><span class=\"line\"><span class=\"attr\">user_domain_name</span> = Default</span><br><span class=\"line\"><span class=\"attr\">password</span> = password</span><br><span class=\"line\"><span class=\"attr\">username</span> = PLACEMENT_PASS</span><br><span class=\"line\"><span class=\"attr\">auth_url</span> = http://controller:<span class=\"number\">5000</span>/v3/</span><br><span class=\"line\"><span class=\"attr\">auth_type</span> = password</span><br><span class=\"line\"><span class=\"attr\">auth_section</span> = keystone_authtoken</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[nova]</span></span><br><span class=\"line\"><span class=\"attr\">project_domain_name</span> = Default</span><br><span class=\"line\"><span class=\"attr\">project_name</span> = service</span><br><span class=\"line\"><span class=\"attr\">user_domain_name</span> = Default</span><br><span class=\"line\"><span class=\"attr\">password</span> = NOVA_PASS</span><br><span class=\"line\"><span class=\"attr\">username</span> = nova</span><br><span class=\"line\"><span class=\"attr\">auth_url</span> = http://controller:<span class=\"number\">5000</span>/v3/</span><br><span class=\"line\"><span class=\"attr\">auth_type</span> = password</span><br><span class=\"line\"><span class=\"attr\">auth_section</span> = keystone_authtoken</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[keystone_authtoken]</span></span><br><span class=\"line\"><span class=\"attr\">memcached_servers</span> = localhost:<span class=\"number\">11211</span></span><br><span class=\"line\"><span class=\"attr\">signing_dir</span> = /var/cache/cyborg/api</span><br><span class=\"line\"><span class=\"attr\">cafile</span> = /opt/stack/data/ca-bundle.pem</span><br><span class=\"line\"><span class=\"attr\">project_domain_name</span> = Default</span><br><span class=\"line\"><span class=\"attr\">project_name</span> = service</span><br><span class=\"line\"><span class=\"attr\">user_domain_name</span> = Default</span><br><span class=\"line\"><span class=\"attr\">password</span> = CYBORG_PASS</span><br><span class=\"line\"><span class=\"attr\">username</span> = cyborg</span><br><span class=\"line\"><span class=\"attr\">auth_url</span> = http://controller:<span class=\"number\">5000</span>/v3/</span><br><span class=\"line\"><span class=\"attr\">auth_type</span> = password</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>同步数据库表格</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cyborg-dbsync --config-file /etc/cyborg/cyborg.conf upgrade</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动Cyborg服务</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl enable openstack-cyborg-api openstack-cyborg-conductor openstack-cyborg-agent</span><br><span class=\"line\">systemctl start openstack-cyborg-api openstack-cyborg-conductor openstack-cyborg-agent</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"Aodh\"><a href=\"#Aodh\" class=\"headerlink\" title=\"Aodh\"></a>Aodh</h4><p>Aodh可以根据由Ceilometer或者Gnocchi收集的监控数据创建告警，并设置触发规则。</p>\n<p><strong>Controller节点</strong></p>\n<ol>\n<li><p>创建数据库。</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> DATABASE aodh;</span><br><span class=\"line\"><span class=\"keyword\">GRANT</span> <span class=\"keyword\">ALL</span> PRIVILEGES <span class=\"keyword\">ON</span> aodh.<span class=\"operator\">*</span> <span class=\"keyword\">TO</span> <span class=\"string\">&#x27;aodh&#x27;</span>@<span class=\"string\">&#x27;localhost&#x27;</span> IDENTIFIED <span class=\"keyword\">BY</span> <span class=\"string\">&#x27;AODH_DBPASS&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">GRANT</span> <span class=\"keyword\">ALL</span> PRIVILEGES <span class=\"keyword\">ON</span> aodh.<span class=\"operator\">*</span> <span class=\"keyword\">TO</span> <span class=\"string\">&#x27;aodh&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span> IDENTIFIED <span class=\"keyword\">BY</span> <span class=\"string\">&#x27;AODH_DBPASS&#x27;</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建服务凭证以及API端点。</p>\n<p> 创建服务凭证。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openstack user create --domain default --password-prompt aodh</span><br><span class=\"line\">openstack role add --project service --user aodh admin</span><br><span class=\"line\">openstack service create --name aodh --description &quot;Telemetry&quot; alarming</span><br></pre></td></tr></table></figure>\n\n<p> 创建API端点。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openstack endpoint create --region RegionOne alarming public http://controller:8042</span><br><span class=\"line\">openstack endpoint create --region RegionOne alarming internal http://controller:8042</span><br><span class=\"line\">openstack endpoint create --region RegionOne alarming admin http://controller:8042</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装Aodh。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dnf install openstack-aodh-api openstack-aodh-evaluator \\</span><br><span class=\"line\">openstack-aodh-notifier openstack-aodh-listener \\</span><br><span class=\"line\">openstack-aodh-expirer python3-aodhclient</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改配置文件。</p>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/aodh/aodh.conf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[database]</span></span><br><span class=\"line\"><span class=\"attr\">connection</span> = mysql+pymysql://aodh:AODH_DBPASS@controller/aodh</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[DEFAULT]</span></span><br><span class=\"line\"><span class=\"attr\">transport_url</span> = rabbit://openstack:RABBIT_PASS@controller</span><br><span class=\"line\"><span class=\"attr\">auth_strategy</span> = keystone</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[keystone_authtoken]</span></span><br><span class=\"line\"><span class=\"attr\">www_authenticate_uri</span> = http://controller:<span class=\"number\">5000</span></span><br><span class=\"line\"><span class=\"attr\">auth_url</span> = http://controller:<span class=\"number\">5000</span></span><br><span class=\"line\"><span class=\"attr\">memcached_servers</span> = controller:<span class=\"number\">11211</span></span><br><span class=\"line\"><span class=\"attr\">auth_type</span> = password</span><br><span class=\"line\"><span class=\"attr\">project_domain_id</span> = default</span><br><span class=\"line\"><span class=\"attr\">user_domain_id</span> = default</span><br><span class=\"line\"><span class=\"attr\">project_name</span> = service</span><br><span class=\"line\"><span class=\"attr\">username</span> = aodh</span><br><span class=\"line\"><span class=\"attr\">password</span> = AODH_PASS</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[service_credentials]</span></span><br><span class=\"line\"><span class=\"attr\">auth_type</span> = password</span><br><span class=\"line\"><span class=\"attr\">auth_url</span> = http://controller:<span class=\"number\">5000</span>/v3</span><br><span class=\"line\"><span class=\"attr\">project_domain_id</span> = default</span><br><span class=\"line\"><span class=\"attr\">user_domain_id</span> = default</span><br><span class=\"line\"><span class=\"attr\">project_name</span> = service</span><br><span class=\"line\"><span class=\"attr\">username</span> = aodh</span><br><span class=\"line\"><span class=\"attr\">password</span> = AODH_PASS</span><br><span class=\"line\"><span class=\"attr\">interface</span> = internalURL</span><br><span class=\"line\"><span class=\"attr\">region_name</span> = RegionOne</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>同步数据库。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aodh-dbsync</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>完成安装。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">配置服务自启</span></span><br><span class=\"line\">systemctl enable openstack-aodh-api.service openstack-aodh-evaluator.service \\</span><br><span class=\"line\">openstack-aodh-notifier.service openstack-aodh-listener.service</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">启动服务</span></span><br><span class=\"line\">systemctl start openstack-aodh-api.service openstack-aodh-evaluator.service \\</span><br><span class=\"line\">openstack-aodh-notifier.service openstack-aodh-listener.service</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"Gnocchi\"><a href=\"#Gnocchi\" class=\"headerlink\" title=\"Gnocchi\"></a>Gnocchi</h4><p>Gnocchi是一个开源的时间序列数据库，可以对接Ceilometer。</p>\n<p><strong>Controller节点</strong></p>\n<ol>\n<li><p>创建数据库。</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> DATABASE gnocchi;</span><br><span class=\"line\"><span class=\"keyword\">GRANT</span> <span class=\"keyword\">ALL</span> PRIVILEGES <span class=\"keyword\">ON</span> gnocchi.<span class=\"operator\">*</span> <span class=\"keyword\">TO</span> <span class=\"string\">&#x27;gnocchi&#x27;</span>@<span class=\"string\">&#x27;localhost&#x27;</span> IDENTIFIED <span class=\"keyword\">BY</span> <span class=\"string\">&#x27;GNOCCHI_DBPASS&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">GRANT</span> <span class=\"keyword\">ALL</span> PRIVILEGES <span class=\"keyword\">ON</span> gnocchi.<span class=\"operator\">*</span> <span class=\"keyword\">TO</span> <span class=\"string\">&#x27;gnocchi&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span> IDENTIFIED <span class=\"keyword\">BY</span> <span class=\"string\">&#x27;GNOCCHI_DBPASS&#x27;</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建服务凭证以及API端点。</p>\n<p> 创建服务凭证。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openstack user create --domain default --password-prompt gnocchi</span><br><span class=\"line\">openstack role add --project service --user gnocchi admin</span><br><span class=\"line\">openstack service create --name gnocchi --description &quot;Metric Service&quot; metric</span><br></pre></td></tr></table></figure>\n\n<p> 创建API端点。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openstack endpoint create --region RegionOne metric public http://controller:8041</span><br><span class=\"line\">openstack endpoint create --region RegionOne metric internal http://controller:8041</span><br><span class=\"line\">openstack endpoint create --region RegionOne metric admin http://controller:8041</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装Gnocchi。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dnf install openstack-gnocchi-api openstack-gnocchi-metricd python3-gnocchiclient</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改配置文件。</p>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/gnocchi/gnocchi.conf</span><br><span class=\"line\"><span class=\"section\">[api]</span></span><br><span class=\"line\"><span class=\"attr\">auth_mode</span> = keystone</span><br><span class=\"line\"><span class=\"attr\">port</span> = <span class=\"number\">8041</span></span><br><span class=\"line\"><span class=\"attr\">uwsgi_mode</span> = http-socket</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[keystone_authtoken]</span></span><br><span class=\"line\"><span class=\"attr\">auth_type</span> = password</span><br><span class=\"line\"><span class=\"attr\">auth_url</span> = http://controller:<span class=\"number\">5000</span>/v3</span><br><span class=\"line\"><span class=\"attr\">project_domain_name</span> = Default</span><br><span class=\"line\"><span class=\"attr\">user_domain_name</span> = Default</span><br><span class=\"line\"><span class=\"attr\">project_name</span> = service</span><br><span class=\"line\"><span class=\"attr\">username</span> = gnocchi</span><br><span class=\"line\"><span class=\"attr\">password</span> = GNOCCHI_PASS</span><br><span class=\"line\"><span class=\"attr\">interface</span> = internalURL</span><br><span class=\"line\"><span class=\"attr\">region_name</span> = RegionOne</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[indexer]</span></span><br><span class=\"line\"><span class=\"attr\">url</span> = mysql+pymysql://gnocchi:GNOCCHI_DBPASS@controller/gnocchi</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[storage]</span></span><br><span class=\"line\"><span class=\"comment\"># coordination_url is not required but specifying one will improve</span></span><br><span class=\"line\"><span class=\"comment\"># performance with better workload division across workers.</span></span><br><span class=\"line\"><span class=\"comment\"># coordination_url = redis://controller:6379</span></span><br><span class=\"line\"><span class=\"attr\">file_basepath</span> = /var/lib/gnocchi</span><br><span class=\"line\"><span class=\"attr\">driver</span> = file</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>同步数据库。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gnocchi-upgrade</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>完成安装。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">配置服务自启</span></span><br><span class=\"line\">systemctl enable openstack-gnocchi-api.service openstack-gnocchi-metricd.service</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">启动服务</span></span><br><span class=\"line\">systemctl start openstack-gnocchi-api.service openstack-gnocchi-metricd.service</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"Ceilometer\"><a href=\"#Ceilometer\" class=\"headerlink\" title=\"Ceilometer\"></a>Ceilometer</h4><p>Ceilometer是OpenStack中负责数据收集的服务。</p>\n<p><strong>Controller节点</strong></p>\n<ol>\n<li><p>创建服务凭证。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openstack user create --domain default --password-prompt ceilometer</span><br><span class=\"line\">openstack role add --project service --user ceilometer admin</span><br><span class=\"line\">openstack service create --name ceilometer --description &quot;Telemetry&quot; metering</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装Ceilometer软件包。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dnf install openstack-ceilometer-notification openstack-ceilometer-central</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>编辑配置文件&#x2F;etc&#x2F;ceilometer&#x2F;pipeline.yaml。 </p>\n <figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">publishers:</span></span><br><span class=\"line\">    <span class=\"comment\"># set address of Gnocchi</span></span><br><span class=\"line\">    <span class=\"comment\"># + filter out Gnocchi-related activity meters (Swift driver)</span></span><br><span class=\"line\">    <span class=\"comment\"># + set default archive policy</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">gnocchi://?filter_project=service&amp;archive_policy=low</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>编辑配置文件&#x2F;etc&#x2F;ceilometer&#x2F;ceilometer.conf。</p>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[DEFAULT]</span></span><br><span class=\"line\"><span class=\"attr\">transport_url</span> = rabbit://openstack:RABBIT_PASS@controller</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[service_credentials]</span></span><br><span class=\"line\"><span class=\"attr\">auth_type</span> = password</span><br><span class=\"line\"><span class=\"attr\">auth_url</span> = http://controller:<span class=\"number\">5000</span>/v3</span><br><span class=\"line\"><span class=\"attr\">project_domain_id</span> = default</span><br><span class=\"line\"><span class=\"attr\">user_domain_id</span> = default</span><br><span class=\"line\"><span class=\"attr\">project_name</span> = service</span><br><span class=\"line\"><span class=\"attr\">username</span> = ceilometer</span><br><span class=\"line\"><span class=\"attr\">password</span> = CEILOMETER_PASS</span><br><span class=\"line\"><span class=\"attr\">interface</span> = internalURL</span><br><span class=\"line\"><span class=\"attr\">region_name</span> = RegionOne</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>数据库同步。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ceilometer-upgrade</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>完成控制节点Ceilometer安装。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">配置服务自启</span></span><br><span class=\"line\">systemctl enable openstack-ceilometer-notification.service openstack-ceilometer-central.service</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">启动服务</span></span><br><span class=\"line\">systemctl start openstack-ceilometer-notification.service openstack-ceilometer-central.service</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><strong>Compute节点</strong></p>\n<ol>\n<li><p>安装Ceilometer软件包。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dnf install openstack-ceilometer-compute</span><br><span class=\"line\">dnf install openstack-ceilometer-ipmi       # 可选</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>编辑配置文件&#x2F;etc&#x2F;ceilometer&#x2F;ceilometer.conf。</p>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[DEFAULT]</span></span><br><span class=\"line\"><span class=\"attr\">transport_url</span> = rabbit://openstack:RABBIT_PASS@controller</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[service_credentials]</span></span><br><span class=\"line\"><span class=\"attr\">auth_url</span> = http://controller:<span class=\"number\">5000</span></span><br><span class=\"line\"><span class=\"attr\">project_domain_id</span> = default</span><br><span class=\"line\"><span class=\"attr\">user_domain_id</span> = default</span><br><span class=\"line\"><span class=\"attr\">auth_type</span> = password</span><br><span class=\"line\"><span class=\"attr\">username</span> = ceilometer</span><br><span class=\"line\"><span class=\"attr\">project_name</span> = service</span><br><span class=\"line\"><span class=\"attr\">password</span> = CEILOMETER_PASS</span><br><span class=\"line\"><span class=\"attr\">interface</span> = internalURL</span><br><span class=\"line\"><span class=\"attr\">region_name</span> = RegionOne</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>编辑配置文件&#x2F;etc&#x2F;nova&#x2F;nova.conf。</p>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[DEFAULT]</span></span><br><span class=\"line\"><span class=\"attr\">instance_usage_audit</span> = <span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"attr\">instance_usage_audit_period</span> = hour</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[notifications]</span></span><br><span class=\"line\"><span class=\"attr\">notify_on_state_change</span> = vm_and_task_state</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[oslo_messaging_notifications]</span></span><br><span class=\"line\"><span class=\"attr\">driver</span> = messagingv2</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>完成安装。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl enable openstack-ceilometer-compute.service</span><br><span class=\"line\">systemctl start openstack-ceilometer-compute.service</span><br><span class=\"line\">systemctl enable openstack-ceilometer-ipmi.service         # 可选</span><br><span class=\"line\">systemctl start openstack-ceilometer-ipmi.service          # 可选</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">重启nova-compute服务</span></span><br><span class=\"line\">systemctl restart openstack-nova-compute.service</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"Heat\"><a href=\"#Heat\" class=\"headerlink\" title=\"Heat\"></a>Heat</h4><p>Heat是 OpenStack 自动编排服务，基于描述性的模板来编排复合云应用，也称为<code>Orchestration Service</code>。Heat 的各服务一般安装在<code>Controller</code>节点上。</p>\n<p><strong>Controller节点</strong></p>\n<ol>\n<li><p>创建<strong>heat</strong>数据库，并授予<strong>heat</strong>数据库正确的访问权限，替换<strong>HEAT_DBPASS</strong>为合适的密码</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql <span class=\"operator\">-</span>u root <span class=\"operator\">-</span>p</span><br><span class=\"line\"></span><br><span class=\"line\">MariaDB [(<span class=\"keyword\">none</span>)]<span class=\"operator\">&gt;</span> <span class=\"keyword\">CREATE</span> DATABASE heat;</span><br><span class=\"line\">MariaDB [(<span class=\"keyword\">none</span>)]<span class=\"operator\">&gt;</span> <span class=\"keyword\">GRANT</span> <span class=\"keyword\">ALL</span> PRIVILEGES <span class=\"keyword\">ON</span> heat.<span class=\"operator\">*</span> <span class=\"keyword\">TO</span> <span class=\"string\">&#x27;heat&#x27;</span>@<span class=\"string\">&#x27;localhost&#x27;</span> IDENTIFIED <span class=\"keyword\">BY</span> <span class=\"string\">&#x27;HEAT_DBPASS&#x27;</span>;</span><br><span class=\"line\">MariaDB [(<span class=\"keyword\">none</span>)]<span class=\"operator\">&gt;</span> <span class=\"keyword\">GRANT</span> <span class=\"keyword\">ALL</span> PRIVILEGES <span class=\"keyword\">ON</span> heat.<span class=\"operator\">*</span> <span class=\"keyword\">TO</span> <span class=\"string\">&#x27;heat&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span> IDENTIFIED <span class=\"keyword\">BY</span> <span class=\"string\">&#x27;HEAT_DBPASS&#x27;</span>;</span><br><span class=\"line\">MariaDB [(<span class=\"keyword\">none</span>)]<span class=\"operator\">&gt;</span> exit;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建服务凭证，创建<strong>heat</strong>用户，并为其增加<strong>admin</strong>角色</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source ~/.admin-openrc</span><br><span class=\"line\"></span><br><span class=\"line\">openstack user create --domain default --password-prompt heat</span><br><span class=\"line\">openstack role add --project service --user heat admin</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建<strong>heat</strong>和<strong>heat-cfn</strong>服务及其对应的API端点</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openstack service create --name heat --description &quot;Orchestration&quot; orchestration</span><br><span class=\"line\">openstack service create --name heat-cfn --description &quot;Orchestration&quot;  cloudformation</span><br><span class=\"line\">openstack endpoint create --region RegionOne orchestration public http://controller:8004/v1/%\\(tenant_id\\)s</span><br><span class=\"line\">openstack endpoint create --region RegionOne orchestration internal http://controller:8004/v1/%\\(tenant_id\\)s</span><br><span class=\"line\">openstack endpoint create --region RegionOne orchestration admin http://controller:8004/v1/%\\(tenant_id\\)s</span><br><span class=\"line\">openstack endpoint create --region RegionOne cloudformation public http://controller:8000/v1</span><br><span class=\"line\">openstack endpoint create --region RegionOne cloudformation internal http://controller:8000/v1</span><br><span class=\"line\">openstack endpoint create --region RegionOne cloudformation admin http://controller:8000/v1</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建stack管理的额外信息</p>\n<p> 创建 <strong>heat</strong> domain</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openstack domain create --description &quot;Stack projects and users&quot; heat</span><br></pre></td></tr></table></figure>\n\n<p> 在 <strong>heat</strong> domain下创建 <strong>heat_domain_admin</strong> 用户，并记下输入的密码，用于配置下面的<code>HEAT_DOMAIN_PASS</code></p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openstack user create --domain heat --password-prompt heat_domain_admin</span><br></pre></td></tr></table></figure>\n\n<p> 为 <strong>heat_domain_admin</strong> 用户增加 <strong>admin</strong> 角色</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openstack role add --domain heat --user-domain heat --user heat_domain_admin admin</span><br></pre></td></tr></table></figure>\n\n<p> 创建 <strong>heat_stack_owner</strong> 角色</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openstack role create heat_stack_owner</span><br></pre></td></tr></table></figure>\n\n<p> 创建 <strong>heat_stack_user</strong> 角色</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openstack role create heat_stack_user</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装软件包</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dnf install openstack-heat-api openstack-heat-api-cfn openstack-heat-engine</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改配置文件<code>/etc/heat/heat.conf</code></p>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[DEFAULT]</span></span><br><span class=\"line\"><span class=\"attr\">transport_url</span> = rabbit://openstack:RABBIT_PASS@controller</span><br><span class=\"line\"><span class=\"attr\">heat_metadata_server_url</span> = http://controller:<span class=\"number\">8000</span></span><br><span class=\"line\"><span class=\"attr\">heat_waitcondition_server_url</span> = http://controller:<span class=\"number\">8000</span>/v1/waitcondition</span><br><span class=\"line\"><span class=\"attr\">stack_domain_admin</span> = heat_domain_admin</span><br><span class=\"line\"><span class=\"attr\">stack_domain_admin_password</span> = HEAT_DOMAIN_PASS</span><br><span class=\"line\"><span class=\"attr\">stack_user_domain_name</span> = heat</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[database]</span></span><br><span class=\"line\"><span class=\"attr\">connection</span> = mysql+pymysql://heat:HEAT_DBPASS@controller/heat</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[keystone_authtoken]</span></span><br><span class=\"line\"><span class=\"attr\">www_authenticate_uri</span> = http://controller:<span class=\"number\">5000</span></span><br><span class=\"line\"><span class=\"attr\">auth_url</span> = http://controller:<span class=\"number\">5000</span></span><br><span class=\"line\"><span class=\"attr\">memcached_servers</span> = controller:<span class=\"number\">11211</span></span><br><span class=\"line\"><span class=\"attr\">auth_type</span> = password</span><br><span class=\"line\"><span class=\"attr\">project_domain_name</span> = default</span><br><span class=\"line\"><span class=\"attr\">user_domain_name</span> = default</span><br><span class=\"line\"><span class=\"attr\">project_name</span> = service</span><br><span class=\"line\"><span class=\"attr\">username</span> = heat</span><br><span class=\"line\"><span class=\"attr\">password</span> = HEAT_PASS</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[trustee]</span></span><br><span class=\"line\"><span class=\"attr\">auth_type</span> = password</span><br><span class=\"line\"><span class=\"attr\">auth_url</span> = http://controller:<span class=\"number\">5000</span></span><br><span class=\"line\"><span class=\"attr\">username</span> = heat</span><br><span class=\"line\"><span class=\"attr\">password</span> = HEAT_PASS</span><br><span class=\"line\"><span class=\"attr\">user_domain_name</span> = default</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[clients_keystone]</span></span><br><span class=\"line\"><span class=\"attr\">auth_uri</span> = http://controller:<span class=\"number\">5000</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>初始化<strong>heat</strong>数据库表</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">su -s /bin/sh -c &quot;heat-manage db_sync&quot; heat</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动服务</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl enable openstack-heat-api.service openstack-heat-api-cfn.service openstack-heat-engine.service</span><br><span class=\"line\">systemctl start openstack-heat-api.service openstack-heat-api-cfn.service openstack-heat-engine.service</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"Tempest\"><a href=\"#Tempest\" class=\"headerlink\" title=\"Tempest\"></a>Tempest</h4><p>Tempest是OpenStack的集成测试服务，如果用户需要全面自动化测试已安装的OpenStack环境的功能,则推荐使用该组件。否则，可以不用安装。</p>\n<p><strong>Controller节点</strong>：</p>\n<ol>\n<li><p>安装Tempest</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dnf install openstack-tempest</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>初始化目录</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tempest init mytest</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改配置文件。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd mytest</span><br><span class=\"line\">vi etc/tempest.conf</span><br></pre></td></tr></table></figure>\n\n<p> tempest.conf中需要配置当前OpenStack环境的信息，具体内容可以参考<a href=\"https://docs.openstack.org/tempest/latest/sampleconf.html\">官方示例</a></p>\n</li>\n<li><p>执行测试</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tempest run</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装tempest扩展（可选）<br>OpenStack各个服务本身也提供了一些tempest测试包，用户可以安装这些包来丰富tempest的测试内容。在Antelope中，我们提供了Cinder、Glance、Keystone、Ironic、Trove的扩展测试，用户可以执行如下命令进行安装使用：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dnf install python3-cinder-tempest-plugin python3-glance-tempest-plugin python3-ironic-tempest-plugin python3-keystone-tempest-plugin python3-trove-tempest-plugin</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"基于OpenStack-SIG开发工具oos部署\"><a href=\"#基于OpenStack-SIG开发工具oos部署\" class=\"headerlink\" title=\"基于OpenStack SIG开发工具oos部署\"></a>基于OpenStack SIG开发工具oos部署</h2><p><code>oos</code>(openEuler OpenStack SIG)是OpenStack SIG提供的命令行工具。其中<code>oos env</code>系列命令提供了一键部署OpenStack （<code>all in one</code>或三节点<code>cluster</code>）的ansible脚本，用户可以使用该脚本快速部署一套基于 openEuler RPM 的 OpenStack 环境。<code>oos</code>工具支持对接云provider（目前仅支持华为云provider）和主机纳管两种方式来部署 OpenStack 环境，下面以对接华为云部署一套<code>all in one</code>的OpenStack环境为例说明<code>oos</code>工具的使用方法。</p>\n<ol>\n<li><p>安装<code>oos</code>工具</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install openstack-sig-tool</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置对接华为云provider的信息</p>\n<p> 打开<code>/usr/local/etc/oos/oos.conf</code>文件，修改配置为您拥有的华为云资源信息，AK&#x2F;SK是用户的华为云登录密钥，其他配置保持默认即可（默认使用新加坡region），需要提前在云上创建对应的资源，包括：</p>\n<ul>\n<li>一个安全组，名字默认是<code>oos</code></li>\n<li>一个openEuler镜像，名称格式是openEuler-%(release)s-%(arch)s，例如<code>openEuler-24.03-sp1-arm64</code></li>\n<li>一个VPC，名称是<code>oos_vpc</code></li>\n<li>该VPC下面两个子网，名称是<code>oos_subnet1</code>、<code>oos_subnet2</code></li>\n</ul>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[huaweicloud]</span></span><br><span class=\"line\"><span class=\"attr\">ak</span> = </span><br><span class=\"line\"><span class=\"attr\">sk</span> = </span><br><span class=\"line\"><span class=\"attr\">region</span> = ap-southeast-<span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"attr\">root_volume_size</span> = <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"attr\">data_volume_size</span> = <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"attr\">security_group_name</span> = oos</span><br><span class=\"line\"><span class=\"attr\">image_format</span> = openEuler-%%(release)s-%%(arch)s</span><br><span class=\"line\"><span class=\"attr\">vpc_name</span> = oos_vpc</span><br><span class=\"line\"><span class=\"attr\">subnet1_name</span> = oos_subnet1</span><br><span class=\"line\"><span class=\"attr\">subnet2_name</span> = oos_subnet2</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置 OpenStack 环境信息</p>\n<p> 打开<code>/usr/local/etc/oos/oos.conf</code>文件，根据当前机器环境和需求修改配置。内容如下：</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[environment]</span><br><span class=\"line\">mysql_root_password = root</span><br><span class=\"line\">mysql_project_password = root</span><br><span class=\"line\">rabbitmq_password = root</span><br><span class=\"line\">project_identity_password = root</span><br><span class=\"line\">enabled_service = keystone,neutron,cinder,placement,nova,glance,horizon,aodh,ceilometer,cyborg,gnocchi,kolla,heat,swift,trove,tempest</span><br><span class=\"line\">neutron_provider_interface_name = br-ex</span><br><span class=\"line\">default_ext_subnet_range = 10.100.100.0/24</span><br><span class=\"line\">default_ext_subnet_gateway = 10.100.100.1</span><br><span class=\"line\">neutron_dataplane_interface_name = eth1</span><br><span class=\"line\">cinder_block_device = vdb</span><br><span class=\"line\">swift_storage_devices = vdc</span><br><span class=\"line\">swift_hash_path_suffix = ash</span><br><span class=\"line\">swift_hash_path_prefix = has</span><br><span class=\"line\">glance_api_workers = 2</span><br><span class=\"line\">cinder_api_workers = 2</span><br><span class=\"line\">nova_api_workers = 2</span><br><span class=\"line\">nova_metadata_api_workers = 2</span><br><span class=\"line\">nova_conductor_workers = 2</span><br><span class=\"line\">nova_scheduler_workers = 2</span><br><span class=\"line\">neutron_api_workers = 2</span><br><span class=\"line\">horizon_allowed_host = *</span><br><span class=\"line\">kolla_openeuler_plugin = false</span><br></pre></td></tr></table></figure>\n\n<p> <strong>关键配置</strong></p>\n<table>\n<thead>\n<tr>\n<th>配置项</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>enabled_service</td>\n<td>安装服务列表，根据用户需求自行删减</td>\n</tr>\n<tr>\n<td>neutron_provider_interface_name</td>\n<td>neutron L3网桥名称</td>\n</tr>\n<tr>\n<td>default_ext_subnet_range</td>\n<td>neutron私网IP段</td>\n</tr>\n<tr>\n<td>default_ext_subnet_gateway</td>\n<td>neutron私网gateway</td>\n</tr>\n<tr>\n<td>neutron_dataplane_interface_name</td>\n<td>neutron使用的网卡，推荐使用一张新的网卡，以免和现有网卡冲突，防止all in one主机断连的情况</td>\n</tr>\n<tr>\n<td>cinder_block_device</td>\n<td>cinder使用的卷设备名</td>\n</tr>\n<tr>\n<td>swift_storage_devices</td>\n<td>swift使用的卷设备名</td>\n</tr>\n<tr>\n<td>kolla_openeuler_plugin</td>\n<td>是否启用kolla plugin。设置为True，kolla将支持部署openEuler容器(只在openEuler LTS上支持)</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>华为云上面创建一台|openEuler 24.03 LTS SP1的x86_64虚拟机，用于部署<code>all in one</code> 的 OpenStack</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">sshpass在`oos <span class=\"built_in\">env</span> create`过程中被使用，用于配置对目标虚拟机的免密访问</span></span><br><span class=\"line\">dnf install sshpass</span><br><span class=\"line\">oos env create -r 24.03-lts-sp1 -f small -a x86 -n test-oos all_in_one</span><br></pre></td></tr></table></figure>\n\n<p> 具体的参数可以使用<code>oos env create --help</code>命令查看</p>\n</li>\n<li><p>部署OpenStack <code>all in one</code> 环境</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">oos env setup test-oos -r antelope</span><br></pre></td></tr></table></figure>\n\n<p> 具体的参数可以使用<code>oos env setup --help</code>命令查看</p>\n</li>\n<li><p>初始化tempest环境</p>\n<p> 如果用户想使用该环境运行tempest测试的话，可以执行命令<code>oos env init</code>，会自动把tempest需要的OpenStack资源自动创建好</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">oos env init test-oos</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>执行tempest测试</p>\n<p> 用户可以使用oos自动执行：</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">oos env test test-oos</span><br></pre></td></tr></table></figure>\n\n<p> 也可以手动登录目标节点，进入根目录下的<code>mytest</code>目录，手动执行<code>tempest run</code></p>\n</li>\n</ol>\n<p>如果是以主机纳管的方式部署 OpenStack 环境，总体逻辑与上文对接华为云时一致，1、3、5、6步操作不变，跳过第2步对华为云provider信息的配置，在第4步改为纳管主机操作。</p>\n<p>被纳管的虚机需要保证：</p>\n<ul>\n<li>至少有一张给oos使用的网卡，名称与配置保持一致，相关配置<code>neutron_dataplane_interface_name</code></li>\n<li>至少有一块给oos使用的硬盘，名称与配置保持一致，相关配置<code>cinder_block_device</code></li>\n<li>如果要部署swift服务，则需要新增一块硬盘，名称与配置保持一致，相关配置<code>swift_storage_devices</code></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">sshpass在`oos <span class=\"built_in\">env</span> create`过程中被使用，用于配置对目标主机的免密访问</span></span><br><span class=\"line\">dnf install sshpass</span><br><span class=\"line\">oos env manage -r 24.03-lts-sp1 -i TARGET_MACHINE_IP -p TARGET_MACHINE_PASSWD -n test-oos</span><br></pre></td></tr></table></figure>\n\n<p>替换<code>TARGET_MACHINE_IP</code>为目标机ip、<code>TARGET_MACHINE_PASSWD</code>为目标机密码。具体的参数可以使用<code>oos env manage --help</code>命令查看。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"OpenStack-Antelope-部署指南\"><a href=\"#OpenStack-Antelope-部署指南\" class=\"headerlink\" title=\"OpenStack Antelope 部署指南\"></a>OpenStack Antelope 部署指南</h1><p>[TOC]</p>\n<p>本文档是 openEuler OpenStack SIG 编写的基于 |openEuler 24.03 LTS SP1 的 OpenStack 部署指南，内容由 SIG 贡献者提供。在阅读过程中，如果您有任何疑问或者发现任何问题，请<a href=\"https://gitee.com/openeuler/openstack#%E8%81%94%E7%B3%BB%E6%96%B9%E5%BC%8F\">联系</a>SIG维护人员，或者直接<a href=\"https://gitee.com/openeuler/openstack/issues\">提交issue</a></p>\n<p><strong>约定</strong></p>\n<p>本章节描述文档中的一些通用约定。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">名称</th>\n<th align=\"center\">定义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">RABBIT_PASS</td>\n<td align=\"center\">rabbitmq的密码，由用户设置，在OpenStack各个服务配置中使用</td>\n</tr>\n<tr>\n<td align=\"center\">CINDER_PASS</td>\n<td align=\"center\">cinder服务keystone用户的密码，在cinder配置中使用</td>\n</tr>\n<tr>\n<td align=\"center\">CINDER_DBPASS</td>\n<td align=\"center\">cinder服务数据库密码，在cinder配置中使用</td>\n</tr>\n<tr>\n<td align=\"center\">KEYSTONE_DBPASS</td>\n<td align=\"center\">keystone服务数据库密码，在keystone配置中使用</td>\n</tr>\n<tr>\n<td align=\"center\">GLANCE_PASS</td>\n<td align=\"center\">glance服务keystone用户的密码，在glance配置中使用</td>\n</tr>\n<tr>\n<td align=\"center\">GLANCE_DBPASS</td>\n<td align=\"center\">glance服务数据库密码，在glance配置中使用</td>\n</tr>\n<tr>\n<td align=\"center\">HEAT_PASS</td>\n<td align=\"center\">在keystone注册的heat用户密码，在heat配置中使用</td>\n</tr>\n<tr>\n<td align=\"center\">HEAT_DBPASS</td>\n<td align=\"center\">heat服务数据库密码，在heat配置中使用</td>\n</tr>\n<tr>\n<td align=\"center\">CYBORG_PASS</td>\n<td align=\"center\">在keystone注册的cyborg用户密码，在cyborg配置中使用</td>\n</tr>\n<tr>\n<td align=\"center\">CYBORG_DBPASS</td>\n<td align=\"center\">cyborg服务数据库密码，在cyborg配置中使用</td>\n</tr>\n<tr>\n<td align=\"center\">NEUTRON_PASS</td>\n<td align=\"center\">在keystone注册的neutron用户密码，在neutron配置中使用</td>\n</tr>\n<tr>\n<td align=\"center\">NEUTRON_DBPASS</td>\n<td align=\"center\">neutron服务数据库密码，在neutron配置中使用</td>\n</tr>\n<tr>\n<td align=\"center\">PROVIDER_INTERFACE_NAME</td>\n<td align=\"center\">物理网络接口的名称，在neutron配置中使用</td>\n</tr>\n<tr>\n<td align=\"center\">OVERLAY_INTERFACE_IP_ADDRESS</td>\n<td align=\"center\">Controller控制节点的管理ip地址，在neutron配置中使用</td>\n</tr>\n<tr>\n<td align=\"center\">METADATA_SECRET</td>\n<td align=\"center\">metadata proxy的secret密码，在nova和neutron配置中使用</td>\n</tr>\n<tr>\n<td align=\"center\">PLACEMENT_DBPASS</td>\n<td align=\"center\">placement服务数据库密码，在placement配置中使用</td>\n</tr>\n<tr>\n<td align=\"center\">PLACEMENT_PASS</td>\n<td align=\"center\">在keystone注册的placement用户密码，在placement配置中使用</td>\n</tr>\n<tr>\n<td align=\"center\">NOVA_DBPASS</td>\n<td align=\"center\">nova服务数据库密码，在nova配置中使用</td>\n</tr>\n<tr>\n<td align=\"center\">NOVA_PASS</td>\n<td align=\"center\">在keystone注册的nova用户密码，在nova,cyborg,neutron等配置中使用</td>\n</tr>\n<tr>\n<td align=\"center\">IRONIC_DBPASS</td>\n<td align=\"center\">ironic服务数据库密码，在ironic配置中使用</td>\n</tr>\n<tr>\n<td align=\"center\">IRONIC_PASS</td>\n<td align=\"center\">在keystone注册的ironic用户密码，在ironic配置中使用</td>\n</tr>\n<tr>\n<td align=\"center\">IRONIC_INSPECTOR_DBPASS</td>\n<td align=\"center\">ironic-inspector服务数据库密码，在ironic-inspector配置中使用</td>\n</tr>\n<tr>\n<td align=\"center\">IRONIC_INSPECTOR_PASS</td>\n<td align=\"center\">在keystone注册的ironic-inspector用户密码，在ironic-inspector配置中使用</td>\n</tr>\n</tbody></table>\n<p>OpenStack SIG 提供了多种基于 openEuler 部署 OpenStack 的方法，以满足不同的用户场景，请按需选择。</p>\n<h2 id=\"基于RPM部署\"><a href=\"#基于RPM部署\" class=\"headerlink\" title=\"基于RPM部署\"></a>基于RPM部署</h2><h3 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h3><p>本文档基于OpenStack经典的三节点环境进行部署，三个节点分别是控制节点(Controller)、计算节点(Compute)、存储节点(Storage)，其中存储节点一般只部署存储服务，在资源有限的情况下，可以不单独部署该节点，把存储节点上的服务部署到计算节点即可。</p>\n<p>首先准备三个|openEuler 24.03 LTS SP1环境，根据您的环境，下载对应的镜像并安装即可：<a href=\"https://repo.openeuler.org/openEuler-24.03-LTS-SP1/ISO/\">ISO镜像</a>、<a href=\"https://repo.openeuler.org/openEuler-24.03-LTS-SP1/virtual_machine_img/\">qcow2镜像</a>。</p>\n<p>下面的安装按照如下拓扑进行：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">controller：192.168.0.2</span><br><span class=\"line\">compute：   192.168.0.3</span><br><span class=\"line\">storage：   192.168.0.4</span><br></pre></td></tr></table></figure>\n\n<p>如果您的环境IP不同，请按照您的环境IP修改相应的配置文件。</p>\n<p>本文档的三节点服务拓扑如下图所示(只包含Keystone、Glance、Nova、Cinder、Neutron这几个核心服务，其他服务请参考具体部署章节)：</p>\n<p><img src=\"/../img/install/topology1.PNG\" alt=\"topology1\"><br><img src=\"/../img/install/topology2.PNG\" alt=\"topology2\"><br><img src=\"/../img/install/topology3.PNG\" alt=\"topology3\"></p>\n<p>在正式部署之前，需要对每个节点做如下配置和检查：</p>\n<ol>\n<li><p>配置 |openEuler 24.03 LTS SP1 官方 yum 源，需要启用 EPOL 软件仓以支持 OpenStack</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum update</span><br><span class=\"line\">yum install openstack-release-antelope</span><br><span class=\"line\">yum clean all &amp;&amp; yum makecache</span><br></pre></td></tr></table></figure>\n\n<p> <strong>注意</strong>：如果你的环境的YUM源没有启用EPOL，需要同时配置EPOL，确保EPOL已配置，如下所示。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/yum.repos.d/openEuler.repo</span><br><span class=\"line\"></span><br><span class=\"line\">[EPOL]</span><br><span class=\"line\">name=EPOL</span><br><span class=\"line\">baseurl=http://repo.openeuler.org/openEuler-24.03-LTS-SP1/EPOL/main/$basearch/</span><br><span class=\"line\">enabled=1</span><br><span class=\"line\">gpgcheck=1</span><br><span class=\"line\">gpgkey=http://repo.openeuler.org/openEuler-24.03-LTS-SP1/OS/$basearch/RPM-GPG-KEY-openEuler</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改主机名以及映射</p>\n<p> 每个节点分别修改主机名，以controller为例：</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hostnamectl set-hostname controller</span><br><span class=\"line\"></span><br><span class=\"line\">vi /etc/hostname</span><br><span class=\"line\">内容修改为controller</span><br></pre></td></tr></table></figure>\n\n<p> 然后修改每个节点的<code>/etc/hosts</code>文件，新增如下内容:</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">192.168.0.2   controller</span><br><span class=\"line\">192.168.0.3   compute</span><br><span class=\"line\">192.168.0.4   storage</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"时钟同步\"><a href=\"#时钟同步\" class=\"headerlink\" title=\"时钟同步\"></a>时钟同步</h4><p>集群环境时刻要求每个节点的时间一致，一般由时钟同步软件保证。本文使用<code>chrony</code>软件。步骤如下：</p>\n<p><strong>Controller节点</strong>：</p>\n<ol>\n<li><p>安装服务</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dnf install chrony</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改<code>/etc/chrony.conf</code>配置文件，新增一行</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">表示允许哪些IP从本节点同步时钟</span></span><br><span class=\"line\">allow 192.168.0.0/24</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>重启服务</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart chronyd</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><strong>其他节点</strong></p>\n<ol>\n<li><p>安装服务</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dnf install chrony</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改<code>/etc/chrony.conf</code>配置文件，新增一行</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">NTP_SERVER是controller IP，表示从这个机器获取时间，这里我们填192.168.0.2，或者在`/etc/hosts`里配置好的controller名字即可。</span></span><br><span class=\"line\">server NTP_SERVER iburst</span><br></pre></td></tr></table></figure>\n\n<p> 同时，要把<code>pool pool.ntp.org iburst</code>这一行注释掉，表示不从公网同步时钟。</p>\n</li>\n<li><p>重启服务</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart chronyd</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>配置完成后，检查一下结果，在其他非controller节点执行<code>chronyc sources</code>，返回结果类似如下内容，表示成功从controller同步时钟。</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MS Name/IP address         Stratum Poll Reach LastRx Last <span class=\"attr\">sample</span></span><br><span class=\"line\">===============================================================================</span><br><span class=\"line\">^* 192.168.0.2                 4   6     7     0  -1406ns<span class=\"section\">[  +55us]</span> +/-   16ms</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"安装数据库\"><a href=\"#安装数据库\" class=\"headerlink\" title=\"安装数据库\"></a>安装数据库</h4><p>数据库安装在控制节点，这里推荐使用mariadb。</p>\n<ol>\n<li><p>安装软件包</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dnf install mysql-config mariadb mariadb-server python3-PyMySQL</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>新增配置文件<code>/etc/my.cnf.d/openstack.cnf</code>，内容如下</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\">bind-address = 192.168.0.2</span><br><span class=\"line\">default-storage-engine = innodb</span><br><span class=\"line\">innodb_file_per_table = on</span><br><span class=\"line\">max_connections = 4096</span><br><span class=\"line\">collation-server = utf8_general_ci</span><br><span class=\"line\">character-set-server = utf8</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动服务器</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start mariadb</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>初始化数据库，根据提示进行即可</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql_secure_installation</span><br></pre></td></tr></table></figure>\n\n<p> 示例如下：</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NOTE: RUNNING ALL PARTS OF THIS SCRIPT IS RECOMMENDED FOR ALL MariaDB</span><br><span class=\"line\">    SERVERS IN PRODUCTION USE!  PLEASE READ EACH STEP CAREFULLY!</span><br><span class=\"line\"></span><br><span class=\"line\">In order to log into MariaDB to secure it, we&#x27;ll need the current</span><br><span class=\"line\">password for the root user. If you&#x27;ve just installed MariaDB, and</span><br><span class=\"line\">haven&#x27;t set the root password yet, you should just press enter here.</span><br><span class=\"line\"></span><br><span class=\"line\">Enter current password for root (enter for none): </span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">这里输入密码，由于我们是初始化DB，直接回车就行</span></span><br><span class=\"line\"></span><br><span class=\"line\">OK, successfully used password, moving on...</span><br><span class=\"line\"></span><br><span class=\"line\">Setting the root password or using the unix_socket ensures that nobody</span><br><span class=\"line\">can log into the MariaDB root user without the proper authorisation.</span><br><span class=\"line\"></span><br><span class=\"line\">You already have your root account protected, so you can safely answer &#x27;n&#x27;.</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">这里根据提示输入N</span></span><br><span class=\"line\"></span><br><span class=\"line\">Switch to unix_socket authentication [Y/n] N</span><br><span class=\"line\"></span><br><span class=\"line\">Enabled successfully!</span><br><span class=\"line\">Reloading privilege tables..</span><br><span class=\"line\">... Success!</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">You already have your root account protected, so you can safely answer &#x27;n&#x27;.</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">输入Y，修改密码</span></span><br><span class=\"line\"></span><br><span class=\"line\">Change the root password? [Y/n] Y</span><br><span class=\"line\"></span><br><span class=\"line\">New password: </span><br><span class=\"line\">Re-enter new password: </span><br><span class=\"line\">Password updated successfully!</span><br><span class=\"line\">Reloading privilege tables..</span><br><span class=\"line\">... Success!</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">By default, a MariaDB installation has an anonymous user, allowing anyone</span><br><span class=\"line\">to log into MariaDB without having to have a user account created for</span><br><span class=\"line\">them.  This is intended only for testing, and to make the installation</span><br><span class=\"line\">go a bit smoother.  You should remove them before moving into a</span><br><span class=\"line\">production environment.</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">输入Y，删除匿名用户</span></span><br><span class=\"line\"></span><br><span class=\"line\">Remove anonymous users? [Y/n] Y</span><br><span class=\"line\">... Success!</span><br><span class=\"line\"></span><br><span class=\"line\">Normally, root should only be allowed to connect from &#x27;localhost&#x27;.  This</span><br><span class=\"line\">ensures that someone cannot guess at the root password from the network.</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">输入Y，关闭root远程登录权限</span></span><br><span class=\"line\"></span><br><span class=\"line\">Disallow root login remotely? [Y/n] Y</span><br><span class=\"line\">... Success!</span><br><span class=\"line\"></span><br><span class=\"line\">By default, MariaDB comes with a database named &#x27;test&#x27; that anyone can</span><br><span class=\"line\">access.  This is also intended only for testing, and should be removed</span><br><span class=\"line\">before moving into a production environment.</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">输入Y，删除<span class=\"built_in\">test</span>数据库</span></span><br><span class=\"line\"></span><br><span class=\"line\">Remove test database and access to it? [Y/n] Y</span><br><span class=\"line\">- Dropping test database...</span><br><span class=\"line\">... Success!</span><br><span class=\"line\">- Removing privileges on test database...</span><br><span class=\"line\">... Success!</span><br><span class=\"line\"></span><br><span class=\"line\">Reloading the privilege tables will ensure that all changes made so far</span><br><span class=\"line\">will take effect immediately.</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">输入Y，重载配置</span></span><br><span class=\"line\"></span><br><span class=\"line\">Reload privilege tables now? [Y/n] Y</span><br><span class=\"line\">... Success!</span><br><span class=\"line\"></span><br><span class=\"line\">Cleaning up...</span><br><span class=\"line\"></span><br><span class=\"line\">All done!  If you&#x27;ve completed all of the above steps, your MariaDB</span><br><span class=\"line\">installation should now be secure.</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>验证，根据第四步设置的密码，检查是否能登录mariadb</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -uroot -p</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"安装消息队列\"><a href=\"#安装消息队列\" class=\"headerlink\" title=\"安装消息队列\"></a>安装消息队列</h4><p>消息队列安装在控制节点，这里推荐使用rabbitmq。</p>\n<ol>\n<li><p>安装软件包</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dnf install rabbitmq-server</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动服务</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start rabbitmq-server</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置openstack用户，<code>RABBIT_PASS</code>是openstack服务登录消息队里的密码，需要和后面各个服务的配置保持一致。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rabbitmqctl add_user openstack RABBIT_PASS</span><br><span class=\"line\">rabbitmqctl set_permissions openstack &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"安装缓存服务\"><a href=\"#安装缓存服务\" class=\"headerlink\" title=\"安装缓存服务\"></a>安装缓存服务</h4><p>消息队列安装在控制节点，这里推荐使用Memcached。</p>\n<ol>\n<li><p>安装软件包</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dnf install memcached python3-memcached</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改配置文件<code>/etc/sysconfig/memcached</code></p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">OPTIONS=&quot;-l 127.0.0.1,::1,controller&quot;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动服务</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start memcached</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"部署服务\"><a href=\"#部署服务\" class=\"headerlink\" title=\"部署服务\"></a>部署服务</h3><h4 id=\"Keystone\"><a href=\"#Keystone\" class=\"headerlink\" title=\"Keystone\"></a>Keystone</h4><p>Keystone是OpenStack提供的鉴权服务，是整个OpenStack的入口，提供了租户隔离、用户认证、服务发现等功能，必须安装。</p>\n<ol>\n<li><p>创建 keystone 数据库并授权</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql <span class=\"operator\">-</span>u root <span class=\"operator\">-</span>p</span><br><span class=\"line\"></span><br><span class=\"line\">MariaDB [(<span class=\"keyword\">none</span>)]<span class=\"operator\">&gt;</span> <span class=\"keyword\">CREATE</span> DATABASE keystone;</span><br><span class=\"line\">MariaDB [(<span class=\"keyword\">none</span>)]<span class=\"operator\">&gt;</span> <span class=\"keyword\">GRANT</span> <span class=\"keyword\">ALL</span> PRIVILEGES <span class=\"keyword\">ON</span> keystone.<span class=\"operator\">*</span> <span class=\"keyword\">TO</span> <span class=\"string\">&#x27;keystone&#x27;</span>@<span class=\"string\">&#x27;localhost&#x27;</span> \\</span><br><span class=\"line\">IDENTIFIED <span class=\"keyword\">BY</span> <span class=\"string\">&#x27;KEYSTONE_DBPASS&#x27;</span>;</span><br><span class=\"line\">MariaDB [(<span class=\"keyword\">none</span>)]<span class=\"operator\">&gt;</span> <span class=\"keyword\">GRANT</span> <span class=\"keyword\">ALL</span> PRIVILEGES <span class=\"keyword\">ON</span> keystone.<span class=\"operator\">*</span> <span class=\"keyword\">TO</span> <span class=\"string\">&#x27;keystone&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span> \\</span><br><span class=\"line\">IDENTIFIED <span class=\"keyword\">BY</span> <span class=\"string\">&#x27;KEYSTONE_DBPASS&#x27;</span>;</span><br><span class=\"line\">MariaDB [(<span class=\"keyword\">none</span>)]<span class=\"operator\">&gt;</span> exit</span><br></pre></td></tr></table></figure>\n\n<p> <em><strong>注意</strong></em></p>\n<p> <strong>替换 <code>KEYSTONE_DBPASS</code>，为 Keystone 数据库设置密码</strong></p>\n</li>\n<li><p>安装软件包</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dnf install openstack-keystone httpd mod_wsgi</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置keystone相关配置</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/keystone/keystone.conf</span><br><span class=\"line\"></span><br><span class=\"line\">[database]</span><br><span class=\"line\">connection = mysql+pymysql://keystone:KEYSTONE_DBPASS@controller/keystone</span><br><span class=\"line\"></span><br><span class=\"line\">[token]</span><br><span class=\"line\">provider = fernet</span><br></pre></td></tr></table></figure>\n\n<p> <em><strong>解释</strong></em></p>\n<p> [database]部分，配置数据库入口</p>\n<p> [token]部分，配置token provider</p>\n</li>\n<li><p>同步数据库</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">su -s /bin/sh -c &quot;keystone-manage db_sync&quot; keystone</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>初始化Fernet密钥仓库</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">keystone-manage fernet_setup --keystone-user keystone --keystone-group keystone</span><br><span class=\"line\">keystone-manage credential_setup --keystone-user keystone --keystone-group keystone</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动服务</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">keystone-manage bootstrap --bootstrap-password ADMIN_PASS \\</span><br><span class=\"line\">--bootstrap-admin-url http://controller:5000/v3/ \\</span><br><span class=\"line\">--bootstrap-internal-url http://controller:5000/v3/ \\</span><br><span class=\"line\">--bootstrap-public-url http://controller:5000/v3/ \\</span><br><span class=\"line\">--bootstrap-region-id RegionOne</span><br></pre></td></tr></table></figure>\n\n<p> <em><strong>注意</strong></em></p>\n<p> <strong>替换 <code>ADMIN_PASS</code>，为 admin 用户设置密码</strong></p>\n</li>\n<li><p>配置Apache HTTP server</p>\n<ul>\n<li>打开httpd.conf并配置</li>\n</ul>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">需要修改的配置文件路径</span></span><br><span class=\"line\">vim /etc/httpd/conf/httpd.conf</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">修改以下项，如果没有则新添加</span></span><br><span class=\"line\">ServerName controller</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>创建软链接</li>\n</ul>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -s /usr/share/keystone/wsgi-keystone.conf /etc/httpd/conf.d/</span><br></pre></td></tr></table></figure>\n\n<p> <em><strong>解释</strong></em></p>\n<p> 配置 <code>ServerName</code> 项引用控制节点</p>\n<p> <em><strong>注意</strong></em><br> <strong>如果 <code>ServerName</code> 项不存在则需要创建</strong></p>\n</li>\n<li><p>启动Apache HTTP服务</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl enable httpd.service</span><br><span class=\"line\">systemctl start httpd.service</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建环境变量配置</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &lt;&lt; EOF &gt;&gt; ~/.admin-openrc</span><br><span class=\"line\">export OS_PROJECT_DOMAIN_NAME=Default</span><br><span class=\"line\">export OS_USER_DOMAIN_NAME=Default</span><br><span class=\"line\">export OS_PROJECT_NAME=admin</span><br><span class=\"line\">export OS_USERNAME=admin</span><br><span class=\"line\">export OS_PASSWORD=ADMIN_PASS</span><br><span class=\"line\">export OS_AUTH_URL=http://controller:5000/v3</span><br><span class=\"line\">export OS_IDENTITY_API_VERSION=3</span><br><span class=\"line\">export OS_IMAGE_API_VERSION=2</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n\n<p> <em><strong>注意</strong></em></p>\n<p> <strong>替换 <code>ADMIN_PASS</code> 为 admin 用户的密码</strong></p>\n</li>\n<li><p>依次创建domain, projects, users, roles</p>\n<ul>\n<li>需要先安装python3-openstackclient</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dnf install python3-openstackclient</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>导入环境变量</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source ~/.admin-openrc</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>创建project <code>service</code>，其中 domain <code>default</code> 在 keystone-manage bootstrap 时已创建</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openstack domain create --description &quot;An Example Domain&quot; example</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openstack project create --domain default --description &quot;Service Project&quot; service</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>创建（non-admin）project <code>myproject</code>，user <code>myuser</code> 和 role <code>myrole</code>，为 <code>myproject</code> 和 <code>myuser</code> 添加角色<code>myrole</code></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openstack project create --domain default --description &quot;Demo Project&quot; myproject</span><br><span class=\"line\">openstack user create --domain default --password-prompt myuser</span><br><span class=\"line\">openstack role create myrole</span><br><span class=\"line\">openstack role add --project myproject --user myuser myrole</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>验证</p>\n<ul>\n<li>取消临时环境变量OS_AUTH_URL和OS_PASSWORD：</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source ~/.admin-openrc</span><br><span class=\"line\">unset OS_AUTH_URL OS_PASSWORD</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>为admin用户请求token：</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openstack --os-auth-url http://controller:5000/v3 \\</span><br><span class=\"line\">--os-project-domain-name Default --os-user-domain-name Default \\</span><br><span class=\"line\">--os-project-name admin --os-username admin token issue</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>为myuser用户请求token：</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openstack --os-auth-url http://controller:5000/v3 \\</span><br><span class=\"line\">--os-project-domain-name Default --os-user-domain-name Default \\</span><br><span class=\"line\">--os-project-name myproject --os-username myuser token issue</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"Glance\"><a href=\"#Glance\" class=\"headerlink\" title=\"Glance\"></a>Glance</h4><p>Glance是OpenStack提供的镜像服务，负责虚拟机、裸机镜像的上传与下载，必须安装。</p>\n<p><strong>Controller节点</strong>：</p>\n<ol>\n<li><p>创建 glance 数据库并授权</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql <span class=\"operator\">-</span>u root <span class=\"operator\">-</span>p</span><br><span class=\"line\"></span><br><span class=\"line\">MariaDB [(<span class=\"keyword\">none</span>)]<span class=\"operator\">&gt;</span> <span class=\"keyword\">CREATE</span> DATABASE glance;</span><br><span class=\"line\">MariaDB [(<span class=\"keyword\">none</span>)]<span class=\"operator\">&gt;</span> <span class=\"keyword\">GRANT</span> <span class=\"keyword\">ALL</span> PRIVILEGES <span class=\"keyword\">ON</span> glance.<span class=\"operator\">*</span> <span class=\"keyword\">TO</span> <span class=\"string\">&#x27;glance&#x27;</span>@<span class=\"string\">&#x27;localhost&#x27;</span> \\</span><br><span class=\"line\">IDENTIFIED <span class=\"keyword\">BY</span> <span class=\"string\">&#x27;GLANCE_DBPASS&#x27;</span>;</span><br><span class=\"line\">MariaDB [(<span class=\"keyword\">none</span>)]<span class=\"operator\">&gt;</span> <span class=\"keyword\">GRANT</span> <span class=\"keyword\">ALL</span> PRIVILEGES <span class=\"keyword\">ON</span> glance.<span class=\"operator\">*</span> <span class=\"keyword\">TO</span> <span class=\"string\">&#x27;glance&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span> \\</span><br><span class=\"line\">IDENTIFIED <span class=\"keyword\">BY</span> <span class=\"string\">&#x27;GLANCE_DBPASS&#x27;</span>;</span><br><span class=\"line\">MariaDB [(<span class=\"keyword\">none</span>)]<span class=\"operator\">&gt;</span> exit</span><br></pre></td></tr></table></figure>\n\n<p> <em><strong>注意:</strong></em></p>\n<p> <strong>替换 <code>GLANCE_DBPASS</code>，为 glance 数据库设置密码</strong></p>\n</li>\n<li><p>初始化 glance 资源对象</p>\n<ul>\n<li>导入环境变量</li>\n</ul>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source ~/.admin-openrc</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>创建用户时，命令行会提示输入密码，请输入自定义的密码，下文涉及到<code>GLANCE_PASS</code>的地方替换成该密码即可。</li>\n</ul>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openstack user create --domain default --password-prompt glance</span><br><span class=\"line\">User Password:</span><br><span class=\"line\">Repeat User Password:</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>添加glance用户到service project并指定admin角色：</li>\n</ul>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openstack role add --project service --user glance admin</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>创建glance服务实体：</li>\n</ul>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openstack service create --name glance --description &quot;OpenStack Image&quot; image</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>创建glance API服务：</li>\n</ul>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openstack endpoint create --region RegionOne image public http://controller:9292</span><br><span class=\"line\">openstack endpoint create --region RegionOne image internal http://controller:9292</span><br><span class=\"line\">openstack endpoint create --region RegionOne image admin http://controller:9292</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装软件包</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dnf install openstack-glance</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改 glance 配置文件</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/glance/glance-api.conf</span><br><span class=\"line\"></span><br><span class=\"line\">[database]</span><br><span class=\"line\">connection = mysql+pymysql://glance:GLANCE_DBPASS@controller/glance</span><br><span class=\"line\"></span><br><span class=\"line\">[keystone_authtoken]</span><br><span class=\"line\">www_authenticate_uri  = http://controller:5000</span><br><span class=\"line\">auth_url = http://controller:5000</span><br><span class=\"line\">memcached_servers = controller:11211</span><br><span class=\"line\">auth_type = password</span><br><span class=\"line\">project_domain_name = Default</span><br><span class=\"line\">user_domain_name = Default</span><br><span class=\"line\">project_name = service</span><br><span class=\"line\">username = glance</span><br><span class=\"line\">password = GLANCE_PASS</span><br><span class=\"line\"></span><br><span class=\"line\">[paste_deploy]</span><br><span class=\"line\">flavor = keystone</span><br><span class=\"line\"></span><br><span class=\"line\">[glance_store]</span><br><span class=\"line\">stores = file,http</span><br><span class=\"line\">default_store = file</span><br><span class=\"line\">filesystem_store_datadir = /var/lib/glance/images/</span><br></pre></td></tr></table></figure>\n\n<p> <em><strong>解释:</strong></em></p>\n<p> [database]部分，配置数据库入口</p>\n<p> [keystone_authtoken] [paste_deploy]部分，配置身份认证服务入口</p>\n<p> [glance_store]部分，配置本地文件系统存储和镜像文件的位置</p>\n</li>\n<li><p>同步数据库</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">su -s /bin/sh -c &quot;glance-manage db_sync&quot; glance</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动服务：</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl enable openstack-glance-api.service</span><br><span class=\"line\">systemctl start openstack-glance-api.service</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>验证</p>\n<ul>\n<li>导入环境变量</li>\n</ul>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source ~/.admin-openrcu</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>下载镜像</li>\n</ul>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x86镜像下载：</span><br><span class=\"line\">wget http://download.cirros-cloud.net/0.4.0/cirros-0.4.0-x86_64-disk.img</span><br><span class=\"line\"></span><br><span class=\"line\">arm镜像下载：</span><br><span class=\"line\">wget http://download.cirros-cloud.net/0.4.0/cirros-0.4.0-aarch64-disk.img</span><br></pre></td></tr></table></figure>\n\n<p> <em><strong>注意</strong></em></p>\n<p> <strong>如果您使用的环境是鲲鹏架构，请下载aarch64版本的镜像；已对镜像cirros-0.5.2-aarch64-disk.img进行测试。</strong></p>\n<ul>\n<li>向Image服务上传镜像：</li>\n</ul>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openstack image create --disk-format qcow2 --container-format bare \\</span><br><span class=\"line\">                    --file cirros-0.4.0-x86_64-disk.img --public cirros</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>确认镜像上传并验证属性：</li>\n</ul>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openstack image list</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"Placement\"><a href=\"#Placement\" class=\"headerlink\" title=\"Placement\"></a>Placement</h4><p>Placement是OpenStack提供的资源调度组件，一般不面向用户，由Nova等组件调用，安装在控制节点。</p>\n<p>安装、配置Placement服务前，需要先创建相应的数据库、服务凭证和API endpoints。</p>\n<ol>\n<li><p>创建数据库</p>\n<ul>\n<li>使用root用户访问数据库服务：</li>\n</ul>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -u root -p</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>创建placement数据库：</li>\n</ul>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MariaDB [(<span class=\"keyword\">none</span>)]<span class=\"operator\">&gt;</span> <span class=\"keyword\">CREATE</span> DATABASE placement;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>授权数据库访问：</li>\n</ul>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MariaDB [(<span class=\"keyword\">none</span>)]<span class=\"operator\">&gt;</span> <span class=\"keyword\">GRANT</span> <span class=\"keyword\">ALL</span> PRIVILEGES <span class=\"keyword\">ON</span> placement.<span class=\"operator\">*</span> <span class=\"keyword\">TO</span> <span class=\"string\">&#x27;placement&#x27;</span>@<span class=\"string\">&#x27;localhost&#x27;</span> \\</span><br><span class=\"line\">    IDENTIFIED <span class=\"keyword\">BY</span> <span class=\"string\">&#x27;PLACEMENT_DBPASS&#x27;</span>;</span><br><span class=\"line\">MariaDB [(<span class=\"keyword\">none</span>)]<span class=\"operator\">&gt;</span> <span class=\"keyword\">GRANT</span> <span class=\"keyword\">ALL</span> PRIVILEGES <span class=\"keyword\">ON</span> placement.<span class=\"operator\">*</span> <span class=\"keyword\">TO</span> <span class=\"string\">&#x27;placement&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span> \\</span><br><span class=\"line\">    IDENTIFIED <span class=\"keyword\">BY</span> <span class=\"string\">&#x27;PLACEMENT_DBPASS&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p> 替换<code>PLACEMENT_DBPASS</code>为placement数据库访问密码。</p>\n<ul>\n<li>退出数据库访问客户端：</li>\n</ul>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exit</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置用户和Endpoints</p>\n<ul>\n<li>source admin凭证，以获取admin命令行权限：</li>\n</ul>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source ~/.admin-openrc</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>创建placement用户并设置用户密码：</li>\n</ul>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openstack user create --domain default --password-prompt placement</span><br><span class=\"line\"></span><br><span class=\"line\">User Password:</span><br><span class=\"line\">Repeat User Password:</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>添加placement用户到service project并指定admin角色：</li>\n</ul>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openstack role add --project service --user placement admin</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>创建placement服务实体：</li>\n</ul>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openstack service create --name placement \\</span><br><span class=\"line\">    --description &quot;Placement API&quot; placement</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>创建Placement API服务endpoints：</li>\n</ul>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openstack endpoint create --region RegionOne \\</span><br><span class=\"line\">    placement public http://controller:8778</span><br><span class=\"line\">openstack endpoint create --region RegionOne \\</span><br><span class=\"line\">    placement internal http://controller:8778</span><br><span class=\"line\">openstack endpoint create --region RegionOne \\</span><br><span class=\"line\">    placement admin http://controller:8778</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装及配置组件</p>\n<ul>\n<li>安装软件包：</li>\n</ul>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dnf install openstack-placement-api</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>编辑<code>/etc/placement/placement.conf</code>配置文件，完成如下操作：</p>\n<ul>\n<li>在<code>[placement_database]</code>部分，配置数据库入口：</li>\n</ul>\n  <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[placement_database]</span></span><br><span class=\"line\"><span class=\"attr\">connection</span> = mysql+pymysql://placement:PLACEMENT_DBPASS@controller/placement</span><br></pre></td></tr></table></figure>\n\n<p>  替换<code>PLACEMENT_DBPASS</code>为placement数据库的密码。</p>\n<ul>\n<li>在<code>[api]</code>和<code>[keystone_authtoken]</code>部分，配置身份认证服务入口：</li>\n</ul>\n  <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[api]</span></span><br><span class=\"line\"><span class=\"attr\">auth_strategy</span> = keystone</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[keystone_authtoken]</span></span><br><span class=\"line\"><span class=\"attr\">auth_url</span> = http://controller:<span class=\"number\">5000</span>/v3</span><br><span class=\"line\"><span class=\"attr\">memcached_servers</span> = controller:<span class=\"number\">11211</span></span><br><span class=\"line\"><span class=\"attr\">auth_type</span> = password</span><br><span class=\"line\"><span class=\"attr\">project_domain_name</span> = Default</span><br><span class=\"line\"><span class=\"attr\">user_domain_name</span> = Default</span><br><span class=\"line\"><span class=\"attr\">project_name</span> = service</span><br><span class=\"line\"><span class=\"attr\">username</span> = placement</span><br><span class=\"line\"><span class=\"attr\">password</span> = PLACEMENT_PASS</span><br></pre></td></tr></table></figure>\n\n<p>  替换<code>PLACEMENT_PASS</code>为placement用户的密码。</p>\n</li>\n<li><p>数据库同步，填充Placement数据库：</p>\n</li>\n</ul>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">su -s /bin/sh -c &quot;placement-manage db sync&quot; placement</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动服务</p>\n<p> 重启httpd服务：</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart httpd</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>验证</p>\n<ul>\n<li>source admin凭证，以获取admin命令行权限</li>\n</ul>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source ~/.admin-openrc</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>执行状态检查：</li>\n</ul>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">placement-status upgrade check</span><br></pre></td></tr></table></figure>\n\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+----------------------------------------------------------------------+</span><br><span class=\"line\">| Upgrade Check Results                                                |</span><br><span class=\"line\">+----------------------------------------------------------------------+</span><br><span class=\"line\">| Check: Missing Root Provider IDs                                     |</span><br><span class=\"line\">| Result: Success                                                      |</span><br><span class=\"line\">| Details: None                                                        |</span><br><span class=\"line\">+----------------------------------------------------------------------+</span><br><span class=\"line\">| Check: Incomplete Consumers                                          |</span><br><span class=\"line\">| Result: Success                                                      |</span><br><span class=\"line\">| Details: None                                                        |</span><br><span class=\"line\">+----------------------------------------------------------------------+</span><br><span class=\"line\">| Check: Policy File JSON to YAML Migration                            |</span><br><span class=\"line\">| Result: Failure                                                      |</span><br><span class=\"line\">| Details: Your policy file is JSON-formatted which is deprecated. You |</span><br><span class=\"line\">|   need to switch to YAML-formatted file. Use the                     |</span><br><span class=\"line\">|   ``oslopolicy-convert-json-to-yaml`` tool to convert the            |</span><br><span class=\"line\">|   existing JSON-formatted files to YAML in a backwards-              |</span><br><span class=\"line\">|   compatible manner: https://docs.openstack.org/oslo.policy/         |</span><br><span class=\"line\">|   latest/cli/oslopolicy-convert-json-to-yaml.html.                   |</span><br><span class=\"line\">+----------------------------------------------------------------------+</span><br></pre></td></tr></table></figure>\n\n<p> 这里可以看到<code>Policy File JSON to YAML Migration</code>的结果为Failure。这是因为在Placement中，JSON格式的policy文件从Wallaby版本开始已处于<code>deprecated</code>状态。可以参考提示，使用<a href=\"https://docs.openstack.org/oslo.policy/latest/cli/oslopolicy-convert-json-to-yaml.html\">oslopolicy-convert-json-to-yaml</a>工具  将现有的JSON格式policy文件转化为YAML格式。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">oslopolicy-convert-json-to-yaml  --namespace placement \\</span><br><span class=\"line\">    --policy-file /etc/placement/policy.json \\</span><br><span class=\"line\">    --output-file /etc/placement/policy.yaml</span><br><span class=\"line\">mv /etc/placement/policy.json&#123;,.bak&#125;</span><br></pre></td></tr></table></figure>\n\n<p> 注：当前环境中此问题可忽略，不影响运行。</p>\n<ul>\n<li><p>针对placement API运行命令：</p>\n<ul>\n<li>安装osc-placement插件：</li>\n</ul>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dnf install python3-osc-placement</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>列出可用的资源类别及特性：</li>\n</ul>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openstack --os-placement-api-version 1.2 resource class list --sort-column name</span><br><span class=\"line\">+----------------------------+</span><br><span class=\"line\">| name                       |</span><br><span class=\"line\">+----------------------------+</span><br><span class=\"line\">| DISK_GB                    |</span><br><span class=\"line\">| FPGA                       |</span><br><span class=\"line\">| ...                        |</span><br><span class=\"line\"></span><br><span class=\"line\">openstack --os-placement-api-version 1.6 trait list --sort-column name</span><br><span class=\"line\">+---------------------------------------+</span><br><span class=\"line\">| name                                  |</span><br><span class=\"line\">+---------------------------------------+</span><br><span class=\"line\">| COMPUTE_ACCELERATORS                  |</span><br><span class=\"line\">| COMPUTE_ARCH_AARCH64                  |</span><br><span class=\"line\">| ...                                   |</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ol>\n<h4 id=\"Nova\"><a href=\"#Nova\" class=\"headerlink\" title=\"Nova\"></a>Nova</h4><p>Nova是OpenStack的计算服务，负责虚拟机的创建、发放等功能。</p>\n<p><strong>Controller节点</strong></p>\n<p>在控制节点执行以下操作。</p>\n<ol>\n<li><p>创建数据库</p>\n<ul>\n<li>使用root用户访问数据库服务：</li>\n</ul>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -u root -p</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>创建<code>nova_api</code>、<code>nova</code>和<code>nova_cell0</code>数据库：</li>\n</ul>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MariaDB [(<span class=\"keyword\">none</span>)]<span class=\"operator\">&gt;</span> <span class=\"keyword\">CREATE</span> DATABASE nova_api;</span><br><span class=\"line\">MariaDB [(<span class=\"keyword\">none</span>)]<span class=\"operator\">&gt;</span> <span class=\"keyword\">CREATE</span> DATABASE nova;</span><br><span class=\"line\">MariaDB [(<span class=\"keyword\">none</span>)]<span class=\"operator\">&gt;</span> <span class=\"keyword\">CREATE</span> DATABASE nova_cell0;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>授权数据库访问：</li>\n</ul>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MariaDB [(<span class=\"keyword\">none</span>)]<span class=\"operator\">&gt;</span> <span class=\"keyword\">GRANT</span> <span class=\"keyword\">ALL</span> PRIVILEGES <span class=\"keyword\">ON</span> nova_api.<span class=\"operator\">*</span> <span class=\"keyword\">TO</span> <span class=\"string\">&#x27;nova&#x27;</span>@<span class=\"string\">&#x27;localhost&#x27;</span> \\</span><br><span class=\"line\">    IDENTIFIED <span class=\"keyword\">BY</span> <span class=\"string\">&#x27;NOVA_DBPASS&#x27;</span>;</span><br><span class=\"line\">MariaDB [(<span class=\"keyword\">none</span>)]<span class=\"operator\">&gt;</span> <span class=\"keyword\">GRANT</span> <span class=\"keyword\">ALL</span> PRIVILEGES <span class=\"keyword\">ON</span> nova_api.<span class=\"operator\">*</span> <span class=\"keyword\">TO</span> <span class=\"string\">&#x27;nova&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span> \\</span><br><span class=\"line\">    IDENTIFIED <span class=\"keyword\">BY</span> <span class=\"string\">&#x27;NOVA_DBPASS&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">MariaDB [(<span class=\"keyword\">none</span>)]<span class=\"operator\">&gt;</span> <span class=\"keyword\">GRANT</span> <span class=\"keyword\">ALL</span> PRIVILEGES <span class=\"keyword\">ON</span> nova.<span class=\"operator\">*</span> <span class=\"keyword\">TO</span> <span class=\"string\">&#x27;nova&#x27;</span>@<span class=\"string\">&#x27;localhost&#x27;</span> \\</span><br><span class=\"line\">    IDENTIFIED <span class=\"keyword\">BY</span> <span class=\"string\">&#x27;NOVA_DBPASS&#x27;</span>;</span><br><span class=\"line\">MariaDB [(<span class=\"keyword\">none</span>)]<span class=\"operator\">&gt;</span> <span class=\"keyword\">GRANT</span> <span class=\"keyword\">ALL</span> PRIVILEGES <span class=\"keyword\">ON</span> nova.<span class=\"operator\">*</span> <span class=\"keyword\">TO</span> <span class=\"string\">&#x27;nova&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span> \\</span><br><span class=\"line\">    IDENTIFIED <span class=\"keyword\">BY</span> <span class=\"string\">&#x27;NOVA_DBPASS&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">MariaDB [(<span class=\"keyword\">none</span>)]<span class=\"operator\">&gt;</span> <span class=\"keyword\">GRANT</span> <span class=\"keyword\">ALL</span> PRIVILEGES <span class=\"keyword\">ON</span> nova_cell0.<span class=\"operator\">*</span> <span class=\"keyword\">TO</span> <span class=\"string\">&#x27;nova&#x27;</span>@<span class=\"string\">&#x27;localhost&#x27;</span> \\</span><br><span class=\"line\">    IDENTIFIED <span class=\"keyword\">BY</span> <span class=\"string\">&#x27;NOVA_DBPASS&#x27;</span>;</span><br><span class=\"line\">MariaDB [(<span class=\"keyword\">none</span>)]<span class=\"operator\">&gt;</span> <span class=\"keyword\">GRANT</span> <span class=\"keyword\">ALL</span> PRIVILEGES <span class=\"keyword\">ON</span> nova_cell0.<span class=\"operator\">*</span> <span class=\"keyword\">TO</span> <span class=\"string\">&#x27;nova&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span> \\</span><br><span class=\"line\">    IDENTIFIED <span class=\"keyword\">BY</span> <span class=\"string\">&#x27;NOVA_DBPASS&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p> 替换<code>NOVA_DBPASS</code>为nova相关数据库访问密码。</p>\n<ul>\n<li>退出数据库访问客户端：</li>\n</ul>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exit</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置用户和Endpoints</p>\n<ul>\n<li>source admin凭证，以获取admin命令行权限：</li>\n</ul>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source ~/.admin-openrc</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>创建nova用户并设置用户密码：</li>\n</ul>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openstack user create --domain default --password-prompt nova</span><br><span class=\"line\"></span><br><span class=\"line\">User Password:</span><br><span class=\"line\">Repeat User Password:</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>添加nova用户到service project并指定admin角色：</li>\n</ul>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openstack role add --project service --user nova admin</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>创建nova服务实体：</li>\n</ul>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openstack service create --name nova \\</span><br><span class=\"line\">    --description &quot;OpenStack Compute&quot; compute</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>创建Nova API服务endpoints：</li>\n</ul>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openstack endpoint create --region RegionOne \\</span><br><span class=\"line\">    compute public http://controller:8774/v2.1</span><br><span class=\"line\">openstack endpoint create --region RegionOne \\</span><br><span class=\"line\">    compute internal http://controller:8774/v2.1</span><br><span class=\"line\">openstack endpoint create --region RegionOne \\</span><br><span class=\"line\">    compute admin http://controller:8774/v2.1</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装及配置组件</p>\n<ul>\n<li>安装软件包：</li>\n</ul>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dnf install openstack-nova-api openstack-nova-conductor \\</span><br><span class=\"line\">    openstack-nova-novncproxy openstack-nova-scheduler</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>编辑<code>/etc/nova/nova.conf</code>配置文件，完成如下操作：</p>\n<ul>\n<li>在<code>[default]</code>部分，启用计算和元数据的API，配置RabbitMQ消息队列入口，使用controller节点管理IP配置my_ip，显式定义log_dir：</li>\n</ul>\n  <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[DEFAULT]</span></span><br><span class=\"line\"><span class=\"attr\">enabled_apis</span> = osapi_compute,metadata</span><br><span class=\"line\"><span class=\"attr\">transport_url</span> = rabbit://openstack:RABBIT_PASS@controller:<span class=\"number\">5672</span>/</span><br><span class=\"line\"><span class=\"attr\">my_ip</span> = <span class=\"number\">192.168</span>.<span class=\"number\">0.2</span></span><br><span class=\"line\"><span class=\"attr\">log_dir</span> = /var/log/nova</span><br><span class=\"line\"><span class=\"attr\">state_path</span> = /var/lib/nova</span><br></pre></td></tr></table></figure>\n\n<p>  替换<code>RABBIT_PASS</code>为RabbitMQ中openstack账户的密码。</p>\n<ul>\n<li>在<code>[api_database]</code>和<code>[database]</code>部分，配置数据库入口：</li>\n</ul>\n  <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[api_database]</span></span><br><span class=\"line\"><span class=\"attr\">connection</span> = mysql+pymysql://nova:NOVA_DBPASS@controller/nova_api</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[database]</span></span><br><span class=\"line\"><span class=\"attr\">connection</span> = mysql+pymysql://nova:NOVA_DBPASS@controller/nova</span><br></pre></td></tr></table></figure>\n\n<p>  替换<code>NOVA_DBPASS</code>为nova相关数据库的密码。</p>\n<ul>\n<li>在<code>[api]</code>和<code>[keystone_authtoken]</code>部分，配置身份认证服务入口：</li>\n</ul>\n  <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[api]</span></span><br><span class=\"line\"><span class=\"attr\">auth_strategy</span> = keystone</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[keystone_authtoken]</span></span><br><span class=\"line\"><span class=\"attr\">auth_url</span> = http://controller:<span class=\"number\">5000</span>/v3</span><br><span class=\"line\"><span class=\"attr\">memcached_servers</span> = controller:<span class=\"number\">11211</span></span><br><span class=\"line\"><span class=\"attr\">auth_type</span> = password</span><br><span class=\"line\"><span class=\"attr\">project_domain_name</span> = Default</span><br><span class=\"line\"><span class=\"attr\">user_domain_name</span> = Default</span><br><span class=\"line\"><span class=\"attr\">project_name</span> = service</span><br><span class=\"line\"><span class=\"attr\">username</span> = nova</span><br><span class=\"line\"><span class=\"attr\">password</span> = NOVA_PASS</span><br></pre></td></tr></table></figure>\n\n<p>  替换<code>NOVA_PASS</code>为nova用户的密码。</p>\n<ul>\n<li>在<code>[vnc]</code>部分，启用并配置远程控制台入口：</li>\n</ul>\n  <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[vnc]</span></span><br><span class=\"line\"><span class=\"attr\">enabled</span> = <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">server_listen</span> = <span class=\"variable\">$my_ip</span></span><br><span class=\"line\"><span class=\"attr\">server_proxyclient_address</span> = <span class=\"variable\">$my_ip</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在<code>[glance]</code>部分，配置镜像服务API的地址：</li>\n</ul>\n  <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[glance]</span></span><br><span class=\"line\"><span class=\"attr\">api_servers</span> = http://controller:<span class=\"number\">9292</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在<code>[oslo_concurrency]</code>部分，配置lock path：</li>\n</ul>\n  <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[oslo_concurrency]</span></span><br><span class=\"line\"><span class=\"attr\">lock_path</span> = /var/lib/nova/tmp</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>[placement]部分，配置placement服务的入口：</li>\n</ul>\n  <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[placement]</span></span><br><span class=\"line\"><span class=\"attr\">region_name</span> = RegionOne</span><br><span class=\"line\"><span class=\"attr\">project_domain_name</span> = Default</span><br><span class=\"line\"><span class=\"attr\">project_name</span> = service</span><br><span class=\"line\"><span class=\"attr\">auth_type</span> = password</span><br><span class=\"line\"><span class=\"attr\">user_domain_name</span> = Default</span><br><span class=\"line\"><span class=\"attr\">auth_url</span> = http://controller:<span class=\"number\">5000</span>/v3</span><br><span class=\"line\"><span class=\"attr\">username</span> = placement</span><br><span class=\"line\"><span class=\"attr\">password</span> = PLACEMENT_PASS</span><br></pre></td></tr></table></figure>\n\n<p>  替换<code>PLACEMENT_PASS</code>为placement用户的密码。</p>\n</li>\n<li><p>数据库同步：</p>\n<ul>\n<li>同步nova-api数据库：</li>\n</ul>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">su -s /bin/sh -c &quot;nova-manage api_db sync&quot; nova</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>注册cell0数据库：</li>\n</ul>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">su -s /bin/sh -c &quot;nova-manage cell_v2 map_cell0&quot; nova</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>创建cell1 cell：</li>\n</ul>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">su -s /bin/sh -c &quot;nova-manage cell_v2 create_cell --name=cell1 --verbose&quot; nova</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>同步nova数据库：</li>\n</ul>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">su -s /bin/sh -c &quot;nova-manage db sync&quot; nova</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>验证cell0和cell1注册正确：</li>\n</ul>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">su -s /bin/sh -c &quot;nova-manage cell_v2 list_cells&quot; nova</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>启动服务</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl enable \\</span><br><span class=\"line\">  openstack-nova-api.service \\</span><br><span class=\"line\">  openstack-nova-scheduler.service \\</span><br><span class=\"line\">  openstack-nova-conductor.service \\</span><br><span class=\"line\">  openstack-nova-novncproxy.service</span><br><span class=\"line\"></span><br><span class=\"line\">systemctl start \\</span><br><span class=\"line\">  openstack-nova-api.service \\</span><br><span class=\"line\">  openstack-nova-scheduler.service \\</span><br><span class=\"line\">  openstack-nova-conductor.service \\</span><br><span class=\"line\">  openstack-nova-novncproxy.service</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><strong>Compute节点</strong></p>\n<p>在计算节点执行以下操作。</p>\n<ol>\n<li><p>安装软件包</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dnf install openstack-nova-compute</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>编辑<code>/etc/nova/nova.conf</code>配置文件</p>\n<ul>\n<li>在<code>[default]</code>部分，启用计算和元数据的API，配置RabbitMQ消息队列入口，使用Compute节点管理IP配置my_ip，显式定义compute_driver、instances_path、log_dir：</li>\n</ul>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[DEFAULT]</span></span><br><span class=\"line\"><span class=\"attr\">enabled_apis</span> = osapi_compute,metadata</span><br><span class=\"line\"><span class=\"attr\">transport_url</span> = rabbit://openstack:RABBIT_PASS@controller:<span class=\"number\">5672</span>/</span><br><span class=\"line\"><span class=\"attr\">my_ip</span> = <span class=\"number\">192.168</span>.<span class=\"number\">0.3</span></span><br><span class=\"line\"><span class=\"attr\">compute_driver</span> = libvirt.LibvirtDriver</span><br><span class=\"line\"><span class=\"attr\">instances_path</span> = /var/lib/nova/instances</span><br><span class=\"line\"><span class=\"attr\">log_dir</span> = /var/log/nova</span><br></pre></td></tr></table></figure>\n\n<p> 替换<code>RABBIT_PASS</code>为RabbitMQ中openstack账户的密码。</p>\n<ul>\n<li>在<code>[api]</code>和<code>[keystone_authtoken]</code>部分，配置身份认证服务入口：</li>\n</ul>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[api]</span></span><br><span class=\"line\"><span class=\"attr\">auth_strategy</span> = keystone</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[keystone_authtoken]</span></span><br><span class=\"line\"><span class=\"attr\">auth_url</span> = http://controller:<span class=\"number\">5000</span>/v3</span><br><span class=\"line\"><span class=\"attr\">memcached_servers</span> = controller:<span class=\"number\">11211</span></span><br><span class=\"line\"><span class=\"attr\">auth_type</span> = password</span><br><span class=\"line\"><span class=\"attr\">project_domain_name</span> = Default</span><br><span class=\"line\"><span class=\"attr\">user_domain_name</span> = Default</span><br><span class=\"line\"><span class=\"attr\">project_name</span> = service</span><br><span class=\"line\"><span class=\"attr\">username</span> = nova</span><br><span class=\"line\"><span class=\"attr\">password</span> = NOVA_PASS</span><br></pre></td></tr></table></figure>\n\n<p> 替换<code>NOVA_PASS</code>为nova用户的密码。</p>\n<ul>\n<li>在<code>[vnc]</code>部分，启用并配置远程控制台入口：</li>\n</ul>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[vnc]</span></span><br><span class=\"line\"><span class=\"attr\">enabled</span> = <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">server_listen</span> = <span class=\"variable\">$my_ip</span></span><br><span class=\"line\"><span class=\"attr\">server_proxyclient_address</span> = <span class=\"variable\">$my_ip</span></span><br><span class=\"line\"><span class=\"attr\">novncproxy_base_url</span> = http://controller:<span class=\"number\">6080</span>/vnc_auto.html</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在<code>[glance]</code>部分，配置镜像服务API的地址：</li>\n</ul>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[glance]</span></span><br><span class=\"line\"><span class=\"attr\">api_servers</span> = http://controller:<span class=\"number\">9292</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在<code>[oslo_concurrency]</code>部分，配置lock path：</li>\n</ul>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[oslo_concurrency]</span></span><br><span class=\"line\"><span class=\"attr\">lock_path</span> = /var/lib/nova/tmp</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>[placement]部分，配置placement服务的入口：</li>\n</ul>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[placement]</span></span><br><span class=\"line\"><span class=\"attr\">region_name</span> = RegionOne</span><br><span class=\"line\"><span class=\"attr\">project_domain_name</span> = Default</span><br><span class=\"line\"><span class=\"attr\">project_name</span> = service</span><br><span class=\"line\"><span class=\"attr\">auth_type</span> = password</span><br><span class=\"line\"><span class=\"attr\">user_domain_name</span> = Default</span><br><span class=\"line\"><span class=\"attr\">auth_url</span> = http://controller:<span class=\"number\">5000</span>/v3</span><br><span class=\"line\"><span class=\"attr\">username</span> = placement</span><br><span class=\"line\"><span class=\"attr\">password</span> = PLACEMENT_PASS</span><br></pre></td></tr></table></figure>\n\n<p> 替换<code>PLACEMENT_PASS</code>为placement用户的密码。</p>\n</li>\n<li><p>确认计算节点是否支持虚拟机硬件加速（x86_64）</p>\n<p> 处理器为x86_64架构时，可通过运行如下命令确认是否支持硬件加速：</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">egrep -c &#x27;(vmx|svm)&#x27; /proc/cpuinfo</span><br></pre></td></tr></table></figure>\n\n<p> 如果返回值为0则不支持硬件加速，需要配置libvirt使用QEMU而不是默认的KVM。编辑<code>/etc/nova/nova.conf</code>的<code>[libvirt]</code>部分：</p>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[libvirt]</span></span><br><span class=\"line\"><span class=\"attr\">virt_type</span> = qemu</span><br></pre></td></tr></table></figure>\n\n<p> 如果返回值为1或更大的值，则支持硬件加速，不需要进行额外的配置。</p>\n</li>\n<li><p>确认计算节点是否支持虚拟机硬件加速（arm64）</p>\n<p> 处理器为arm64架构时，可通过运行如下命令确认是否支持硬件加速：</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">virt-host-validate</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">该命令由libvirt提供，此时libvirt应已作为openstack-nova-compute依赖被安装，环境中已有此命令</span></span><br></pre></td></tr></table></figure>\n\n<p> 显示FAIL时，表示不支持硬件加速，需要配置libvirt使用QEMU而不是默认的KVM。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">QEMU: Checking if device /dev/kvm exists: FAIL (Check that CPU and firmware supports virtualization and kvm module is loaded)</span><br></pre></td></tr></table></figure>\n\n<p> 编辑<code>/etc/nova/nova.conf</code>的<code>[libvirt]</code>部分：</p>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[libvirt]</span></span><br><span class=\"line\"><span class=\"attr\">virt_type</span> = qemu</span><br></pre></td></tr></table></figure>\n\n<p> 显示PASS时，表示支持硬件加速，不需要进行额外的配置。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">QEMU: Checking if device /dev/kvm exists: PASS</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置qemu（仅arm64）</p>\n<p> 仅当处理器为arm64架构时需要执行此操作。</p>\n<ul>\n<li>编辑<code>/etc/libvirt/qemu.conf</code>:</li>\n</ul>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">nvram</span> = [<span class=\"string\">&quot;/usr/share/AAVMF/AAVMF_CODE.fd: \\</span></span><br><span class=\"line\"><span class=\"string\">            /usr/share/AAVMF/AAVMF_VARS.fd&quot;</span>, \\</span><br><span class=\"line\">            <span class=\"string\">&quot;/usr/share/edk2/aarch64/QEMU_EFI-pflash.raw: \\</span></span><br><span class=\"line\"><span class=\"string\">            /usr/share/edk2/aarch64/vars-template-pflash.raw&quot;</span>]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>编辑<code>/etc/qemu/firmware/edk2-aarch64.json</code></li>\n</ul>\n <figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;description&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;UEFI firmware for ARM64 virtual machines&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;interface-types&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">        <span class=\"string\">&quot;uefi&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;mapping&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;device&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;flash&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;executable&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;filename&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;/usr/share/edk2/aarch64/QEMU_EFI-pflash.raw&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;format&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;raw&quot;</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;nvram-template&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;filename&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;/usr/share/edk2/aarch64/vars-template-pflash.raw&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;format&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;raw&quot;</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;targets&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;architecture&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;aarch64&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;machines&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">                <span class=\"string\">&quot;virt-*&quot;</span></span><br><span class=\"line\">            <span class=\"punctuation\">]</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;features&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;tags&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动服务</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl enable libvirtd.service openstack-nova-compute.service</span><br><span class=\"line\">systemctl start libvirtd.service openstack-nova-compute.service</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><strong>Controller节点</strong></p>\n<p>在控制节点执行以下操作。</p>\n<ol>\n<li><p>添加计算节点到openstack集群</p>\n<ul>\n<li>source admin凭证，以获取admin命令行权限：</li>\n</ul>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source ~/.admin-openrc</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>确认nova-compute服务已识别到数据库中：</li>\n</ul>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openstack compute service list --service nova-compute</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>发现计算节点，将计算节点添加到cell数据库：</li>\n</ul>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">su -s /bin/sh -c &quot;nova-manage cell_v2 discover_hosts --verbose&quot; nova</span><br></pre></td></tr></table></figure>\n\n<p> 结果如下：</p>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Modules with known eventlet monkey patching issues were imported prior to eventlet monkey patching: urllib3. This warning can usually be    ignored if the caller is only importing and not executing nova code.</span><br><span class=\"line\">Found 2 cell mappings.</span><br><span class=\"line\">Skipping cell0 since it does not contain hosts.</span><br><span class=\"line\">Getting computes from cell &#x27;cell1&#x27;: 6dae034e-b2d9-4a6c-b6f0-60ada6a6ddc2</span><br><span class=\"line\">Checking host mapping for compute host &#x27;compute&#x27;: 6286a86f-09d7-4786-9137-1185654c9e2e</span><br><span class=\"line\">Creating host mapping for compute host &#x27;compute&#x27;: 6286a86f-09d7-4786-9137-1185654c9e2e</span><br><span class=\"line\">Found 1 unmapped computes in cell: 6dae034e-b2d9-4a6c-b6f0-60ada6a6ddc2</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>验证</p>\n<ul>\n<li>列出服务组件，验证每个流程都成功启动和注册：</li>\n</ul>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openstack compute service list</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>列出身份服务中的API端点，验证与身份服务的连接：</li>\n</ul>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openstack catalog list</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>列出镜像服务中的镜像，验证与镜像服务的连接：</li>\n</ul>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openstack image list</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>检查cells是否运作成功，以及其他必要条件是否已具备。</li>\n</ul>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nova-status upgrade check</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"Neutron\"><a href=\"#Neutron\" class=\"headerlink\" title=\"Neutron\"></a>Neutron</h4><p>Neutron是OpenStack的网络服务，提供虚拟交换机、IP路由、DHCP等功能。</p>\n<p><strong>Controller节点</strong></p>\n<ol>\n<li><p>创建数据库、服务凭证和 API 服务端点</p>\n<ul>\n<li>创建数据库：</li>\n</ul>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql <span class=\"operator\">-</span>u root <span class=\"operator\">-</span>p</span><br><span class=\"line\"></span><br><span class=\"line\">MariaDB [(<span class=\"keyword\">none</span>)]<span class=\"operator\">&gt;</span> <span class=\"keyword\">CREATE</span> DATABASE neutron;</span><br><span class=\"line\">MariaDB [(<span class=\"keyword\">none</span>)]<span class=\"operator\">&gt;</span> <span class=\"keyword\">GRANT</span> <span class=\"keyword\">ALL</span> PRIVILEGES <span class=\"keyword\">ON</span> neutron.<span class=\"operator\">*</span> <span class=\"keyword\">TO</span> <span class=\"string\">&#x27;neutron&#x27;</span>@<span class=\"string\">&#x27;localhost&#x27;</span> IDENTIFIED <span class=\"keyword\">BY</span> <span class=\"string\">&#x27;NEUTRON_DBPASS&#x27;</span>;</span><br><span class=\"line\">MariaDB [(<span class=\"keyword\">none</span>)]<span class=\"operator\">&gt;</span> <span class=\"keyword\">GRANT</span> <span class=\"keyword\">ALL</span> PRIVILEGES <span class=\"keyword\">ON</span> neutron.<span class=\"operator\">*</span> <span class=\"keyword\">TO</span> <span class=\"string\">&#x27;neutron&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span> IDENTIFIED <span class=\"keyword\">BY</span> <span class=\"string\">&#x27;NEUTRON_DBPASS&#x27;</span>;</span><br><span class=\"line\">MariaDB [(<span class=\"keyword\">none</span>)]<span class=\"operator\">&gt;</span> exit;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>创建用户和服务，并记住创建neutron用户时输入的密码，用于配置NEUTRON_PASS：</li>\n</ul>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source ~/.admin-openrc</span><br><span class=\"line\">openstack user create --domain default --password-prompt neutron</span><br><span class=\"line\">openstack role add --project service --user neutron admin</span><br><span class=\"line\">openstack service create --name neutron --description &quot;OpenStack Networking&quot; network</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>部署 Neutron API 服务：</li>\n</ul>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openstack endpoint create --region RegionOne network public http://controller:9696</span><br><span class=\"line\">openstack endpoint create --region RegionOne network internal http://controller:9696</span><br><span class=\"line\">openstack endpoint create --region RegionOne network admin http://controller:9696</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装软件包</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dnf install -y openstack-neutron openstack-neutron-linuxbridge ebtables ipset openstack-neutron-ml2</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置Neutron</p>\n<ul>\n<li>修改&#x2F;etc&#x2F;neutron&#x2F;neutron.conf</li>\n</ul>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[database]</span></span><br><span class=\"line\"><span class=\"attr\">connection</span> = mysql+pymysql://neutron:NEUTRON_DBPASS@controller/neutron</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[DEFAULT]</span></span><br><span class=\"line\"><span class=\"attr\">core_plugin</span> = ml2</span><br><span class=\"line\"><span class=\"attr\">service_plugins</span> = router</span><br><span class=\"line\"><span class=\"attr\">allow_overlapping_ips</span> = <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">transport_url</span> = rabbit://openstack:RABBIT_PASS@controller</span><br><span class=\"line\"><span class=\"attr\">auth_strategy</span> = keystone</span><br><span class=\"line\"><span class=\"attr\">notify_nova_on_port_status_changes</span> = <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">notify_nova_on_port_data_changes</span> = <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[keystone_authtoken]</span></span><br><span class=\"line\"><span class=\"attr\">www_authenticate_uri</span> = http://controller:<span class=\"number\">5000</span></span><br><span class=\"line\"><span class=\"attr\">auth_url</span> = http://controller:<span class=\"number\">5000</span></span><br><span class=\"line\"><span class=\"attr\">memcached_servers</span> = controller:<span class=\"number\">11211</span></span><br><span class=\"line\"><span class=\"attr\">auth_type</span> = password</span><br><span class=\"line\"><span class=\"attr\">project_domain_name</span> = Default</span><br><span class=\"line\"><span class=\"attr\">user_domain_name</span> = Default</span><br><span class=\"line\"><span class=\"attr\">project_name</span> = service</span><br><span class=\"line\"><span class=\"attr\">username</span> = neutron</span><br><span class=\"line\"><span class=\"attr\">password</span> = NEUTRON_PASS</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[nova]</span></span><br><span class=\"line\"><span class=\"attr\">auth_url</span> = http://controller:<span class=\"number\">5000</span></span><br><span class=\"line\"><span class=\"attr\">auth_type</span> = password</span><br><span class=\"line\"><span class=\"attr\">project_domain_name</span> = Default</span><br><span class=\"line\"><span class=\"attr\">user_domain_name</span> = Default</span><br><span class=\"line\"><span class=\"attr\">region_name</span> = RegionOne</span><br><span class=\"line\"><span class=\"attr\">project_name</span> = service</span><br><span class=\"line\"><span class=\"attr\">username</span> = nova</span><br><span class=\"line\"><span class=\"attr\">password</span> = NOVA_PASS</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[oslo_concurrency]</span></span><br><span class=\"line\"><span class=\"attr\">lock_path</span> = /var/lib/neutron/tmp</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[experimental]</span></span><br><span class=\"line\"><span class=\"attr\">linuxbridge</span> = <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>配置ML2，ML2具体配置可以根据用户需求自行修改，本文使用的是provider network + linuxbridge**</p>\n</li>\n<li><p>修改&#x2F;etc&#x2F;neutron&#x2F;plugins&#x2F;ml2&#x2F;ml2_conf.ini</p>\n</li>\n</ul>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[ml2]</span><br><span class=\"line\">type_drivers = flat,vlan,vxlan</span><br><span class=\"line\">tenant_network_types = vxlan</span><br><span class=\"line\">mechanism_drivers = linuxbridge,l2population</span><br><span class=\"line\">extension_drivers = port_security</span><br><span class=\"line\"></span><br><span class=\"line\">[ml2_type_flat]</span><br><span class=\"line\">flat_networks = provider</span><br><span class=\"line\"></span><br><span class=\"line\">[ml2_type_vxlan]</span><br><span class=\"line\">vni_ranges = 1:1000</span><br><span class=\"line\"></span><br><span class=\"line\">[securitygroup]</span><br><span class=\"line\">enable_ipset = true</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>修改&#x2F;etc&#x2F;neutron&#x2F;plugins&#x2F;ml2&#x2F;linuxbridge_agent.ini</li>\n</ul>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[linux_bridge]</span></span><br><span class=\"line\"><span class=\"attr\">physical_interface_mappings</span> = provider:PROVIDER_INTERFACE_NAME</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[vxlan]</span></span><br><span class=\"line\"><span class=\"attr\">enable_vxlan</span> = <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">local_ip</span> = OVERLAY_INTERFACE_IP_ADDRESS</span><br><span class=\"line\"><span class=\"attr\">l2_population</span> = <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[securitygroup]</span></span><br><span class=\"line\"><span class=\"attr\">enable_security_group</span> = <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">firewall_driver</span> = neutron.agent.linux.iptables_firewall.IptablesFirewallDriver</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>配置Layer-3代理</p>\n</li>\n<li><p>修改&#x2F;etc&#x2F;neutron&#x2F;l3_agent.ini</p>\n</li>\n</ul>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[DEFAULT]</span><br><span class=\"line\">interface_driver = linuxbridge</span><br></pre></td></tr></table></figure>\n\n<p> 配置DHCP代理<br> 修改&#x2F;etc&#x2F;neutron&#x2F;dhcp_agent.ini</p>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[DEFAULT]</span></span><br><span class=\"line\"><span class=\"attr\">interface_driver</span> = linuxbridge</span><br><span class=\"line\"><span class=\"attr\">dhcp_driver</span> = neutron.agent.linux.dhcp.Dnsmasq</span><br><span class=\"line\"><span class=\"attr\">enable_isolated_metadata</span> = <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>配置metadata代理</p>\n</li>\n<li><p>修改&#x2F;etc&#x2F;neutron&#x2F;metadata_agent.ini</p>\n</li>\n</ul>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[DEFAULT]</span><br><span class=\"line\">nova_metadata_host = controller</span><br><span class=\"line\">metadata_proxy_shared_secret = METADATA_SECRET</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置nova服务使用neutron，修改&#x2F;etc&#x2F;nova&#x2F;nova.conf</p>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[neutron]</span></span><br><span class=\"line\"><span class=\"attr\">auth_url</span> = http://controller:<span class=\"number\">5000</span></span><br><span class=\"line\"><span class=\"attr\">auth_type</span> = password</span><br><span class=\"line\"><span class=\"attr\">project_domain_name</span> = default</span><br><span class=\"line\"><span class=\"attr\">user_domain_name</span> = default</span><br><span class=\"line\"><span class=\"attr\">region_name</span> = RegionOne</span><br><span class=\"line\"><span class=\"attr\">project_name</span> = service</span><br><span class=\"line\"><span class=\"attr\">username</span> = neutron</span><br><span class=\"line\"><span class=\"attr\">password</span> = NEUTRON_PASS</span><br><span class=\"line\"><span class=\"attr\">service_metadata_proxy</span> = <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">metadata_proxy_shared_secret</span> = METADATA_SECRET</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建&#x2F;etc&#x2F;neutron&#x2F;plugin.ini的符号链接</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -s /etc/neutron/plugins/ml2/ml2_conf.ini /etc/neutron/plugin.ini</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>同步数据库</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">su -s /bin/sh -c &quot;neutron-db-manage --config-file /etc/neutron/neutron.conf --config-file /etc/neutron/plugins/ml2/ml2_conf.ini upgrade head&quot; neutron</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>重启nova api服务</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart openstack-nova-api</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动网络服务</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl enable neutron-server.service neutron-linuxbridge-agent.service \\</span><br><span class=\"line\">neutron-dhcp-agent.service neutron-metadata-agent.service neutron-l3-agent.service</span><br><span class=\"line\">systemctl start neutron-server.service neutron-linuxbridge-agent.service \\</span><br><span class=\"line\">neutron-dhcp-agent.service neutron-metadata-agent.service neutron-l3-agent.service</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><strong>Compute节点</strong></p>\n<ol>\n<li><p>安装软件包</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dnf install openstack-neutron-linuxbridge ebtables ipset -y</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置Neutron</p>\n<ul>\n<li>修改&#x2F;etc&#x2F;neutron&#x2F;neutron.conf</li>\n</ul>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[DEFAULT]</span></span><br><span class=\"line\"><span class=\"attr\">transport_url</span> = rabbit://openstack:RABBIT_PASS@controller</span><br><span class=\"line\"><span class=\"attr\">auth_strategy</span> = keystone</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[keystone_authtoken]</span></span><br><span class=\"line\"><span class=\"attr\">www_authenticate_uri</span> = http://controller:<span class=\"number\">5000</span></span><br><span class=\"line\"><span class=\"attr\">auth_url</span> = http://controller:<span class=\"number\">5000</span></span><br><span class=\"line\"><span class=\"attr\">memcached_servers</span> = controller:<span class=\"number\">11211</span></span><br><span class=\"line\"><span class=\"attr\">auth_type</span> = password</span><br><span class=\"line\"><span class=\"attr\">project_domain_name</span> = Default</span><br><span class=\"line\"><span class=\"attr\">user_domain_name</span> = Default</span><br><span class=\"line\"><span class=\"attr\">project_name</span> = service</span><br><span class=\"line\"><span class=\"attr\">username</span> = neutron</span><br><span class=\"line\"><span class=\"attr\">password</span> = NEUTRON_PASS</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[oslo_concurrency]</span></span><br><span class=\"line\"><span class=\"attr\">lock_path</span> = /var/lib/neutron/tmp</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>修改&#x2F;etc&#x2F;neutron&#x2F;plugins&#x2F;ml2&#x2F;linuxbridge_agent.ini</li>\n</ul>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[linux_bridge]</span></span><br><span class=\"line\"><span class=\"attr\">physical_interface_mappings</span> = provider:PROVIDER_INTERFACE_NAME</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[vxlan]</span></span><br><span class=\"line\"><span class=\"attr\">enable_vxlan</span> = <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">local_ip</span> = OVERLAY_INTERFACE_IP_ADDRESS</span><br><span class=\"line\"><span class=\"attr\">l2_population</span> = <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[securitygroup]</span></span><br><span class=\"line\"><span class=\"attr\">enable_security_group</span> = <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">firewall_driver</span> = neutron.agent.linux.iptables_firewall.IptablesFirewallDriver</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>配置nova compute服务使用neutron，修改&#x2F;etc&#x2F;nova&#x2F;nova.conf</li>\n</ul>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[neutron]</span></span><br><span class=\"line\"><span class=\"attr\">auth_url</span> = http://controller:<span class=\"number\">5000</span></span><br><span class=\"line\"><span class=\"attr\">auth_type</span> = password</span><br><span class=\"line\"><span class=\"attr\">project_domain_name</span> = default</span><br><span class=\"line\"><span class=\"attr\">user_domain_name</span> = default</span><br><span class=\"line\"><span class=\"attr\">region_name</span> = RegionOne</span><br><span class=\"line\"><span class=\"attr\">project_name</span> = service</span><br><span class=\"line\"><span class=\"attr\">username</span> = neutron</span><br><span class=\"line\"><span class=\"attr\">password</span> = NEUTRON_PASS</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>重启nova-compute服务</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart openstack-nova-compute.service</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动Neutron linuxbridge agent服务</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl enable neutron-linuxbridge-agent</span><br><span class=\"line\">systemctl start neutron-linuxbridge-agent</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"Cinder\"><a href=\"#Cinder\" class=\"headerlink\" title=\"Cinder\"></a>Cinder</h4><p>Cinder是OpenStack的存储服务，提供块设备的创建、发放、备份等功能。</p>\n<p><strong>Controller节点</strong>：</p>\n<ol>\n<li><p>初始化数据库</p>\n<p> <code>CINDER_DBPASS</code>是用户自定义的cinder数据库密码。</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql <span class=\"operator\">-</span>u root <span class=\"operator\">-</span>p</span><br><span class=\"line\"></span><br><span class=\"line\">MariaDB [(<span class=\"keyword\">none</span>)]<span class=\"operator\">&gt;</span> <span class=\"keyword\">CREATE</span> DATABASE cinder;</span><br><span class=\"line\">MariaDB [(<span class=\"keyword\">none</span>)]<span class=\"operator\">&gt;</span> <span class=\"keyword\">GRANT</span> <span class=\"keyword\">ALL</span> PRIVILEGES <span class=\"keyword\">ON</span> cinder.<span class=\"operator\">*</span> <span class=\"keyword\">TO</span> <span class=\"string\">&#x27;cinder&#x27;</span>@<span class=\"string\">&#x27;localhost&#x27;</span> IDENTIFIED <span class=\"keyword\">BY</span> <span class=\"string\">&#x27;CINDER_DBPASS&#x27;</span>;</span><br><span class=\"line\">MariaDB [(<span class=\"keyword\">none</span>)]<span class=\"operator\">&gt;</span> <span class=\"keyword\">GRANT</span> <span class=\"keyword\">ALL</span> PRIVILEGES <span class=\"keyword\">ON</span> cinder.<span class=\"operator\">*</span> <span class=\"keyword\">TO</span> <span class=\"string\">&#x27;cinder&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span> IDENTIFIED <span class=\"keyword\">BY</span> <span class=\"string\">&#x27;CINDER_DBPASS&#x27;</span>;</span><br><span class=\"line\">MariaDB [(<span class=\"keyword\">none</span>)]<span class=\"operator\">&gt;</span> exit</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>初始化Keystone资源对象</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source ~/.admin-openrc</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">创建用户时，命令行会提示输入密码，请输入自定义的密码，下文涉及到`CINDER_PASS`的地方替换成该密码即可。</span></span><br><span class=\"line\">openstack user create --domain default --password-prompt cinder</span><br><span class=\"line\"></span><br><span class=\"line\">openstack role add --project service --user cinder admin</span><br><span class=\"line\">openstack service create --name cinderv3 --description &quot;OpenStack Block Storage&quot; volumev3</span><br><span class=\"line\"></span><br><span class=\"line\">openstack endpoint create --region RegionOne volumev3 public http://controller:8776/v3/%\\(project_id\\)s</span><br><span class=\"line\">openstack endpoint create --region RegionOne volumev3 internal http://controller:8776/v3/%\\(project_id\\)s</span><br><span class=\"line\">openstack endpoint create --region RegionOne volumev3 admin http://controller:8776/v3/%\\(project_id\\)s</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装软件包</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dnf install openstack-cinder-api openstack-cinder-scheduler</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改cinder配置文件<code>/etc/cinder/cinder.conf</code></p>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[DEFAULT]</span></span><br><span class=\"line\"><span class=\"attr\">transport_url</span> = rabbit://openstack:RABBIT_PASS@controller</span><br><span class=\"line\"><span class=\"attr\">auth_strategy</span> = keystone</span><br><span class=\"line\"><span class=\"attr\">my_ip</span> = <span class=\"number\">192.168</span>.<span class=\"number\">0.2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[database]</span></span><br><span class=\"line\"><span class=\"attr\">connection</span> = mysql+pymysql://cinder:CINDER_DBPASS@controller/cinder</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[keystone_authtoken]</span></span><br><span class=\"line\"><span class=\"attr\">www_authenticate_uri</span> = http://controller:<span class=\"number\">5000</span></span><br><span class=\"line\"><span class=\"attr\">auth_url</span> = http://controller:<span class=\"number\">5000</span></span><br><span class=\"line\"><span class=\"attr\">memcached_servers</span> = controller:<span class=\"number\">11211</span></span><br><span class=\"line\"><span class=\"attr\">auth_type</span> = password</span><br><span class=\"line\"><span class=\"attr\">project_domain_name</span> = Default</span><br><span class=\"line\"><span class=\"attr\">user_domain_name</span> = Default</span><br><span class=\"line\"><span class=\"attr\">project_name</span> = service</span><br><span class=\"line\"><span class=\"attr\">username</span> = cinder</span><br><span class=\"line\"><span class=\"attr\">password</span> = CINDER_PASS</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[oslo_concurrency]</span></span><br><span class=\"line\"><span class=\"attr\">lock_path</span> = /var/lib/cinder/tmp</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>数据库同步</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">su -s /bin/sh -c &quot;cinder-manage db sync&quot; cinder</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改nova配置<code>/etc/nova/nova.conf</code></p>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[cinder]</span></span><br><span class=\"line\"><span class=\"attr\">os_region_name</span> = RegionOne</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动服务</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart openstack-nova-api</span><br><span class=\"line\">systemctl start openstack-cinder-api openstack-cinder-scheduler</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><strong>Storage节点</strong>：</p>\n<p>Storage节点要提前准备至少一块硬盘，作为cinder的存储后端，下文默认storage节点已经存在一块未使用的硬盘，设备名称为<code>/dev/sdb</code>，用户在配置过程中，请按照真实环境信息进行名称替换。</p>\n<p>Cinder支持很多类型的后端存储，本指导使用最简单的lvm为参考，如果您想使用如ceph等其他后端，请自行配置。</p>\n<ol>\n<li><p>安装软件包</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dnf install lvm2 device-mapper-persistent-data scsi-target-utils rpcbind nfs-utils openstack-cinder-volume openstack-cinder-backup</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置lvm卷组</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pvcreate /dev/sdb</span><br><span class=\"line\">vgcreate cinder-volumes /dev/sdb</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改cinder配置<code>/etc/cinder/cinder.conf</code></p>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[DEFAULT]</span></span><br><span class=\"line\"><span class=\"attr\">transport_url</span> = rabbit://openstack:RABBIT_PASS@controller</span><br><span class=\"line\"><span class=\"attr\">auth_strategy</span> = keystone</span><br><span class=\"line\"><span class=\"attr\">my_ip</span> = <span class=\"number\">192.168</span>.<span class=\"number\">0.4</span></span><br><span class=\"line\"><span class=\"attr\">enabled_backends</span> = lvm</span><br><span class=\"line\"><span class=\"attr\">glance_api_servers</span> = http://controller:<span class=\"number\">9292</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[keystone_authtoken]</span></span><br><span class=\"line\"><span class=\"attr\">www_authenticate_uri</span> = http://controller:<span class=\"number\">5000</span></span><br><span class=\"line\"><span class=\"attr\">auth_url</span> = http://controller:<span class=\"number\">5000</span></span><br><span class=\"line\"><span class=\"attr\">memcached_servers</span> = controller:<span class=\"number\">11211</span></span><br><span class=\"line\"><span class=\"attr\">auth_type</span> = password</span><br><span class=\"line\"><span class=\"attr\">project_domain_name</span> = default</span><br><span class=\"line\"><span class=\"attr\">user_domain_name</span> = default</span><br><span class=\"line\"><span class=\"attr\">project_name</span> = service</span><br><span class=\"line\"><span class=\"attr\">username</span> = cinder</span><br><span class=\"line\"><span class=\"attr\">password</span> = CINDER_PASS</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[database]</span></span><br><span class=\"line\"><span class=\"attr\">connection</span> = mysql+pymysql://cinder:CINDER_DBPASS@controller/cinder</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[lvm]</span></span><br><span class=\"line\"><span class=\"attr\">volume_driver</span> = cinder.volume.drivers.lvm.LVMVolumeDriver</span><br><span class=\"line\"><span class=\"attr\">volume_group</span> = cinder-volumes</span><br><span class=\"line\"><span class=\"attr\">target_protocol</span> = iscsi</span><br><span class=\"line\"><span class=\"attr\">target_helper</span> = lioadm</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[oslo_concurrency]</span></span><br><span class=\"line\"><span class=\"attr\">lock_path</span> = /var/lib/cinder/tmp</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置cinder backup （可选）</p>\n<p> cinder-backup是可选的备份服务，cinder同样支持很多种备份后端，本文使用swift存储，如果您想使用如NFS等后端，请自行配置，例如可以参考<a href=\"https://docs.openstack.org/cinder/2023.1/admin/nfs-backend.html\">OpenStack官方文档</a>对NFS的配置说明。</p>\n<p> 修改<code>/etc/cinder/cinder.conf</code>，在<code>[DEFAULT]</code>中新增</p>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[DEFAULT]</span></span><br><span class=\"line\"><span class=\"attr\">backup_driver</span> = cinder.backup.drivers.swift.SwiftBackupDriver</span><br><span class=\"line\"><span class=\"attr\">backup_swift_url</span> = SWIFT_URL</span><br></pre></td></tr></table></figure>\n\n<p> 这里的<code>SWIFT_URL</code>是指环境中swift服务的URL，在部署完swift服务后，执行<code>openstack catalog show object-store</code>命令获取。</p>\n</li>\n<li><p>启动服务</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start openstack-cinder-volume target</span><br><span class=\"line\">systemctl start openstack-cinder-backup (可选)</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>至此，Cinder服务的部署已全部完成，可以在controller通过以下命令进行简单的验证</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source ~/.admin-openrc</span><br><span class=\"line\">openstack storage service list</span><br><span class=\"line\">openstack volume list</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Horizon\"><a href=\"#Horizon\" class=\"headerlink\" title=\"Horizon\"></a>Horizon</h4><p>Horizon是OpenStack提供的前端页面，可以让用户通过网页鼠标的操作来控制OpenStack集群，而不用繁琐的CLI命令行。Horizon一般部署在控制节点。</p>\n<ol>\n<li><p>安装软件包</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dnf install openstack-dashboard</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改配置文件<code>/etc/openstack-dashboard/local_settings</code></p>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">OPENSTACK_HOST</span> = <span class=\"string\">&quot;controller&quot;</span></span><br><span class=\"line\"><span class=\"attr\">ALLOWED_HOSTS</span> = [<span class=\"string\">&#x27;*&#x27;</span>, ]</span><br><span class=\"line\"><span class=\"attr\">OPENSTACK_KEYSTONE_URL</span> =  <span class=\"string\">&quot;http://controller:5000/v3&quot;</span></span><br><span class=\"line\"><span class=\"attr\">SESSION_ENGINE</span> = <span class=\"string\">&#x27;django.contrib.sessions.backends.cache&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">CACHES</span> = &#123;</span><br><span class=\"line\">&#x27;default&#x27;: &#123;</span><br><span class=\"line\">    &#x27;BACKEND&#x27;: &#x27;django.core.cache.backends.memcached.MemcachedCache&#x27;,</span><br><span class=\"line\">    &#x27;LOCATION&#x27;: &#x27;controller:11211&#x27;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"attr\">OPENSTACK_KEYSTONE_MULTIDOMAIN_SUPPORT</span> = <span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"attr\">OPENSTACK_KEYSTONE_DEFAULT_DOMAIN</span> = <span class=\"string\">&quot;Default&quot;</span></span><br><span class=\"line\"><span class=\"attr\">OPENSTACK_KEYSTONE_DEFAULT_ROLE</span> = <span class=\"string\">&quot;member&quot;</span></span><br><span class=\"line\"><span class=\"attr\">WEBROOT</span> = <span class=\"string\">&#x27;/dashboard&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">POLICY_FILES_PATH</span> = <span class=\"string\">&quot;/etc/openstack-dashboard&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">OPENSTACK_API_VERSIONS</span> = &#123;</span><br><span class=\"line\">    &quot;identity&quot;: 3,</span><br><span class=\"line\">    &quot;image&quot;: 2,</span><br><span class=\"line\">    &quot;volume&quot;: 3,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>重启服务</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart httpd</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>至此，horizon服务的部署已全部完成，打开浏览器，输入<code>http://192.168.0.2/dashboard</code>，打开horizon登录页面。</p>\n<h4 id=\"Ironic\"><a href=\"#Ironic\" class=\"headerlink\" title=\"Ironic\"></a>Ironic</h4><p>Ironic是OpenStack的裸金属服务，如果用户需要进行裸机部署则推荐使用该组件。否则，可以不用安装。</p>\n<p>在控制节点执行以下操作。</p>\n<ol>\n<li><p>设置数据库</p>\n<p> 裸金属服务在数据库中存储信息，创建一个<strong>ironic</strong>用户可以访问的<strong>ironic</strong>数据库，替换<strong>IRONIC_DBPASS</strong>为合适的密码</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql <span class=\"operator\">-</span>u root <span class=\"operator\">-</span>p</span><br><span class=\"line\"></span><br><span class=\"line\">MariaDB [(<span class=\"keyword\">none</span>)]<span class=\"operator\">&gt;</span> <span class=\"keyword\">CREATE</span> DATABASE ironic <span class=\"type\">CHARACTER</span> <span class=\"keyword\">SET</span> utf8;</span><br><span class=\"line\">MariaDB [(<span class=\"keyword\">none</span>)]<span class=\"operator\">&gt;</span> <span class=\"keyword\">GRANT</span> <span class=\"keyword\">ALL</span> PRIVILEGES <span class=\"keyword\">ON</span> ironic.<span class=\"operator\">*</span> <span class=\"keyword\">TO</span> <span class=\"string\">&#x27;ironic&#x27;</span>@<span class=\"string\">&#x27;localhost&#x27;</span> \\</span><br><span class=\"line\">IDENTIFIED <span class=\"keyword\">BY</span> <span class=\"string\">&#x27;IRONIC_DBPASS&#x27;</span>;</span><br><span class=\"line\">MariaDB [(<span class=\"keyword\">none</span>)]<span class=\"operator\">&gt;</span> <span class=\"keyword\">GRANT</span> <span class=\"keyword\">ALL</span> PRIVILEGES <span class=\"keyword\">ON</span> ironic.<span class=\"operator\">*</span> <span class=\"keyword\">TO</span> <span class=\"string\">&#x27;ironic&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span> \\</span><br><span class=\"line\">IDENTIFIED <span class=\"keyword\">BY</span> <span class=\"string\">&#x27;IRONIC_DBPASS&#x27;</span>;</span><br><span class=\"line\">MariaDB [(<span class=\"keyword\">none</span>)]<span class=\"operator\">&gt;</span> exit</span><br><span class=\"line\">Bye</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建服务用户认证</p>\n<ul>\n<li>创建Bare Metal服务用户</li>\n</ul>\n<p> 替换<code>IRONIC_PASS</code>为ironic用户密码，<code>IRONIC_INSPECTOR_PASS</code>为ironic_inspector用户密码。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openstack user create --password IRONIC_PASS \\</span><br><span class=\"line\">    --email ironic@example.com ironic</span><br><span class=\"line\">openstack role add --project service --user ironic admin</span><br><span class=\"line\">openstack service create --name ironic \\</span><br><span class=\"line\">    --description &quot;Ironic baremetal provisioning service&quot; baremetal</span><br><span class=\"line\"></span><br><span class=\"line\">openstack service create --name ironic-inspector --description     &quot;Ironic inspector baremetal provisioning service&quot; baremetal-introspection</span><br><span class=\"line\">openstack user create --password IRONIC_INSPECTOR_PASS --email ironic_inspector@example.com ironic-inspector</span><br><span class=\"line\">openstack role add --project service --user ironic-inspector admin</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>创建Bare Metal服务访问入口</li>\n</ul>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openstack endpoint create --region RegionOne baremetal admin http://192.168.0.2:6385</span><br><span class=\"line\">openstack endpoint create --region RegionOne baremetal public http://192.168.0.2:6385</span><br><span class=\"line\">openstack endpoint create --region RegionOne baremetal internal http://192.168.0.2:6385</span><br><span class=\"line\">openstack endpoint create --region RegionOne baremetal-introspection internal http://192.168.0.2:5050/v1</span><br><span class=\"line\">openstack endpoint create --region RegionOne baremetal-introspection public http://192.168.0.2:5050/v1</span><br><span class=\"line\">openstack endpoint create --region RegionOne baremetal-introspection admin http://192.168.0.2:5050/v1</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装组件</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dnf install openstack-ironic-api openstack-ironic-conductor python3-ironicclient</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置ironic-api服务</p>\n<p> 配置文件路径&#x2F;etc&#x2F;ironic&#x2F;ironic.conf</p>\n<ul>\n<li>通过<strong>connection</strong>选项配置数据库的位置，如下所示，替换<strong>IRONIC_DBPASS</strong>为<strong>ironic</strong>用户的密码，替换<strong>DB_IP</strong>为DB服务器所在的IP地址：</li>\n</ul>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[database]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># The SQ LAlchemy connection string used to connect to the</span></span><br><span class=\"line\"><span class=\"comment\"># database (string value)</span></span><br><span class=\"line\"><span class=\"comment\"># connection = mysql+pymysql://ironic:IRONIC_DBPASS@DB_IP/ironic</span></span><br><span class=\"line\"><span class=\"attr\">connection</span> = mysql+pymysql://ironic:IRONIC_DBPASS@controller/ironic</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>通过以下选项配置ironic-api服务使用RabbitMQ消息代理，替换**RPC_***为RabbitMQ的详细地址和凭证</li>\n</ul>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[DEFAULT]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># A URL representing the messaging driver to use and its full</span></span><br><span class=\"line\"><span class=\"comment\"># configuration. (string value)</span></span><br><span class=\"line\"><span class=\"comment\"># transport_url = rabbit://RPC_USER:RPC_PASSWORD@RPC_HOST:RPC_PORT/</span></span><br><span class=\"line\"><span class=\"attr\">transport_url</span> = rabbit://openstack:RABBIT_PASS@controller:<span class=\"number\">5672</span>/</span><br></pre></td></tr></table></figure>\n\n<p> 用户也可自行使用json-rpc方式替换rabbitmq</p>\n<ul>\n<li>配置ironic-api服务使用身份认证服务的凭证，替换<strong>PUBLIC_IDENTITY_IP</strong>为身份认证服务器的公共IP，替换<strong>PRIVATE_IDENTITY_IP</strong>为身份认证服务器的私有IP，替换     <strong>IRONIC_PASS</strong>为身份认证服务中<strong>ironic</strong>用户的密码，替换<strong>RABBIT_PASS</strong>为RabbitMQ中openstack账户的密码。：</li>\n</ul>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[DEFAULT]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Authentication strategy used by ironic-api: one of</span></span><br><span class=\"line\"><span class=\"comment\"># &quot;keystone&quot; or &quot;noauth&quot;. &quot;noauth&quot; should not be used in a</span></span><br><span class=\"line\"><span class=\"comment\"># production environment because all authentication will be</span></span><br><span class=\"line\"><span class=\"comment\"># disabled. (string value)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">auth_strategy</span>=keystone</span><br><span class=\"line\"><span class=\"attr\">host</span> = controller</span><br><span class=\"line\"><span class=\"attr\">memcache_servers</span> = controller:<span class=\"number\">11211</span></span><br><span class=\"line\"><span class=\"attr\">enabled_network_interfaces</span> = flat,noop,neutron</span><br><span class=\"line\"><span class=\"attr\">default_network_interface</span> = noop</span><br><span class=\"line\"><span class=\"attr\">enabled_hardware_types</span> = ipmi</span><br><span class=\"line\"><span class=\"attr\">enabled_boot_interfaces</span> = pxe</span><br><span class=\"line\"><span class=\"attr\">enabled_deploy_interfaces</span> = direct</span><br><span class=\"line\"><span class=\"attr\">default_deploy_interface</span> = direct</span><br><span class=\"line\"><span class=\"attr\">enabled_inspect_interfaces</span> = inspector</span><br><span class=\"line\"><span class=\"attr\">enabled_management_interfaces</span> = ipmitool</span><br><span class=\"line\"><span class=\"attr\">enabled_power_interfaces</span> = ipmitool</span><br><span class=\"line\"><span class=\"attr\">enabled_rescue_interfaces</span> = <span class=\"literal\">no</span>-rescue,agent</span><br><span class=\"line\"><span class=\"attr\">isolinux_bin</span> = /usr/share/syslinux/isolinux.bin</span><br><span class=\"line\"><span class=\"attr\">logging_context_format_string</span> = %(asctime)s.%(msecs)<span class=\"number\">03</span>d %(process)d %(levelname)s %(name)s [%(global_request_id)s %(request_id)s %     (user_identity)s] %(instance)s%(message)s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[keystone_authtoken]</span></span><br><span class=\"line\"><span class=\"comment\"># Authentication type to load (string value)</span></span><br><span class=\"line\"><span class=\"attr\">auth_type</span>=password</span><br><span class=\"line\"><span class=\"comment\"># Complete public Identity API endpoint (string value)</span></span><br><span class=\"line\"><span class=\"comment\"># www_authenticate_uri=http://PUBLIC_IDENTITY_IP:5000</span></span><br><span class=\"line\"><span class=\"attr\">www_authenticate_uri</span>=http://controller:<span class=\"number\">5000</span></span><br><span class=\"line\"><span class=\"comment\"># Complete admin Identity API endpoint. (string value)</span></span><br><span class=\"line\"><span class=\"comment\"># auth_url=http://PRIVATE_IDENTITY_IP:5000</span></span><br><span class=\"line\"><span class=\"attr\">auth_url</span>=http://controller:<span class=\"number\">5000</span></span><br><span class=\"line\"><span class=\"comment\"># Service username. (string value)</span></span><br><span class=\"line\"><span class=\"attr\">username</span>=ironic</span><br><span class=\"line\"><span class=\"comment\"># Service account password. (string value)</span></span><br><span class=\"line\"><span class=\"attr\">password</span>=IRONIC_PASS</span><br><span class=\"line\"><span class=\"comment\"># Service tenant name. (string value)</span></span><br><span class=\"line\"><span class=\"attr\">project_name</span>=service</span><br><span class=\"line\"><span class=\"comment\"># Domain name containing project (string value)</span></span><br><span class=\"line\"><span class=\"attr\">project_domain_name</span>=Default</span><br><span class=\"line\"><span class=\"comment\"># User&#x27;s domain name (string value)</span></span><br><span class=\"line\"><span class=\"attr\">user_domain_name</span>=Default</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[agent]</span></span><br><span class=\"line\"><span class=\"attr\">deploy_logs_collect</span> = always</span><br><span class=\"line\"><span class=\"attr\">deploy_logs_local_path</span> = /var/log/ironic/deploy</span><br><span class=\"line\"><span class=\"attr\">deploy_logs_storage_backend</span> = local</span><br><span class=\"line\"><span class=\"attr\">image_download_source</span> = http</span><br><span class=\"line\"><span class=\"attr\">stream_raw_images</span> = <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">force_raw_images</span> = <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">verify_ca</span> = <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[oslo_concurrency]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[oslo_messaging_notifications]</span></span><br><span class=\"line\"><span class=\"attr\">transport_url</span> = rabbit://openstack:RABBIT_PASS@controller:<span class=\"number\">5672</span>/</span><br><span class=\"line\"><span class=\"attr\">topics</span> = notifications</span><br><span class=\"line\"><span class=\"attr\">driver</span> = messagingv2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[oslo_messaging_rabbit]</span></span><br><span class=\"line\"><span class=\"attr\">amqp_durable_queues</span> = <span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"attr\">rabbit_ha_queues</span> = <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[pxe]</span></span><br><span class=\"line\"><span class=\"attr\">ipxe_enabled</span> = <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">pxe_append_params</span> = nofb nomodeset vga=normal coreos.autologin ipa-insecure=<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"attr\">image_cache_size</span> = <span class=\"number\">204800</span></span><br><span class=\"line\"><span class=\"attr\">tftp_root</span>=/var/lib/tftpboot/cephfs/</span><br><span class=\"line\"><span class=\"attr\">tftp_master_path</span>=/var/lib/tftpboot/cephfs/master_images</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[dhcp]</span></span><br><span class=\"line\"><span class=\"attr\">dhcp_provider</span> = none</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>创建裸金属服务数据库表</li>\n</ul>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ironic-dbsync --config-file /etc/ironic/ironic.conf create_schema</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>重启ironic-api服务</li>\n</ul>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl restart openstack-ironic-api</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置ironic-conductor服务</p>\n<p> 如下为ironic-conductor服务自身的标准配置，ironic-conductor服务可以与ironic-api服务分布于不同节点，本指南中均部署与控制节点，所以重复的配置项可跳过。</p>\n<ul>\n<li>替换使用conductor服务所在host的IP配置my_ip：</li>\n</ul>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[DEFAULT]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># IP address of this host. If unset, will determine the IP</span></span><br><span class=\"line\"><span class=\"comment\"># programmatically. If unable to do so, will use &quot;127.0.0.1&quot;.</span></span><br><span class=\"line\"><span class=\"comment\"># (string value)</span></span><br><span class=\"line\"><span class=\"comment\"># my_ip=HOST_IP</span></span><br><span class=\"line\"><span class=\"attr\">my_ip</span> = <span class=\"number\">192.168</span>.<span class=\"number\">0.2</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>配置数据库的位置，ironic-conductor应该使用和ironic-api相同的配置。替换<strong>IRONIC_DBPASS</strong>为<strong>ironic</strong>用户的密码：</li>\n</ul>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[database]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># The SQLAlchemy connection string to use to connect to the</span></span><br><span class=\"line\"><span class=\"comment\"># database. (string value)</span></span><br><span class=\"line\"><span class=\"attr\">connection</span> = mysql+pymysql://ironic:IRONIC_DBPASS@controller/ironic</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>通过以下选项配置ironic-api服务使用RabbitMQ消息代理，ironic-conductor应该使用和ironic-api相同的配置，替换<strong>RABBIT_PASS</strong>为RabbitMQ中openstack账户的密码：</li>\n</ul>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[DEFAULT]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># A URL representing the messaging driver to use and its full</span></span><br><span class=\"line\"><span class=\"comment\"># configuration. (string value)</span></span><br><span class=\"line\"><span class=\"attr\">transport_url</span> = rabbit://openstack:RABBIT_PASS@controller:<span class=\"number\">5672</span>/</span><br></pre></td></tr></table></figure>\n\n<p> 用户也可自行使用json-rpc方式替换rabbitmq</p>\n<ul>\n<li>配置凭证访问其他OpenStack服务</li>\n</ul>\n<p> 为了与其他OpenStack服务进行通信，裸金属服务在请求其他服务时需要使用服务用户与OpenStack Identity服务进行认证。这些用户的凭据必须在与相应服务相关的每个配置文件中进行配置。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[neutron] - 访问OpenStack网络服务</span><br><span class=\"line\">[glance] - 访问OpenStack镜像服务</span><br><span class=\"line\">[swift] - 访问OpenStack对象存储服务</span><br><span class=\"line\">[cinder] - 访问OpenStack块存储服务</span><br><span class=\"line\">[inspector] - 访问OpenStack裸金属introspection服务</span><br><span class=\"line\">[service_catalog] - 一个特殊项用于保存裸金属服务使用的凭证，该凭证用于发现注册在OpenStack身份认证服务目录中的自己的API URL端点</span><br></pre></td></tr></table></figure>\n\n<p> 简单起见，可以对所有服务使用同一个服务用户。为了向后兼容，该用户应该和ironic-api服务的[keystone_authtoken]所配置的为同一个用户。但这不是必须的，也可以为每个服务创建并配置不同的服务用户。</p>\n<p> 在下面的示例中，用户访问OpenStack网络服务的身份验证信息配置为：</p>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">网络服务部署在名为RegionOne的身份认证服务域中，仅在服务目录中注册公共端点接口</span><br><span class=\"line\"></span><br><span class=\"line\">请求时使用特定的CA SSL证书进行HTTPS连接</span><br><span class=\"line\"></span><br><span class=\"line\">与ironic-api服务配置相同的服务用户</span><br><span class=\"line\"></span><br><span class=\"line\">动态密码认证插件基于其他选项发现合适的身份认证服务API版本</span><br></pre></td></tr></table></figure>\n\n<p> 替换IRONIC_PASS为ironic用户密码。</p>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[neutron]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Authentication type to load (string value)</span></span><br><span class=\"line\"><span class=\"attr\">auth_type</span> = password</span><br><span class=\"line\"><span class=\"comment\"># Authentication URL (string value)</span></span><br><span class=\"line\"><span class=\"attr\">auth_url</span>=https://IDENTITY_IP:<span class=\"number\">5000</span>/</span><br><span class=\"line\"><span class=\"comment\"># Username (string value)</span></span><br><span class=\"line\"><span class=\"attr\">username</span>=ironic</span><br><span class=\"line\"><span class=\"comment\"># User&#x27;s password (string value)</span></span><br><span class=\"line\"><span class=\"attr\">password</span>=IRONIC_PASS</span><br><span class=\"line\"><span class=\"comment\"># Project name to scope to (string value)</span></span><br><span class=\"line\"><span class=\"attr\">project_name</span>=service</span><br><span class=\"line\"><span class=\"comment\"># Domain ID containing project (string value)</span></span><br><span class=\"line\"><span class=\"attr\">project_domain_id</span>=default</span><br><span class=\"line\"><span class=\"comment\"># User&#x27;s domain id (string value)</span></span><br><span class=\"line\"><span class=\"attr\">user_domain_id</span>=default</span><br><span class=\"line\"><span class=\"comment\"># PEM encoded Certificate Authority to use when verifying</span></span><br><span class=\"line\"><span class=\"comment\"># HTTPs connections. (string value)</span></span><br><span class=\"line\"><span class=\"attr\">cafile</span>=/opt/stack/data/ca-bundle.pem</span><br><span class=\"line\"><span class=\"comment\"># The default region_name for endpoint URL discovery. (string</span></span><br><span class=\"line\"><span class=\"comment\"># value)</span></span><br><span class=\"line\"><span class=\"attr\">region_name</span> = RegionOne</span><br><span class=\"line\"><span class=\"comment\"># List of interfaces, in order of preference, for endpoint</span></span><br><span class=\"line\"><span class=\"comment\"># URL. (list value)</span></span><br><span class=\"line\"><span class=\"attr\">valid_interfaces</span>=public</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 其他参考配置</span></span><br><span class=\"line\"><span class=\"section\">[glance]</span></span><br><span class=\"line\"><span class=\"attr\">endpoint_override</span> = http://controller:<span class=\"number\">9292</span></span><br><span class=\"line\"><span class=\"attr\">www_authenticate_uri</span> = http://controller:<span class=\"number\">5000</span></span><br><span class=\"line\"><span class=\"attr\">auth_url</span> = http://controller:<span class=\"number\">5000</span></span><br><span class=\"line\"><span class=\"attr\">auth_type</span> = password</span><br><span class=\"line\"><span class=\"attr\">username</span> = ironic</span><br><span class=\"line\"><span class=\"attr\">password</span> = IRONIC_PASS</span><br><span class=\"line\"><span class=\"attr\">project_domain_name</span> = default</span><br><span class=\"line\"><span class=\"attr\">user_domain_name</span> = default</span><br><span class=\"line\"><span class=\"attr\">region_name</span> = RegionOne</span><br><span class=\"line\"><span class=\"attr\">project_name</span> = service</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[service_catalog]</span>  </span><br><span class=\"line\"><span class=\"attr\">region_name</span> = RegionOne</span><br><span class=\"line\"><span class=\"attr\">project_domain_id</span> = default</span><br><span class=\"line\"><span class=\"attr\">user_domain_id</span> = default</span><br><span class=\"line\"><span class=\"attr\">project_name</span> = service</span><br><span class=\"line\"><span class=\"attr\">password</span> = IRONIC_PASS</span><br><span class=\"line\"><span class=\"attr\">username</span> = ironic</span><br><span class=\"line\"><span class=\"attr\">auth_url</span> = http://controller:<span class=\"number\">5000</span></span><br><span class=\"line\"><span class=\"attr\">auth_type</span> = password</span><br></pre></td></tr></table></figure>\n\n<p> 默认情况下，为了与其他服务进行通信，裸金属服务会尝试通过身份认证服务的服务目录发现该服务合适的端点。如果希望对一个特定服务使用一个不同的端点，则在裸金属服务的配置文件中通过endpoint_override选项进行指定：</p>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[neutron]</span></span><br><span class=\"line\"><span class=\"attr\">endpoint_override</span> = &lt;NEUTRON_API_ADDRESS&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>配置允许的驱动程序和硬件类型</li>\n</ul>\n<p> 通过设置enabled_hardware_types设置ironic-conductor服务允许使用的硬件类型：</p>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[DEFAULT]</span></span><br><span class=\"line\"><span class=\"attr\">enabled_hardware_types</span> = ipmi</span><br></pre></td></tr></table></figure>\n\n<p> 配置硬件接口：</p>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">enabled_boot_interfaces</span> = pxe</span><br><span class=\"line\"><span class=\"attr\">enabled_deploy_interfaces</span> = direct,iscsi</span><br><span class=\"line\"><span class=\"attr\">enabled_inspect_interfaces</span> = inspector</span><br><span class=\"line\"><span class=\"attr\">enabled_management_interfaces</span> = ipmitool</span><br><span class=\"line\"><span class=\"attr\">enabled_power_interfaces</span> = ipmitool</span><br></pre></td></tr></table></figure>\n\n<p> 配置接口默认值：</p>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[DEFAULT]</span></span><br><span class=\"line\"><span class=\"attr\">default_deploy_interface</span> = direct</span><br><span class=\"line\"><span class=\"attr\">default_network_interface</span> = neutron</span><br></pre></td></tr></table></figure>\n\n<p> 如果启用了任何使用Direct deploy的驱动，必须安装和配置镜像服务的Swift后端。Ceph对象网关(RADOS网关)也支持作为镜像服务的后端。</p>\n<ul>\n<li>重启ironic-conductor服务</li>\n</ul>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl restart openstack-ironic-conductor</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置ironic-inspector服务</p>\n<ul>\n<li>安装组件</li>\n</ul>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dnf install openstack-ironic-inspector</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>创建数据库</li>\n</ul>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># mysql <span class=\"operator\">-</span>u root <span class=\"operator\">-</span>p</span><br><span class=\"line\"></span><br><span class=\"line\">MariaDB [(<span class=\"keyword\">none</span>)]<span class=\"operator\">&gt;</span> <span class=\"keyword\">CREATE</span> DATABASE ironic_inspector <span class=\"type\">CHARACTER</span> <span class=\"keyword\">SET</span> utf8;</span><br><span class=\"line\"></span><br><span class=\"line\">MariaDB [(<span class=\"keyword\">none</span>)]<span class=\"operator\">&gt;</span> <span class=\"keyword\">GRANT</span> <span class=\"keyword\">ALL</span> PRIVILEGES <span class=\"keyword\">ON</span> ironic_inspector.<span class=\"operator\">*</span> <span class=\"keyword\">TO</span> <span class=\"string\">&#x27;ironic_inspector&#x27;</span>@<span class=\"string\">&#x27;localhost&#x27;</span> \\</span><br><span class=\"line\">IDENTIFIED <span class=\"keyword\">BY</span> <span class=\"string\">&#x27;IRONIC_INSPECTOR_DBPASS&#x27;</span>;</span><br><span class=\"line\">MariaDB [(<span class=\"keyword\">none</span>)]<span class=\"operator\">&gt;</span> <span class=\"keyword\">GRANT</span> <span class=\"keyword\">ALL</span> PRIVILEGES <span class=\"keyword\">ON</span> ironic_inspector.<span class=\"operator\">*</span> <span class=\"keyword\">TO</span> <span class=\"string\">&#x27;ironic_inspector&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span> \\</span><br><span class=\"line\">IDENTIFIED <span class=\"keyword\">BY</span> <span class=\"string\">&#x27;IRONIC_INSPECTOR_DBPASS&#x27;</span>;</span><br><span class=\"line\">MariaDB [(<span class=\"keyword\">none</span>)]<span class=\"operator\">&gt;</span> exit</span><br><span class=\"line\">Bye</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>配置<code>/etc/ironic-inspector/inspector.conf</code></li>\n</ul>\n<p> 通过<strong>connection</strong>选项配置数据库的位置，如下所示，替换<strong>IRONIC_INSPECTOR_DBPASS</strong>为<strong>ironic_inspector</strong>用户的密码</p>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[database]</span></span><br><span class=\"line\"><span class=\"attr\">backend</span> = sqlalchemy</span><br><span class=\"line\"><span class=\"attr\">connection</span> = mysql+pymysql://ironic_inspector:IRONIC_INSPECTOR_DBPASS@controller/ironic_inspector</span><br><span class=\"line\"><span class=\"attr\">min_pool_size</span> = <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"attr\">max_pool_size</span> = <span class=\"number\">500</span></span><br><span class=\"line\"><span class=\"attr\">pool_timeout</span> = <span class=\"number\">30</span></span><br><span class=\"line\"><span class=\"attr\">max_retries</span> = <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"attr\">max_overflow</span> = <span class=\"number\">200</span></span><br><span class=\"line\"><span class=\"attr\">db_retry_interval</span> = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"attr\">db_inc_retry_interval</span> = <span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"attr\">db_max_retry_interval</span> = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"attr\">db_max_retries</span> = <span class=\"number\">5</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>配置消息队列通信地址</li>\n</ul>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[DEFAULT]</span> </span><br><span class=\"line\"><span class=\"attr\">transport_url</span> = rabbit://openstack:RABBIT_PASS@controller:<span class=\"number\">5672</span>/</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>设置keystone认证</li>\n</ul>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[DEFAULT]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">auth_strategy</span> = keystone</span><br><span class=\"line\"><span class=\"attr\">timeout</span> = <span class=\"number\">900</span></span><br><span class=\"line\"><span class=\"attr\">rootwrap_config</span> = /etc/ironic-inspector/rootwrap.conf</span><br><span class=\"line\"><span class=\"attr\">logging_context_format_string</span> = %(asctime)s.%(msecs)<span class=\"number\">03</span>d %(process)d %(levelname)s %(name)s [%(global_request_id)s %(request_id)s %     (user_identity)s] %(instance)s%(message)s</span><br><span class=\"line\"><span class=\"attr\">log_dir</span> = /var/log/ironic-inspector</span><br><span class=\"line\"><span class=\"attr\">state_path</span> = /var/lib/ironic-inspector</span><br><span class=\"line\"><span class=\"attr\">use_stderr</span> = <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[ironic]</span></span><br><span class=\"line\"><span class=\"attr\">api_endpoint</span> = http://IRONIC_API_HOST_ADDRRESS:<span class=\"number\">6385</span></span><br><span class=\"line\"><span class=\"attr\">auth_type</span> = password</span><br><span class=\"line\"><span class=\"attr\">auth_url</span> = http://PUBLIC_IDENTITY_IP:<span class=\"number\">5000</span></span><br><span class=\"line\"><span class=\"attr\">auth_strategy</span> = keystone</span><br><span class=\"line\"><span class=\"attr\">ironic_url</span> = http://IRONIC_API_HOST_ADDRRESS:<span class=\"number\">6385</span></span><br><span class=\"line\"><span class=\"attr\">os_region</span> = RegionOne</span><br><span class=\"line\"><span class=\"attr\">project_name</span> = service</span><br><span class=\"line\"><span class=\"attr\">project_domain_name</span> = Default</span><br><span class=\"line\"><span class=\"attr\">user_domain_name</span> = Default</span><br><span class=\"line\"><span class=\"attr\">username</span> = IRONIC_SERVICE_USER_NAME</span><br><span class=\"line\"><span class=\"attr\">password</span> = IRONIC_SERVICE_USER_PASSWORD</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[keystone_authtoken]</span></span><br><span class=\"line\"><span class=\"attr\">auth_type</span> = password</span><br><span class=\"line\"><span class=\"attr\">auth_url</span> = http://controller:<span class=\"number\">5000</span></span><br><span class=\"line\"><span class=\"attr\">www_authenticate_uri</span> = http://controller:<span class=\"number\">5000</span></span><br><span class=\"line\"><span class=\"attr\">project_domain_name</span> = default</span><br><span class=\"line\"><span class=\"attr\">user_domain_name</span> = default</span><br><span class=\"line\"><span class=\"attr\">project_name</span> = service</span><br><span class=\"line\"><span class=\"attr\">username</span> = ironic_inspector</span><br><span class=\"line\"><span class=\"attr\">password</span> = IRONICPASSWD</span><br><span class=\"line\"><span class=\"attr\">region_name</span> = RegionOne</span><br><span class=\"line\"><span class=\"attr\">memcache_servers</span> = controller:<span class=\"number\">11211</span></span><br><span class=\"line\"><span class=\"attr\">token_cache_time</span> = <span class=\"number\">300</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[processing]</span></span><br><span class=\"line\"><span class=\"attr\">add_ports</span> = active</span><br><span class=\"line\"><span class=\"attr\">processing_hooks</span> = <span class=\"variable\">$default_processing_hooks</span>,local_link_connection,lldp_basic</span><br><span class=\"line\"><span class=\"attr\">ramdisk_logs_dir</span> = /var/log/ironic-inspector/ramdisk</span><br><span class=\"line\"><span class=\"attr\">always_store_ramdisk_logs</span> = <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">store_data</span> =none</span><br><span class=\"line\"><span class=\"attr\">power_off</span> = <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[pxe_filter]</span></span><br><span class=\"line\"><span class=\"attr\">driver</span> = iptables</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[capabilities]</span></span><br><span class=\"line\"><span class=\"attr\">boot_mode</span>=<span class=\"literal\">True</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>配置ironic inspector dnsmasq服务</li>\n</ul>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 配置文件地址：/etc/ironic-inspector/dnsmasq.conf</span></span><br><span class=\"line\"><span class=\"attr\">port</span>=<span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"attr\">interface</span>=enp3s0                         <span class=\"comment\">#替换为实际监听网络接口</span></span><br><span class=\"line\"><span class=\"attr\">dhcp-range</span>=<span class=\"number\">192.168</span>.<span class=\"number\">0.40</span>,<span class=\"number\">192.168</span>.<span class=\"number\">0.50</span>   <span class=\"comment\">#替换为实际dhcp地址范围</span></span><br><span class=\"line\">bind-interfaces</span><br><span class=\"line\">enable-tftp</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">dhcp-match</span>=set:efi,option:client-arch,<span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"attr\">dhcp-match</span>=set:efi,option:client-arch,<span class=\"number\">9</span></span><br><span class=\"line\"><span class=\"attr\">dhcp-match</span>=aarch64, option:client-arch,<span class=\"number\">11</span></span><br><span class=\"line\"><span class=\"attr\">dhcp-boot</span>=tag:aarch64,grubaa64.efi</span><br><span class=\"line\"><span class=\"attr\">dhcp-boot</span>=tag:!aarch64,tag:efi,grubx64.efi</span><br><span class=\"line\"><span class=\"attr\">dhcp-boot</span>=tag:!aarch64,tag:!efi,pxelinux.<span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">tftp-root</span>=/tftpboot                       <span class=\"comment\">#替换为实际tftpboot目录</span></span><br><span class=\"line\"><span class=\"attr\">log-facility</span>=/var/log/dnsmasq.log</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>关闭ironic provision网络子网的dhcp</li>\n</ul>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openstack subnet set --no-dhcp 72426e89-f552-4dc4-9ac7-c4e131ce7f3c</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>初始化ironic-inspector服务的数据库</li>\n</ul>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ironic-inspector-dbsync --config-file /etc/ironic-inspector/inspector.conf upgrade</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>启动服务</li>\n</ul>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl enable --now openstack-ironic-inspector.service</span><br><span class=\"line\">systemctl enable --now openstack-ironic-inspector-dnsmasq.service</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置httpd服务</p>\n<ul>\n<li>创建ironic要使用的httpd的root目录并设置属主属组，目录路径要和&#x2F;etc&#x2F;ironic&#x2F;ironic.conf中[deploy]组中http_root 配置项指定的路径要一致。</li>\n</ul>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p /var/lib/ironic/httproot</span><br><span class=\"line\">chown ironic.ironic /var/lib/ironic/httproot</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>安装和配置httpd服务</p>\n<ul>\n<li>安装httpd服务，已有请忽略</li>\n</ul>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dnf install httpd -y</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>创建&#x2F;etc&#x2F;httpd&#x2F;conf.d&#x2F;openstack-ironic-httpd.conf文件，内容如下：</li>\n</ul>\n  <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Listen 8080</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;VirtualHost *:8080&gt;</span><br><span class=\"line\">    ServerName ironic.openeuler.com</span><br><span class=\"line\"></span><br><span class=\"line\">    ErrorLog &quot;/var/log/httpd/openstack-ironic-httpd-error_log&quot;</span><br><span class=\"line\">    CustomLog &quot;/var/log/httpd/openstack-ironic-httpd-access_log&quot; &quot;%h %l %u %t \\&quot;%r\\&quot; %&gt;s %b&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">    DocumentRoot &quot;/var/lib/ironic/httproot&quot;</span><br><span class=\"line\">    &lt;Directory &quot;/var/lib/ironic/httproot&quot;&gt;</span><br><span class=\"line\">        Options Indexes FollowSymLinks</span><br><span class=\"line\">        Require all granted</span><br><span class=\"line\">    &lt;/Directory&gt;</span><br><span class=\"line\">    LogLevel warn</span><br><span class=\"line\">    AddDefaultCharset UTF-8</span><br><span class=\"line\">    EnableSendfile on</span><br><span class=\"line\">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure>\n\n<p>  注意监听的端口要和&#x2F;etc&#x2F;ironic&#x2F;ironic.conf里[deploy]选项中http_url配置项中指定的端口一致。</p>\n<ul>\n<li>重启httpd服务。</li>\n</ul>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart httpd</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>deploy ramdisk镜像下载或制作</p>\n<p> 部署一个裸机节点总共需要两组镜像：deploy ramdisk images和user images。Deploy ramdisk images上运行有ironic-python-agent(IPA)服务，Ironic通过它进行裸机节点的环境准备。User images是最终被安装裸机节点上，供用户使用的镜像。</p>\n<p> ramdisk镜像支持通过ironic-python-agent-builder或disk-image-builder工具制作。用户也可以自行选择其他工具制作。若使用原生工具，则需要安装对应的软件包。</p>\n<p> 具体的使用方法可以参考<a href=\"https://docs.openstack.org/ironic/2023.1/install/deploy-ramdisk.html\">官方文档</a>，同时官方也有提供制作好的deploy镜像，可尝试下载。</p>\n<p> 下文介绍通过ironic-python-agent-builder构建ironic使用的deploy镜像的完整过程。</p>\n<ul>\n<li>安装 ironic-python-agent-builder</li>\n</ul>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dnf install python3-ironic-python-agent-builder</span><br><span class=\"line\"></span><br><span class=\"line\">或</span><br><span class=\"line\">pip3 install ironic-python-agent-builder</span><br><span class=\"line\">dnf install qemu-img git</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>制作镜像</li>\n</ul>\n<p> 基本用法：</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">usage: ironic-python-agent-builder [-h] [-r RELEASE] [-o OUTPUT] [-e ELEMENT] [-b BRANCH]</span><br><span class=\"line\">                            [-v] [--lzma] [--extra-args EXTRA_ARGS]</span><br><span class=\"line\">                            [--elements-path ELEMENTS_PATH]</span><br><span class=\"line\">                            distribution</span><br><span class=\"line\"></span><br><span class=\"line\">positional arguments:</span><br><span class=\"line\">    distribution          Distribution to use</span><br><span class=\"line\"></span><br><span class=\"line\">options:</span><br><span class=\"line\">    -h, --help            show this help message and exit</span><br><span class=\"line\">    -r RELEASE, --release RELEASE</span><br><span class=\"line\">                        Distribution release to use</span><br><span class=\"line\">    -o OUTPUT, --output OUTPUT</span><br><span class=\"line\">                        Output base file name</span><br><span class=\"line\">    -e ELEMENT, --element ELEMENT</span><br><span class=\"line\">                        Additional DIB element to use</span><br><span class=\"line\">    -b BRANCH, --branch BRANCH</span><br><span class=\"line\">                        If set, override the branch that is used for         ironic-python-agent</span><br><span class=\"line\">                        and requirements</span><br><span class=\"line\">    -v, --verbose         Enable verbose logging in diskimage-builder</span><br><span class=\"line\">    --lzma                Use lzma compression for smaller images</span><br><span class=\"line\">    --extra-args EXTRA_ARGS</span><br><span class=\"line\">                        Extra arguments to pass to diskimage-builder</span><br><span class=\"line\">    --elements-path ELEMENTS_PATH</span><br><span class=\"line\">                        Path(s) to custom DIB elements separated by a colon</span><br></pre></td></tr></table></figure>\n\n<p> 操作实例：</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">-o选项指定生成的镜像名</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">ubuntu指定生成ubuntu系统的镜像</span></span><br><span class=\"line\">ironic-python-agent-builder -o my-ubuntu-ipa ubuntu</span><br></pre></td></tr></table></figure>\n\n<p> 可通过设置<code>ARCH</code>环境变量（默认为amd64）指定所构建镜像的架构。如果是<code>arm</code>架构，需要添加：</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export ARCH=aarch64</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>允许ssh登录</li>\n</ul>\n<p> 初始化环境变量,设置用户名、密码，启用<code>sodo</code>权限；并添加<code>-e</code>选项使用相应的DIB元素。制作镜像操作如下：</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export DIB_DEV_USER_USERNAME=ipa \\</span><br><span class=\"line\">export DIB_DEV_USER_PWDLESS_SUDO=yes \\</span><br><span class=\"line\">export DIB_DEV_USER_PASSWORD=&#x27;123&#x27;</span><br><span class=\"line\">ironic-python-agent-builder -o my-ssh-ubuntu-ipa -e selinux-permissive -e devuser ubuntu</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>指定代码仓库</li>\n</ul>\n<p> 初始化对应的环境变量，然后制作镜像：</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">直接从gerrit上<span class=\"built_in\">clone</span>代码</span></span><br><span class=\"line\">DIB_REPOLOCATION_ironic_python_agent=https://opendev.org/openstack/ironic-python-agent</span><br><span class=\"line\">DIB_REPOREF_ironic_python_agent=stable/2023.1</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">指定本地仓库及分支</span></span><br><span class=\"line\">DIB_REPOLOCATION_ironic_python_agent=/home/user/path/to/repo</span><br><span class=\"line\">DIB_REPOREF_ironic_python_agent=my-test-branch</span><br><span class=\"line\"></span><br><span class=\"line\">ironic-python-agent-builder ubuntu</span><br></pre></td></tr></table></figure>\n\n<p> 参考：<a href=\"https://docs.openstack.org/diskimage-builder/latest/elements/source-repositories/README.html\">source-repositories</a>。</p>\n</li>\n<li><p>注意</p>\n<p> 原生的openstack里的pxe配置文件的模版不支持arm64架构，需要自己对原生openstack代码进行修改：<br> 在W版中，社区的ironic仍然不支持arm64位的uefi pxe启动，表现为生成的grub.cfg文件(一般位于&#x2F;tftpboot&#x2F;下)格式不对而导致pxe启动失败。</p>\n<p> 生成的错误配置文件：</p>\n<p> <img src=\"/../../img/install/ironic-err.png\" alt=\"ironic-err\"></p>\n<p> 如上图所示，arm架构里寻找vmlinux和ramdisk镜像的命令分别是linux和initrd，上图所示的标红命令是x86架构下的uefi pxe启动。</p>\n<p> 需要用户对生成grub.cfg的代码逻辑自行修改。</p>\n<p> ironic向ipa发送查询命令执行状态请求的tls报错：</p>\n<p> 当前版本的ipa和ironic默认都会开启tls认证的方式向对方发送请求，跟据官网的说明进行关闭即可。</p>\n<ul>\n<li>修改ironic配置文件(&#x2F;etc&#x2F;ironic&#x2F;ironic.conf)下面的配置中添加ipa-insecure&#x3D;1：</li>\n</ul>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[agent]</span></span><br><span class=\"line\"><span class=\"attr\">verify_ca</span> = <span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"section\">[pxe]</span></span><br><span class=\"line\"><span class=\"attr\">pxe_append_params</span> = nofb nomodeset vga=normal coreos.autologin ipa-insecure=<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>ramdisk镜像中添加ipa配置文件&#x2F;etc&#x2F;ironic_python_agent&#x2F;ironic_python_agent.conf并配置tls的配置如下：</li>\n</ul>\n<p> &#x2F;etc&#x2F;ironic_python_agent&#x2F;ironic_python_agent.conf (需要提前创建&#x2F;etc&#x2F;    ironic_python_agent目录）</p>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[DEFAULT]</span></span><br><span class=\"line\"><span class=\"attr\">enable_auto_tls</span> = <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n\n<p> 设置权限：</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chown -R ipa.ipa /etc/ironic_python_agent/</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>ramdisk镜像中修改ipa服务的服务启动文件，添加配置文件选项</li>\n</ul>\n<p> 编辑&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;ironic-python-agent.service文件</p>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[Unit]</span></span><br><span class=\"line\"><span class=\"attr\">Description</span>=Ironic Python Agent</span><br><span class=\"line\"><span class=\"attr\">After</span>=network-<span class=\"literal\">on</span>line.target</span><br><span class=\"line\"><span class=\"section\">[Service]</span></span><br><span class=\"line\"><span class=\"attr\">ExecStartPre</span>=/sbin/modprobe vfat</span><br><span class=\"line\"><span class=\"attr\">ExecStart</span>=/usr/local/bin/ironic-python-agent --config-file /etc/    ironic_python_agent/ironic_python_agent.conf</span><br><span class=\"line\"><span class=\"attr\">Restart</span>=always</span><br><span class=\"line\"><span class=\"attr\">RestartSec</span>=<span class=\"number\">30</span>s</span><br><span class=\"line\"><span class=\"section\">[Install]</span></span><br><span class=\"line\"><span class=\"attr\">WantedBy</span>=multi-user.target</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"Trove\"><a href=\"#Trove\" class=\"headerlink\" title=\"Trove\"></a>Trove</h4><p>Trove是OpenStack的数据库服务，如果用户使用OpenStack提供的数据库服务则推荐使用该组件。否则，可以不用安装。</p>\n<p><strong>Controller节点</strong></p>\n<ol>\n<li><p>创建数据库。</p>\n<p> 数据库服务在数据库中存储信息，创建一个trove用户可以访问的trove数据库，替换TROVE_DBPASS为合适的密码。</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> DATABASE trove <span class=\"type\">CHARACTER</span> <span class=\"keyword\">SET</span> utf8;</span><br><span class=\"line\"><span class=\"keyword\">GRANT</span> <span class=\"keyword\">ALL</span> PRIVILEGES <span class=\"keyword\">ON</span> trove.<span class=\"operator\">*</span> <span class=\"keyword\">TO</span> <span class=\"string\">&#x27;trove&#x27;</span>@<span class=\"string\">&#x27;localhost&#x27;</span> IDENTIFIED <span class=\"keyword\">BY</span> <span class=\"string\">&#x27;TROVE_DBPASS&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">GRANT</span> <span class=\"keyword\">ALL</span> PRIVILEGES <span class=\"keyword\">ON</span> trove.<span class=\"operator\">*</span> <span class=\"keyword\">TO</span> <span class=\"string\">&#x27;trove&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span> IDENTIFIED <span class=\"keyword\">BY</span> <span class=\"string\">&#x27;TROVE_DBPASS&#x27;</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建服务凭证以及API端点。</p>\n<p> 创建服务凭证。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建trove用户</span></span><br><span class=\"line\">openstack user create --domain default --password-prompt trove</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">添加admin角色</span></span><br><span class=\"line\">openstack role add --project service --user trove admin</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建database服务</span></span><br><span class=\"line\">openstack service create --name trove --description &quot;Database service&quot; database</span><br></pre></td></tr></table></figure>\n\n<p> 创建API端点。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openstack endpoint create --region RegionOne database public http://controller:8779/v1.0/%\\(tenant_id\\)s</span><br><span class=\"line\">openstack endpoint create --region RegionOne database internal http://controller:8779/v1.0/%\\(tenant_id\\)s</span><br><span class=\"line\">openstack endpoint create --region RegionOne database admin http://controller:8779/v1.0/%\\(tenant_id\\)s</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装Trove。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dnf install openstack-trove python-troveclient</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改配置文件。</p>\n<p> 编辑&#x2F;etc&#x2F;trove&#x2F;trove.conf。</p>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[DEFAULT]</span></span><br><span class=\"line\"><span class=\"attr\">bind_host</span>=<span class=\"number\">192.168</span>.<span class=\"number\">0.2</span></span><br><span class=\"line\"><span class=\"attr\">log_dir</span> = /var/log/trove</span><br><span class=\"line\"><span class=\"attr\">network_driver</span> = trove.network.neutron.NeutronDriver</span><br><span class=\"line\"><span class=\"attr\">network_label_regex</span>=.*</span><br><span class=\"line\"><span class=\"attr\">management_security_groups</span> = &lt;manage security group&gt;</span><br><span class=\"line\"><span class=\"attr\">nova_keypair</span> = trove-mgmt</span><br><span class=\"line\"><span class=\"attr\">default_datastore</span> = mysql</span><br><span class=\"line\"><span class=\"attr\">taskmanager_manager</span> = trove.taskmanager.manager.Manager</span><br><span class=\"line\"><span class=\"attr\">trove_api_workers</span> = <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"attr\">transport_url</span> = rabbit://openstack:RABBIT_PASS@controller:<span class=\"number\">5672</span>/</span><br><span class=\"line\"><span class=\"attr\">reboot_time_out</span> = <span class=\"number\">300</span></span><br><span class=\"line\"><span class=\"attr\">usage_timeout</span> = <span class=\"number\">900</span></span><br><span class=\"line\"><span class=\"attr\">agent_call_high_timeout</span> = <span class=\"number\">1200</span></span><br><span class=\"line\"><span class=\"attr\">use_syslog</span> = <span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"attr\">debug</span> = <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[database]</span></span><br><span class=\"line\"><span class=\"attr\">connection</span> = mysql+pymysql://trove:TROVE_DBPASS@controller/trove</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[keystone_authtoken]</span></span><br><span class=\"line\"><span class=\"attr\">auth_url</span> = http://controller:<span class=\"number\">5000</span>/v3/</span><br><span class=\"line\"><span class=\"attr\">auth_type</span> = password</span><br><span class=\"line\"><span class=\"attr\">project_domain_name</span> = Default</span><br><span class=\"line\"><span class=\"attr\">project_name</span> = service</span><br><span class=\"line\"><span class=\"attr\">user_domain_name</span> = Default</span><br><span class=\"line\"><span class=\"attr\">password</span> = trove</span><br><span class=\"line\"><span class=\"attr\">username</span> = TROVE_PASS</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[service_credentials]</span></span><br><span class=\"line\"><span class=\"attr\">auth_url</span> = http://controller:<span class=\"number\">5000</span>/v3/</span><br><span class=\"line\"><span class=\"attr\">region_name</span> = RegionOne</span><br><span class=\"line\"><span class=\"attr\">project_name</span> = service</span><br><span class=\"line\"><span class=\"attr\">project_domain_name</span> = Default</span><br><span class=\"line\"><span class=\"attr\">user_domain_name</span> = Default</span><br><span class=\"line\"><span class=\"attr\">username</span> = trove</span><br><span class=\"line\"><span class=\"attr\">password</span> = TROVE_PASS</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[mariadb]</span></span><br><span class=\"line\"><span class=\"attr\">tcp_ports</span> = <span class=\"number\">3306</span>,<span class=\"number\">4444</span>,<span class=\"number\">4567</span>,<span class=\"number\">4568</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[mysql]</span></span><br><span class=\"line\"><span class=\"attr\">tcp_ports</span> = <span class=\"number\">3306</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[postgresql]</span></span><br><span class=\"line\"><span class=\"attr\">tcp_ports</span> = <span class=\"number\">5432</span></span><br></pre></td></tr></table></figure>\n\n<p> <strong>解释：</strong></p>\n<blockquote>\n<p><code>[Default]</code>分组中<code>bind_host</code>配置为Trove控制节点的IP。<br><code>transport_url</code> 为<code>RabbitMQ</code>连接信息，<code>RABBIT_PASS</code>替换为RabbitMQ的密码。<br><code>[database]</code>分组中的<code>connection</code> 为前面在mysql中为Trove创建的数据库信息。<br>Trove的用户信息中<code>TROVE_PASSWORD</code>替换为实际trove用户的密码。</p>\n</blockquote>\n<p> 编辑&#x2F;etc&#x2F;trove&#x2F;trove-guestagent.conf。</p>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[DEFAULT]</span></span><br><span class=\"line\"><span class=\"attr\">log_file</span> = trove-guestagent.log</span><br><span class=\"line\"><span class=\"attr\">log_dir</span> = /var/log/trove/</span><br><span class=\"line\"><span class=\"attr\">ignore_users</span> = os_admin</span><br><span class=\"line\"><span class=\"attr\">control_exchange</span> = trove</span><br><span class=\"line\"><span class=\"attr\">transport_url</span> = rabbit://openstack:RABBIT_PASS@controller:<span class=\"number\">5672</span>/</span><br><span class=\"line\"><span class=\"attr\">rpc_backend</span> = rabbit</span><br><span class=\"line\"><span class=\"attr\">command_process_timeout</span> = <span class=\"number\">60</span></span><br><span class=\"line\"><span class=\"attr\">use_syslog</span> = <span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"attr\">debug</span> = <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[service_credentials]</span></span><br><span class=\"line\"><span class=\"attr\">auth_url</span> = http://controller:<span class=\"number\">5000</span>/v3/</span><br><span class=\"line\"><span class=\"attr\">region_name</span> = RegionOne</span><br><span class=\"line\"><span class=\"attr\">project_name</span> = service</span><br><span class=\"line\"><span class=\"attr\">password</span> = TROVE_PASS</span><br><span class=\"line\"><span class=\"attr\">project_domain_name</span> = Default</span><br><span class=\"line\"><span class=\"attr\">user_domain_name</span> = Default</span><br><span class=\"line\"><span class=\"attr\">username</span> = trove</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[mysql]</span></span><br><span class=\"line\"><span class=\"attr\">docker_image</span> = your-registry/your-repo/mysql</span><br><span class=\"line\"><span class=\"attr\">backup_docker_image</span> = your-registry/your-repo/db-backup-mysql:<span class=\"number\">1.1</span>.<span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n<p> <strong>解释：</strong> </p>\n<blockquote>\n<p><code>guestagent</code>是trove中一个独立组件，需要预先内置到Trove通过Nova创建的虚拟机镜像中，在创建好数据库实例后，会起guestagent进程，负责通过消息队列（RabbitMQ）向Trove上报心跳，因此需要配置RabbitMQ的用户和密码信息。<br><code>transport_url</code> 为<code>RabbitMQ</code>连接信息，<code>RABBIT_PASS</code>替换为RabbitMQ的密码。<br>Trove的用户信息中<code>TROVE_PASSWORD</code>替换为实际trove用户的密码。<br>从Victoria版开始，Trove使用一个统一的镜像来跑不同类型的数据库，数据库服务运行在Guest虚拟机的Docker容器中。</p>\n</blockquote>\n</li>\n<li><p>数据库同步。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">su -s /bin/sh -c &quot;trove-manage db_sync&quot; trove</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>完成安装。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">配置服务自启</span></span><br><span class=\"line\">systemctl enable openstack-trove-api.service openstack-trove-taskmanager.service \\ </span><br><span class=\"line\">openstack-trove-conductor.service</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">启动服务</span></span><br><span class=\"line\">systemctl start openstack-trove-api.service openstack-trove-taskmanager.service \\ </span><br><span class=\"line\">openstack-trove-conductor.service</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"Swift\"><a href=\"#Swift\" class=\"headerlink\" title=\"Swift\"></a>Swift</h4><p>Swift 提供了弹性可伸缩、高可用的分布式对象存储服务，适合存储大规模非结构化数据。</p>\n<p><strong>Controller节点</strong></p>\n<ol>\n<li><p>创建服务凭证以及API端点。</p>\n<p> 创建服务凭证。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建swift用户</span></span><br><span class=\"line\">openstack user create --domain default --password-prompt swift</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">添加admin角色</span></span><br><span class=\"line\">openstack role add --project service --user swift admin</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建对象存储服务</span></span><br><span class=\"line\">openstack service create --name swift --description &quot;OpenStack Object Storage&quot; object-store</span><br></pre></td></tr></table></figure>\n\n<p> 创建API端点。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openstack endpoint create --region RegionOne object-store public http://controller:8080/v1/AUTH_%\\(project_id\\)s</span><br><span class=\"line\">openstack endpoint create --region RegionOne object-store internal http://controller:8080/v1/AUTH_%\\(project_id\\)s</span><br><span class=\"line\">openstack endpoint create --region RegionOne object-store admin http://controller:8080/v1 </span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装Swift。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dnf install openstack-swift-proxy python3-swiftclient python3-keystoneclient \\ </span><br><span class=\"line\">python3-keystonemiddleware memcached</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置proxy-server。</p>\n<p> Swift RPM包里已经包含了一个基本可用的proxy-server.conf，只需要手动修改其中的ip和SWIFT_PASS即可。</p>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/swift/proxy-server.conf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[filter:authtoken]</span></span><br><span class=\"line\"><span class=\"attr\">paste.filter_factory</span> = keystonemiddleware.auth_token:filter_factory</span><br><span class=\"line\"><span class=\"attr\">www_authenticate_uri</span> = http://controller:<span class=\"number\">5000</span></span><br><span class=\"line\"><span class=\"attr\">auth_url</span> = http://controller:<span class=\"number\">5000</span></span><br><span class=\"line\"><span class=\"attr\">memcached_servers</span> = controller:<span class=\"number\">11211</span></span><br><span class=\"line\"><span class=\"attr\">auth_type</span> = password</span><br><span class=\"line\"><span class=\"attr\">project_domain_id</span> = default</span><br><span class=\"line\"><span class=\"attr\">user_domain_id</span> = default</span><br><span class=\"line\"><span class=\"attr\">project_name</span> = service</span><br><span class=\"line\"><span class=\"attr\">username</span> = swift</span><br><span class=\"line\"><span class=\"attr\">password</span> = SWIFT_PASS</span><br><span class=\"line\"><span class=\"attr\">delay_auth_decision</span> = <span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"attr\">service_token_roles_required</span> = <span class=\"literal\">True</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><strong>Storage节点</strong></p>\n<ol>\n<li><p>安装支持的程序包。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dnf install openstack-swift-account openstack-swift-container openstack-swift-object</span><br><span class=\"line\">dnf install xfsprogs rsync</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>将设备&#x2F;dev&#x2F;sdb和&#x2F;dev&#x2F;sdc格式化为XFS。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkfs.xfs /dev/sdb</span><br><span class=\"line\">mkfs.xfs /dev/sdc</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建挂载点目录结构。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p /srv/node/sdb</span><br><span class=\"line\">mkdir -p /srv/node/sdc</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>找到新分区的UUID。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">blkid</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>编辑&#x2F;etc&#x2F;fstab文件并将以下内容添加到其中。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UUID=&quot;&lt;UUID-from-output-above&gt;&quot; /srv/node/sdb xfs noatime 0 2</span><br><span class=\"line\">UUID=&quot;&lt;UUID-from-output-above&gt;&quot; /srv/node/sdc xfs noatime 0 2</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>挂载设备。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mount /srv/node/sdb</span><br><span class=\"line\">mount /srv/node/sdc</span><br></pre></td></tr></table></figure>\n\n<p> <em><strong>注意</strong></em></p>\n<p> <strong>如果用户不需要容灾功能，以上步骤只需要创建一个设备即可，同时可以跳过下面的rsync配置。</strong></p>\n</li>\n<li><p>（可选）创建或编辑&#x2F;etc&#x2F;rsyncd.conf文件以包含以下内容:</p>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[DEFAULT]</span></span><br><span class=\"line\"><span class=\"attr\">uid</span> = swift</span><br><span class=\"line\"><span class=\"attr\">gid</span> = swift</span><br><span class=\"line\">log <span class=\"attr\">file</span> = /var/log/rsyncd.log</span><br><span class=\"line\">pid <span class=\"attr\">file</span> = /var/run/rsyncd.pid</span><br><span class=\"line\"><span class=\"attr\">address</span> = MANAGEMENT_INTERFACE_IP_ADDRESS</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[account]</span></span><br><span class=\"line\">max <span class=\"attr\">connections</span> = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"attr\">path</span> = /srv/node/</span><br><span class=\"line\">read <span class=\"attr\">only</span> = <span class=\"literal\">False</span></span><br><span class=\"line\">lock <span class=\"attr\">file</span> = /var/lock/account.lock</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[container]</span></span><br><span class=\"line\">max <span class=\"attr\">connections</span> = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"attr\">path</span> = /srv/node/</span><br><span class=\"line\">read <span class=\"attr\">only</span> = <span class=\"literal\">False</span></span><br><span class=\"line\">lock <span class=\"attr\">file</span> = /var/lock/container.lock</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[object]</span></span><br><span class=\"line\">max <span class=\"attr\">connections</span> = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"attr\">path</span> = /srv/node/</span><br><span class=\"line\">read <span class=\"attr\">only</span> = <span class=\"literal\">False</span></span><br><span class=\"line\">lock <span class=\"attr\">file</span> = /var/lock/object.lock</span><br></pre></td></tr></table></figure>\n\n<p> <strong>替换MANAGEMENT_INTERFACE_IP_ADDRESS为存储节点上管理网络的IP地址</strong></p>\n<p> 启动rsyncd服务并配置它在系统启动时启动:</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl enable rsyncd.service</span><br><span class=\"line\">systemctl start rsyncd.service</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置存储节点。</p>\n<p> 编辑&#x2F;etc&#x2F;swift目录的account-server.conf、container-server.conf和object-server.conf文件，替换bind_ip为存储节点上管理网络的IP地址。</p>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[DEFAULT]</span></span><br><span class=\"line\"><span class=\"attr\">bind_ip</span> = <span class=\"number\">192.168</span>.<span class=\"number\">0.4</span></span><br></pre></td></tr></table></figure>\n\n<p> 确保挂载点目录结构的正确所有权。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chown -R swift:swift /srv/node</span><br></pre></td></tr></table></figure>\n\n<p> 创建recon目录并确保其拥有正确的所有权。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p /var/cache/swift</span><br><span class=\"line\">chown -R root:swift /var/cache/swift</span><br><span class=\"line\">chmod -R 775 /var/cache/swift</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><strong>Controller节点创建并分发环</strong></p>\n<ol>\n<li><p>创建账号环。</p>\n<p> 切换到<code>/etc/swift</code>目录。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /etc/swift</span><br></pre></td></tr></table></figure>\n\n<p> 创建基础<code>account.builder</code>文件。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">swift-ring-builder account.builder create 10 1 1</span><br></pre></td></tr></table></figure>\n\n<p> 将每个存储节点添加到环中。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">swift-ring-builder account.builder add --region 1 --zone 1 \\</span><br><span class=\"line\">--ip STORAGE_NODE_MANAGEMENT_INTERFACE_IP_ADDRESS \\ </span><br><span class=\"line\">--port 6202  --device DEVICE_NAME \\ </span><br><span class=\"line\">--weight 100</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>替换STORAGE_NODE_MANAGEMENT_INTERFACE_IP_ADDRESS为存储节点上管理网络的IP地址。<br>替换DEVICE_NAME为同一存储节点上的存储设备名称。</p>\n</blockquote>\n<p> <em><strong>注意</strong></em></p>\n<p> <strong>对每个存储节点上的每个存储设备重复此命令</strong></p>\n<p> 验证账号环内容。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">swift-ring-builder account.builder</span><br></pre></td></tr></table></figure>\n\n<p> 重新平衡账号环。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">swift-ring-builder account.builder rebalance</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建容器环。</p>\n<p> 切换到<code>/etc/swift</code>目录。</p>\n<p> 创建基础<code>container.builder</code>文件。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">swift-ring-builder container.builder create 10 1 1</span><br></pre></td></tr></table></figure>\n\n<p> 将每个存储节点添加到环中。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">swift-ring-builder container.builder add --region 1 --zone 1 \\</span><br><span class=\"line\">--ip STORAGE_NODE_MANAGEMENT_INTERFACE_IP_ADDRESS </span><br><span class=\"line\">--port 6201 --device DEVICE_NAME \\</span><br><span class=\"line\">--weight 100</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>替换STORAGE_NODE_MANAGEMENT_INTERFACE_IP_ADDRESS为存储节点上管理网络的IP地址。<br>替换DEVICE_NAME为同一存储节点上的存储设备名称。</p>\n</blockquote>\n<p> <em><strong>注意</strong></em></p>\n<p> <strong>对每个存储节点上的每个存储设备重复此命令</strong></p>\n<p> 验证容器环内容。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">swift-ring-builder container.builder</span><br></pre></td></tr></table></figure>\n\n<p> 重新平衡容器环。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">swift-ring-builder container.builder rebalance</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建对象环。</p>\n<p> 切换到<code>/etc/swift</code>目录。</p>\n<p> 创建基础<code>object.builder</code>文件。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">swift-ring-builder object.builder create 10 1 1</span><br></pre></td></tr></table></figure>\n\n<p> 将每个存储节点添加到环中。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">swift-ring-builder object.builder add --region 1 --zone 1 \\</span><br><span class=\"line\">--ip STORAGE_NODE_MANAGEMENT_INTERFACE_IP_ADDRESS \\</span><br><span class=\"line\">--port 6200 --device DEVICE_NAME \\</span><br><span class=\"line\">--weight 100</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>替换STORAGE_NODE_MANAGEMENT_INTERFACE_IP_ADDRESS为存储节点上管理网络的IP地址。<br>替换DEVICE_NAME为同一存储节点上的存储设备名称。</p>\n</blockquote>\n<p> <em><strong>注意</strong></em></p>\n<p> <strong>对每个存储节点上的每个存储设备重复此命令</strong></p>\n<p> 验证对象环内容。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">swift-ring-builder object.builder</span><br></pre></td></tr></table></figure>\n\n<p> 重新平衡对象环。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">swift-ring-builder object.builder rebalance</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>分发环配置文件。</p>\n<p> 将<code>account.ring.gz</code>，<code>container.ring.gz</code>以及 <code>object.ring.gz</code>文件复制到每个存储节点和运行代理服务的任何其他节点上的<code>/etc/swift</code>目录。</p>\n</li>\n<li><p>编辑配置文件&#x2F;etc&#x2F;swift&#x2F;swift.conf。</p>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[swift-hash]</span></span><br><span class=\"line\"><span class=\"attr\">swift_hash_path_suffix</span> = test-hash</span><br><span class=\"line\"><span class=\"attr\">swift_hash_path_prefix</span> = test-hash</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[storage-policy:0]</span></span><br><span class=\"line\"><span class=\"attr\">name</span> = Policy-<span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"attr\">default</span> = <span class=\"literal\">yes</span></span><br></pre></td></tr></table></figure>\n\n<p> <strong>用唯一值替换 test-hash</strong></p>\n<p> 将swift.conf文件复制到&#x2F;etc&#x2F;swift每个存储节点和运行代理服务的任何其他节点上的目录。</p>\n<p> 在所有节点上，确保配置目录的正确所有权。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chown -R root:swift /etc/swift</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>完成安装</p>\n<p> 在控制节点和运行代理服务的任何其他节点上，启动对象存储代理服务及其依赖项，并将它们配置为在系统启动时启动。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl enable openstack-swift-proxy.service memcached.service</span><br><span class=\"line\">systemctl start openstack-swift-proxy.service memcached.service</span><br></pre></td></tr></table></figure>\n\n<p> 在存储节点上，启动对象存储服务并将它们配置为在系统启动时启动。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl enable openstack-swift-account.service \\</span><br><span class=\"line\">openstack-swift-account-auditor.service \\</span><br><span class=\"line\">openstack-swift-account-reaper.service \\</span><br><span class=\"line\">openstack-swift-account-replicator.service \\</span><br><span class=\"line\">openstack-swift-container.service \\</span><br><span class=\"line\">openstack-swift-container-auditor.service \\</span><br><span class=\"line\">openstack-swift-container-replicator.service \\</span><br><span class=\"line\">openstack-swift-container-updater.service \\</span><br><span class=\"line\">openstack-swift-object.service \\</span><br><span class=\"line\">openstack-swift-object-auditor.service \\</span><br><span class=\"line\">openstack-swift-object-replicator.service \\</span><br><span class=\"line\">openstack-swift-object-updater.service</span><br><span class=\"line\"></span><br><span class=\"line\">systemctl start openstack-swift-account.service \\</span><br><span class=\"line\">openstack-swift-account-auditor.service \\</span><br><span class=\"line\">openstack-swift-account-reaper.service \\</span><br><span class=\"line\">openstack-swift-account-replicator.service \\</span><br><span class=\"line\">openstack-swift-container.service \\</span><br><span class=\"line\">openstack-swift-container-auditor.service \\</span><br><span class=\"line\">openstack-swift-container-replicator.service \\</span><br><span class=\"line\">openstack-swift-container-updater.service \\</span><br><span class=\"line\">openstack-swift-object.service \\</span><br><span class=\"line\">openstack-swift-object-auditor.service \\</span><br><span class=\"line\">openstack-swift-object-replicator.service \\</span><br><span class=\"line\">openstack-swift-object-updater.service</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"Cyborg\"><a href=\"#Cyborg\" class=\"headerlink\" title=\"Cyborg\"></a>Cyborg</h4><p>Cyborg为OpenStack提供加速器设备的支持，包括 GPU, FPGA, ASIC, NP, SoCs, NVMe&#x2F;NOF SSDs, ODP, DPDK&#x2F;SPDK等等。</p>\n<p><strong>Controller节点</strong></p>\n<ol>\n<li><p>初始化对应数据库</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql <span class=\"operator\">-</span>u root <span class=\"operator\">-</span>p</span><br><span class=\"line\"></span><br><span class=\"line\">MariaDB [(<span class=\"keyword\">none</span>)]<span class=\"operator\">&gt;</span> <span class=\"keyword\">CREATE</span> DATABASE cyborg;</span><br><span class=\"line\">MariaDB [(<span class=\"keyword\">none</span>)]<span class=\"operator\">&gt;</span> <span class=\"keyword\">GRANT</span> <span class=\"keyword\">ALL</span> PRIVILEGES <span class=\"keyword\">ON</span> cyborg.<span class=\"operator\">*</span> <span class=\"keyword\">TO</span> <span class=\"string\">&#x27;cyborg&#x27;</span>@<span class=\"string\">&#x27;localhost&#x27;</span> IDENTIFIED <span class=\"keyword\">BY</span> <span class=\"string\">&#x27;CYBORG_DBPASS&#x27;</span>;</span><br><span class=\"line\">MariaDB [(<span class=\"keyword\">none</span>)]<span class=\"operator\">&gt;</span> <span class=\"keyword\">GRANT</span> <span class=\"keyword\">ALL</span> PRIVILEGES <span class=\"keyword\">ON</span> cyborg.<span class=\"operator\">*</span> <span class=\"keyword\">TO</span> <span class=\"string\">&#x27;cyborg&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span> IDENTIFIED <span class=\"keyword\">BY</span> <span class=\"string\">&#x27;CYBORG_DBPASS&#x27;</span>;</span><br><span class=\"line\">MariaDB [(<span class=\"keyword\">none</span>)]<span class=\"operator\">&gt;</span> exit;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建用户和服务，并记住创建cybory用户时输入的密码，用于配置CYBORG_PASS</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source ~/.admin-openrc</span><br><span class=\"line\">openstack user create --domain default --password-prompt cyborg</span><br><span class=\"line\">openstack role add --project service --user cyborg admin</span><br><span class=\"line\">openstack service create --name cyborg --description &quot;Acceleration Service&quot; accelerator</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用uwsgi部署Cyborg api服务</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openstack endpoint create --region RegionOne accelerator public http://controller/accelerator/v2</span><br><span class=\"line\">openstack endpoint create --region RegionOne accelerator internal http://controller/accelerator/v2</span><br><span class=\"line\">openstack endpoint create --region RegionOne accelerator admin http://controller/accelerator/v2</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装Cyborg</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dnf install openstack-cyborg</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置Cyborg</p>\n<p> 修改<code>/etc/cyborg/cyborg.conf</code></p>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[DEFAULT]</span></span><br><span class=\"line\"><span class=\"attr\">transport_url</span> = rabbit://openstack:RABBIT_PASS@controller:<span class=\"number\">5672</span>/</span><br><span class=\"line\"><span class=\"attr\">use_syslog</span> = <span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"attr\">state_path</span> = /var/lib/cyborg</span><br><span class=\"line\"><span class=\"attr\">debug</span> = <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[api]</span></span><br><span class=\"line\"><span class=\"attr\">host_ip</span> = <span class=\"number\">0.0</span>.<span class=\"number\">0.0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[database]</span></span><br><span class=\"line\"><span class=\"attr\">connection</span> = mysql+pymysql://cyborg:CYBORG_DBPASS@controller/cyborg</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[service_catalog]</span></span><br><span class=\"line\"><span class=\"attr\">cafile</span> = /opt/stack/data/ca-bundle.pem</span><br><span class=\"line\"><span class=\"attr\">project_domain_id</span> = default</span><br><span class=\"line\"><span class=\"attr\">user_domain_id</span> = default</span><br><span class=\"line\"><span class=\"attr\">project_name</span> = service</span><br><span class=\"line\"><span class=\"attr\">password</span> = CYBORG_PASS</span><br><span class=\"line\"><span class=\"attr\">username</span> = cyborg</span><br><span class=\"line\"><span class=\"attr\">auth_url</span> = http://controller:<span class=\"number\">5000</span>/v3/</span><br><span class=\"line\"><span class=\"attr\">auth_type</span> = password</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[placement]</span></span><br><span class=\"line\"><span class=\"attr\">project_domain_name</span> = Default</span><br><span class=\"line\"><span class=\"attr\">project_name</span> = service</span><br><span class=\"line\"><span class=\"attr\">user_domain_name</span> = Default</span><br><span class=\"line\"><span class=\"attr\">password</span> = password</span><br><span class=\"line\"><span class=\"attr\">username</span> = PLACEMENT_PASS</span><br><span class=\"line\"><span class=\"attr\">auth_url</span> = http://controller:<span class=\"number\">5000</span>/v3/</span><br><span class=\"line\"><span class=\"attr\">auth_type</span> = password</span><br><span class=\"line\"><span class=\"attr\">auth_section</span> = keystone_authtoken</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[nova]</span></span><br><span class=\"line\"><span class=\"attr\">project_domain_name</span> = Default</span><br><span class=\"line\"><span class=\"attr\">project_name</span> = service</span><br><span class=\"line\"><span class=\"attr\">user_domain_name</span> = Default</span><br><span class=\"line\"><span class=\"attr\">password</span> = NOVA_PASS</span><br><span class=\"line\"><span class=\"attr\">username</span> = nova</span><br><span class=\"line\"><span class=\"attr\">auth_url</span> = http://controller:<span class=\"number\">5000</span>/v3/</span><br><span class=\"line\"><span class=\"attr\">auth_type</span> = password</span><br><span class=\"line\"><span class=\"attr\">auth_section</span> = keystone_authtoken</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[keystone_authtoken]</span></span><br><span class=\"line\"><span class=\"attr\">memcached_servers</span> = localhost:<span class=\"number\">11211</span></span><br><span class=\"line\"><span class=\"attr\">signing_dir</span> = /var/cache/cyborg/api</span><br><span class=\"line\"><span class=\"attr\">cafile</span> = /opt/stack/data/ca-bundle.pem</span><br><span class=\"line\"><span class=\"attr\">project_domain_name</span> = Default</span><br><span class=\"line\"><span class=\"attr\">project_name</span> = service</span><br><span class=\"line\"><span class=\"attr\">user_domain_name</span> = Default</span><br><span class=\"line\"><span class=\"attr\">password</span> = CYBORG_PASS</span><br><span class=\"line\"><span class=\"attr\">username</span> = cyborg</span><br><span class=\"line\"><span class=\"attr\">auth_url</span> = http://controller:<span class=\"number\">5000</span>/v3/</span><br><span class=\"line\"><span class=\"attr\">auth_type</span> = password</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>同步数据库表格</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cyborg-dbsync --config-file /etc/cyborg/cyborg.conf upgrade</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动Cyborg服务</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl enable openstack-cyborg-api openstack-cyborg-conductor openstack-cyborg-agent</span><br><span class=\"line\">systemctl start openstack-cyborg-api openstack-cyborg-conductor openstack-cyborg-agent</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"Aodh\"><a href=\"#Aodh\" class=\"headerlink\" title=\"Aodh\"></a>Aodh</h4><p>Aodh可以根据由Ceilometer或者Gnocchi收集的监控数据创建告警，并设置触发规则。</p>\n<p><strong>Controller节点</strong></p>\n<ol>\n<li><p>创建数据库。</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> DATABASE aodh;</span><br><span class=\"line\"><span class=\"keyword\">GRANT</span> <span class=\"keyword\">ALL</span> PRIVILEGES <span class=\"keyword\">ON</span> aodh.<span class=\"operator\">*</span> <span class=\"keyword\">TO</span> <span class=\"string\">&#x27;aodh&#x27;</span>@<span class=\"string\">&#x27;localhost&#x27;</span> IDENTIFIED <span class=\"keyword\">BY</span> <span class=\"string\">&#x27;AODH_DBPASS&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">GRANT</span> <span class=\"keyword\">ALL</span> PRIVILEGES <span class=\"keyword\">ON</span> aodh.<span class=\"operator\">*</span> <span class=\"keyword\">TO</span> <span class=\"string\">&#x27;aodh&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span> IDENTIFIED <span class=\"keyword\">BY</span> <span class=\"string\">&#x27;AODH_DBPASS&#x27;</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建服务凭证以及API端点。</p>\n<p> 创建服务凭证。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openstack user create --domain default --password-prompt aodh</span><br><span class=\"line\">openstack role add --project service --user aodh admin</span><br><span class=\"line\">openstack service create --name aodh --description &quot;Telemetry&quot; alarming</span><br></pre></td></tr></table></figure>\n\n<p> 创建API端点。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openstack endpoint create --region RegionOne alarming public http://controller:8042</span><br><span class=\"line\">openstack endpoint create --region RegionOne alarming internal http://controller:8042</span><br><span class=\"line\">openstack endpoint create --region RegionOne alarming admin http://controller:8042</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装Aodh。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dnf install openstack-aodh-api openstack-aodh-evaluator \\</span><br><span class=\"line\">openstack-aodh-notifier openstack-aodh-listener \\</span><br><span class=\"line\">openstack-aodh-expirer python3-aodhclient</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改配置文件。</p>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/aodh/aodh.conf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[database]</span></span><br><span class=\"line\"><span class=\"attr\">connection</span> = mysql+pymysql://aodh:AODH_DBPASS@controller/aodh</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[DEFAULT]</span></span><br><span class=\"line\"><span class=\"attr\">transport_url</span> = rabbit://openstack:RABBIT_PASS@controller</span><br><span class=\"line\"><span class=\"attr\">auth_strategy</span> = keystone</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[keystone_authtoken]</span></span><br><span class=\"line\"><span class=\"attr\">www_authenticate_uri</span> = http://controller:<span class=\"number\">5000</span></span><br><span class=\"line\"><span class=\"attr\">auth_url</span> = http://controller:<span class=\"number\">5000</span></span><br><span class=\"line\"><span class=\"attr\">memcached_servers</span> = controller:<span class=\"number\">11211</span></span><br><span class=\"line\"><span class=\"attr\">auth_type</span> = password</span><br><span class=\"line\"><span class=\"attr\">project_domain_id</span> = default</span><br><span class=\"line\"><span class=\"attr\">user_domain_id</span> = default</span><br><span class=\"line\"><span class=\"attr\">project_name</span> = service</span><br><span class=\"line\"><span class=\"attr\">username</span> = aodh</span><br><span class=\"line\"><span class=\"attr\">password</span> = AODH_PASS</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[service_credentials]</span></span><br><span class=\"line\"><span class=\"attr\">auth_type</span> = password</span><br><span class=\"line\"><span class=\"attr\">auth_url</span> = http://controller:<span class=\"number\">5000</span>/v3</span><br><span class=\"line\"><span class=\"attr\">project_domain_id</span> = default</span><br><span class=\"line\"><span class=\"attr\">user_domain_id</span> = default</span><br><span class=\"line\"><span class=\"attr\">project_name</span> = service</span><br><span class=\"line\"><span class=\"attr\">username</span> = aodh</span><br><span class=\"line\"><span class=\"attr\">password</span> = AODH_PASS</span><br><span class=\"line\"><span class=\"attr\">interface</span> = internalURL</span><br><span class=\"line\"><span class=\"attr\">region_name</span> = RegionOne</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>同步数据库。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aodh-dbsync</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>完成安装。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">配置服务自启</span></span><br><span class=\"line\">systemctl enable openstack-aodh-api.service openstack-aodh-evaluator.service \\</span><br><span class=\"line\">openstack-aodh-notifier.service openstack-aodh-listener.service</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">启动服务</span></span><br><span class=\"line\">systemctl start openstack-aodh-api.service openstack-aodh-evaluator.service \\</span><br><span class=\"line\">openstack-aodh-notifier.service openstack-aodh-listener.service</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"Gnocchi\"><a href=\"#Gnocchi\" class=\"headerlink\" title=\"Gnocchi\"></a>Gnocchi</h4><p>Gnocchi是一个开源的时间序列数据库，可以对接Ceilometer。</p>\n<p><strong>Controller节点</strong></p>\n<ol>\n<li><p>创建数据库。</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> DATABASE gnocchi;</span><br><span class=\"line\"><span class=\"keyword\">GRANT</span> <span class=\"keyword\">ALL</span> PRIVILEGES <span class=\"keyword\">ON</span> gnocchi.<span class=\"operator\">*</span> <span class=\"keyword\">TO</span> <span class=\"string\">&#x27;gnocchi&#x27;</span>@<span class=\"string\">&#x27;localhost&#x27;</span> IDENTIFIED <span class=\"keyword\">BY</span> <span class=\"string\">&#x27;GNOCCHI_DBPASS&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">GRANT</span> <span class=\"keyword\">ALL</span> PRIVILEGES <span class=\"keyword\">ON</span> gnocchi.<span class=\"operator\">*</span> <span class=\"keyword\">TO</span> <span class=\"string\">&#x27;gnocchi&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span> IDENTIFIED <span class=\"keyword\">BY</span> <span class=\"string\">&#x27;GNOCCHI_DBPASS&#x27;</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建服务凭证以及API端点。</p>\n<p> 创建服务凭证。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openstack user create --domain default --password-prompt gnocchi</span><br><span class=\"line\">openstack role add --project service --user gnocchi admin</span><br><span class=\"line\">openstack service create --name gnocchi --description &quot;Metric Service&quot; metric</span><br></pre></td></tr></table></figure>\n\n<p> 创建API端点。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openstack endpoint create --region RegionOne metric public http://controller:8041</span><br><span class=\"line\">openstack endpoint create --region RegionOne metric internal http://controller:8041</span><br><span class=\"line\">openstack endpoint create --region RegionOne metric admin http://controller:8041</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装Gnocchi。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dnf install openstack-gnocchi-api openstack-gnocchi-metricd python3-gnocchiclient</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改配置文件。</p>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/gnocchi/gnocchi.conf</span><br><span class=\"line\"><span class=\"section\">[api]</span></span><br><span class=\"line\"><span class=\"attr\">auth_mode</span> = keystone</span><br><span class=\"line\"><span class=\"attr\">port</span> = <span class=\"number\">8041</span></span><br><span class=\"line\"><span class=\"attr\">uwsgi_mode</span> = http-socket</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[keystone_authtoken]</span></span><br><span class=\"line\"><span class=\"attr\">auth_type</span> = password</span><br><span class=\"line\"><span class=\"attr\">auth_url</span> = http://controller:<span class=\"number\">5000</span>/v3</span><br><span class=\"line\"><span class=\"attr\">project_domain_name</span> = Default</span><br><span class=\"line\"><span class=\"attr\">user_domain_name</span> = Default</span><br><span class=\"line\"><span class=\"attr\">project_name</span> = service</span><br><span class=\"line\"><span class=\"attr\">username</span> = gnocchi</span><br><span class=\"line\"><span class=\"attr\">password</span> = GNOCCHI_PASS</span><br><span class=\"line\"><span class=\"attr\">interface</span> = internalURL</span><br><span class=\"line\"><span class=\"attr\">region_name</span> = RegionOne</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[indexer]</span></span><br><span class=\"line\"><span class=\"attr\">url</span> = mysql+pymysql://gnocchi:GNOCCHI_DBPASS@controller/gnocchi</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[storage]</span></span><br><span class=\"line\"><span class=\"comment\"># coordination_url is not required but specifying one will improve</span></span><br><span class=\"line\"><span class=\"comment\"># performance with better workload division across workers.</span></span><br><span class=\"line\"><span class=\"comment\"># coordination_url = redis://controller:6379</span></span><br><span class=\"line\"><span class=\"attr\">file_basepath</span> = /var/lib/gnocchi</span><br><span class=\"line\"><span class=\"attr\">driver</span> = file</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>同步数据库。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gnocchi-upgrade</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>完成安装。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">配置服务自启</span></span><br><span class=\"line\">systemctl enable openstack-gnocchi-api.service openstack-gnocchi-metricd.service</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">启动服务</span></span><br><span class=\"line\">systemctl start openstack-gnocchi-api.service openstack-gnocchi-metricd.service</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"Ceilometer\"><a href=\"#Ceilometer\" class=\"headerlink\" title=\"Ceilometer\"></a>Ceilometer</h4><p>Ceilometer是OpenStack中负责数据收集的服务。</p>\n<p><strong>Controller节点</strong></p>\n<ol>\n<li><p>创建服务凭证。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openstack user create --domain default --password-prompt ceilometer</span><br><span class=\"line\">openstack role add --project service --user ceilometer admin</span><br><span class=\"line\">openstack service create --name ceilometer --description &quot;Telemetry&quot; metering</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装Ceilometer软件包。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dnf install openstack-ceilometer-notification openstack-ceilometer-central</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>编辑配置文件&#x2F;etc&#x2F;ceilometer&#x2F;pipeline.yaml。 </p>\n <figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">publishers:</span></span><br><span class=\"line\">    <span class=\"comment\"># set address of Gnocchi</span></span><br><span class=\"line\">    <span class=\"comment\"># + filter out Gnocchi-related activity meters (Swift driver)</span></span><br><span class=\"line\">    <span class=\"comment\"># + set default archive policy</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">gnocchi://?filter_project=service&amp;archive_policy=low</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>编辑配置文件&#x2F;etc&#x2F;ceilometer&#x2F;ceilometer.conf。</p>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[DEFAULT]</span></span><br><span class=\"line\"><span class=\"attr\">transport_url</span> = rabbit://openstack:RABBIT_PASS@controller</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[service_credentials]</span></span><br><span class=\"line\"><span class=\"attr\">auth_type</span> = password</span><br><span class=\"line\"><span class=\"attr\">auth_url</span> = http://controller:<span class=\"number\">5000</span>/v3</span><br><span class=\"line\"><span class=\"attr\">project_domain_id</span> = default</span><br><span class=\"line\"><span class=\"attr\">user_domain_id</span> = default</span><br><span class=\"line\"><span class=\"attr\">project_name</span> = service</span><br><span class=\"line\"><span class=\"attr\">username</span> = ceilometer</span><br><span class=\"line\"><span class=\"attr\">password</span> = CEILOMETER_PASS</span><br><span class=\"line\"><span class=\"attr\">interface</span> = internalURL</span><br><span class=\"line\"><span class=\"attr\">region_name</span> = RegionOne</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>数据库同步。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ceilometer-upgrade</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>完成控制节点Ceilometer安装。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">配置服务自启</span></span><br><span class=\"line\">systemctl enable openstack-ceilometer-notification.service openstack-ceilometer-central.service</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">启动服务</span></span><br><span class=\"line\">systemctl start openstack-ceilometer-notification.service openstack-ceilometer-central.service</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><strong>Compute节点</strong></p>\n<ol>\n<li><p>安装Ceilometer软件包。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dnf install openstack-ceilometer-compute</span><br><span class=\"line\">dnf install openstack-ceilometer-ipmi       # 可选</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>编辑配置文件&#x2F;etc&#x2F;ceilometer&#x2F;ceilometer.conf。</p>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[DEFAULT]</span></span><br><span class=\"line\"><span class=\"attr\">transport_url</span> = rabbit://openstack:RABBIT_PASS@controller</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[service_credentials]</span></span><br><span class=\"line\"><span class=\"attr\">auth_url</span> = http://controller:<span class=\"number\">5000</span></span><br><span class=\"line\"><span class=\"attr\">project_domain_id</span> = default</span><br><span class=\"line\"><span class=\"attr\">user_domain_id</span> = default</span><br><span class=\"line\"><span class=\"attr\">auth_type</span> = password</span><br><span class=\"line\"><span class=\"attr\">username</span> = ceilometer</span><br><span class=\"line\"><span class=\"attr\">project_name</span> = service</span><br><span class=\"line\"><span class=\"attr\">password</span> = CEILOMETER_PASS</span><br><span class=\"line\"><span class=\"attr\">interface</span> = internalURL</span><br><span class=\"line\"><span class=\"attr\">region_name</span> = RegionOne</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>编辑配置文件&#x2F;etc&#x2F;nova&#x2F;nova.conf。</p>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[DEFAULT]</span></span><br><span class=\"line\"><span class=\"attr\">instance_usage_audit</span> = <span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"attr\">instance_usage_audit_period</span> = hour</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[notifications]</span></span><br><span class=\"line\"><span class=\"attr\">notify_on_state_change</span> = vm_and_task_state</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[oslo_messaging_notifications]</span></span><br><span class=\"line\"><span class=\"attr\">driver</span> = messagingv2</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>完成安装。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl enable openstack-ceilometer-compute.service</span><br><span class=\"line\">systemctl start openstack-ceilometer-compute.service</span><br><span class=\"line\">systemctl enable openstack-ceilometer-ipmi.service         # 可选</span><br><span class=\"line\">systemctl start openstack-ceilometer-ipmi.service          # 可选</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">重启nova-compute服务</span></span><br><span class=\"line\">systemctl restart openstack-nova-compute.service</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"Heat\"><a href=\"#Heat\" class=\"headerlink\" title=\"Heat\"></a>Heat</h4><p>Heat是 OpenStack 自动编排服务，基于描述性的模板来编排复合云应用，也称为<code>Orchestration Service</code>。Heat 的各服务一般安装在<code>Controller</code>节点上。</p>\n<p><strong>Controller节点</strong></p>\n<ol>\n<li><p>创建<strong>heat</strong>数据库，并授予<strong>heat</strong>数据库正确的访问权限，替换<strong>HEAT_DBPASS</strong>为合适的密码</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql <span class=\"operator\">-</span>u root <span class=\"operator\">-</span>p</span><br><span class=\"line\"></span><br><span class=\"line\">MariaDB [(<span class=\"keyword\">none</span>)]<span class=\"operator\">&gt;</span> <span class=\"keyword\">CREATE</span> DATABASE heat;</span><br><span class=\"line\">MariaDB [(<span class=\"keyword\">none</span>)]<span class=\"operator\">&gt;</span> <span class=\"keyword\">GRANT</span> <span class=\"keyword\">ALL</span> PRIVILEGES <span class=\"keyword\">ON</span> heat.<span class=\"operator\">*</span> <span class=\"keyword\">TO</span> <span class=\"string\">&#x27;heat&#x27;</span>@<span class=\"string\">&#x27;localhost&#x27;</span> IDENTIFIED <span class=\"keyword\">BY</span> <span class=\"string\">&#x27;HEAT_DBPASS&#x27;</span>;</span><br><span class=\"line\">MariaDB [(<span class=\"keyword\">none</span>)]<span class=\"operator\">&gt;</span> <span class=\"keyword\">GRANT</span> <span class=\"keyword\">ALL</span> PRIVILEGES <span class=\"keyword\">ON</span> heat.<span class=\"operator\">*</span> <span class=\"keyword\">TO</span> <span class=\"string\">&#x27;heat&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span> IDENTIFIED <span class=\"keyword\">BY</span> <span class=\"string\">&#x27;HEAT_DBPASS&#x27;</span>;</span><br><span class=\"line\">MariaDB [(<span class=\"keyword\">none</span>)]<span class=\"operator\">&gt;</span> exit;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建服务凭证，创建<strong>heat</strong>用户，并为其增加<strong>admin</strong>角色</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source ~/.admin-openrc</span><br><span class=\"line\"></span><br><span class=\"line\">openstack user create --domain default --password-prompt heat</span><br><span class=\"line\">openstack role add --project service --user heat admin</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建<strong>heat</strong>和<strong>heat-cfn</strong>服务及其对应的API端点</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openstack service create --name heat --description &quot;Orchestration&quot; orchestration</span><br><span class=\"line\">openstack service create --name heat-cfn --description &quot;Orchestration&quot;  cloudformation</span><br><span class=\"line\">openstack endpoint create --region RegionOne orchestration public http://controller:8004/v1/%\\(tenant_id\\)s</span><br><span class=\"line\">openstack endpoint create --region RegionOne orchestration internal http://controller:8004/v1/%\\(tenant_id\\)s</span><br><span class=\"line\">openstack endpoint create --region RegionOne orchestration admin http://controller:8004/v1/%\\(tenant_id\\)s</span><br><span class=\"line\">openstack endpoint create --region RegionOne cloudformation public http://controller:8000/v1</span><br><span class=\"line\">openstack endpoint create --region RegionOne cloudformation internal http://controller:8000/v1</span><br><span class=\"line\">openstack endpoint create --region RegionOne cloudformation admin http://controller:8000/v1</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建stack管理的额外信息</p>\n<p> 创建 <strong>heat</strong> domain</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openstack domain create --description &quot;Stack projects and users&quot; heat</span><br></pre></td></tr></table></figure>\n\n<p> 在 <strong>heat</strong> domain下创建 <strong>heat_domain_admin</strong> 用户，并记下输入的密码，用于配置下面的<code>HEAT_DOMAIN_PASS</code></p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openstack user create --domain heat --password-prompt heat_domain_admin</span><br></pre></td></tr></table></figure>\n\n<p> 为 <strong>heat_domain_admin</strong> 用户增加 <strong>admin</strong> 角色</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openstack role add --domain heat --user-domain heat --user heat_domain_admin admin</span><br></pre></td></tr></table></figure>\n\n<p> 创建 <strong>heat_stack_owner</strong> 角色</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openstack role create heat_stack_owner</span><br></pre></td></tr></table></figure>\n\n<p> 创建 <strong>heat_stack_user</strong> 角色</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openstack role create heat_stack_user</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装软件包</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dnf install openstack-heat-api openstack-heat-api-cfn openstack-heat-engine</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改配置文件<code>/etc/heat/heat.conf</code></p>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[DEFAULT]</span></span><br><span class=\"line\"><span class=\"attr\">transport_url</span> = rabbit://openstack:RABBIT_PASS@controller</span><br><span class=\"line\"><span class=\"attr\">heat_metadata_server_url</span> = http://controller:<span class=\"number\">8000</span></span><br><span class=\"line\"><span class=\"attr\">heat_waitcondition_server_url</span> = http://controller:<span class=\"number\">8000</span>/v1/waitcondition</span><br><span class=\"line\"><span class=\"attr\">stack_domain_admin</span> = heat_domain_admin</span><br><span class=\"line\"><span class=\"attr\">stack_domain_admin_password</span> = HEAT_DOMAIN_PASS</span><br><span class=\"line\"><span class=\"attr\">stack_user_domain_name</span> = heat</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[database]</span></span><br><span class=\"line\"><span class=\"attr\">connection</span> = mysql+pymysql://heat:HEAT_DBPASS@controller/heat</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[keystone_authtoken]</span></span><br><span class=\"line\"><span class=\"attr\">www_authenticate_uri</span> = http://controller:<span class=\"number\">5000</span></span><br><span class=\"line\"><span class=\"attr\">auth_url</span> = http://controller:<span class=\"number\">5000</span></span><br><span class=\"line\"><span class=\"attr\">memcached_servers</span> = controller:<span class=\"number\">11211</span></span><br><span class=\"line\"><span class=\"attr\">auth_type</span> = password</span><br><span class=\"line\"><span class=\"attr\">project_domain_name</span> = default</span><br><span class=\"line\"><span class=\"attr\">user_domain_name</span> = default</span><br><span class=\"line\"><span class=\"attr\">project_name</span> = service</span><br><span class=\"line\"><span class=\"attr\">username</span> = heat</span><br><span class=\"line\"><span class=\"attr\">password</span> = HEAT_PASS</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[trustee]</span></span><br><span class=\"line\"><span class=\"attr\">auth_type</span> = password</span><br><span class=\"line\"><span class=\"attr\">auth_url</span> = http://controller:<span class=\"number\">5000</span></span><br><span class=\"line\"><span class=\"attr\">username</span> = heat</span><br><span class=\"line\"><span class=\"attr\">password</span> = HEAT_PASS</span><br><span class=\"line\"><span class=\"attr\">user_domain_name</span> = default</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[clients_keystone]</span></span><br><span class=\"line\"><span class=\"attr\">auth_uri</span> = http://controller:<span class=\"number\">5000</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>初始化<strong>heat</strong>数据库表</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">su -s /bin/sh -c &quot;heat-manage db_sync&quot; heat</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动服务</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl enable openstack-heat-api.service openstack-heat-api-cfn.service openstack-heat-engine.service</span><br><span class=\"line\">systemctl start openstack-heat-api.service openstack-heat-api-cfn.service openstack-heat-engine.service</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"Tempest\"><a href=\"#Tempest\" class=\"headerlink\" title=\"Tempest\"></a>Tempest</h4><p>Tempest是OpenStack的集成测试服务，如果用户需要全面自动化测试已安装的OpenStack环境的功能,则推荐使用该组件。否则，可以不用安装。</p>\n<p><strong>Controller节点</strong>：</p>\n<ol>\n<li><p>安装Tempest</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dnf install openstack-tempest</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>初始化目录</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tempest init mytest</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改配置文件。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd mytest</span><br><span class=\"line\">vi etc/tempest.conf</span><br></pre></td></tr></table></figure>\n\n<p> tempest.conf中需要配置当前OpenStack环境的信息，具体内容可以参考<a href=\"https://docs.openstack.org/tempest/latest/sampleconf.html\">官方示例</a></p>\n</li>\n<li><p>执行测试</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tempest run</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装tempest扩展（可选）<br>OpenStack各个服务本身也提供了一些tempest测试包，用户可以安装这些包来丰富tempest的测试内容。在Antelope中，我们提供了Cinder、Glance、Keystone、Ironic、Trove的扩展测试，用户可以执行如下命令进行安装使用：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dnf install python3-cinder-tempest-plugin python3-glance-tempest-plugin python3-ironic-tempest-plugin python3-keystone-tempest-plugin python3-trove-tempest-plugin</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"基于OpenStack-SIG开发工具oos部署\"><a href=\"#基于OpenStack-SIG开发工具oos部署\" class=\"headerlink\" title=\"基于OpenStack SIG开发工具oos部署\"></a>基于OpenStack SIG开发工具oos部署</h2><p><code>oos</code>(openEuler OpenStack SIG)是OpenStack SIG提供的命令行工具。其中<code>oos env</code>系列命令提供了一键部署OpenStack （<code>all in one</code>或三节点<code>cluster</code>）的ansible脚本，用户可以使用该脚本快速部署一套基于 openEuler RPM 的 OpenStack 环境。<code>oos</code>工具支持对接云provider（目前仅支持华为云provider）和主机纳管两种方式来部署 OpenStack 环境，下面以对接华为云部署一套<code>all in one</code>的OpenStack环境为例说明<code>oos</code>工具的使用方法。</p>\n<ol>\n<li><p>安装<code>oos</code>工具</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install openstack-sig-tool</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置对接华为云provider的信息</p>\n<p> 打开<code>/usr/local/etc/oos/oos.conf</code>文件，修改配置为您拥有的华为云资源信息，AK&#x2F;SK是用户的华为云登录密钥，其他配置保持默认即可（默认使用新加坡region），需要提前在云上创建对应的资源，包括：</p>\n<ul>\n<li>一个安全组，名字默认是<code>oos</code></li>\n<li>一个openEuler镜像，名称格式是openEuler-%(release)s-%(arch)s，例如<code>openEuler-24.03-sp1-arm64</code></li>\n<li>一个VPC，名称是<code>oos_vpc</code></li>\n<li>该VPC下面两个子网，名称是<code>oos_subnet1</code>、<code>oos_subnet2</code></li>\n</ul>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[huaweicloud]</span></span><br><span class=\"line\"><span class=\"attr\">ak</span> = </span><br><span class=\"line\"><span class=\"attr\">sk</span> = </span><br><span class=\"line\"><span class=\"attr\">region</span> = ap-southeast-<span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"attr\">root_volume_size</span> = <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"attr\">data_volume_size</span> = <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"attr\">security_group_name</span> = oos</span><br><span class=\"line\"><span class=\"attr\">image_format</span> = openEuler-%%(release)s-%%(arch)s</span><br><span class=\"line\"><span class=\"attr\">vpc_name</span> = oos_vpc</span><br><span class=\"line\"><span class=\"attr\">subnet1_name</span> = oos_subnet1</span><br><span class=\"line\"><span class=\"attr\">subnet2_name</span> = oos_subnet2</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置 OpenStack 环境信息</p>\n<p> 打开<code>/usr/local/etc/oos/oos.conf</code>文件，根据当前机器环境和需求修改配置。内容如下：</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[environment]</span><br><span class=\"line\">mysql_root_password = root</span><br><span class=\"line\">mysql_project_password = root</span><br><span class=\"line\">rabbitmq_password = root</span><br><span class=\"line\">project_identity_password = root</span><br><span class=\"line\">enabled_service = keystone,neutron,cinder,placement,nova,glance,horizon,aodh,ceilometer,cyborg,gnocchi,kolla,heat,swift,trove,tempest</span><br><span class=\"line\">neutron_provider_interface_name = br-ex</span><br><span class=\"line\">default_ext_subnet_range = 10.100.100.0/24</span><br><span class=\"line\">default_ext_subnet_gateway = 10.100.100.1</span><br><span class=\"line\">neutron_dataplane_interface_name = eth1</span><br><span class=\"line\">cinder_block_device = vdb</span><br><span class=\"line\">swift_storage_devices = vdc</span><br><span class=\"line\">swift_hash_path_suffix = ash</span><br><span class=\"line\">swift_hash_path_prefix = has</span><br><span class=\"line\">glance_api_workers = 2</span><br><span class=\"line\">cinder_api_workers = 2</span><br><span class=\"line\">nova_api_workers = 2</span><br><span class=\"line\">nova_metadata_api_workers = 2</span><br><span class=\"line\">nova_conductor_workers = 2</span><br><span class=\"line\">nova_scheduler_workers = 2</span><br><span class=\"line\">neutron_api_workers = 2</span><br><span class=\"line\">horizon_allowed_host = *</span><br><span class=\"line\">kolla_openeuler_plugin = false</span><br></pre></td></tr></table></figure>\n\n<p> <strong>关键配置</strong></p>\n<table>\n<thead>\n<tr>\n<th>配置项</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>enabled_service</td>\n<td>安装服务列表，根据用户需求自行删减</td>\n</tr>\n<tr>\n<td>neutron_provider_interface_name</td>\n<td>neutron L3网桥名称</td>\n</tr>\n<tr>\n<td>default_ext_subnet_range</td>\n<td>neutron私网IP段</td>\n</tr>\n<tr>\n<td>default_ext_subnet_gateway</td>\n<td>neutron私网gateway</td>\n</tr>\n<tr>\n<td>neutron_dataplane_interface_name</td>\n<td>neutron使用的网卡，推荐使用一张新的网卡，以免和现有网卡冲突，防止all in one主机断连的情况</td>\n</tr>\n<tr>\n<td>cinder_block_device</td>\n<td>cinder使用的卷设备名</td>\n</tr>\n<tr>\n<td>swift_storage_devices</td>\n<td>swift使用的卷设备名</td>\n</tr>\n<tr>\n<td>kolla_openeuler_plugin</td>\n<td>是否启用kolla plugin。设置为True，kolla将支持部署openEuler容器(只在openEuler LTS上支持)</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>华为云上面创建一台|openEuler 24.03 LTS SP1的x86_64虚拟机，用于部署<code>all in one</code> 的 OpenStack</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">sshpass在`oos <span class=\"built_in\">env</span> create`过程中被使用，用于配置对目标虚拟机的免密访问</span></span><br><span class=\"line\">dnf install sshpass</span><br><span class=\"line\">oos env create -r 24.03-lts-sp1 -f small -a x86 -n test-oos all_in_one</span><br></pre></td></tr></table></figure>\n\n<p> 具体的参数可以使用<code>oos env create --help</code>命令查看</p>\n</li>\n<li><p>部署OpenStack <code>all in one</code> 环境</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">oos env setup test-oos -r antelope</span><br></pre></td></tr></table></figure>\n\n<p> 具体的参数可以使用<code>oos env setup --help</code>命令查看</p>\n</li>\n<li><p>初始化tempest环境</p>\n<p> 如果用户想使用该环境运行tempest测试的话，可以执行命令<code>oos env init</code>，会自动把tempest需要的OpenStack资源自动创建好</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">oos env init test-oos</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>执行tempest测试</p>\n<p> 用户可以使用oos自动执行：</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">oos env test test-oos</span><br></pre></td></tr></table></figure>\n\n<p> 也可以手动登录目标节点，进入根目录下的<code>mytest</code>目录，手动执行<code>tempest run</code></p>\n</li>\n</ol>\n<p>如果是以主机纳管的方式部署 OpenStack 环境，总体逻辑与上文对接华为云时一致，1、3、5、6步操作不变，跳过第2步对华为云provider信息的配置，在第4步改为纳管主机操作。</p>\n<p>被纳管的虚机需要保证：</p>\n<ul>\n<li>至少有一张给oos使用的网卡，名称与配置保持一致，相关配置<code>neutron_dataplane_interface_name</code></li>\n<li>至少有一块给oos使用的硬盘，名称与配置保持一致，相关配置<code>cinder_block_device</code></li>\n<li>如果要部署swift服务，则需要新增一块硬盘，名称与配置保持一致，相关配置<code>swift_storage_devices</code></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">sshpass在`oos <span class=\"built_in\">env</span> create`过程中被使用，用于配置对目标主机的免密访问</span></span><br><span class=\"line\">dnf install sshpass</span><br><span class=\"line\">oos env manage -r 24.03-lts-sp1 -i TARGET_MACHINE_IP -p TARGET_MACHINE_PASSWD -n test-oos</span><br></pre></td></tr></table></figure>\n\n<p>替换<code>TARGET_MACHINE_IP</code>为目标机ip、<code>TARGET_MACHINE_PASSWD</code>为目标机密码。具体的参数可以使用<code>oos env manage --help</code>命令查看。</p>\n"},{"_content":"    kolla提供编译镜像的功能，kolla-ansible具有部署openstack的功能。\n### 系统配置\n#### 关闭防火墙\n```bash\nsystemctl disable --now firewalld\n```\n#### 配置域名\n```bash\n#增加域名解析\necho \"10.30.38.116 harbor.chinauos.com\" >> /etc/hosts\n```\n注：\n“registry.uniontech.com”和“harbor.chinauos.com” 是两个容器镜像仓库。\n其中“harbor.chinauos.com”是对外仓库，“registry.uniontech.com”是研发仓库。\n### 搭建编译环境\n#### 安装配置docker\n安装docker和openstack-kolla包\n```bash\nyum install moby-engine  git -y python3-devel\n```\n配置docker\n```bash\nsystemctl enable --now  docker.service\n```\n修改docker配置文件:/etc/docker/daemon.json\n```bash\n{\n    \"insecure-registries\": [\n        \"registry.uniontech.com\", \"harbor.chinauos.com\"\n    ]\n}\n```\n注：配置docker拉取容器镜像的仓库，配置此域名之后要配置相应的域名。\n“registry.uniontech.com”账户和密码：\n“harbor.chinauos.com”账户和密码：\n为docker配置不安全仓库之后重新启动docker服务。\n```bash\nsystemctl daemon-reload \nsystemctl restart docker.service \n```\n#### 安装openstack-kolla\n```bash\n#拉起openstack-kolla源码\ngit clone -b victoria-source \\\n\"http://gerrit-dev.uniontech.com/openstack/openstack-kolla\"\n#切换到响应的分支安装\n#使用pip3安装/卸载源码\npip3 install openstack-kolla/\npip3 uninstall openstack-kolla/\n```\n注：\n\n1. 安装后所有容器镜像的Dockerfile都在/usr/local/share/kolla/docker对应名称目录下。\n2. 若需要修改容器镜像找到对应的目录，更改模板文件即可。\n3. 更新sql文件，请将sql文件重新命名为ustack.sql.j2。\n#### 登录harbor仓库\n```bash\ndocker login harbor.chinauos.com\n```\nUsername: ustack\nPassword: Ustack12#$\n参考：[https://ivanzz1001.github.io/records/post/docker/2018/04/11/docker-harbor-uage](https://ivanzz1001.github.io/records/post/docker/2018/04/11/docker-harbor-uage)\nharbor是镜像管理平台，登录用户之后，则可根据用户角色权限操作镜像。\n### 编译镜像\n```bash\nkolla-build \\\n--base-image harbor.chinauos.com/ren-test/uniontechos-server-20-1060a-x86  \\\n--config-file kolla-build.conf \\\n-t source \\\n--base uniontechos \\\n--tag victoria \\\nnova\n```\n参数说明: \n--base-image 使用指定的基础镜像\n--base 构建uniontechos镜像\n--tag 构建镜像生成镜像的tag\n--base-image 根据不架构修改-x86/-arm \n--config-file 指定特定的源码地址构建镜像。\n--template-only 不制作镜像，仅仅生成 Dockerfile文件。\n注：openstack上搭建环境时，建议采用外部网络直连的方式配置虚拟机网络，采用xlan网络配置浮动ip时，在构建容器镜像时会导致安装依赖失败，拉取不到容器里的依赖，亲测有效。\n注：部分参数可以使用kolla-build --help查询，image和tag等变量信息可以登录harbor进行查看。例如当前镜像在harbor.chinauos.com域名下的ren-test项目下的uniontechos-server-20-1060a-x86镜像。点击镜像即可查询tag名称。\nkolla-build.conf 格式参考如下：\n```bash\n[nova-base]\ntype = git\nlocation = http://gerrit-dev.uniontech.com/openstack/openstack-nova\nreference = victoria-source\n\n[cinder-base]\ntype = git\nlocation = http://gerrit-dev.uniontech.com/openstack/openstack-cinder\nreference = victoria-source\n```\n容器镜像仓库配置。可根据自身想要的安装包，配置源地址，此处的源地址是指构建容器镜像时安装依赖的rpm包的仓库地址。\n构建镜像 x86的源为:/usr/local/share/kolla/docker/base/UniontechOS.repo\n```bash\n[UniontechOS-$releasever-AppStream]\nname = UniontechOS $releasever AppStream\n#baseurl = https://cdimage.uniontech.com/server-dev/1060/a/release/compose/AppStream/x86_64/os/\nbaseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/AppStream/x86_64/os/\nenabled = 1\ngpgcheck = 0\nmodule_hotfixes=true\n\n[UniontechOS-$releasever-BaseOS]\nname = UniontechOS $releasever BaseOS\n#baseurl = http://10.30.38.131/kojifiles/repos/kongzi-build/latest/x86_64/\nbaseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/BaseOS/x86_64/os/\n#baseurl = https://cdimage.uniontech.com/server-dev/1060/a/release/compose/BaseOS/x86_64/os/\nenabled = 1\ngpgcheck = 0\nmodule_hotfixes=true\n\n[UnionTechOS-$releasever-openstack]\nname = UnionTechOS $releasever openstack\nbaseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/OpenStack-Victoria/x86_64/os/\n#baseurl = http://10.30.38.131/kojifiles/repos/kongzi-openstack-victoria-build/latest/x86_64/\nenabled = 1\ngpgcheck = 0\n\n[ceph]\nname=ceph\nbaseurl=https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/Storage/x86_64/\ngpgcheck=0\nenabled=0\nmodule_hotfixes=true\n\n[Tools]\nname = Tools\nbaseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/PowerTools/x86_64/os/\nenabled = 0\ngpgcheck = 0\n\n[PLUS]\nname = plus\nbaseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/Plus/x86_64/os/\nenabled = 0\ngpgcheck = 0\n```\n构建镜像 arm的源为:/usr/local/share/kolla/docker/base/Ustack_aarch64.repo\n```bash\n[UniontechOS-$releasever-AppStream]\nname = UniontechOS $releasever AppStream\n#https://cdimage.uniontech.com/server-dev/1060/e/release-0606/arm64/OS/\nbaseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/AppStream/aarch64/os/\n#baseurl = http://pools.uniontech.com/server-enterprise-c/kongzi/1020/AppStream/x86_64/\nenabled = 1\ngpgcheck = 0\n#module_hotfixes=true\n\n[UniontechOS-$releasever-BaseOS]\nname = UniontechOS $releasever BaseOS\n#baseurl = https://cdimage.uniontech.com/server-dev/1060/e/release-0606/arm64/everything/\nbaserurl = http://10.30.38.131/kojifiles/repos/kongzi-build/latest/aarch64/\n#baseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/BaseOS/aarch64/os/\nenabled = 1\ngpgcheck = 0\n#module_hotfixes=true\n\n[UnionTechOS-$releasever-openstack]\nname = UnionTechOS $releasever openstack\n#baseurl = https://cdimage.uniontech.com/server-dev/1060/e/release-0606/arm64/OpenStack-V/\nbaseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/OpenStack-Victoria/aarch64/os/\nenabled = 1\ngpgcheck = 0\n\n[ceph]\nname=ceph\nbaseurl=https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/Storage/aarch64/\ngpgcheck=0\nenabled=1\nmodule_hotfixes=true\n\n[Tools]\nname = Tools\nbaseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/PowerTools/aarch64/os/\nenabled = 1\ngpgcheck = 0\n\n[PLUS]\nname = plus\nbaseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/Plus/aarch64/os/\nenabled = 1\ngpgcheck = 0\n```\n注：制作ustack-web需要修改start.sh 如下:/usr/local/share/kolla/docker/base/start.sh\n![image.png](https://cdn.nlark.com/yuque/0/2023/png/26098815/1695277271879-efa44824-2de4-48af-86b1-8d348c42d10c.png#averageHue=%2314172a&clientId=u4d0409ea-d20d-4&from=paste&height=74&id=u8dd3bc39&originHeight=93&originWidth=591&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=9779&status=done&style=none&taskId=u8ca6c926-8137-456f-acc7-eeef95147c0&title=&width=472.8)\n### 推送镜像到harbor\n执行如下脚本前请先根据操作环境修改变量。\n```bash\nset -o errexit\n\nTAG=victoria\nKOLLA_NAMESPECE=kolla\nUOS_REGISTRY=harbor.chinauos.com\nUOS_NAMESPACE=kolla-ustack-v-x86\n#ren-test项目中的镜像为基础镜像，kolla-ustack-v-x86项目中的镜像为持续更新的研发镜像。\n\nKOLLA_SOURCE=$(docker images | awk /kolla/'{print $1}'| xargs -I {} echo -e {}':'${TAG})\nfor i in ${KOLLA_SOURCE}; do\n        DOCKER_IMAGE_LINE=$(echo $i | tr ' ' '\\n')\n        UOS_TEST=${DOCKER_IMAGE_LINE#${KOLLA_NAMESPECE}}\n        UOS_TAG=${UOS_REGISTRY}/${UOS_NAMESPACE}${UOS_TEST}\n        echo ${UOS_TAG}\n        docker tag ${DOCKER_IMAGE_LINE} ${UOS_TAG}\n        docker push ${UOS_TAG}\n        docker rmi -f ${UOS_TAG}\ndone\n```\n","source":"_posts/kolla构建镜像.md","raw":"    kolla提供编译镜像的功能，kolla-ansible具有部署openstack的功能。\n### 系统配置\n#### 关闭防火墙\n```bash\nsystemctl disable --now firewalld\n```\n#### 配置域名\n```bash\n#增加域名解析\necho \"10.30.38.116 harbor.chinauos.com\" >> /etc/hosts\n```\n注：\n“registry.uniontech.com”和“harbor.chinauos.com” 是两个容器镜像仓库。\n其中“harbor.chinauos.com”是对外仓库，“registry.uniontech.com”是研发仓库。\n### 搭建编译环境\n#### 安装配置docker\n安装docker和openstack-kolla包\n```bash\nyum install moby-engine  git -y python3-devel\n```\n配置docker\n```bash\nsystemctl enable --now  docker.service\n```\n修改docker配置文件:/etc/docker/daemon.json\n```bash\n{\n    \"insecure-registries\": [\n        \"registry.uniontech.com\", \"harbor.chinauos.com\"\n    ]\n}\n```\n注：配置docker拉取容器镜像的仓库，配置此域名之后要配置相应的域名。\n“registry.uniontech.com”账户和密码：\n“harbor.chinauos.com”账户和密码：\n为docker配置不安全仓库之后重新启动docker服务。\n```bash\nsystemctl daemon-reload \nsystemctl restart docker.service \n```\n#### 安装openstack-kolla\n```bash\n#拉起openstack-kolla源码\ngit clone -b victoria-source \\\n\"http://gerrit-dev.uniontech.com/openstack/openstack-kolla\"\n#切换到响应的分支安装\n#使用pip3安装/卸载源码\npip3 install openstack-kolla/\npip3 uninstall openstack-kolla/\n```\n注：\n\n1. 安装后所有容器镜像的Dockerfile都在/usr/local/share/kolla/docker对应名称目录下。\n2. 若需要修改容器镜像找到对应的目录，更改模板文件即可。\n3. 更新sql文件，请将sql文件重新命名为ustack.sql.j2。\n#### 登录harbor仓库\n```bash\ndocker login harbor.chinauos.com\n```\nUsername: ustack\nPassword: Ustack12#$\n参考：[https://ivanzz1001.github.io/records/post/docker/2018/04/11/docker-harbor-uage](https://ivanzz1001.github.io/records/post/docker/2018/04/11/docker-harbor-uage)\nharbor是镜像管理平台，登录用户之后，则可根据用户角色权限操作镜像。\n### 编译镜像\n```bash\nkolla-build \\\n--base-image harbor.chinauos.com/ren-test/uniontechos-server-20-1060a-x86  \\\n--config-file kolla-build.conf \\\n-t source \\\n--base uniontechos \\\n--tag victoria \\\nnova\n```\n参数说明: \n--base-image 使用指定的基础镜像\n--base 构建uniontechos镜像\n--tag 构建镜像生成镜像的tag\n--base-image 根据不架构修改-x86/-arm \n--config-file 指定特定的源码地址构建镜像。\n--template-only 不制作镜像，仅仅生成 Dockerfile文件。\n注：openstack上搭建环境时，建议采用外部网络直连的方式配置虚拟机网络，采用xlan网络配置浮动ip时，在构建容器镜像时会导致安装依赖失败，拉取不到容器里的依赖，亲测有效。\n注：部分参数可以使用kolla-build --help查询，image和tag等变量信息可以登录harbor进行查看。例如当前镜像在harbor.chinauos.com域名下的ren-test项目下的uniontechos-server-20-1060a-x86镜像。点击镜像即可查询tag名称。\nkolla-build.conf 格式参考如下：\n```bash\n[nova-base]\ntype = git\nlocation = http://gerrit-dev.uniontech.com/openstack/openstack-nova\nreference = victoria-source\n\n[cinder-base]\ntype = git\nlocation = http://gerrit-dev.uniontech.com/openstack/openstack-cinder\nreference = victoria-source\n```\n容器镜像仓库配置。可根据自身想要的安装包，配置源地址，此处的源地址是指构建容器镜像时安装依赖的rpm包的仓库地址。\n构建镜像 x86的源为:/usr/local/share/kolla/docker/base/UniontechOS.repo\n```bash\n[UniontechOS-$releasever-AppStream]\nname = UniontechOS $releasever AppStream\n#baseurl = https://cdimage.uniontech.com/server-dev/1060/a/release/compose/AppStream/x86_64/os/\nbaseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/AppStream/x86_64/os/\nenabled = 1\ngpgcheck = 0\nmodule_hotfixes=true\n\n[UniontechOS-$releasever-BaseOS]\nname = UniontechOS $releasever BaseOS\n#baseurl = http://10.30.38.131/kojifiles/repos/kongzi-build/latest/x86_64/\nbaseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/BaseOS/x86_64/os/\n#baseurl = https://cdimage.uniontech.com/server-dev/1060/a/release/compose/BaseOS/x86_64/os/\nenabled = 1\ngpgcheck = 0\nmodule_hotfixes=true\n\n[UnionTechOS-$releasever-openstack]\nname = UnionTechOS $releasever openstack\nbaseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/OpenStack-Victoria/x86_64/os/\n#baseurl = http://10.30.38.131/kojifiles/repos/kongzi-openstack-victoria-build/latest/x86_64/\nenabled = 1\ngpgcheck = 0\n\n[ceph]\nname=ceph\nbaseurl=https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/Storage/x86_64/\ngpgcheck=0\nenabled=0\nmodule_hotfixes=true\n\n[Tools]\nname = Tools\nbaseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/PowerTools/x86_64/os/\nenabled = 0\ngpgcheck = 0\n\n[PLUS]\nname = plus\nbaseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/Plus/x86_64/os/\nenabled = 0\ngpgcheck = 0\n```\n构建镜像 arm的源为:/usr/local/share/kolla/docker/base/Ustack_aarch64.repo\n```bash\n[UniontechOS-$releasever-AppStream]\nname = UniontechOS $releasever AppStream\n#https://cdimage.uniontech.com/server-dev/1060/e/release-0606/arm64/OS/\nbaseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/AppStream/aarch64/os/\n#baseurl = http://pools.uniontech.com/server-enterprise-c/kongzi/1020/AppStream/x86_64/\nenabled = 1\ngpgcheck = 0\n#module_hotfixes=true\n\n[UniontechOS-$releasever-BaseOS]\nname = UniontechOS $releasever BaseOS\n#baseurl = https://cdimage.uniontech.com/server-dev/1060/e/release-0606/arm64/everything/\nbaserurl = http://10.30.38.131/kojifiles/repos/kongzi-build/latest/aarch64/\n#baseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/BaseOS/aarch64/os/\nenabled = 1\ngpgcheck = 0\n#module_hotfixes=true\n\n[UnionTechOS-$releasever-openstack]\nname = UnionTechOS $releasever openstack\n#baseurl = https://cdimage.uniontech.com/server-dev/1060/e/release-0606/arm64/OpenStack-V/\nbaseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/OpenStack-Victoria/aarch64/os/\nenabled = 1\ngpgcheck = 0\n\n[ceph]\nname=ceph\nbaseurl=https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/Storage/aarch64/\ngpgcheck=0\nenabled=1\nmodule_hotfixes=true\n\n[Tools]\nname = Tools\nbaseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/PowerTools/aarch64/os/\nenabled = 1\ngpgcheck = 0\n\n[PLUS]\nname = plus\nbaseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/Plus/aarch64/os/\nenabled = 1\ngpgcheck = 0\n```\n注：制作ustack-web需要修改start.sh 如下:/usr/local/share/kolla/docker/base/start.sh\n![image.png](https://cdn.nlark.com/yuque/0/2023/png/26098815/1695277271879-efa44824-2de4-48af-86b1-8d348c42d10c.png#averageHue=%2314172a&clientId=u4d0409ea-d20d-4&from=paste&height=74&id=u8dd3bc39&originHeight=93&originWidth=591&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=9779&status=done&style=none&taskId=u8ca6c926-8137-456f-acc7-eeef95147c0&title=&width=472.8)\n### 推送镜像到harbor\n执行如下脚本前请先根据操作环境修改变量。\n```bash\nset -o errexit\n\nTAG=victoria\nKOLLA_NAMESPECE=kolla\nUOS_REGISTRY=harbor.chinauos.com\nUOS_NAMESPACE=kolla-ustack-v-x86\n#ren-test项目中的镜像为基础镜像，kolla-ustack-v-x86项目中的镜像为持续更新的研发镜像。\n\nKOLLA_SOURCE=$(docker images | awk /kolla/'{print $1}'| xargs -I {} echo -e {}':'${TAG})\nfor i in ${KOLLA_SOURCE}; do\n        DOCKER_IMAGE_LINE=$(echo $i | tr ' ' '\\n')\n        UOS_TEST=${DOCKER_IMAGE_LINE#${KOLLA_NAMESPECE}}\n        UOS_TAG=${UOS_REGISTRY}/${UOS_NAMESPACE}${UOS_TEST}\n        echo ${UOS_TAG}\n        docker tag ${DOCKER_IMAGE_LINE} ${UOS_TAG}\n        docker push ${UOS_TAG}\n        docker rmi -f ${UOS_TAG}\ndone\n```\n","slug":"kolla构建镜像","published":1,"date":"2025-05-13T11:38:58.262Z","updated":"2025-05-13T11:38:58.262Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cmamklq71001bfkd1he1jeh8l","content":"<pre><code>kolla提供编译镜像的功能，kolla-ansible具有部署openstack的功能。\n</code></pre>\n<h3 id=\"系统配置\"><a href=\"#系统配置\" class=\"headerlink\" title=\"系统配置\"></a>系统配置</h3><h4 id=\"关闭防火墙\"><a href=\"#关闭防火墙\" class=\"headerlink\" title=\"关闭防火墙\"></a>关闭防火墙</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl <span class=\"built_in\">disable</span> --now firewalld</span><br></pre></td></tr></table></figure>\n<h4 id=\"配置域名\"><a href=\"#配置域名\" class=\"headerlink\" title=\"配置域名\"></a>配置域名</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#增加域名解析</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;10.30.38.116 harbor.chinauos.com&quot;</span> &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure>\n<p>注：<br>“registry.uniontech.com”和“harbor.chinauos.com” 是两个容器镜像仓库。<br>其中“harbor.chinauos.com”是对外仓库，“registry.uniontech.com”是研发仓库。</p>\n<h3 id=\"搭建编译环境\"><a href=\"#搭建编译环境\" class=\"headerlink\" title=\"搭建编译环境\"></a>搭建编译环境</h3><h4 id=\"安装配置docker\"><a href=\"#安装配置docker\" class=\"headerlink\" title=\"安装配置docker\"></a>安装配置docker</h4><p>安装docker和openstack-kolla包</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install moby-engine  git -y python3-devel</span><br></pre></td></tr></table></figure>\n<p>配置docker</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl <span class=\"built_in\">enable</span> --now  docker.service</span><br></pre></td></tr></table></figure>\n<p>修改docker配置文件:&#x2F;etc&#x2F;docker&#x2F;daemon.json</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;insecure-registries&quot;</span>: [</span><br><span class=\"line\">        <span class=\"string\">&quot;registry.uniontech.com&quot;</span>, <span class=\"string\">&quot;harbor.chinauos.com&quot;</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注：配置docker拉取容器镜像的仓库，配置此域名之后要配置相应的域名。<br>“registry.uniontech.com”账户和密码：<br>“harbor.chinauos.com”账户和密码：<br>为docker配置不安全仓库之后重新启动docker服务。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl daemon-reload </span><br><span class=\"line\">systemctl restart docker.service </span><br></pre></td></tr></table></figure>\n<h4 id=\"安装openstack-kolla\"><a href=\"#安装openstack-kolla\" class=\"headerlink\" title=\"安装openstack-kolla\"></a>安装openstack-kolla</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#拉起openstack-kolla源码</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> -b victoria-source \\</span><br><span class=\"line\"><span class=\"string\">&quot;http://gerrit-dev.uniontech.com/openstack/openstack-kolla&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#切换到响应的分支安装</span></span><br><span class=\"line\"><span class=\"comment\">#使用pip3安装/卸载源码</span></span><br><span class=\"line\">pip3 install openstack-kolla/</span><br><span class=\"line\">pip3 uninstall openstack-kolla/</span><br></pre></td></tr></table></figure>\n<p>注：</p>\n<ol>\n<li>安装后所有容器镜像的Dockerfile都在&#x2F;usr&#x2F;local&#x2F;share&#x2F;kolla&#x2F;docker对应名称目录下。</li>\n<li>若需要修改容器镜像找到对应的目录，更改模板文件即可。</li>\n<li>更新sql文件，请将sql文件重新命名为ustack.sql.j2。</li>\n</ol>\n<h4 id=\"登录harbor仓库\"><a href=\"#登录harbor仓库\" class=\"headerlink\" title=\"登录harbor仓库\"></a>登录harbor仓库</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker login harbor.chinauos.com</span><br></pre></td></tr></table></figure>\n<p>Username: ustack<br>Password: Ustack12#$<br>参考：<a href=\"https://ivanzz1001.github.io/records/post/docker/2018/04/11/docker-harbor-uage\">https://ivanzz1001.github.io/records/post/docker/2018/04/11/docker-harbor-uage</a><br>harbor是镜像管理平台，登录用户之后，则可根据用户角色权限操作镜像。</p>\n<h3 id=\"编译镜像\"><a href=\"#编译镜像\" class=\"headerlink\" title=\"编译镜像\"></a>编译镜像</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kolla-build \\</span><br><span class=\"line\">--base-image harbor.chinauos.com/ren-test/uniontechos-server-20-1060a-x86  \\</span><br><span class=\"line\">--config-file kolla-build.conf \\</span><br><span class=\"line\">-t <span class=\"built_in\">source</span> \\</span><br><span class=\"line\">--base uniontechos \\</span><br><span class=\"line\">--tag victoria \\</span><br><span class=\"line\">nova</span><br></pre></td></tr></table></figure>\n<p>参数说明:<br>–base-image 使用指定的基础镜像<br>–base 构建uniontechos镜像<br>–tag 构建镜像生成镜像的tag<br>–base-image 根据不架构修改-x86&#x2F;-arm<br>–config-file 指定特定的源码地址构建镜像。<br>–template-only 不制作镜像，仅仅生成 Dockerfile文件。<br>注：openstack上搭建环境时，建议采用外部网络直连的方式配置虚拟机网络，采用xlan网络配置浮动ip时，在构建容器镜像时会导致安装依赖失败，拉取不到容器里的依赖，亲测有效。<br>注：部分参数可以使用kolla-build –help查询，image和tag等变量信息可以登录harbor进行查看。例如当前镜像在harbor.chinauos.com域名下的ren-test项目下的uniontechos-server-20-1060a-x86镜像。点击镜像即可查询tag名称。<br>kolla-build.conf 格式参考如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[nova-base]</span><br><span class=\"line\"><span class=\"built_in\">type</span> = git</span><br><span class=\"line\">location = http://gerrit-dev.uniontech.com/openstack/openstack-nova</span><br><span class=\"line\">reference = victoria-source</span><br><span class=\"line\"></span><br><span class=\"line\">[cinder-base]</span><br><span class=\"line\"><span class=\"built_in\">type</span> = git</span><br><span class=\"line\">location = http://gerrit-dev.uniontech.com/openstack/openstack-cinder</span><br><span class=\"line\">reference = victoria-source</span><br></pre></td></tr></table></figure>\n<p>容器镜像仓库配置。可根据自身想要的安装包，配置源地址，此处的源地址是指构建容器镜像时安装依赖的rpm包的仓库地址。<br>构建镜像 x86的源为:&#x2F;usr&#x2F;local&#x2F;share&#x2F;kolla&#x2F;docker&#x2F;base&#x2F;UniontechOS.repo</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[UniontechOS-<span class=\"variable\">$releasever</span>-AppStream]</span><br><span class=\"line\">name = UniontechOS <span class=\"variable\">$releasever</span> AppStream</span><br><span class=\"line\"><span class=\"comment\">#baseurl = https://cdimage.uniontech.com/server-dev/1060/a/release/compose/AppStream/x86_64/os/</span></span><br><span class=\"line\">baseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/AppStream/x86_64/os/</span><br><span class=\"line\">enabled = 1</span><br><span class=\"line\">gpgcheck = 0</span><br><span class=\"line\">module_hotfixes=<span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">[UniontechOS-<span class=\"variable\">$releasever</span>-BaseOS]</span><br><span class=\"line\">name = UniontechOS <span class=\"variable\">$releasever</span> BaseOS</span><br><span class=\"line\"><span class=\"comment\">#baseurl = http://10.30.38.131/kojifiles/repos/kongzi-build/latest/x86_64/</span></span><br><span class=\"line\">baseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/BaseOS/x86_64/os/</span><br><span class=\"line\"><span class=\"comment\">#baseurl = https://cdimage.uniontech.com/server-dev/1060/a/release/compose/BaseOS/x86_64/os/</span></span><br><span class=\"line\">enabled = 1</span><br><span class=\"line\">gpgcheck = 0</span><br><span class=\"line\">module_hotfixes=<span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">[UnionTechOS-<span class=\"variable\">$releasever</span>-openstack]</span><br><span class=\"line\">name = UnionTechOS <span class=\"variable\">$releasever</span> openstack</span><br><span class=\"line\">baseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/OpenStack-Victoria/x86_64/os/</span><br><span class=\"line\"><span class=\"comment\">#baseurl = http://10.30.38.131/kojifiles/repos/kongzi-openstack-victoria-build/latest/x86_64/</span></span><br><span class=\"line\">enabled = 1</span><br><span class=\"line\">gpgcheck = 0</span><br><span class=\"line\"></span><br><span class=\"line\">[ceph]</span><br><span class=\"line\">name=ceph</span><br><span class=\"line\">baseurl=https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/Storage/x86_64/</span><br><span class=\"line\">gpgcheck=0</span><br><span class=\"line\">enabled=0</span><br><span class=\"line\">module_hotfixes=<span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">[Tools]</span><br><span class=\"line\">name = Tools</span><br><span class=\"line\">baseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/PowerTools/x86_64/os/</span><br><span class=\"line\">enabled = 0</span><br><span class=\"line\">gpgcheck = 0</span><br><span class=\"line\"></span><br><span class=\"line\">[PLUS]</span><br><span class=\"line\">name = plus</span><br><span class=\"line\">baseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/Plus/x86_64/os/</span><br><span class=\"line\">enabled = 0</span><br><span class=\"line\">gpgcheck = 0</span><br></pre></td></tr></table></figure>\n<p>构建镜像 arm的源为:&#x2F;usr&#x2F;local&#x2F;share&#x2F;kolla&#x2F;docker&#x2F;base&#x2F;Ustack_aarch64.repo</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[UniontechOS-<span class=\"variable\">$releasever</span>-AppStream]</span><br><span class=\"line\">name = UniontechOS <span class=\"variable\">$releasever</span> AppStream</span><br><span class=\"line\"><span class=\"comment\">#https://cdimage.uniontech.com/server-dev/1060/e/release-0606/arm64/OS/</span></span><br><span class=\"line\">baseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/AppStream/aarch64/os/</span><br><span class=\"line\"><span class=\"comment\">#baseurl = http://pools.uniontech.com/server-enterprise-c/kongzi/1020/AppStream/x86_64/</span></span><br><span class=\"line\">enabled = 1</span><br><span class=\"line\">gpgcheck = 0</span><br><span class=\"line\"><span class=\"comment\">#module_hotfixes=true</span></span><br><span class=\"line\"></span><br><span class=\"line\">[UniontechOS-<span class=\"variable\">$releasever</span>-BaseOS]</span><br><span class=\"line\">name = UniontechOS <span class=\"variable\">$releasever</span> BaseOS</span><br><span class=\"line\"><span class=\"comment\">#baseurl = https://cdimage.uniontech.com/server-dev/1060/e/release-0606/arm64/everything/</span></span><br><span class=\"line\">baserurl = http://10.30.38.131/kojifiles/repos/kongzi-build/latest/aarch64/</span><br><span class=\"line\"><span class=\"comment\">#baseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/BaseOS/aarch64/os/</span></span><br><span class=\"line\">enabled = 1</span><br><span class=\"line\">gpgcheck = 0</span><br><span class=\"line\"><span class=\"comment\">#module_hotfixes=true</span></span><br><span class=\"line\"></span><br><span class=\"line\">[UnionTechOS-<span class=\"variable\">$releasever</span>-openstack]</span><br><span class=\"line\">name = UnionTechOS <span class=\"variable\">$releasever</span> openstack</span><br><span class=\"line\"><span class=\"comment\">#baseurl = https://cdimage.uniontech.com/server-dev/1060/e/release-0606/arm64/OpenStack-V/</span></span><br><span class=\"line\">baseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/OpenStack-Victoria/aarch64/os/</span><br><span class=\"line\">enabled = 1</span><br><span class=\"line\">gpgcheck = 0</span><br><span class=\"line\"></span><br><span class=\"line\">[ceph]</span><br><span class=\"line\">name=ceph</span><br><span class=\"line\">baseurl=https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/Storage/aarch64/</span><br><span class=\"line\">gpgcheck=0</span><br><span class=\"line\">enabled=1</span><br><span class=\"line\">module_hotfixes=<span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">[Tools]</span><br><span class=\"line\">name = Tools</span><br><span class=\"line\">baseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/PowerTools/aarch64/os/</span><br><span class=\"line\">enabled = 1</span><br><span class=\"line\">gpgcheck = 0</span><br><span class=\"line\"></span><br><span class=\"line\">[PLUS]</span><br><span class=\"line\">name = plus</span><br><span class=\"line\">baseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/Plus/aarch64/os/</span><br><span class=\"line\">enabled = 1</span><br><span class=\"line\">gpgcheck = 0</span><br></pre></td></tr></table></figure>\n<p>注：制作ustack-web需要修改start.sh 如下:&#x2F;usr&#x2F;local&#x2F;share&#x2F;kolla&#x2F;docker&#x2F;base&#x2F;start.sh<br><img src=\"https://cdn.nlark.com/yuque/0/2023/png/26098815/1695277271879-efa44824-2de4-48af-86b1-8d348c42d10c.png#averageHue=%2314172a&clientId=u4d0409ea-d20d-4&from=paste&height=74&id=u8dd3bc39&originHeight=93&originWidth=591&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=9779&status=done&style=none&taskId=u8ca6c926-8137-456f-acc7-eeef95147c0&title=&width=472.8\" alt=\"image.png\"></p>\n<h3 id=\"推送镜像到harbor\"><a href=\"#推送镜像到harbor\" class=\"headerlink\" title=\"推送镜像到harbor\"></a>推送镜像到harbor</h3><p>执行如下脚本前请先根据操作环境修改变量。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">set</span> -o errexit</span><br><span class=\"line\"></span><br><span class=\"line\">TAG=victoria</span><br><span class=\"line\">KOLLA_NAMESPECE=kolla</span><br><span class=\"line\">UOS_REGISTRY=harbor.chinauos.com</span><br><span class=\"line\">UOS_NAMESPACE=kolla-ustack-v-x86</span><br><span class=\"line\"><span class=\"comment\">#ren-test项目中的镜像为基础镜像，kolla-ustack-v-x86项目中的镜像为持续更新的研发镜像。</span></span><br><span class=\"line\"></span><br><span class=\"line\">KOLLA_SOURCE=$(docker images | awk /kolla/<span class=\"string\">&#x27;&#123;print $1&#125;&#x27;</span>| xargs -I &#123;&#125; <span class=\"built_in\">echo</span> -e &#123;&#125;<span class=\"string\">&#x27;:&#x27;</span><span class=\"variable\">$&#123;TAG&#125;</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"variable\">$&#123;KOLLA_SOURCE&#125;</span>; <span class=\"keyword\">do</span></span><br><span class=\"line\">        DOCKER_IMAGE_LINE=$(<span class=\"built_in\">echo</span> <span class=\"variable\">$i</span> | <span class=\"built_in\">tr</span> <span class=\"string\">&#x27; &#x27;</span> <span class=\"string\">&#x27;\\n&#x27;</span>)</span><br><span class=\"line\">        UOS_TEST=<span class=\"variable\">$&#123;DOCKER_IMAGE_LINE#<span class=\"variable\">$&#123;KOLLA_NAMESPECE&#125;</span>&#125;</span></span><br><span class=\"line\">        UOS_TAG=<span class=\"variable\">$&#123;UOS_REGISTRY&#125;</span>/<span class=\"variable\">$&#123;UOS_NAMESPACE&#125;</span><span class=\"variable\">$&#123;UOS_TEST&#125;</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;UOS_TAG&#125;</span></span><br><span class=\"line\">        docker tag <span class=\"variable\">$&#123;DOCKER_IMAGE_LINE&#125;</span> <span class=\"variable\">$&#123;UOS_TAG&#125;</span></span><br><span class=\"line\">        docker push <span class=\"variable\">$&#123;UOS_TAG&#125;</span></span><br><span class=\"line\">        docker rmi -f <span class=\"variable\">$&#123;UOS_TAG&#125;</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<pre><code>kolla提供编译镜像的功能，kolla-ansible具有部署openstack的功能。\n</code></pre>\n<h3 id=\"系统配置\"><a href=\"#系统配置\" class=\"headerlink\" title=\"系统配置\"></a>系统配置</h3><h4 id=\"关闭防火墙\"><a href=\"#关闭防火墙\" class=\"headerlink\" title=\"关闭防火墙\"></a>关闭防火墙</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl <span class=\"built_in\">disable</span> --now firewalld</span><br></pre></td></tr></table></figure>\n<h4 id=\"配置域名\"><a href=\"#配置域名\" class=\"headerlink\" title=\"配置域名\"></a>配置域名</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#增加域名解析</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;10.30.38.116 harbor.chinauos.com&quot;</span> &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure>\n<p>注：<br>“registry.uniontech.com”和“harbor.chinauos.com” 是两个容器镜像仓库。<br>其中“harbor.chinauos.com”是对外仓库，“registry.uniontech.com”是研发仓库。</p>\n<h3 id=\"搭建编译环境\"><a href=\"#搭建编译环境\" class=\"headerlink\" title=\"搭建编译环境\"></a>搭建编译环境</h3><h4 id=\"安装配置docker\"><a href=\"#安装配置docker\" class=\"headerlink\" title=\"安装配置docker\"></a>安装配置docker</h4><p>安装docker和openstack-kolla包</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install moby-engine  git -y python3-devel</span><br></pre></td></tr></table></figure>\n<p>配置docker</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl <span class=\"built_in\">enable</span> --now  docker.service</span><br></pre></td></tr></table></figure>\n<p>修改docker配置文件:&#x2F;etc&#x2F;docker&#x2F;daemon.json</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;insecure-registries&quot;</span>: [</span><br><span class=\"line\">        <span class=\"string\">&quot;registry.uniontech.com&quot;</span>, <span class=\"string\">&quot;harbor.chinauos.com&quot;</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注：配置docker拉取容器镜像的仓库，配置此域名之后要配置相应的域名。<br>“registry.uniontech.com”账户和密码：<br>“harbor.chinauos.com”账户和密码：<br>为docker配置不安全仓库之后重新启动docker服务。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl daemon-reload </span><br><span class=\"line\">systemctl restart docker.service </span><br></pre></td></tr></table></figure>\n<h4 id=\"安装openstack-kolla\"><a href=\"#安装openstack-kolla\" class=\"headerlink\" title=\"安装openstack-kolla\"></a>安装openstack-kolla</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#拉起openstack-kolla源码</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> -b victoria-source \\</span><br><span class=\"line\"><span class=\"string\">&quot;http://gerrit-dev.uniontech.com/openstack/openstack-kolla&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#切换到响应的分支安装</span></span><br><span class=\"line\"><span class=\"comment\">#使用pip3安装/卸载源码</span></span><br><span class=\"line\">pip3 install openstack-kolla/</span><br><span class=\"line\">pip3 uninstall openstack-kolla/</span><br></pre></td></tr></table></figure>\n<p>注：</p>\n<ol>\n<li>安装后所有容器镜像的Dockerfile都在&#x2F;usr&#x2F;local&#x2F;share&#x2F;kolla&#x2F;docker对应名称目录下。</li>\n<li>若需要修改容器镜像找到对应的目录，更改模板文件即可。</li>\n<li>更新sql文件，请将sql文件重新命名为ustack.sql.j2。</li>\n</ol>\n<h4 id=\"登录harbor仓库\"><a href=\"#登录harbor仓库\" class=\"headerlink\" title=\"登录harbor仓库\"></a>登录harbor仓库</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker login harbor.chinauos.com</span><br></pre></td></tr></table></figure>\n<p>Username: ustack<br>Password: Ustack12#$<br>参考：<a href=\"https://ivanzz1001.github.io/records/post/docker/2018/04/11/docker-harbor-uage\">https://ivanzz1001.github.io/records/post/docker/2018/04/11/docker-harbor-uage</a><br>harbor是镜像管理平台，登录用户之后，则可根据用户角色权限操作镜像。</p>\n<h3 id=\"编译镜像\"><a href=\"#编译镜像\" class=\"headerlink\" title=\"编译镜像\"></a>编译镜像</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kolla-build \\</span><br><span class=\"line\">--base-image harbor.chinauos.com/ren-test/uniontechos-server-20-1060a-x86  \\</span><br><span class=\"line\">--config-file kolla-build.conf \\</span><br><span class=\"line\">-t <span class=\"built_in\">source</span> \\</span><br><span class=\"line\">--base uniontechos \\</span><br><span class=\"line\">--tag victoria \\</span><br><span class=\"line\">nova</span><br></pre></td></tr></table></figure>\n<p>参数说明:<br>–base-image 使用指定的基础镜像<br>–base 构建uniontechos镜像<br>–tag 构建镜像生成镜像的tag<br>–base-image 根据不架构修改-x86&#x2F;-arm<br>–config-file 指定特定的源码地址构建镜像。<br>–template-only 不制作镜像，仅仅生成 Dockerfile文件。<br>注：openstack上搭建环境时，建议采用外部网络直连的方式配置虚拟机网络，采用xlan网络配置浮动ip时，在构建容器镜像时会导致安装依赖失败，拉取不到容器里的依赖，亲测有效。<br>注：部分参数可以使用kolla-build –help查询，image和tag等变量信息可以登录harbor进行查看。例如当前镜像在harbor.chinauos.com域名下的ren-test项目下的uniontechos-server-20-1060a-x86镜像。点击镜像即可查询tag名称。<br>kolla-build.conf 格式参考如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[nova-base]</span><br><span class=\"line\"><span class=\"built_in\">type</span> = git</span><br><span class=\"line\">location = http://gerrit-dev.uniontech.com/openstack/openstack-nova</span><br><span class=\"line\">reference = victoria-source</span><br><span class=\"line\"></span><br><span class=\"line\">[cinder-base]</span><br><span class=\"line\"><span class=\"built_in\">type</span> = git</span><br><span class=\"line\">location = http://gerrit-dev.uniontech.com/openstack/openstack-cinder</span><br><span class=\"line\">reference = victoria-source</span><br></pre></td></tr></table></figure>\n<p>容器镜像仓库配置。可根据自身想要的安装包，配置源地址，此处的源地址是指构建容器镜像时安装依赖的rpm包的仓库地址。<br>构建镜像 x86的源为:&#x2F;usr&#x2F;local&#x2F;share&#x2F;kolla&#x2F;docker&#x2F;base&#x2F;UniontechOS.repo</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[UniontechOS-<span class=\"variable\">$releasever</span>-AppStream]</span><br><span class=\"line\">name = UniontechOS <span class=\"variable\">$releasever</span> AppStream</span><br><span class=\"line\"><span class=\"comment\">#baseurl = https://cdimage.uniontech.com/server-dev/1060/a/release/compose/AppStream/x86_64/os/</span></span><br><span class=\"line\">baseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/AppStream/x86_64/os/</span><br><span class=\"line\">enabled = 1</span><br><span class=\"line\">gpgcheck = 0</span><br><span class=\"line\">module_hotfixes=<span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">[UniontechOS-<span class=\"variable\">$releasever</span>-BaseOS]</span><br><span class=\"line\">name = UniontechOS <span class=\"variable\">$releasever</span> BaseOS</span><br><span class=\"line\"><span class=\"comment\">#baseurl = http://10.30.38.131/kojifiles/repos/kongzi-build/latest/x86_64/</span></span><br><span class=\"line\">baseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/BaseOS/x86_64/os/</span><br><span class=\"line\"><span class=\"comment\">#baseurl = https://cdimage.uniontech.com/server-dev/1060/a/release/compose/BaseOS/x86_64/os/</span></span><br><span class=\"line\">enabled = 1</span><br><span class=\"line\">gpgcheck = 0</span><br><span class=\"line\">module_hotfixes=<span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">[UnionTechOS-<span class=\"variable\">$releasever</span>-openstack]</span><br><span class=\"line\">name = UnionTechOS <span class=\"variable\">$releasever</span> openstack</span><br><span class=\"line\">baseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/OpenStack-Victoria/x86_64/os/</span><br><span class=\"line\"><span class=\"comment\">#baseurl = http://10.30.38.131/kojifiles/repos/kongzi-openstack-victoria-build/latest/x86_64/</span></span><br><span class=\"line\">enabled = 1</span><br><span class=\"line\">gpgcheck = 0</span><br><span class=\"line\"></span><br><span class=\"line\">[ceph]</span><br><span class=\"line\">name=ceph</span><br><span class=\"line\">baseurl=https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/Storage/x86_64/</span><br><span class=\"line\">gpgcheck=0</span><br><span class=\"line\">enabled=0</span><br><span class=\"line\">module_hotfixes=<span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">[Tools]</span><br><span class=\"line\">name = Tools</span><br><span class=\"line\">baseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/PowerTools/x86_64/os/</span><br><span class=\"line\">enabled = 0</span><br><span class=\"line\">gpgcheck = 0</span><br><span class=\"line\"></span><br><span class=\"line\">[PLUS]</span><br><span class=\"line\">name = plus</span><br><span class=\"line\">baseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/Plus/x86_64/os/</span><br><span class=\"line\">enabled = 0</span><br><span class=\"line\">gpgcheck = 0</span><br></pre></td></tr></table></figure>\n<p>构建镜像 arm的源为:&#x2F;usr&#x2F;local&#x2F;share&#x2F;kolla&#x2F;docker&#x2F;base&#x2F;Ustack_aarch64.repo</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[UniontechOS-<span class=\"variable\">$releasever</span>-AppStream]</span><br><span class=\"line\">name = UniontechOS <span class=\"variable\">$releasever</span> AppStream</span><br><span class=\"line\"><span class=\"comment\">#https://cdimage.uniontech.com/server-dev/1060/e/release-0606/arm64/OS/</span></span><br><span class=\"line\">baseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/AppStream/aarch64/os/</span><br><span class=\"line\"><span class=\"comment\">#baseurl = http://pools.uniontech.com/server-enterprise-c/kongzi/1020/AppStream/x86_64/</span></span><br><span class=\"line\">enabled = 1</span><br><span class=\"line\">gpgcheck = 0</span><br><span class=\"line\"><span class=\"comment\">#module_hotfixes=true</span></span><br><span class=\"line\"></span><br><span class=\"line\">[UniontechOS-<span class=\"variable\">$releasever</span>-BaseOS]</span><br><span class=\"line\">name = UniontechOS <span class=\"variable\">$releasever</span> BaseOS</span><br><span class=\"line\"><span class=\"comment\">#baseurl = https://cdimage.uniontech.com/server-dev/1060/e/release-0606/arm64/everything/</span></span><br><span class=\"line\">baserurl = http://10.30.38.131/kojifiles/repos/kongzi-build/latest/aarch64/</span><br><span class=\"line\"><span class=\"comment\">#baseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/BaseOS/aarch64/os/</span></span><br><span class=\"line\">enabled = 1</span><br><span class=\"line\">gpgcheck = 0</span><br><span class=\"line\"><span class=\"comment\">#module_hotfixes=true</span></span><br><span class=\"line\"></span><br><span class=\"line\">[UnionTechOS-<span class=\"variable\">$releasever</span>-openstack]</span><br><span class=\"line\">name = UnionTechOS <span class=\"variable\">$releasever</span> openstack</span><br><span class=\"line\"><span class=\"comment\">#baseurl = https://cdimage.uniontech.com/server-dev/1060/e/release-0606/arm64/OpenStack-V/</span></span><br><span class=\"line\">baseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/OpenStack-Victoria/aarch64/os/</span><br><span class=\"line\">enabled = 1</span><br><span class=\"line\">gpgcheck = 0</span><br><span class=\"line\"></span><br><span class=\"line\">[ceph]</span><br><span class=\"line\">name=ceph</span><br><span class=\"line\">baseurl=https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/Storage/aarch64/</span><br><span class=\"line\">gpgcheck=0</span><br><span class=\"line\">enabled=1</span><br><span class=\"line\">module_hotfixes=<span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">[Tools]</span><br><span class=\"line\">name = Tools</span><br><span class=\"line\">baseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/PowerTools/aarch64/os/</span><br><span class=\"line\">enabled = 1</span><br><span class=\"line\">gpgcheck = 0</span><br><span class=\"line\"></span><br><span class=\"line\">[PLUS]</span><br><span class=\"line\">name = plus</span><br><span class=\"line\">baseurl = https://cdimage.uniontech.com/server-dev/1060/a/RC/RC3/compose/Plus/aarch64/os/</span><br><span class=\"line\">enabled = 1</span><br><span class=\"line\">gpgcheck = 0</span><br></pre></td></tr></table></figure>\n<p>注：制作ustack-web需要修改start.sh 如下:&#x2F;usr&#x2F;local&#x2F;share&#x2F;kolla&#x2F;docker&#x2F;base&#x2F;start.sh<br><img src=\"https://cdn.nlark.com/yuque/0/2023/png/26098815/1695277271879-efa44824-2de4-48af-86b1-8d348c42d10c.png#averageHue=%2314172a&clientId=u4d0409ea-d20d-4&from=paste&height=74&id=u8dd3bc39&originHeight=93&originWidth=591&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=9779&status=done&style=none&taskId=u8ca6c926-8137-456f-acc7-eeef95147c0&title=&width=472.8\" alt=\"image.png\"></p>\n<h3 id=\"推送镜像到harbor\"><a href=\"#推送镜像到harbor\" class=\"headerlink\" title=\"推送镜像到harbor\"></a>推送镜像到harbor</h3><p>执行如下脚本前请先根据操作环境修改变量。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">set</span> -o errexit</span><br><span class=\"line\"></span><br><span class=\"line\">TAG=victoria</span><br><span class=\"line\">KOLLA_NAMESPECE=kolla</span><br><span class=\"line\">UOS_REGISTRY=harbor.chinauos.com</span><br><span class=\"line\">UOS_NAMESPACE=kolla-ustack-v-x86</span><br><span class=\"line\"><span class=\"comment\">#ren-test项目中的镜像为基础镜像，kolla-ustack-v-x86项目中的镜像为持续更新的研发镜像。</span></span><br><span class=\"line\"></span><br><span class=\"line\">KOLLA_SOURCE=$(docker images | awk /kolla/<span class=\"string\">&#x27;&#123;print $1&#125;&#x27;</span>| xargs -I &#123;&#125; <span class=\"built_in\">echo</span> -e &#123;&#125;<span class=\"string\">&#x27;:&#x27;</span><span class=\"variable\">$&#123;TAG&#125;</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"variable\">$&#123;KOLLA_SOURCE&#125;</span>; <span class=\"keyword\">do</span></span><br><span class=\"line\">        DOCKER_IMAGE_LINE=$(<span class=\"built_in\">echo</span> <span class=\"variable\">$i</span> | <span class=\"built_in\">tr</span> <span class=\"string\">&#x27; &#x27;</span> <span class=\"string\">&#x27;\\n&#x27;</span>)</span><br><span class=\"line\">        UOS_TEST=<span class=\"variable\">$&#123;DOCKER_IMAGE_LINE#<span class=\"variable\">$&#123;KOLLA_NAMESPECE&#125;</span>&#125;</span></span><br><span class=\"line\">        UOS_TAG=<span class=\"variable\">$&#123;UOS_REGISTRY&#125;</span>/<span class=\"variable\">$&#123;UOS_NAMESPACE&#125;</span><span class=\"variable\">$&#123;UOS_TEST&#125;</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;UOS_TAG&#125;</span></span><br><span class=\"line\">        docker tag <span class=\"variable\">$&#123;DOCKER_IMAGE_LINE&#125;</span> <span class=\"variable\">$&#123;UOS_TAG&#125;</span></span><br><span class=\"line\">        docker push <span class=\"variable\">$&#123;UOS_TAG&#125;</span></span><br><span class=\"line\">        docker rmi -f <span class=\"variable\">$&#123;UOS_TAG&#125;</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n"},{"_content":"# nova目录分析\n## nova组件：\n\n- nova-api: nova-api主要接受外部nova外部api调用。\n- nova-conductor:nova-conductor主要操作数据库。\n- nova-comoute：主要通过libvirt等下层组件操作实例。\n## nova目录详情：\n\n![](https://cdn.nlark.com/yuque/0/2023/jpeg/26098815/1697079908226-8056d8e6-9aa7-4765-a7a3-44364d039db6.jpeg)\n\n# WSGI\n# sqlalchemy\n\n# 创建数据库\n\n- nova 早期的OpenStack只有nova一个数据库，里面存放了所有的关于虚拟机的表。如instance表：存放每一个主机主机信息（后面会介绍到）；quotas表：项目配额信息 ；fixed_ips表；块存储设备表等。\n- nova_api 从nova数据库中移除的一部分全局数据表组成的数据库，如flavors、key_pairs、quotas等。noav_api的出现是为了解决大规模时消息队列和数据库瓶颈问题。\n- nova_cell0 nova_cell0数据中存放了所有创建失败的instance。虚拟机创建失败后不属于任何一个cell，那么就记录在nova_cell0中。\n\n参考：[https://hellowac.github.io/technology/python/sqlalchemy/](https://hellowac.github.io/technology/python/sqlalchemy/)\n## nova-manager ： \n查看当前数据库版本：\n![image.png](https://cdn.nlark.com/yuque/0/2023/png/26098815/1694767694502-66030176-97af-4937-a435-c5cf10c24c4c.png#averageHue=%23242424&clientId=u2abe46d4-9561-4&from=paste&height=48&id=uc1d572e7&originHeight=60&originWidth=597&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=10895&status=done&style=none&taskId=uf0ad4f28-44e0-4bda-a19a-1f139f01310&title=&width=477.6)\n注：当前数据库版本对应：nova/db/sqlalchemy/migrate_repo/versions/中文件版本\n![image.png](https://cdn.nlark.com/yuque/0/2023/png/26098815/1694767901297-19b51841-3ed4-42d7-bf3e-f40a35adac8b.png#averageHue=%23e1e4d9&clientId=u2abe46d4-9561-4&from=paste&height=57&id=u8c277543&originHeight=71&originWidth=626&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=13762&status=done&style=none&taskId=ud0c0f397-4ba8-46af-908c-535569b2c09&title=&width=500.8)\n可以使用：nova-manage db sync 同步数据库\n![image.png](https://cdn.nlark.com/yuque/0/2023/png/26098815/1694768037496-897dff96-cbf0-456b-8b07-add31b402d3a.png#averageHue=%23242424&clientId=u2abe46d4-9561-4&from=paste&height=220&id=uc0d53f1f&originHeight=275&originWidth=1870&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=70814&status=done&style=none&taskId=ud35e5ad4-0cfe-48eb-8962-9718c0d3b4c&title=&width=1496)\n同步失败，报错信息：\nERROR: Could not access cell0.\nHas the nova_api database been created?\nHas the nova_cell0 database been created?\nHas \"nova-manage api_db sync\" been run?\nHas \"nova-manage cell_v2 map_cell0\" been run?\nIs [api_database]/connection set in nova.conf?\nIs the cell0 database connection URL correct?\nError: Foreign key associated with column 'instance_actions.instance_uuid' could not find table 'instances' with which to generate a foreign key to target column 'uuid。\n参考：[https://docs.openstack.org/nova/rocky/cli/nova-manage.html](https://docs.openstack.org/nova/rocky/cli/nova-manage.html)\n分析问题：其他环境运行正常，删除新增的实体类文件之后，运行正常。\n解决问题：学习nova创建实体类并同步创建数据库。\n参考：[https://blog.csdn.net/chengqiuming/article/details/79672973](https://blog.csdn.net/chengqiuming/article/details/79672973)\n参考：[https://stackoverflow.com/questions/28047027/sqlalchemy-not-find-table-for-creating-foreign-key](https://stackoverflow.com/questions/28047027/sqlalchemy-not-find-table-for-creating-foreign-key)\n在实体类文件中添加meta.reflect()函数之后，执行nova-manage db sync ${version}成功。\n```\nnova-manage db sync 413\n```\n![image.png](https://cdn.nlark.com/yuque/0/2023/png/26098815/1695020664736-595464c3-6758-4c32-88c0-58eab95b44e7.png#averageHue=%23e6dba7&clientId=u4b9cd771-95ab-4&from=paste&height=864&id=ueca8c230&originHeight=1080&originWidth=1870&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=337902&status=done&style=none&taskId=uffc198c6-a123-471b-b581-a2d8af1a65a&title=&width=1496)\n在nova_cell0数据库创建devices数据表成功。\n![image.png](https://cdn.nlark.com/yuque/0/2023/png/26098815/1695020575978-1a79ae14-767e-4f63-8afb-3f27f7548208.png#averageHue=%23f9f9f8&clientId=u4b9cd771-95ab-4&from=paste&height=864&id=uf2b38cc2&originHeight=1080&originWidth=1920&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=146635&status=done&style=none&taskId=u1c3ea37e-3f4f-4b42-b526-5204d17ef58&title=&width=1536)\n注：nova_cell0 是不适用，用于保存失败数据。\n分析原因：nova_api和nova_conductorl中的/etc/nova/nova.conf地址不一样。为什么不一样？下回分析。\n解决方案：操作数据库的时候单独配置数据库链接数据\n```\n nova-manage db sync \\\n    --database_connection mysql+pymysql://root:secretmysql@dbserver/nova_cell0?charset=utf8\n```\n# 开发查询接口\n报错如下：\n![image.png](https://cdn.nlark.com/yuque/0/2023/png/26098815/1696926488107-53fe9b2f-b46c-478d-a67b-a900224e5c45.png#averageHue=%232c2e20&clientId=ube672ce4-aec2-4&from=paste&height=864&id=u8892f3a1&originHeight=1080&originWidth=1920&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=501052&status=done&style=none&taskId=u70a770cd-2815-4b1e-a73b-d80da7b7951&title=&width=1536)\n引入定义装饰器的类\n\n# 定时任务\n重启nova-compute立即执行定时任务。\n","source":"_posts/nova开发usb进程.md","raw":"# nova目录分析\n## nova组件：\n\n- nova-api: nova-api主要接受外部nova外部api调用。\n- nova-conductor:nova-conductor主要操作数据库。\n- nova-comoute：主要通过libvirt等下层组件操作实例。\n## nova目录详情：\n\n![](https://cdn.nlark.com/yuque/0/2023/jpeg/26098815/1697079908226-8056d8e6-9aa7-4765-a7a3-44364d039db6.jpeg)\n\n# WSGI\n# sqlalchemy\n\n# 创建数据库\n\n- nova 早期的OpenStack只有nova一个数据库，里面存放了所有的关于虚拟机的表。如instance表：存放每一个主机主机信息（后面会介绍到）；quotas表：项目配额信息 ；fixed_ips表；块存储设备表等。\n- nova_api 从nova数据库中移除的一部分全局数据表组成的数据库，如flavors、key_pairs、quotas等。noav_api的出现是为了解决大规模时消息队列和数据库瓶颈问题。\n- nova_cell0 nova_cell0数据中存放了所有创建失败的instance。虚拟机创建失败后不属于任何一个cell，那么就记录在nova_cell0中。\n\n参考：[https://hellowac.github.io/technology/python/sqlalchemy/](https://hellowac.github.io/technology/python/sqlalchemy/)\n## nova-manager ： \n查看当前数据库版本：\n![image.png](https://cdn.nlark.com/yuque/0/2023/png/26098815/1694767694502-66030176-97af-4937-a435-c5cf10c24c4c.png#averageHue=%23242424&clientId=u2abe46d4-9561-4&from=paste&height=48&id=uc1d572e7&originHeight=60&originWidth=597&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=10895&status=done&style=none&taskId=uf0ad4f28-44e0-4bda-a19a-1f139f01310&title=&width=477.6)\n注：当前数据库版本对应：nova/db/sqlalchemy/migrate_repo/versions/中文件版本\n![image.png](https://cdn.nlark.com/yuque/0/2023/png/26098815/1694767901297-19b51841-3ed4-42d7-bf3e-f40a35adac8b.png#averageHue=%23e1e4d9&clientId=u2abe46d4-9561-4&from=paste&height=57&id=u8c277543&originHeight=71&originWidth=626&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=13762&status=done&style=none&taskId=ud0c0f397-4ba8-46af-908c-535569b2c09&title=&width=500.8)\n可以使用：nova-manage db sync 同步数据库\n![image.png](https://cdn.nlark.com/yuque/0/2023/png/26098815/1694768037496-897dff96-cbf0-456b-8b07-add31b402d3a.png#averageHue=%23242424&clientId=u2abe46d4-9561-4&from=paste&height=220&id=uc0d53f1f&originHeight=275&originWidth=1870&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=70814&status=done&style=none&taskId=ud35e5ad4-0cfe-48eb-8962-9718c0d3b4c&title=&width=1496)\n同步失败，报错信息：\nERROR: Could not access cell0.\nHas the nova_api database been created?\nHas the nova_cell0 database been created?\nHas \"nova-manage api_db sync\" been run?\nHas \"nova-manage cell_v2 map_cell0\" been run?\nIs [api_database]/connection set in nova.conf?\nIs the cell0 database connection URL correct?\nError: Foreign key associated with column 'instance_actions.instance_uuid' could not find table 'instances' with which to generate a foreign key to target column 'uuid。\n参考：[https://docs.openstack.org/nova/rocky/cli/nova-manage.html](https://docs.openstack.org/nova/rocky/cli/nova-manage.html)\n分析问题：其他环境运行正常，删除新增的实体类文件之后，运行正常。\n解决问题：学习nova创建实体类并同步创建数据库。\n参考：[https://blog.csdn.net/chengqiuming/article/details/79672973](https://blog.csdn.net/chengqiuming/article/details/79672973)\n参考：[https://stackoverflow.com/questions/28047027/sqlalchemy-not-find-table-for-creating-foreign-key](https://stackoverflow.com/questions/28047027/sqlalchemy-not-find-table-for-creating-foreign-key)\n在实体类文件中添加meta.reflect()函数之后，执行nova-manage db sync ${version}成功。\n```\nnova-manage db sync 413\n```\n![image.png](https://cdn.nlark.com/yuque/0/2023/png/26098815/1695020664736-595464c3-6758-4c32-88c0-58eab95b44e7.png#averageHue=%23e6dba7&clientId=u4b9cd771-95ab-4&from=paste&height=864&id=ueca8c230&originHeight=1080&originWidth=1870&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=337902&status=done&style=none&taskId=uffc198c6-a123-471b-b581-a2d8af1a65a&title=&width=1496)\n在nova_cell0数据库创建devices数据表成功。\n![image.png](https://cdn.nlark.com/yuque/0/2023/png/26098815/1695020575978-1a79ae14-767e-4f63-8afb-3f27f7548208.png#averageHue=%23f9f9f8&clientId=u4b9cd771-95ab-4&from=paste&height=864&id=uf2b38cc2&originHeight=1080&originWidth=1920&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=146635&status=done&style=none&taskId=u1c3ea37e-3f4f-4b42-b526-5204d17ef58&title=&width=1536)\n注：nova_cell0 是不适用，用于保存失败数据。\n分析原因：nova_api和nova_conductorl中的/etc/nova/nova.conf地址不一样。为什么不一样？下回分析。\n解决方案：操作数据库的时候单独配置数据库链接数据\n```\n nova-manage db sync \\\n    --database_connection mysql+pymysql://root:secretmysql@dbserver/nova_cell0?charset=utf8\n```\n# 开发查询接口\n报错如下：\n![image.png](https://cdn.nlark.com/yuque/0/2023/png/26098815/1696926488107-53fe9b2f-b46c-478d-a67b-a900224e5c45.png#averageHue=%232c2e20&clientId=ube672ce4-aec2-4&from=paste&height=864&id=u8892f3a1&originHeight=1080&originWidth=1920&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=501052&status=done&style=none&taskId=u70a770cd-2815-4b1e-a73b-d80da7b7951&title=&width=1536)\n引入定义装饰器的类\n\n# 定时任务\n重启nova-compute立即执行定时任务。\n","slug":"nova开发usb进程","published":1,"date":"2025-05-13T11:38:58.262Z","updated":"2025-05-13T11:38:58.262Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cmamklq72001ffkd15ne73fb2","content":"<h1 id=\"nova目录分析\"><a href=\"#nova目录分析\" class=\"headerlink\" title=\"nova目录分析\"></a>nova目录分析</h1><h2 id=\"nova组件：\"><a href=\"#nova组件：\" class=\"headerlink\" title=\"nova组件：\"></a>nova组件：</h2><ul>\n<li>nova-api: nova-api主要接受外部nova外部api调用。</li>\n<li>nova-conductor:nova-conductor主要操作数据库。</li>\n<li>nova-comoute：主要通过libvirt等下层组件操作实例。</li>\n</ul>\n<h2 id=\"nova目录详情：\"><a href=\"#nova目录详情：\" class=\"headerlink\" title=\"nova目录详情：\"></a>nova目录详情：</h2><p><img src=\"https://cdn.nlark.com/yuque/0/2023/jpeg/26098815/1697079908226-8056d8e6-9aa7-4765-a7a3-44364d039db6.jpeg\"></p>\n<h1 id=\"WSGI\"><a href=\"#WSGI\" class=\"headerlink\" title=\"WSGI\"></a>WSGI</h1><h1 id=\"sqlalchemy\"><a href=\"#sqlalchemy\" class=\"headerlink\" title=\"sqlalchemy\"></a>sqlalchemy</h1><h1 id=\"创建数据库\"><a href=\"#创建数据库\" class=\"headerlink\" title=\"创建数据库\"></a>创建数据库</h1><ul>\n<li>nova 早期的OpenStack只有nova一个数据库，里面存放了所有的关于虚拟机的表。如instance表：存放每一个主机主机信息（后面会介绍到）；quotas表：项目配额信息 ；fixed_ips表；块存储设备表等。</li>\n<li>nova_api 从nova数据库中移除的一部分全局数据表组成的数据库，如flavors、key_pairs、quotas等。noav_api的出现是为了解决大规模时消息队列和数据库瓶颈问题。</li>\n<li>nova_cell0 nova_cell0数据中存放了所有创建失败的instance。虚拟机创建失败后不属于任何一个cell，那么就记录在nova_cell0中。</li>\n</ul>\n<p>参考：<a href=\"https://hellowac.github.io/technology/python/sqlalchemy/\">https://hellowac.github.io/technology/python/sqlalchemy/</a></p>\n<h2 id=\"nova-manager-：\"><a href=\"#nova-manager-：\" class=\"headerlink\" title=\"nova-manager ：\"></a>nova-manager ：</h2><p>查看当前数据库版本：<br><img src=\"https://cdn.nlark.com/yuque/0/2023/png/26098815/1694767694502-66030176-97af-4937-a435-c5cf10c24c4c.png#averageHue=%23242424&clientId=u2abe46d4-9561-4&from=paste&height=48&id=uc1d572e7&originHeight=60&originWidth=597&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=10895&status=done&style=none&taskId=uf0ad4f28-44e0-4bda-a19a-1f139f01310&title=&width=477.6\" alt=\"image.png\"><br>注：当前数据库版本对应：nova&#x2F;db&#x2F;sqlalchemy&#x2F;migrate_repo&#x2F;versions&#x2F;中文件版本<br><img src=\"https://cdn.nlark.com/yuque/0/2023/png/26098815/1694767901297-19b51841-3ed4-42d7-bf3e-f40a35adac8b.png#averageHue=%23e1e4d9&clientId=u2abe46d4-9561-4&from=paste&height=57&id=u8c277543&originHeight=71&originWidth=626&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=13762&status=done&style=none&taskId=ud0c0f397-4ba8-46af-908c-535569b2c09&title=&width=500.8\" alt=\"image.png\"><br>可以使用：nova-manage db sync 同步数据库<br><img src=\"https://cdn.nlark.com/yuque/0/2023/png/26098815/1694768037496-897dff96-cbf0-456b-8b07-add31b402d3a.png#averageHue=%23242424&clientId=u2abe46d4-9561-4&from=paste&height=220&id=uc0d53f1f&originHeight=275&originWidth=1870&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=70814&status=done&style=none&taskId=ud35e5ad4-0cfe-48eb-8962-9718c0d3b4c&title=&width=1496\" alt=\"image.png\"><br>同步失败，报错信息：<br>ERROR: Could not access cell0.<br>Has the nova_api database been created?<br>Has the nova_cell0 database been created?<br>Has “nova-manage api_db sync” been run?<br>Has “nova-manage cell_v2 map_cell0” been run?<br>Is [api_database]&#x2F;connection set in nova.conf?<br>Is the cell0 database connection URL correct?<br>Error: Foreign key associated with column ‘instance_actions.instance_uuid’ could not find table ‘instances’ with which to generate a foreign key to target column ‘uuid。<br>参考：<a href=\"https://docs.openstack.org/nova/rocky/cli/nova-manage.html\">https://docs.openstack.org/nova/rocky/cli/nova-manage.html</a><br>分析问题：其他环境运行正常，删除新增的实体类文件之后，运行正常。<br>解决问题：学习nova创建实体类并同步创建数据库。<br>参考：<a href=\"https://blog.csdn.net/chengqiuming/article/details/79672973\">https://blog.csdn.net/chengqiuming/article/details/79672973</a><br>参考：<a href=\"https://stackoverflow.com/questions/28047027/sqlalchemy-not-find-table-for-creating-foreign-key\">https://stackoverflow.com/questions/28047027/sqlalchemy-not-find-table-for-creating-foreign-key</a><br>在实体类文件中添加meta.reflect()函数之后，执行nova-manage db sync ${version}成功。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nova-manage db sync 413</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/26098815/1695020664736-595464c3-6758-4c32-88c0-58eab95b44e7.png#averageHue=%23e6dba7&clientId=u4b9cd771-95ab-4&from=paste&height=864&id=ueca8c230&originHeight=1080&originWidth=1870&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=337902&status=done&style=none&taskId=uffc198c6-a123-471b-b581-a2d8af1a65a&title=&width=1496\" alt=\"image.png\"><br>在nova_cell0数据库创建devices数据表成功。<br><img src=\"https://cdn.nlark.com/yuque/0/2023/png/26098815/1695020575978-1a79ae14-767e-4f63-8afb-3f27f7548208.png#averageHue=%23f9f9f8&clientId=u4b9cd771-95ab-4&from=paste&height=864&id=uf2b38cc2&originHeight=1080&originWidth=1920&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=146635&status=done&style=none&taskId=u1c3ea37e-3f4f-4b42-b526-5204d17ef58&title=&width=1536\" alt=\"image.png\"><br>注：nova_cell0 是不适用，用于保存失败数据。<br>分析原因：nova_api和nova_conductorl中的&#x2F;etc&#x2F;nova&#x2F;nova.conf地址不一样。为什么不一样？下回分析。<br>解决方案：操作数据库的时候单独配置数据库链接数据</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nova-manage db sync \\</span><br><span class=\"line\">   --database_connection mysql+pymysql://root:secretmysql@dbserver/nova_cell0?charset=utf8</span><br></pre></td></tr></table></figure>\n<h1 id=\"开发查询接口\"><a href=\"#开发查询接口\" class=\"headerlink\" title=\"开发查询接口\"></a>开发查询接口</h1><p>报错如下：<br><img src=\"https://cdn.nlark.com/yuque/0/2023/png/26098815/1696926488107-53fe9b2f-b46c-478d-a67b-a900224e5c45.png#averageHue=%232c2e20&clientId=ube672ce4-aec2-4&from=paste&height=864&id=u8892f3a1&originHeight=1080&originWidth=1920&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=501052&status=done&style=none&taskId=u70a770cd-2815-4b1e-a73b-d80da7b7951&title=&width=1536\" alt=\"image.png\"><br>引入定义装饰器的类</p>\n<h1 id=\"定时任务\"><a href=\"#定时任务\" class=\"headerlink\" title=\"定时任务\"></a>定时任务</h1><p>重启nova-compute立即执行定时任务。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"nova目录分析\"><a href=\"#nova目录分析\" class=\"headerlink\" title=\"nova目录分析\"></a>nova目录分析</h1><h2 id=\"nova组件：\"><a href=\"#nova组件：\" class=\"headerlink\" title=\"nova组件：\"></a>nova组件：</h2><ul>\n<li>nova-api: nova-api主要接受外部nova外部api调用。</li>\n<li>nova-conductor:nova-conductor主要操作数据库。</li>\n<li>nova-comoute：主要通过libvirt等下层组件操作实例。</li>\n</ul>\n<h2 id=\"nova目录详情：\"><a href=\"#nova目录详情：\" class=\"headerlink\" title=\"nova目录详情：\"></a>nova目录详情：</h2><p><img src=\"https://cdn.nlark.com/yuque/0/2023/jpeg/26098815/1697079908226-8056d8e6-9aa7-4765-a7a3-44364d039db6.jpeg\"></p>\n<h1 id=\"WSGI\"><a href=\"#WSGI\" class=\"headerlink\" title=\"WSGI\"></a>WSGI</h1><h1 id=\"sqlalchemy\"><a href=\"#sqlalchemy\" class=\"headerlink\" title=\"sqlalchemy\"></a>sqlalchemy</h1><h1 id=\"创建数据库\"><a href=\"#创建数据库\" class=\"headerlink\" title=\"创建数据库\"></a>创建数据库</h1><ul>\n<li>nova 早期的OpenStack只有nova一个数据库，里面存放了所有的关于虚拟机的表。如instance表：存放每一个主机主机信息（后面会介绍到）；quotas表：项目配额信息 ；fixed_ips表；块存储设备表等。</li>\n<li>nova_api 从nova数据库中移除的一部分全局数据表组成的数据库，如flavors、key_pairs、quotas等。noav_api的出现是为了解决大规模时消息队列和数据库瓶颈问题。</li>\n<li>nova_cell0 nova_cell0数据中存放了所有创建失败的instance。虚拟机创建失败后不属于任何一个cell，那么就记录在nova_cell0中。</li>\n</ul>\n<p>参考：<a href=\"https://hellowac.github.io/technology/python/sqlalchemy/\">https://hellowac.github.io/technology/python/sqlalchemy/</a></p>\n<h2 id=\"nova-manager-：\"><a href=\"#nova-manager-：\" class=\"headerlink\" title=\"nova-manager ：\"></a>nova-manager ：</h2><p>查看当前数据库版本：<br><img src=\"https://cdn.nlark.com/yuque/0/2023/png/26098815/1694767694502-66030176-97af-4937-a435-c5cf10c24c4c.png#averageHue=%23242424&clientId=u2abe46d4-9561-4&from=paste&height=48&id=uc1d572e7&originHeight=60&originWidth=597&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=10895&status=done&style=none&taskId=uf0ad4f28-44e0-4bda-a19a-1f139f01310&title=&width=477.6\" alt=\"image.png\"><br>注：当前数据库版本对应：nova&#x2F;db&#x2F;sqlalchemy&#x2F;migrate_repo&#x2F;versions&#x2F;中文件版本<br><img src=\"https://cdn.nlark.com/yuque/0/2023/png/26098815/1694767901297-19b51841-3ed4-42d7-bf3e-f40a35adac8b.png#averageHue=%23e1e4d9&clientId=u2abe46d4-9561-4&from=paste&height=57&id=u8c277543&originHeight=71&originWidth=626&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=13762&status=done&style=none&taskId=ud0c0f397-4ba8-46af-908c-535569b2c09&title=&width=500.8\" alt=\"image.png\"><br>可以使用：nova-manage db sync 同步数据库<br><img src=\"https://cdn.nlark.com/yuque/0/2023/png/26098815/1694768037496-897dff96-cbf0-456b-8b07-add31b402d3a.png#averageHue=%23242424&clientId=u2abe46d4-9561-4&from=paste&height=220&id=uc0d53f1f&originHeight=275&originWidth=1870&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=70814&status=done&style=none&taskId=ud35e5ad4-0cfe-48eb-8962-9718c0d3b4c&title=&width=1496\" alt=\"image.png\"><br>同步失败，报错信息：<br>ERROR: Could not access cell0.<br>Has the nova_api database been created?<br>Has the nova_cell0 database been created?<br>Has “nova-manage api_db sync” been run?<br>Has “nova-manage cell_v2 map_cell0” been run?<br>Is [api_database]&#x2F;connection set in nova.conf?<br>Is the cell0 database connection URL correct?<br>Error: Foreign key associated with column ‘instance_actions.instance_uuid’ could not find table ‘instances’ with which to generate a foreign key to target column ‘uuid。<br>参考：<a href=\"https://docs.openstack.org/nova/rocky/cli/nova-manage.html\">https://docs.openstack.org/nova/rocky/cli/nova-manage.html</a><br>分析问题：其他环境运行正常，删除新增的实体类文件之后，运行正常。<br>解决问题：学习nova创建实体类并同步创建数据库。<br>参考：<a href=\"https://blog.csdn.net/chengqiuming/article/details/79672973\">https://blog.csdn.net/chengqiuming/article/details/79672973</a><br>参考：<a href=\"https://stackoverflow.com/questions/28047027/sqlalchemy-not-find-table-for-creating-foreign-key\">https://stackoverflow.com/questions/28047027/sqlalchemy-not-find-table-for-creating-foreign-key</a><br>在实体类文件中添加meta.reflect()函数之后，执行nova-manage db sync ${version}成功。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nova-manage db sync 413</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/26098815/1695020664736-595464c3-6758-4c32-88c0-58eab95b44e7.png#averageHue=%23e6dba7&clientId=u4b9cd771-95ab-4&from=paste&height=864&id=ueca8c230&originHeight=1080&originWidth=1870&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=337902&status=done&style=none&taskId=uffc198c6-a123-471b-b581-a2d8af1a65a&title=&width=1496\" alt=\"image.png\"><br>在nova_cell0数据库创建devices数据表成功。<br><img src=\"https://cdn.nlark.com/yuque/0/2023/png/26098815/1695020575978-1a79ae14-767e-4f63-8afb-3f27f7548208.png#averageHue=%23f9f9f8&clientId=u4b9cd771-95ab-4&from=paste&height=864&id=uf2b38cc2&originHeight=1080&originWidth=1920&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=146635&status=done&style=none&taskId=u1c3ea37e-3f4f-4b42-b526-5204d17ef58&title=&width=1536\" alt=\"image.png\"><br>注：nova_cell0 是不适用，用于保存失败数据。<br>分析原因：nova_api和nova_conductorl中的&#x2F;etc&#x2F;nova&#x2F;nova.conf地址不一样。为什么不一样？下回分析。<br>解决方案：操作数据库的时候单独配置数据库链接数据</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nova-manage db sync \\</span><br><span class=\"line\">   --database_connection mysql+pymysql://root:secretmysql@dbserver/nova_cell0?charset=utf8</span><br></pre></td></tr></table></figure>\n<h1 id=\"开发查询接口\"><a href=\"#开发查询接口\" class=\"headerlink\" title=\"开发查询接口\"></a>开发查询接口</h1><p>报错如下：<br><img src=\"https://cdn.nlark.com/yuque/0/2023/png/26098815/1696926488107-53fe9b2f-b46c-478d-a67b-a900224e5c45.png#averageHue=%232c2e20&clientId=ube672ce4-aec2-4&from=paste&height=864&id=u8892f3a1&originHeight=1080&originWidth=1920&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=501052&status=done&style=none&taskId=u70a770cd-2815-4b1e-a73b-d80da7b7951&title=&width=1536\" alt=\"image.png\"><br>引入定义装饰器的类</p>\n<h1 id=\"定时任务\"><a href=\"#定时任务\" class=\"headerlink\" title=\"定时任务\"></a>定时任务</h1><p>重启nova-compute立即执行定时任务。</p>\n"},{"title":"mock编译rpm软件包","date":"2023-12-15T02:27:28.000Z","description":"Linux mock编译rpm软件包","type":"tags","comments":1,"_content":"# mock 环境编译\n\n1、yum install mock\n\n2、新建或修改 /etc/mock/example.cfg\n\n```shell\nconfig_opts['basedir'] = '/home/'\nconfig_opts['root'] = 'example'\nconfig_opts['target_arch'] = 'x86_64'\nconfig_opts['legal_host_arches'] = ('x86_64',)\nconfig_opts['chroot_setup_cmd'] = 'install tar gcc-c++   which xz sed make bzip2 gzip gcc coreutils unzip shadow-utils diffutils cpio bash gawk rpm-build info patch util-linux findutils grep vim automake yum wget git'\n\nconfig_opts['releasever'] = '8'\n\nconfig_opts['yum.conf'] = \"\"\"\n[main]\nkeepcache=1\ndebuglevel=2\nreposdir=/dev/null\nlogfile=/var/log/yum.log\nretries=20\nobsoletes=1\ngpgcheck=0\nassumeyes=1\nsyslog_ident=mock\nsyslog_device=\nmdpolicy=group:primary\n\n# repos\n[base]\nname=base\nbaseurl = url\nenabled=1\ngpgcheck=0\nmodule_hotfixes=true\n\"\"\"\n\n```\n3、可使用root直接运行，也可创建mock用户并添加到mockbuild组中在编译\n```bash\n$ mock -r example --rebuild *src.rpm\n```\n\n4、使用root用户进入mock环境\n\n```bash\n$ cd /var/lib/mock/**\n$ chroot .\n```\n\n# rpm-build编译\n\n```bash\n#解压src包\n$ rpm -ivh -D \"_topdir `pwd`\"  /path/to/*.src.rpm\n#根据spec下载依赖\n$ yum-builddep /path/to/*.spec\n# -D \"_topdir `pwd`\" 指定编译目录，否则会在默认目录下编译\n$ rpmbuild -ba -D \"_topdir `pwd`\" /path/to/*.spec\n```\n# koji提交\n\n1 .安装koji\n\n2.修改koji配置文件\n\n3.提交rpm包\n\n# rpm module开启\n\n在repo的配置文件中添加,即可开启module模块下载\n```bash\nmodule_hotfixes = true\n```","source":"_posts/mock编译rpm软件包.md","raw":"---\ntitle: mock编译rpm软件包\ndate: 2023-12-15 10:27:28\ndescription: Linux mock编译rpm软件包\ntype: \"tags\"\ncomments: true\ncategories:\n- Learning Tools\n- Linux\n- Rpm\ntags:\n- Linux\n- Rpm\n---\n# mock 环境编译\n\n1、yum install mock\n\n2、新建或修改 /etc/mock/example.cfg\n\n```shell\nconfig_opts['basedir'] = '/home/'\nconfig_opts['root'] = 'example'\nconfig_opts['target_arch'] = 'x86_64'\nconfig_opts['legal_host_arches'] = ('x86_64',)\nconfig_opts['chroot_setup_cmd'] = 'install tar gcc-c++   which xz sed make bzip2 gzip gcc coreutils unzip shadow-utils diffutils cpio bash gawk rpm-build info patch util-linux findutils grep vim automake yum wget git'\n\nconfig_opts['releasever'] = '8'\n\nconfig_opts['yum.conf'] = \"\"\"\n[main]\nkeepcache=1\ndebuglevel=2\nreposdir=/dev/null\nlogfile=/var/log/yum.log\nretries=20\nobsoletes=1\ngpgcheck=0\nassumeyes=1\nsyslog_ident=mock\nsyslog_device=\nmdpolicy=group:primary\n\n# repos\n[base]\nname=base\nbaseurl = url\nenabled=1\ngpgcheck=0\nmodule_hotfixes=true\n\"\"\"\n\n```\n3、可使用root直接运行，也可创建mock用户并添加到mockbuild组中在编译\n```bash\n$ mock -r example --rebuild *src.rpm\n```\n\n4、使用root用户进入mock环境\n\n```bash\n$ cd /var/lib/mock/**\n$ chroot .\n```\n\n# rpm-build编译\n\n```bash\n#解压src包\n$ rpm -ivh -D \"_topdir `pwd`\"  /path/to/*.src.rpm\n#根据spec下载依赖\n$ yum-builddep /path/to/*.spec\n# -D \"_topdir `pwd`\" 指定编译目录，否则会在默认目录下编译\n$ rpmbuild -ba -D \"_topdir `pwd`\" /path/to/*.spec\n```\n# koji提交\n\n1 .安装koji\n\n2.修改koji配置文件\n\n3.提交rpm包\n\n# rpm module开启\n\n在repo的配置文件中添加,即可开启module模块下载\n```bash\nmodule_hotfixes = true\n```","slug":"mock编译rpm软件包","published":1,"updated":"2025-05-12T15:39:22.645Z","layout":"post","photos":[],"link":"","_id":"cmamklq72001ifkd1g7bp32uq","content":"<h1 id=\"mock-环境编译\"><a href=\"#mock-环境编译\" class=\"headerlink\" title=\"mock 环境编译\"></a>mock 环境编译</h1><p>1、yum install mock</p>\n<p>2、新建或修改 &#x2F;etc&#x2F;mock&#x2F;example.cfg</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config_opts[&#x27;basedir&#x27;] = &#x27;/home/&#x27;</span><br><span class=\"line\">config_opts[&#x27;root&#x27;] = &#x27;example&#x27;</span><br><span class=\"line\">config_opts[&#x27;target_arch&#x27;] = &#x27;x86_64&#x27;</span><br><span class=\"line\">config_opts[&#x27;legal_host_arches&#x27;] = (&#x27;x86_64&#x27;,)</span><br><span class=\"line\">config_opts[&#x27;chroot_setup_cmd&#x27;] = &#x27;install tar gcc-c++   which xz sed make bzip2 gzip gcc coreutils unzip shadow-utils diffutils cpio bash gawk rpm-build info patch util-linux findutils grep vim automake yum wget git&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">config_opts[&#x27;releasever&#x27;] = &#x27;8&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">config_opts[&#x27;yum.conf&#x27;] = &quot;&quot;&quot;</span><br><span class=\"line\">[main]</span><br><span class=\"line\">keepcache=1</span><br><span class=\"line\">debuglevel=2</span><br><span class=\"line\">reposdir=/dev/null</span><br><span class=\"line\">logfile=/var/log/yum.log</span><br><span class=\"line\">retries=20</span><br><span class=\"line\">obsoletes=1</span><br><span class=\"line\">gpgcheck=0</span><br><span class=\"line\">assumeyes=1</span><br><span class=\"line\">syslog_ident=mock</span><br><span class=\"line\">syslog_device=</span><br><span class=\"line\">mdpolicy=group:primary</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">repos</span></span><br><span class=\"line\">[base]</span><br><span class=\"line\">name=base</span><br><span class=\"line\">baseurl = url</span><br><span class=\"line\">enabled=1</span><br><span class=\"line\">gpgcheck=0</span><br><span class=\"line\">module_hotfixes=true</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>3、可使用root直接运行，也可创建mock用户并添加到mockbuild组中在编译</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mock -r example --rebuild *src.rpm</span><br></pre></td></tr></table></figure>\n\n<p>4、使用root用户进入mock环境</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> /var/lib/mock/**</span><br><span class=\"line\">$ <span class=\"built_in\">chroot</span> .</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"rpm-build编译\"><a href=\"#rpm-build编译\" class=\"headerlink\" title=\"rpm-build编译\"></a>rpm-build编译</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#解压src包</span></span><br><span class=\"line\">$ rpm -ivh -D <span class=\"string\">&quot;_topdir `pwd`&quot;</span>  /path/to/*.src.rpm</span><br><span class=\"line\"><span class=\"comment\">#根据spec下载依赖</span></span><br><span class=\"line\">$ yum-builddep /path/to/*.spec</span><br><span class=\"line\"><span class=\"comment\"># -D &quot;_topdir `pwd`&quot; 指定编译目录，否则会在默认目录下编译</span></span><br><span class=\"line\">$ rpmbuild -ba -D <span class=\"string\">&quot;_topdir `pwd`&quot;</span> /path/to/*.spec</span><br></pre></td></tr></table></figure>\n<h1 id=\"koji提交\"><a href=\"#koji提交\" class=\"headerlink\" title=\"koji提交\"></a>koji提交</h1><p>1 .安装koji</p>\n<p>2.修改koji配置文件</p>\n<p>3.提交rpm包</p>\n<h1 id=\"rpm-module开启\"><a href=\"#rpm-module开启\" class=\"headerlink\" title=\"rpm module开启\"></a>rpm module开启</h1><p>在repo的配置文件中添加,即可开启module模块下载</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module_hotfixes = <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"mock-环境编译\"><a href=\"#mock-环境编译\" class=\"headerlink\" title=\"mock 环境编译\"></a>mock 环境编译</h1><p>1、yum install mock</p>\n<p>2、新建或修改 &#x2F;etc&#x2F;mock&#x2F;example.cfg</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config_opts[&#x27;basedir&#x27;] = &#x27;/home/&#x27;</span><br><span class=\"line\">config_opts[&#x27;root&#x27;] = &#x27;example&#x27;</span><br><span class=\"line\">config_opts[&#x27;target_arch&#x27;] = &#x27;x86_64&#x27;</span><br><span class=\"line\">config_opts[&#x27;legal_host_arches&#x27;] = (&#x27;x86_64&#x27;,)</span><br><span class=\"line\">config_opts[&#x27;chroot_setup_cmd&#x27;] = &#x27;install tar gcc-c++   which xz sed make bzip2 gzip gcc coreutils unzip shadow-utils diffutils cpio bash gawk rpm-build info patch util-linux findutils grep vim automake yum wget git&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">config_opts[&#x27;releasever&#x27;] = &#x27;8&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">config_opts[&#x27;yum.conf&#x27;] = &quot;&quot;&quot;</span><br><span class=\"line\">[main]</span><br><span class=\"line\">keepcache=1</span><br><span class=\"line\">debuglevel=2</span><br><span class=\"line\">reposdir=/dev/null</span><br><span class=\"line\">logfile=/var/log/yum.log</span><br><span class=\"line\">retries=20</span><br><span class=\"line\">obsoletes=1</span><br><span class=\"line\">gpgcheck=0</span><br><span class=\"line\">assumeyes=1</span><br><span class=\"line\">syslog_ident=mock</span><br><span class=\"line\">syslog_device=</span><br><span class=\"line\">mdpolicy=group:primary</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">repos</span></span><br><span class=\"line\">[base]</span><br><span class=\"line\">name=base</span><br><span class=\"line\">baseurl = url</span><br><span class=\"line\">enabled=1</span><br><span class=\"line\">gpgcheck=0</span><br><span class=\"line\">module_hotfixes=true</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>3、可使用root直接运行，也可创建mock用户并添加到mockbuild组中在编译</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mock -r example --rebuild *src.rpm</span><br></pre></td></tr></table></figure>\n\n<p>4、使用root用户进入mock环境</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> /var/lib/mock/**</span><br><span class=\"line\">$ <span class=\"built_in\">chroot</span> .</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"rpm-build编译\"><a href=\"#rpm-build编译\" class=\"headerlink\" title=\"rpm-build编译\"></a>rpm-build编译</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#解压src包</span></span><br><span class=\"line\">$ rpm -ivh -D <span class=\"string\">&quot;_topdir `pwd`&quot;</span>  /path/to/*.src.rpm</span><br><span class=\"line\"><span class=\"comment\">#根据spec下载依赖</span></span><br><span class=\"line\">$ yum-builddep /path/to/*.spec</span><br><span class=\"line\"><span class=\"comment\"># -D &quot;_topdir `pwd`&quot; 指定编译目录，否则会在默认目录下编译</span></span><br><span class=\"line\">$ rpmbuild -ba -D <span class=\"string\">&quot;_topdir `pwd`&quot;</span> /path/to/*.spec</span><br></pre></td></tr></table></figure>\n<h1 id=\"koji提交\"><a href=\"#koji提交\" class=\"headerlink\" title=\"koji提交\"></a>koji提交</h1><p>1 .安装koji</p>\n<p>2.修改koji配置文件</p>\n<p>3.提交rpm包</p>\n<h1 id=\"rpm-module开启\"><a href=\"#rpm-module开启\" class=\"headerlink\" title=\"rpm module开启\"></a>rpm module开启</h1><p>在repo的配置文件中添加,即可开启module模块下载</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module_hotfixes = <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>"},{"title":"openstack操作及状态","date":"2024-07-07T02:27:28.000Z","description":"openstack操作及状态","type":"tags","comments":1,"_content":"# Server \n\nserver status 是描述虚拟机当前状态\n\nvm_state 是虚拟机稳定状态\n\ntask_state 实例当前发生的情况\n\n虚拟机稳定状态和操作的关系：https://docs.openstack.org/nova/latest/reference/vm-states.html\n\n**InstanceTaskState**\n```bash\nSCHEDULING = 'scheduling'\nBLOCK_DEVICE_MAPPING = 'block_device_mapping'\nNETWORKING = 'networking'\nSPAWNING = 'spawning'\nIMAGE_SNAPSHOT = 'image_snapshot'\nIMAGE_SNAPSHOT_PENDING = 'image_snapshot_pending'\nIMAGE_PENDING_UPLOAD = 'image_pending_upload'\nIMAGE_UPLOADING = 'image_uploading'\nIMAGE_BACKUP = 'image_backup'\nUPDATING_PASSWORD = 'updating_password'\nRESIZE_PREP = 'resize_prep'\nRESIZE_MIGRATING = 'resize_migrating'\nRESIZE_MIGRATED = 'resize_migrated'\nRESIZE_FINISH = 'resize_finish'\nRESIZE_REVERTING = 'resize_reverting'\nRESIZE_CONFIRMING = 'resize_confirming'\nREBOOTING = 'rebooting'\nREBOOT_PENDING = 'reboot_pending'\nREBOOT_STARTED = 'reboot_started'\nREBOOTING_HARD = 'rebooting_hard'\nREBOOT_PENDING_HARD = 'reboot_pending_hard'\nREBOOT_STARTED_HARD = 'reboot_started_hard'\nPAUSING = 'pausing'\nUNPAUSING = 'unpausing'\nSUSPENDING = 'suspending'\nRESUMING = 'resuming'\nPOWERING_OFF = 'powering-off'\nPOWERING_ON = 'powering-on'\nRESCUING = 'rescuing'\nUNRESCUING = 'unrescuing'\nREBUILDING = 'rebuilding'\nREBUILD_BLOCK_DEVICE_MAPPING = \"rebuild_block_device_mapping\"\nREBUILD_SPAWNING = 'rebuild_spawning'\nMIGRATING = \"migrating\"\nDELETING = 'deleting'\nSOFT_DELETING = 'soft-deleting'\nRESTORING = 'restoring'\nSHELVING = 'shelving'\nSHELVING_IMAGE_PENDING_UPLOAD = 'shelving_image_pending_upload'\nSHELVING_IMAGE_UPLOADING = 'shelving_image_uploading'\nSHELVING_OFFLOADING = 'shelving_offloading'\nUNSHELVING = 'unshelving'\n```\n**InstanceState**\n```bash\nACTIVE = 'active'\nBUILDING = 'building'\nPAUSED = 'paused'\nSUSPENDED = 'suspended'\nSTOPPED = 'stopped'\nRESCUED = 'rescued'\nRESIZED = 'resized'\nSOFT_DELETED = 'soft-delete'\nDELETED = 'deleted'\nERROR = 'error'\nSHELVED = 'shelved'\nSHELVED_OFFLOADED = 'shelved_offloaded'\n```\n**serverStatus**\n```bash\n_STATE_MAP = {\n    vm_states.ACTIVE: {\n        'default': 'ACTIVE',\n        task_states.REBOOTING: 'REBOOT',\n        task_states.REBOOT_PENDING: 'REBOOT',\n        task_states.REBOOT_STARTED: 'REBOOT',\n        task_states.REBOOTING_HARD: 'HARD_REBOOT',\n        task_states.REBOOT_PENDING_HARD: 'HARD_REBOOT',\n        task_states.REBOOT_STARTED_HARD: 'HARD_REBOOT',\n        task_states.UPDATING_PASSWORD: 'PASSWORD',\n        task_states.REBUILDING: 'REBUILD',\n        task_states.REBUILD_BLOCK_DEVICE_MAPPING: 'REBUILD',\n        task_states.REBUILD_SPAWNING: 'REBUILD',\n        task_states.MIGRATING: 'MIGRATING',\n        task_states.RESIZE_PREP: 'RESIZE',\n        task_states.RESIZE_MIGRATING: 'RESIZE',\n        task_states.RESIZE_MIGRATED: 'RESIZE',\n        task_states.RESIZE_FINISH: 'RESIZE',\n    },\n    vm_states.BUILDING: {\n        'default': 'BUILD',\n    },\n    vm_states.STOPPED: {\n        'default': 'SHUTOFF',\n        task_states.RESIZE_PREP: 'RESIZE',\n        task_states.RESIZE_MIGRATING: 'RESIZE',\n        task_states.RESIZE_MIGRATED: 'RESIZE',\n        task_states.RESIZE_FINISH: 'RESIZE',\n        task_states.REBUILDING: 'REBUILD',\n        task_states.REBUILD_BLOCK_DEVICE_MAPPING: 'REBUILD',\n        task_states.REBUILD_SPAWNING: 'REBUILD',\n    },\n    vm_states.RESIZED: {\n        'default': 'VERIFY_RESIZE',\n        # Note(maoy): the OS API spec 1.1 doesn't have CONFIRMING_RESIZE\n        # state so we comment that out for future reference only.\n        # task_states.RESIZE_CONFIRMING: 'CONFIRMING_RESIZE',\n        task_states.RESIZE_REVERTING: 'REVERT_RESIZE',\n    },\n    vm_states.PAUSED: {\n        'default': 'PAUSED',\n        task_states.MIGRATING: 'MIGRATING',\n    },\n    vm_states.SUSPENDED: {\n        'default': 'SUSPENDED',\n    },\n    vm_states.RESCUED: {\n        'default': 'RESCUE',\n    },\n    vm_states.ERROR: {\n        'default': 'ERROR',\n        task_states.REBUILDING: 'REBUILD',\n        task_states.REBUILD_BLOCK_DEVICE_MAPPING: 'REBUILD',\n        task_states.REBUILD_SPAWNING: 'REBUILD',\n    },\n    vm_states.DELETED: {\n        'default': 'DELETED',\n    },\n    vm_states.SOFT_DELETED: {\n        'default': 'SOFT_DELETED',\n    },\n    vm_states.SHELVED: {\n        'default': 'SHELVED',\n    },\n    vm_states.SHELVED_OFFLOADED: {\n        'default': 'SHELVED_OFFLOADED',\n    },\n}\n\n---------\n#整理出需要实时监控更新的中间状态\n-ACTIVE\n-SHUTOFF\n-PAUSED\n-SUSPENDED\n-DELETED\n-SOFT_DELETED\n*-VERIFY_RESIZE\n-SHELVED\n-SHELVED_OFFLOADED\n*RESCUE\n*REBOOT\n*HARD_REBOOT\n*PASSWORD\n*REBUILD\n*MIGRATING\n*RESIZE\n*BUILD\n*REVERT_RESIZE\n```\n**InstancePowerState**\n```bash\n_UNUSED = '_unused'\nNOSTATE = 'pending'\nRUNNING = 'running'\nPAUSED = 'paused'\nSHUTDOWN = 'shutdown'\nCRASHED = 'crashed'\nSUSPENDED = 'suspended'\n```\n# image\n\n镜像状态转换：https://docs.openstack.org/glance/train/user/statuses.html\n\n**image status**\n```bash\nqueued\nsaving\nuploading\nimporting\nactive\ndeactivated\nkilled\ndeleted\npending_delete\n```\ntasks status\n\n```bash\npending\nprocessing\nsuccess\nfailure\n```\n# volume\n\n**Volume statuses**\n\n```bash\n# VolumeStatus\n*CREATING = 'creating'\nAVAILABLE = 'available'\n*DELETING = 'deleting'\nERROR = 'error'\n*ERROR_DELETING = 'error_deleting'\n*ERROR_MANAGING = 'error_managing'\n*MANAGING = 'managing'\n*ATTACHING = 'attaching'\nIN_USE = 'in-use'\n*DETACHING = 'detaching'\nMAINTENANCE = 'maintenance'\n*RESTORING_BACKUP = 'restoring-backup'\n*ERROR_RESTORING = 'error_restoring'\nRESERVED = 'reserved'\n*AWAITING_TRANSFER = 'awaiting-transfer'\n*BACKING_UP = 'backing-up'\n*ERROR_BACKING_UP = 'error_backing-up'\n*ERROR_EXTENDING* = 'error_extending'\n*DOWNLOADING = 'downloading'\n*UPLOADING = 'uploading'\n*RETYPING = 'retyping'\n*EXTENDING = 'extending'\n\n# BackupStatus\n\nERROR = 'error'\nERROR_DELETING = 'error_deleting'\nCREATING = 'creating'\nAVAILABLE = 'available'\nDELETING = 'deleting'\nDELETED = 'deleted'\nRESTORING = 'restoring'\n\n# SnapshotStatus\nERROR = 'error'\nAVAILABLE = 'available'\nCREATING = 'creating'\nDELETING = 'deleting'\nDELETED = 'deleted'\nUPDATING = 'updating'\nERROR_DELETING = 'error_deleting'\nUNMANAGING = 'unmanaging'\nBACKING_UP = 'backing-up'\nRESTORING = 'restoring'\n\n# VolumeAttachStatus\nATTACHED = 'attached'\nATTACHING = 'attaching'\nDETACHED = 'detached'\nRESERVED = 'reserved'\nERROR_ATTACHING = 'error_attaching'\nERROR_DETACHING = 'error_detaching'\nDELETED = 'deleted'\n\n# VolumeMigrationStatus\nMIGRATING = 'migrating'\nERROR = 'error'\nSUCCESS = 'success'\nCOMPLETING = 'completing'\nNONE = 'none'\nSTARTING = 'starting'\n\n```\n# neutron\n```bash\nNET_STATUS_ACTIVE = 'ACTIVE'\nNET_STATUS_BUILD = 'BUILD'\nNET_STATUS_DOWN = 'DOWN'\nNET_STATUS_ERROR = 'ERROR'\n\nPORT_STATUS_ACTIVE = 'ACTIVE'\nPORT_STATUS_BUILD = 'BUILD'\nPORT_STATUS_DOWN = 'DOWN'\nPORT_STATUS_ERROR = 'ERROR'\nPORT_STATUS_NOTAPPLICABLE = 'N/A'\n\nFLOATINGIP_STATUS_ACTIVE = 'ACTIVE'\nFLOATINGIP_STATUS_DOWN = 'DOWN'\nFLOATINGIP_STATUS_ERROR = 'ERROR'\n\nROUTER_STATUS_ACTIVE = 'ACTIVE'\nROUTER_STATUS_ALLOCATING = 'ALLOCATING'\nROUTER_STATUS_ERROR = 'ERROR'\n\n```","source":"_posts/openstack操作及状态.md","raw":"---\ntitle: openstack操作及状态\ndate: 2024-07-07 10:27:28\ndescription: openstack操作及状态\ntype: \"tags\"\ncomments: true\ncategories:\n- Openstack\n- Actions\n- Status\ntags:\n- openstack\n---\n# Server \n\nserver status 是描述虚拟机当前状态\n\nvm_state 是虚拟机稳定状态\n\ntask_state 实例当前发生的情况\n\n虚拟机稳定状态和操作的关系：https://docs.openstack.org/nova/latest/reference/vm-states.html\n\n**InstanceTaskState**\n```bash\nSCHEDULING = 'scheduling'\nBLOCK_DEVICE_MAPPING = 'block_device_mapping'\nNETWORKING = 'networking'\nSPAWNING = 'spawning'\nIMAGE_SNAPSHOT = 'image_snapshot'\nIMAGE_SNAPSHOT_PENDING = 'image_snapshot_pending'\nIMAGE_PENDING_UPLOAD = 'image_pending_upload'\nIMAGE_UPLOADING = 'image_uploading'\nIMAGE_BACKUP = 'image_backup'\nUPDATING_PASSWORD = 'updating_password'\nRESIZE_PREP = 'resize_prep'\nRESIZE_MIGRATING = 'resize_migrating'\nRESIZE_MIGRATED = 'resize_migrated'\nRESIZE_FINISH = 'resize_finish'\nRESIZE_REVERTING = 'resize_reverting'\nRESIZE_CONFIRMING = 'resize_confirming'\nREBOOTING = 'rebooting'\nREBOOT_PENDING = 'reboot_pending'\nREBOOT_STARTED = 'reboot_started'\nREBOOTING_HARD = 'rebooting_hard'\nREBOOT_PENDING_HARD = 'reboot_pending_hard'\nREBOOT_STARTED_HARD = 'reboot_started_hard'\nPAUSING = 'pausing'\nUNPAUSING = 'unpausing'\nSUSPENDING = 'suspending'\nRESUMING = 'resuming'\nPOWERING_OFF = 'powering-off'\nPOWERING_ON = 'powering-on'\nRESCUING = 'rescuing'\nUNRESCUING = 'unrescuing'\nREBUILDING = 'rebuilding'\nREBUILD_BLOCK_DEVICE_MAPPING = \"rebuild_block_device_mapping\"\nREBUILD_SPAWNING = 'rebuild_spawning'\nMIGRATING = \"migrating\"\nDELETING = 'deleting'\nSOFT_DELETING = 'soft-deleting'\nRESTORING = 'restoring'\nSHELVING = 'shelving'\nSHELVING_IMAGE_PENDING_UPLOAD = 'shelving_image_pending_upload'\nSHELVING_IMAGE_UPLOADING = 'shelving_image_uploading'\nSHELVING_OFFLOADING = 'shelving_offloading'\nUNSHELVING = 'unshelving'\n```\n**InstanceState**\n```bash\nACTIVE = 'active'\nBUILDING = 'building'\nPAUSED = 'paused'\nSUSPENDED = 'suspended'\nSTOPPED = 'stopped'\nRESCUED = 'rescued'\nRESIZED = 'resized'\nSOFT_DELETED = 'soft-delete'\nDELETED = 'deleted'\nERROR = 'error'\nSHELVED = 'shelved'\nSHELVED_OFFLOADED = 'shelved_offloaded'\n```\n**serverStatus**\n```bash\n_STATE_MAP = {\n    vm_states.ACTIVE: {\n        'default': 'ACTIVE',\n        task_states.REBOOTING: 'REBOOT',\n        task_states.REBOOT_PENDING: 'REBOOT',\n        task_states.REBOOT_STARTED: 'REBOOT',\n        task_states.REBOOTING_HARD: 'HARD_REBOOT',\n        task_states.REBOOT_PENDING_HARD: 'HARD_REBOOT',\n        task_states.REBOOT_STARTED_HARD: 'HARD_REBOOT',\n        task_states.UPDATING_PASSWORD: 'PASSWORD',\n        task_states.REBUILDING: 'REBUILD',\n        task_states.REBUILD_BLOCK_DEVICE_MAPPING: 'REBUILD',\n        task_states.REBUILD_SPAWNING: 'REBUILD',\n        task_states.MIGRATING: 'MIGRATING',\n        task_states.RESIZE_PREP: 'RESIZE',\n        task_states.RESIZE_MIGRATING: 'RESIZE',\n        task_states.RESIZE_MIGRATED: 'RESIZE',\n        task_states.RESIZE_FINISH: 'RESIZE',\n    },\n    vm_states.BUILDING: {\n        'default': 'BUILD',\n    },\n    vm_states.STOPPED: {\n        'default': 'SHUTOFF',\n        task_states.RESIZE_PREP: 'RESIZE',\n        task_states.RESIZE_MIGRATING: 'RESIZE',\n        task_states.RESIZE_MIGRATED: 'RESIZE',\n        task_states.RESIZE_FINISH: 'RESIZE',\n        task_states.REBUILDING: 'REBUILD',\n        task_states.REBUILD_BLOCK_DEVICE_MAPPING: 'REBUILD',\n        task_states.REBUILD_SPAWNING: 'REBUILD',\n    },\n    vm_states.RESIZED: {\n        'default': 'VERIFY_RESIZE',\n        # Note(maoy): the OS API spec 1.1 doesn't have CONFIRMING_RESIZE\n        # state so we comment that out for future reference only.\n        # task_states.RESIZE_CONFIRMING: 'CONFIRMING_RESIZE',\n        task_states.RESIZE_REVERTING: 'REVERT_RESIZE',\n    },\n    vm_states.PAUSED: {\n        'default': 'PAUSED',\n        task_states.MIGRATING: 'MIGRATING',\n    },\n    vm_states.SUSPENDED: {\n        'default': 'SUSPENDED',\n    },\n    vm_states.RESCUED: {\n        'default': 'RESCUE',\n    },\n    vm_states.ERROR: {\n        'default': 'ERROR',\n        task_states.REBUILDING: 'REBUILD',\n        task_states.REBUILD_BLOCK_DEVICE_MAPPING: 'REBUILD',\n        task_states.REBUILD_SPAWNING: 'REBUILD',\n    },\n    vm_states.DELETED: {\n        'default': 'DELETED',\n    },\n    vm_states.SOFT_DELETED: {\n        'default': 'SOFT_DELETED',\n    },\n    vm_states.SHELVED: {\n        'default': 'SHELVED',\n    },\n    vm_states.SHELVED_OFFLOADED: {\n        'default': 'SHELVED_OFFLOADED',\n    },\n}\n\n---------\n#整理出需要实时监控更新的中间状态\n-ACTIVE\n-SHUTOFF\n-PAUSED\n-SUSPENDED\n-DELETED\n-SOFT_DELETED\n*-VERIFY_RESIZE\n-SHELVED\n-SHELVED_OFFLOADED\n*RESCUE\n*REBOOT\n*HARD_REBOOT\n*PASSWORD\n*REBUILD\n*MIGRATING\n*RESIZE\n*BUILD\n*REVERT_RESIZE\n```\n**InstancePowerState**\n```bash\n_UNUSED = '_unused'\nNOSTATE = 'pending'\nRUNNING = 'running'\nPAUSED = 'paused'\nSHUTDOWN = 'shutdown'\nCRASHED = 'crashed'\nSUSPENDED = 'suspended'\n```\n# image\n\n镜像状态转换：https://docs.openstack.org/glance/train/user/statuses.html\n\n**image status**\n```bash\nqueued\nsaving\nuploading\nimporting\nactive\ndeactivated\nkilled\ndeleted\npending_delete\n```\ntasks status\n\n```bash\npending\nprocessing\nsuccess\nfailure\n```\n# volume\n\n**Volume statuses**\n\n```bash\n# VolumeStatus\n*CREATING = 'creating'\nAVAILABLE = 'available'\n*DELETING = 'deleting'\nERROR = 'error'\n*ERROR_DELETING = 'error_deleting'\n*ERROR_MANAGING = 'error_managing'\n*MANAGING = 'managing'\n*ATTACHING = 'attaching'\nIN_USE = 'in-use'\n*DETACHING = 'detaching'\nMAINTENANCE = 'maintenance'\n*RESTORING_BACKUP = 'restoring-backup'\n*ERROR_RESTORING = 'error_restoring'\nRESERVED = 'reserved'\n*AWAITING_TRANSFER = 'awaiting-transfer'\n*BACKING_UP = 'backing-up'\n*ERROR_BACKING_UP = 'error_backing-up'\n*ERROR_EXTENDING* = 'error_extending'\n*DOWNLOADING = 'downloading'\n*UPLOADING = 'uploading'\n*RETYPING = 'retyping'\n*EXTENDING = 'extending'\n\n# BackupStatus\n\nERROR = 'error'\nERROR_DELETING = 'error_deleting'\nCREATING = 'creating'\nAVAILABLE = 'available'\nDELETING = 'deleting'\nDELETED = 'deleted'\nRESTORING = 'restoring'\n\n# SnapshotStatus\nERROR = 'error'\nAVAILABLE = 'available'\nCREATING = 'creating'\nDELETING = 'deleting'\nDELETED = 'deleted'\nUPDATING = 'updating'\nERROR_DELETING = 'error_deleting'\nUNMANAGING = 'unmanaging'\nBACKING_UP = 'backing-up'\nRESTORING = 'restoring'\n\n# VolumeAttachStatus\nATTACHED = 'attached'\nATTACHING = 'attaching'\nDETACHED = 'detached'\nRESERVED = 'reserved'\nERROR_ATTACHING = 'error_attaching'\nERROR_DETACHING = 'error_detaching'\nDELETED = 'deleted'\n\n# VolumeMigrationStatus\nMIGRATING = 'migrating'\nERROR = 'error'\nSUCCESS = 'success'\nCOMPLETING = 'completing'\nNONE = 'none'\nSTARTING = 'starting'\n\n```\n# neutron\n```bash\nNET_STATUS_ACTIVE = 'ACTIVE'\nNET_STATUS_BUILD = 'BUILD'\nNET_STATUS_DOWN = 'DOWN'\nNET_STATUS_ERROR = 'ERROR'\n\nPORT_STATUS_ACTIVE = 'ACTIVE'\nPORT_STATUS_BUILD = 'BUILD'\nPORT_STATUS_DOWN = 'DOWN'\nPORT_STATUS_ERROR = 'ERROR'\nPORT_STATUS_NOTAPPLICABLE = 'N/A'\n\nFLOATINGIP_STATUS_ACTIVE = 'ACTIVE'\nFLOATINGIP_STATUS_DOWN = 'DOWN'\nFLOATINGIP_STATUS_ERROR = 'ERROR'\n\nROUTER_STATUS_ACTIVE = 'ACTIVE'\nROUTER_STATUS_ALLOCATING = 'ALLOCATING'\nROUTER_STATUS_ERROR = 'ERROR'\n\n```","slug":"openstack操作及状态","published":1,"updated":"2025-05-12T15:39:22.645Z","layout":"post","photos":[],"link":"","_id":"cmamklq73001nfkd112ge7wk6","content":"<h1 id=\"Server\"><a href=\"#Server\" class=\"headerlink\" title=\"Server\"></a>Server</h1><p>server status 是描述虚拟机当前状态</p>\n<p>vm_state 是虚拟机稳定状态</p>\n<p>task_state 实例当前发生的情况</p>\n<p>虚拟机稳定状态和操作的关系：<a href=\"https://docs.openstack.org/nova/latest/reference/vm-states.html\">https://docs.openstack.org/nova/latest/reference/vm-states.html</a></p>\n<p><strong>InstanceTaskState</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SCHEDULING = <span class=\"string\">&#x27;scheduling&#x27;</span></span><br><span class=\"line\">BLOCK_DEVICE_MAPPING = <span class=\"string\">&#x27;block_device_mapping&#x27;</span></span><br><span class=\"line\">NETWORKING = <span class=\"string\">&#x27;networking&#x27;</span></span><br><span class=\"line\">SPAWNING = <span class=\"string\">&#x27;spawning&#x27;</span></span><br><span class=\"line\">IMAGE_SNAPSHOT = <span class=\"string\">&#x27;image_snapshot&#x27;</span></span><br><span class=\"line\">IMAGE_SNAPSHOT_PENDING = <span class=\"string\">&#x27;image_snapshot_pending&#x27;</span></span><br><span class=\"line\">IMAGE_PENDING_UPLOAD = <span class=\"string\">&#x27;image_pending_upload&#x27;</span></span><br><span class=\"line\">IMAGE_UPLOADING = <span class=\"string\">&#x27;image_uploading&#x27;</span></span><br><span class=\"line\">IMAGE_BACKUP = <span class=\"string\">&#x27;image_backup&#x27;</span></span><br><span class=\"line\">UPDATING_PASSWORD = <span class=\"string\">&#x27;updating_password&#x27;</span></span><br><span class=\"line\">RESIZE_PREP = <span class=\"string\">&#x27;resize_prep&#x27;</span></span><br><span class=\"line\">RESIZE_MIGRATING = <span class=\"string\">&#x27;resize_migrating&#x27;</span></span><br><span class=\"line\">RESIZE_MIGRATED = <span class=\"string\">&#x27;resize_migrated&#x27;</span></span><br><span class=\"line\">RESIZE_FINISH = <span class=\"string\">&#x27;resize_finish&#x27;</span></span><br><span class=\"line\">RESIZE_REVERTING = <span class=\"string\">&#x27;resize_reverting&#x27;</span></span><br><span class=\"line\">RESIZE_CONFIRMING = <span class=\"string\">&#x27;resize_confirming&#x27;</span></span><br><span class=\"line\">REBOOTING = <span class=\"string\">&#x27;rebooting&#x27;</span></span><br><span class=\"line\">REBOOT_PENDING = <span class=\"string\">&#x27;reboot_pending&#x27;</span></span><br><span class=\"line\">REBOOT_STARTED = <span class=\"string\">&#x27;reboot_started&#x27;</span></span><br><span class=\"line\">REBOOTING_HARD = <span class=\"string\">&#x27;rebooting_hard&#x27;</span></span><br><span class=\"line\">REBOOT_PENDING_HARD = <span class=\"string\">&#x27;reboot_pending_hard&#x27;</span></span><br><span class=\"line\">REBOOT_STARTED_HARD = <span class=\"string\">&#x27;reboot_started_hard&#x27;</span></span><br><span class=\"line\">PAUSING = <span class=\"string\">&#x27;pausing&#x27;</span></span><br><span class=\"line\">UNPAUSING = <span class=\"string\">&#x27;unpausing&#x27;</span></span><br><span class=\"line\">SUSPENDING = <span class=\"string\">&#x27;suspending&#x27;</span></span><br><span class=\"line\">RESUMING = <span class=\"string\">&#x27;resuming&#x27;</span></span><br><span class=\"line\">POWERING_OFF = <span class=\"string\">&#x27;powering-off&#x27;</span></span><br><span class=\"line\">POWERING_ON = <span class=\"string\">&#x27;powering-on&#x27;</span></span><br><span class=\"line\">RESCUING = <span class=\"string\">&#x27;rescuing&#x27;</span></span><br><span class=\"line\">UNRESCUING = <span class=\"string\">&#x27;unrescuing&#x27;</span></span><br><span class=\"line\">REBUILDING = <span class=\"string\">&#x27;rebuilding&#x27;</span></span><br><span class=\"line\">REBUILD_BLOCK_DEVICE_MAPPING = <span class=\"string\">&quot;rebuild_block_device_mapping&quot;</span></span><br><span class=\"line\">REBUILD_SPAWNING = <span class=\"string\">&#x27;rebuild_spawning&#x27;</span></span><br><span class=\"line\">MIGRATING = <span class=\"string\">&quot;migrating&quot;</span></span><br><span class=\"line\">DELETING = <span class=\"string\">&#x27;deleting&#x27;</span></span><br><span class=\"line\">SOFT_DELETING = <span class=\"string\">&#x27;soft-deleting&#x27;</span></span><br><span class=\"line\">RESTORING = <span class=\"string\">&#x27;restoring&#x27;</span></span><br><span class=\"line\">SHELVING = <span class=\"string\">&#x27;shelving&#x27;</span></span><br><span class=\"line\">SHELVING_IMAGE_PENDING_UPLOAD = <span class=\"string\">&#x27;shelving_image_pending_upload&#x27;</span></span><br><span class=\"line\">SHELVING_IMAGE_UPLOADING = <span class=\"string\">&#x27;shelving_image_uploading&#x27;</span></span><br><span class=\"line\">SHELVING_OFFLOADING = <span class=\"string\">&#x27;shelving_offloading&#x27;</span></span><br><span class=\"line\">UNSHELVING = <span class=\"string\">&#x27;unshelving&#x27;</span></span><br></pre></td></tr></table></figure>\n<p><strong>InstanceState</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ACTIVE = <span class=\"string\">&#x27;active&#x27;</span></span><br><span class=\"line\">BUILDING = <span class=\"string\">&#x27;building&#x27;</span></span><br><span class=\"line\">PAUSED = <span class=\"string\">&#x27;paused&#x27;</span></span><br><span class=\"line\">SUSPENDED = <span class=\"string\">&#x27;suspended&#x27;</span></span><br><span class=\"line\">STOPPED = <span class=\"string\">&#x27;stopped&#x27;</span></span><br><span class=\"line\">RESCUED = <span class=\"string\">&#x27;rescued&#x27;</span></span><br><span class=\"line\">RESIZED = <span class=\"string\">&#x27;resized&#x27;</span></span><br><span class=\"line\">SOFT_DELETED = <span class=\"string\">&#x27;soft-delete&#x27;</span></span><br><span class=\"line\">DELETED = <span class=\"string\">&#x27;deleted&#x27;</span></span><br><span class=\"line\">ERROR = <span class=\"string\">&#x27;error&#x27;</span></span><br><span class=\"line\">SHELVED = <span class=\"string\">&#x27;shelved&#x27;</span></span><br><span class=\"line\">SHELVED_OFFLOADED = <span class=\"string\">&#x27;shelved_offloaded&#x27;</span></span><br></pre></td></tr></table></figure>\n<p><strong>serverStatus</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_STATE_MAP = &#123;</span><br><span class=\"line\">    vm_states.ACTIVE: &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;default&#x27;</span>: <span class=\"string\">&#x27;ACTIVE&#x27;</span>,</span><br><span class=\"line\">        task_states.REBOOTING: <span class=\"string\">&#x27;REBOOT&#x27;</span>,</span><br><span class=\"line\">        task_states.REBOOT_PENDING: <span class=\"string\">&#x27;REBOOT&#x27;</span>,</span><br><span class=\"line\">        task_states.REBOOT_STARTED: <span class=\"string\">&#x27;REBOOT&#x27;</span>,</span><br><span class=\"line\">        task_states.REBOOTING_HARD: <span class=\"string\">&#x27;HARD_REBOOT&#x27;</span>,</span><br><span class=\"line\">        task_states.REBOOT_PENDING_HARD: <span class=\"string\">&#x27;HARD_REBOOT&#x27;</span>,</span><br><span class=\"line\">        task_states.REBOOT_STARTED_HARD: <span class=\"string\">&#x27;HARD_REBOOT&#x27;</span>,</span><br><span class=\"line\">        task_states.UPDATING_PASSWORD: <span class=\"string\">&#x27;PASSWORD&#x27;</span>,</span><br><span class=\"line\">        task_states.REBUILDING: <span class=\"string\">&#x27;REBUILD&#x27;</span>,</span><br><span class=\"line\">        task_states.REBUILD_BLOCK_DEVICE_MAPPING: <span class=\"string\">&#x27;REBUILD&#x27;</span>,</span><br><span class=\"line\">        task_states.REBUILD_SPAWNING: <span class=\"string\">&#x27;REBUILD&#x27;</span>,</span><br><span class=\"line\">        task_states.MIGRATING: <span class=\"string\">&#x27;MIGRATING&#x27;</span>,</span><br><span class=\"line\">        task_states.RESIZE_PREP: <span class=\"string\">&#x27;RESIZE&#x27;</span>,</span><br><span class=\"line\">        task_states.RESIZE_MIGRATING: <span class=\"string\">&#x27;RESIZE&#x27;</span>,</span><br><span class=\"line\">        task_states.RESIZE_MIGRATED: <span class=\"string\">&#x27;RESIZE&#x27;</span>,</span><br><span class=\"line\">        task_states.RESIZE_FINISH: <span class=\"string\">&#x27;RESIZE&#x27;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    vm_states.BUILDING: &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;default&#x27;</span>: <span class=\"string\">&#x27;BUILD&#x27;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    vm_states.STOPPED: &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;default&#x27;</span>: <span class=\"string\">&#x27;SHUTOFF&#x27;</span>,</span><br><span class=\"line\">        task_states.RESIZE_PREP: <span class=\"string\">&#x27;RESIZE&#x27;</span>,</span><br><span class=\"line\">        task_states.RESIZE_MIGRATING: <span class=\"string\">&#x27;RESIZE&#x27;</span>,</span><br><span class=\"line\">        task_states.RESIZE_MIGRATED: <span class=\"string\">&#x27;RESIZE&#x27;</span>,</span><br><span class=\"line\">        task_states.RESIZE_FINISH: <span class=\"string\">&#x27;RESIZE&#x27;</span>,</span><br><span class=\"line\">        task_states.REBUILDING: <span class=\"string\">&#x27;REBUILD&#x27;</span>,</span><br><span class=\"line\">        task_states.REBUILD_BLOCK_DEVICE_MAPPING: <span class=\"string\">&#x27;REBUILD&#x27;</span>,</span><br><span class=\"line\">        task_states.REBUILD_SPAWNING: <span class=\"string\">&#x27;REBUILD&#x27;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    vm_states.RESIZED: &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;default&#x27;</span>: <span class=\"string\">&#x27;VERIFY_RESIZE&#x27;</span>,</span><br><span class=\"line\">        <span class=\"comment\"># Note(maoy): the OS API spec 1.1 doesn&#x27;t have CONFIRMING_RESIZE</span></span><br><span class=\"line\">        <span class=\"comment\"># state so we comment that out for future reference only.</span></span><br><span class=\"line\">        <span class=\"comment\"># task_states.RESIZE_CONFIRMING: &#x27;CONFIRMING_RESIZE&#x27;,</span></span><br><span class=\"line\">        task_states.RESIZE_REVERTING: <span class=\"string\">&#x27;REVERT_RESIZE&#x27;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    vm_states.PAUSED: &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;default&#x27;</span>: <span class=\"string\">&#x27;PAUSED&#x27;</span>,</span><br><span class=\"line\">        task_states.MIGRATING: <span class=\"string\">&#x27;MIGRATING&#x27;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    vm_states.SUSPENDED: &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;default&#x27;</span>: <span class=\"string\">&#x27;SUSPENDED&#x27;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    vm_states.RESCUED: &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;default&#x27;</span>: <span class=\"string\">&#x27;RESCUE&#x27;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    vm_states.ERROR: &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;default&#x27;</span>: <span class=\"string\">&#x27;ERROR&#x27;</span>,</span><br><span class=\"line\">        task_states.REBUILDING: <span class=\"string\">&#x27;REBUILD&#x27;</span>,</span><br><span class=\"line\">        task_states.REBUILD_BLOCK_DEVICE_MAPPING: <span class=\"string\">&#x27;REBUILD&#x27;</span>,</span><br><span class=\"line\">        task_states.REBUILD_SPAWNING: <span class=\"string\">&#x27;REBUILD&#x27;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    vm_states.DELETED: &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;default&#x27;</span>: <span class=\"string\">&#x27;DELETED&#x27;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    vm_states.SOFT_DELETED: &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;default&#x27;</span>: <span class=\"string\">&#x27;SOFT_DELETED&#x27;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    vm_states.SHELVED: &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;default&#x27;</span>: <span class=\"string\">&#x27;SHELVED&#x27;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    vm_states.SHELVED_OFFLOADED: &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;default&#x27;</span>: <span class=\"string\">&#x27;SHELVED_OFFLOADED&#x27;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">---------</span><br><span class=\"line\"><span class=\"comment\">#整理出需要实时监控更新的中间状态</span></span><br><span class=\"line\">-ACTIVE</span><br><span class=\"line\">-SHUTOFF</span><br><span class=\"line\">-PAUSED</span><br><span class=\"line\">-SUSPENDED</span><br><span class=\"line\">-DELETED</span><br><span class=\"line\">-SOFT_DELETED</span><br><span class=\"line\">*-VERIFY_RESIZE</span><br><span class=\"line\">-SHELVED</span><br><span class=\"line\">-SHELVED_OFFLOADED</span><br><span class=\"line\">*RESCUE</span><br><span class=\"line\">*REBOOT</span><br><span class=\"line\">*HARD_REBOOT</span><br><span class=\"line\">*PASSWORD</span><br><span class=\"line\">*REBUILD</span><br><span class=\"line\">*MIGRATING</span><br><span class=\"line\">*RESIZE</span><br><span class=\"line\">*BUILD</span><br><span class=\"line\">*REVERT_RESIZE</span><br></pre></td></tr></table></figure>\n<p><strong>InstancePowerState</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_UNUSED = <span class=\"string\">&#x27;_unused&#x27;</span></span><br><span class=\"line\">NOSTATE = <span class=\"string\">&#x27;pending&#x27;</span></span><br><span class=\"line\">RUNNING = <span class=\"string\">&#x27;running&#x27;</span></span><br><span class=\"line\">PAUSED = <span class=\"string\">&#x27;paused&#x27;</span></span><br><span class=\"line\">SHUTDOWN = <span class=\"string\">&#x27;shutdown&#x27;</span></span><br><span class=\"line\">CRASHED = <span class=\"string\">&#x27;crashed&#x27;</span></span><br><span class=\"line\">SUSPENDED = <span class=\"string\">&#x27;suspended&#x27;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"image\"><a href=\"#image\" class=\"headerlink\" title=\"image\"></a>image</h1><p>镜像状态转换：<a href=\"https://docs.openstack.org/glance/train/user/statuses.html\">https://docs.openstack.org/glance/train/user/statuses.html</a></p>\n<p><strong>image status</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">queued</span><br><span class=\"line\">saving</span><br><span class=\"line\">uploading</span><br><span class=\"line\">importing</span><br><span class=\"line\">active</span><br><span class=\"line\">deactivated</span><br><span class=\"line\">killed</span><br><span class=\"line\">deleted</span><br><span class=\"line\">pending_delete</span><br></pre></td></tr></table></figure>\n<p>tasks status</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pending</span><br><span class=\"line\">processing</span><br><span class=\"line\">success</span><br><span class=\"line\">failure</span><br></pre></td></tr></table></figure>\n<h1 id=\"volume\"><a href=\"#volume\" class=\"headerlink\" title=\"volume\"></a>volume</h1><p><strong>Volume statuses</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># VolumeStatus</span></span><br><span class=\"line\">*CREATING = <span class=\"string\">&#x27;creating&#x27;</span></span><br><span class=\"line\">AVAILABLE = <span class=\"string\">&#x27;available&#x27;</span></span><br><span class=\"line\">*DELETING = <span class=\"string\">&#x27;deleting&#x27;</span></span><br><span class=\"line\">ERROR = <span class=\"string\">&#x27;error&#x27;</span></span><br><span class=\"line\">*ERROR_DELETING = <span class=\"string\">&#x27;error_deleting&#x27;</span></span><br><span class=\"line\">*ERROR_MANAGING = <span class=\"string\">&#x27;error_managing&#x27;</span></span><br><span class=\"line\">*MANAGING = <span class=\"string\">&#x27;managing&#x27;</span></span><br><span class=\"line\">*ATTACHING = <span class=\"string\">&#x27;attaching&#x27;</span></span><br><span class=\"line\">IN_USE = <span class=\"string\">&#x27;in-use&#x27;</span></span><br><span class=\"line\">*DETACHING = <span class=\"string\">&#x27;detaching&#x27;</span></span><br><span class=\"line\">MAINTENANCE = <span class=\"string\">&#x27;maintenance&#x27;</span></span><br><span class=\"line\">*RESTORING_BACKUP = <span class=\"string\">&#x27;restoring-backup&#x27;</span></span><br><span class=\"line\">*ERROR_RESTORING = <span class=\"string\">&#x27;error_restoring&#x27;</span></span><br><span class=\"line\">RESERVED = <span class=\"string\">&#x27;reserved&#x27;</span></span><br><span class=\"line\">*AWAITING_TRANSFER = <span class=\"string\">&#x27;awaiting-transfer&#x27;</span></span><br><span class=\"line\">*BACKING_UP = <span class=\"string\">&#x27;backing-up&#x27;</span></span><br><span class=\"line\">*ERROR_BACKING_UP = <span class=\"string\">&#x27;error_backing-up&#x27;</span></span><br><span class=\"line\">*ERROR_EXTENDING* = <span class=\"string\">&#x27;error_extending&#x27;</span></span><br><span class=\"line\">*DOWNLOADING = <span class=\"string\">&#x27;downloading&#x27;</span></span><br><span class=\"line\">*UPLOADING = <span class=\"string\">&#x27;uploading&#x27;</span></span><br><span class=\"line\">*RETYPING = <span class=\"string\">&#x27;retyping&#x27;</span></span><br><span class=\"line\">*EXTENDING = <span class=\"string\">&#x27;extending&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># BackupStatus</span></span><br><span class=\"line\"></span><br><span class=\"line\">ERROR = <span class=\"string\">&#x27;error&#x27;</span></span><br><span class=\"line\">ERROR_DELETING = <span class=\"string\">&#x27;error_deleting&#x27;</span></span><br><span class=\"line\">CREATING = <span class=\"string\">&#x27;creating&#x27;</span></span><br><span class=\"line\">AVAILABLE = <span class=\"string\">&#x27;available&#x27;</span></span><br><span class=\"line\">DELETING = <span class=\"string\">&#x27;deleting&#x27;</span></span><br><span class=\"line\">DELETED = <span class=\"string\">&#x27;deleted&#x27;</span></span><br><span class=\"line\">RESTORING = <span class=\"string\">&#x27;restoring&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># SnapshotStatus</span></span><br><span class=\"line\">ERROR = <span class=\"string\">&#x27;error&#x27;</span></span><br><span class=\"line\">AVAILABLE = <span class=\"string\">&#x27;available&#x27;</span></span><br><span class=\"line\">CREATING = <span class=\"string\">&#x27;creating&#x27;</span></span><br><span class=\"line\">DELETING = <span class=\"string\">&#x27;deleting&#x27;</span></span><br><span class=\"line\">DELETED = <span class=\"string\">&#x27;deleted&#x27;</span></span><br><span class=\"line\">UPDATING = <span class=\"string\">&#x27;updating&#x27;</span></span><br><span class=\"line\">ERROR_DELETING = <span class=\"string\">&#x27;error_deleting&#x27;</span></span><br><span class=\"line\">UNMANAGING = <span class=\"string\">&#x27;unmanaging&#x27;</span></span><br><span class=\"line\">BACKING_UP = <span class=\"string\">&#x27;backing-up&#x27;</span></span><br><span class=\"line\">RESTORING = <span class=\"string\">&#x27;restoring&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># VolumeAttachStatus</span></span><br><span class=\"line\">ATTACHED = <span class=\"string\">&#x27;attached&#x27;</span></span><br><span class=\"line\">ATTACHING = <span class=\"string\">&#x27;attaching&#x27;</span></span><br><span class=\"line\">DETACHED = <span class=\"string\">&#x27;detached&#x27;</span></span><br><span class=\"line\">RESERVED = <span class=\"string\">&#x27;reserved&#x27;</span></span><br><span class=\"line\">ERROR_ATTACHING = <span class=\"string\">&#x27;error_attaching&#x27;</span></span><br><span class=\"line\">ERROR_DETACHING = <span class=\"string\">&#x27;error_detaching&#x27;</span></span><br><span class=\"line\">DELETED = <span class=\"string\">&#x27;deleted&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># VolumeMigrationStatus</span></span><br><span class=\"line\">MIGRATING = <span class=\"string\">&#x27;migrating&#x27;</span></span><br><span class=\"line\">ERROR = <span class=\"string\">&#x27;error&#x27;</span></span><br><span class=\"line\">SUCCESS = <span class=\"string\">&#x27;success&#x27;</span></span><br><span class=\"line\">COMPLETING = <span class=\"string\">&#x27;completing&#x27;</span></span><br><span class=\"line\">NONE = <span class=\"string\">&#x27;none&#x27;</span></span><br><span class=\"line\">STARTING = <span class=\"string\">&#x27;starting&#x27;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1 id=\"neutron\"><a href=\"#neutron\" class=\"headerlink\" title=\"neutron\"></a>neutron</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NET_STATUS_ACTIVE = <span class=\"string\">&#x27;ACTIVE&#x27;</span></span><br><span class=\"line\">NET_STATUS_BUILD = <span class=\"string\">&#x27;BUILD&#x27;</span></span><br><span class=\"line\">NET_STATUS_DOWN = <span class=\"string\">&#x27;DOWN&#x27;</span></span><br><span class=\"line\">NET_STATUS_ERROR = <span class=\"string\">&#x27;ERROR&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">PORT_STATUS_ACTIVE = <span class=\"string\">&#x27;ACTIVE&#x27;</span></span><br><span class=\"line\">PORT_STATUS_BUILD = <span class=\"string\">&#x27;BUILD&#x27;</span></span><br><span class=\"line\">PORT_STATUS_DOWN = <span class=\"string\">&#x27;DOWN&#x27;</span></span><br><span class=\"line\">PORT_STATUS_ERROR = <span class=\"string\">&#x27;ERROR&#x27;</span></span><br><span class=\"line\">PORT_STATUS_NOTAPPLICABLE = <span class=\"string\">&#x27;N/A&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">FLOATINGIP_STATUS_ACTIVE = <span class=\"string\">&#x27;ACTIVE&#x27;</span></span><br><span class=\"line\">FLOATINGIP_STATUS_DOWN = <span class=\"string\">&#x27;DOWN&#x27;</span></span><br><span class=\"line\">FLOATINGIP_STATUS_ERROR = <span class=\"string\">&#x27;ERROR&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">ROUTER_STATUS_ACTIVE = <span class=\"string\">&#x27;ACTIVE&#x27;</span></span><br><span class=\"line\">ROUTER_STATUS_ALLOCATING = <span class=\"string\">&#x27;ALLOCATING&#x27;</span></span><br><span class=\"line\">ROUTER_STATUS_ERROR = <span class=\"string\">&#x27;ERROR&#x27;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Server\"><a href=\"#Server\" class=\"headerlink\" title=\"Server\"></a>Server</h1><p>server status 是描述虚拟机当前状态</p>\n<p>vm_state 是虚拟机稳定状态</p>\n<p>task_state 实例当前发生的情况</p>\n<p>虚拟机稳定状态和操作的关系：<a href=\"https://docs.openstack.org/nova/latest/reference/vm-states.html\">https://docs.openstack.org/nova/latest/reference/vm-states.html</a></p>\n<p><strong>InstanceTaskState</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SCHEDULING = <span class=\"string\">&#x27;scheduling&#x27;</span></span><br><span class=\"line\">BLOCK_DEVICE_MAPPING = <span class=\"string\">&#x27;block_device_mapping&#x27;</span></span><br><span class=\"line\">NETWORKING = <span class=\"string\">&#x27;networking&#x27;</span></span><br><span class=\"line\">SPAWNING = <span class=\"string\">&#x27;spawning&#x27;</span></span><br><span class=\"line\">IMAGE_SNAPSHOT = <span class=\"string\">&#x27;image_snapshot&#x27;</span></span><br><span class=\"line\">IMAGE_SNAPSHOT_PENDING = <span class=\"string\">&#x27;image_snapshot_pending&#x27;</span></span><br><span class=\"line\">IMAGE_PENDING_UPLOAD = <span class=\"string\">&#x27;image_pending_upload&#x27;</span></span><br><span class=\"line\">IMAGE_UPLOADING = <span class=\"string\">&#x27;image_uploading&#x27;</span></span><br><span class=\"line\">IMAGE_BACKUP = <span class=\"string\">&#x27;image_backup&#x27;</span></span><br><span class=\"line\">UPDATING_PASSWORD = <span class=\"string\">&#x27;updating_password&#x27;</span></span><br><span class=\"line\">RESIZE_PREP = <span class=\"string\">&#x27;resize_prep&#x27;</span></span><br><span class=\"line\">RESIZE_MIGRATING = <span class=\"string\">&#x27;resize_migrating&#x27;</span></span><br><span class=\"line\">RESIZE_MIGRATED = <span class=\"string\">&#x27;resize_migrated&#x27;</span></span><br><span class=\"line\">RESIZE_FINISH = <span class=\"string\">&#x27;resize_finish&#x27;</span></span><br><span class=\"line\">RESIZE_REVERTING = <span class=\"string\">&#x27;resize_reverting&#x27;</span></span><br><span class=\"line\">RESIZE_CONFIRMING = <span class=\"string\">&#x27;resize_confirming&#x27;</span></span><br><span class=\"line\">REBOOTING = <span class=\"string\">&#x27;rebooting&#x27;</span></span><br><span class=\"line\">REBOOT_PENDING = <span class=\"string\">&#x27;reboot_pending&#x27;</span></span><br><span class=\"line\">REBOOT_STARTED = <span class=\"string\">&#x27;reboot_started&#x27;</span></span><br><span class=\"line\">REBOOTING_HARD = <span class=\"string\">&#x27;rebooting_hard&#x27;</span></span><br><span class=\"line\">REBOOT_PENDING_HARD = <span class=\"string\">&#x27;reboot_pending_hard&#x27;</span></span><br><span class=\"line\">REBOOT_STARTED_HARD = <span class=\"string\">&#x27;reboot_started_hard&#x27;</span></span><br><span class=\"line\">PAUSING = <span class=\"string\">&#x27;pausing&#x27;</span></span><br><span class=\"line\">UNPAUSING = <span class=\"string\">&#x27;unpausing&#x27;</span></span><br><span class=\"line\">SUSPENDING = <span class=\"string\">&#x27;suspending&#x27;</span></span><br><span class=\"line\">RESUMING = <span class=\"string\">&#x27;resuming&#x27;</span></span><br><span class=\"line\">POWERING_OFF = <span class=\"string\">&#x27;powering-off&#x27;</span></span><br><span class=\"line\">POWERING_ON = <span class=\"string\">&#x27;powering-on&#x27;</span></span><br><span class=\"line\">RESCUING = <span class=\"string\">&#x27;rescuing&#x27;</span></span><br><span class=\"line\">UNRESCUING = <span class=\"string\">&#x27;unrescuing&#x27;</span></span><br><span class=\"line\">REBUILDING = <span class=\"string\">&#x27;rebuilding&#x27;</span></span><br><span class=\"line\">REBUILD_BLOCK_DEVICE_MAPPING = <span class=\"string\">&quot;rebuild_block_device_mapping&quot;</span></span><br><span class=\"line\">REBUILD_SPAWNING = <span class=\"string\">&#x27;rebuild_spawning&#x27;</span></span><br><span class=\"line\">MIGRATING = <span class=\"string\">&quot;migrating&quot;</span></span><br><span class=\"line\">DELETING = <span class=\"string\">&#x27;deleting&#x27;</span></span><br><span class=\"line\">SOFT_DELETING = <span class=\"string\">&#x27;soft-deleting&#x27;</span></span><br><span class=\"line\">RESTORING = <span class=\"string\">&#x27;restoring&#x27;</span></span><br><span class=\"line\">SHELVING = <span class=\"string\">&#x27;shelving&#x27;</span></span><br><span class=\"line\">SHELVING_IMAGE_PENDING_UPLOAD = <span class=\"string\">&#x27;shelving_image_pending_upload&#x27;</span></span><br><span class=\"line\">SHELVING_IMAGE_UPLOADING = <span class=\"string\">&#x27;shelving_image_uploading&#x27;</span></span><br><span class=\"line\">SHELVING_OFFLOADING = <span class=\"string\">&#x27;shelving_offloading&#x27;</span></span><br><span class=\"line\">UNSHELVING = <span class=\"string\">&#x27;unshelving&#x27;</span></span><br></pre></td></tr></table></figure>\n<p><strong>InstanceState</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ACTIVE = <span class=\"string\">&#x27;active&#x27;</span></span><br><span class=\"line\">BUILDING = <span class=\"string\">&#x27;building&#x27;</span></span><br><span class=\"line\">PAUSED = <span class=\"string\">&#x27;paused&#x27;</span></span><br><span class=\"line\">SUSPENDED = <span class=\"string\">&#x27;suspended&#x27;</span></span><br><span class=\"line\">STOPPED = <span class=\"string\">&#x27;stopped&#x27;</span></span><br><span class=\"line\">RESCUED = <span class=\"string\">&#x27;rescued&#x27;</span></span><br><span class=\"line\">RESIZED = <span class=\"string\">&#x27;resized&#x27;</span></span><br><span class=\"line\">SOFT_DELETED = <span class=\"string\">&#x27;soft-delete&#x27;</span></span><br><span class=\"line\">DELETED = <span class=\"string\">&#x27;deleted&#x27;</span></span><br><span class=\"line\">ERROR = <span class=\"string\">&#x27;error&#x27;</span></span><br><span class=\"line\">SHELVED = <span class=\"string\">&#x27;shelved&#x27;</span></span><br><span class=\"line\">SHELVED_OFFLOADED = <span class=\"string\">&#x27;shelved_offloaded&#x27;</span></span><br></pre></td></tr></table></figure>\n<p><strong>serverStatus</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_STATE_MAP = &#123;</span><br><span class=\"line\">    vm_states.ACTIVE: &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;default&#x27;</span>: <span class=\"string\">&#x27;ACTIVE&#x27;</span>,</span><br><span class=\"line\">        task_states.REBOOTING: <span class=\"string\">&#x27;REBOOT&#x27;</span>,</span><br><span class=\"line\">        task_states.REBOOT_PENDING: <span class=\"string\">&#x27;REBOOT&#x27;</span>,</span><br><span class=\"line\">        task_states.REBOOT_STARTED: <span class=\"string\">&#x27;REBOOT&#x27;</span>,</span><br><span class=\"line\">        task_states.REBOOTING_HARD: <span class=\"string\">&#x27;HARD_REBOOT&#x27;</span>,</span><br><span class=\"line\">        task_states.REBOOT_PENDING_HARD: <span class=\"string\">&#x27;HARD_REBOOT&#x27;</span>,</span><br><span class=\"line\">        task_states.REBOOT_STARTED_HARD: <span class=\"string\">&#x27;HARD_REBOOT&#x27;</span>,</span><br><span class=\"line\">        task_states.UPDATING_PASSWORD: <span class=\"string\">&#x27;PASSWORD&#x27;</span>,</span><br><span class=\"line\">        task_states.REBUILDING: <span class=\"string\">&#x27;REBUILD&#x27;</span>,</span><br><span class=\"line\">        task_states.REBUILD_BLOCK_DEVICE_MAPPING: <span class=\"string\">&#x27;REBUILD&#x27;</span>,</span><br><span class=\"line\">        task_states.REBUILD_SPAWNING: <span class=\"string\">&#x27;REBUILD&#x27;</span>,</span><br><span class=\"line\">        task_states.MIGRATING: <span class=\"string\">&#x27;MIGRATING&#x27;</span>,</span><br><span class=\"line\">        task_states.RESIZE_PREP: <span class=\"string\">&#x27;RESIZE&#x27;</span>,</span><br><span class=\"line\">        task_states.RESIZE_MIGRATING: <span class=\"string\">&#x27;RESIZE&#x27;</span>,</span><br><span class=\"line\">        task_states.RESIZE_MIGRATED: <span class=\"string\">&#x27;RESIZE&#x27;</span>,</span><br><span class=\"line\">        task_states.RESIZE_FINISH: <span class=\"string\">&#x27;RESIZE&#x27;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    vm_states.BUILDING: &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;default&#x27;</span>: <span class=\"string\">&#x27;BUILD&#x27;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    vm_states.STOPPED: &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;default&#x27;</span>: <span class=\"string\">&#x27;SHUTOFF&#x27;</span>,</span><br><span class=\"line\">        task_states.RESIZE_PREP: <span class=\"string\">&#x27;RESIZE&#x27;</span>,</span><br><span class=\"line\">        task_states.RESIZE_MIGRATING: <span class=\"string\">&#x27;RESIZE&#x27;</span>,</span><br><span class=\"line\">        task_states.RESIZE_MIGRATED: <span class=\"string\">&#x27;RESIZE&#x27;</span>,</span><br><span class=\"line\">        task_states.RESIZE_FINISH: <span class=\"string\">&#x27;RESIZE&#x27;</span>,</span><br><span class=\"line\">        task_states.REBUILDING: <span class=\"string\">&#x27;REBUILD&#x27;</span>,</span><br><span class=\"line\">        task_states.REBUILD_BLOCK_DEVICE_MAPPING: <span class=\"string\">&#x27;REBUILD&#x27;</span>,</span><br><span class=\"line\">        task_states.REBUILD_SPAWNING: <span class=\"string\">&#x27;REBUILD&#x27;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    vm_states.RESIZED: &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;default&#x27;</span>: <span class=\"string\">&#x27;VERIFY_RESIZE&#x27;</span>,</span><br><span class=\"line\">        <span class=\"comment\"># Note(maoy): the OS API spec 1.1 doesn&#x27;t have CONFIRMING_RESIZE</span></span><br><span class=\"line\">        <span class=\"comment\"># state so we comment that out for future reference only.</span></span><br><span class=\"line\">        <span class=\"comment\"># task_states.RESIZE_CONFIRMING: &#x27;CONFIRMING_RESIZE&#x27;,</span></span><br><span class=\"line\">        task_states.RESIZE_REVERTING: <span class=\"string\">&#x27;REVERT_RESIZE&#x27;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    vm_states.PAUSED: &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;default&#x27;</span>: <span class=\"string\">&#x27;PAUSED&#x27;</span>,</span><br><span class=\"line\">        task_states.MIGRATING: <span class=\"string\">&#x27;MIGRATING&#x27;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    vm_states.SUSPENDED: &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;default&#x27;</span>: <span class=\"string\">&#x27;SUSPENDED&#x27;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    vm_states.RESCUED: &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;default&#x27;</span>: <span class=\"string\">&#x27;RESCUE&#x27;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    vm_states.ERROR: &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;default&#x27;</span>: <span class=\"string\">&#x27;ERROR&#x27;</span>,</span><br><span class=\"line\">        task_states.REBUILDING: <span class=\"string\">&#x27;REBUILD&#x27;</span>,</span><br><span class=\"line\">        task_states.REBUILD_BLOCK_DEVICE_MAPPING: <span class=\"string\">&#x27;REBUILD&#x27;</span>,</span><br><span class=\"line\">        task_states.REBUILD_SPAWNING: <span class=\"string\">&#x27;REBUILD&#x27;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    vm_states.DELETED: &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;default&#x27;</span>: <span class=\"string\">&#x27;DELETED&#x27;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    vm_states.SOFT_DELETED: &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;default&#x27;</span>: <span class=\"string\">&#x27;SOFT_DELETED&#x27;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    vm_states.SHELVED: &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;default&#x27;</span>: <span class=\"string\">&#x27;SHELVED&#x27;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    vm_states.SHELVED_OFFLOADED: &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;default&#x27;</span>: <span class=\"string\">&#x27;SHELVED_OFFLOADED&#x27;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">---------</span><br><span class=\"line\"><span class=\"comment\">#整理出需要实时监控更新的中间状态</span></span><br><span class=\"line\">-ACTIVE</span><br><span class=\"line\">-SHUTOFF</span><br><span class=\"line\">-PAUSED</span><br><span class=\"line\">-SUSPENDED</span><br><span class=\"line\">-DELETED</span><br><span class=\"line\">-SOFT_DELETED</span><br><span class=\"line\">*-VERIFY_RESIZE</span><br><span class=\"line\">-SHELVED</span><br><span class=\"line\">-SHELVED_OFFLOADED</span><br><span class=\"line\">*RESCUE</span><br><span class=\"line\">*REBOOT</span><br><span class=\"line\">*HARD_REBOOT</span><br><span class=\"line\">*PASSWORD</span><br><span class=\"line\">*REBUILD</span><br><span class=\"line\">*MIGRATING</span><br><span class=\"line\">*RESIZE</span><br><span class=\"line\">*BUILD</span><br><span class=\"line\">*REVERT_RESIZE</span><br></pre></td></tr></table></figure>\n<p><strong>InstancePowerState</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_UNUSED = <span class=\"string\">&#x27;_unused&#x27;</span></span><br><span class=\"line\">NOSTATE = <span class=\"string\">&#x27;pending&#x27;</span></span><br><span class=\"line\">RUNNING = <span class=\"string\">&#x27;running&#x27;</span></span><br><span class=\"line\">PAUSED = <span class=\"string\">&#x27;paused&#x27;</span></span><br><span class=\"line\">SHUTDOWN = <span class=\"string\">&#x27;shutdown&#x27;</span></span><br><span class=\"line\">CRASHED = <span class=\"string\">&#x27;crashed&#x27;</span></span><br><span class=\"line\">SUSPENDED = <span class=\"string\">&#x27;suspended&#x27;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"image\"><a href=\"#image\" class=\"headerlink\" title=\"image\"></a>image</h1><p>镜像状态转换：<a href=\"https://docs.openstack.org/glance/train/user/statuses.html\">https://docs.openstack.org/glance/train/user/statuses.html</a></p>\n<p><strong>image status</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">queued</span><br><span class=\"line\">saving</span><br><span class=\"line\">uploading</span><br><span class=\"line\">importing</span><br><span class=\"line\">active</span><br><span class=\"line\">deactivated</span><br><span class=\"line\">killed</span><br><span class=\"line\">deleted</span><br><span class=\"line\">pending_delete</span><br></pre></td></tr></table></figure>\n<p>tasks status</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pending</span><br><span class=\"line\">processing</span><br><span class=\"line\">success</span><br><span class=\"line\">failure</span><br></pre></td></tr></table></figure>\n<h1 id=\"volume\"><a href=\"#volume\" class=\"headerlink\" title=\"volume\"></a>volume</h1><p><strong>Volume statuses</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># VolumeStatus</span></span><br><span class=\"line\">*CREATING = <span class=\"string\">&#x27;creating&#x27;</span></span><br><span class=\"line\">AVAILABLE = <span class=\"string\">&#x27;available&#x27;</span></span><br><span class=\"line\">*DELETING = <span class=\"string\">&#x27;deleting&#x27;</span></span><br><span class=\"line\">ERROR = <span class=\"string\">&#x27;error&#x27;</span></span><br><span class=\"line\">*ERROR_DELETING = <span class=\"string\">&#x27;error_deleting&#x27;</span></span><br><span class=\"line\">*ERROR_MANAGING = <span class=\"string\">&#x27;error_managing&#x27;</span></span><br><span class=\"line\">*MANAGING = <span class=\"string\">&#x27;managing&#x27;</span></span><br><span class=\"line\">*ATTACHING = <span class=\"string\">&#x27;attaching&#x27;</span></span><br><span class=\"line\">IN_USE = <span class=\"string\">&#x27;in-use&#x27;</span></span><br><span class=\"line\">*DETACHING = <span class=\"string\">&#x27;detaching&#x27;</span></span><br><span class=\"line\">MAINTENANCE = <span class=\"string\">&#x27;maintenance&#x27;</span></span><br><span class=\"line\">*RESTORING_BACKUP = <span class=\"string\">&#x27;restoring-backup&#x27;</span></span><br><span class=\"line\">*ERROR_RESTORING = <span class=\"string\">&#x27;error_restoring&#x27;</span></span><br><span class=\"line\">RESERVED = <span class=\"string\">&#x27;reserved&#x27;</span></span><br><span class=\"line\">*AWAITING_TRANSFER = <span class=\"string\">&#x27;awaiting-transfer&#x27;</span></span><br><span class=\"line\">*BACKING_UP = <span class=\"string\">&#x27;backing-up&#x27;</span></span><br><span class=\"line\">*ERROR_BACKING_UP = <span class=\"string\">&#x27;error_backing-up&#x27;</span></span><br><span class=\"line\">*ERROR_EXTENDING* = <span class=\"string\">&#x27;error_extending&#x27;</span></span><br><span class=\"line\">*DOWNLOADING = <span class=\"string\">&#x27;downloading&#x27;</span></span><br><span class=\"line\">*UPLOADING = <span class=\"string\">&#x27;uploading&#x27;</span></span><br><span class=\"line\">*RETYPING = <span class=\"string\">&#x27;retyping&#x27;</span></span><br><span class=\"line\">*EXTENDING = <span class=\"string\">&#x27;extending&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># BackupStatus</span></span><br><span class=\"line\"></span><br><span class=\"line\">ERROR = <span class=\"string\">&#x27;error&#x27;</span></span><br><span class=\"line\">ERROR_DELETING = <span class=\"string\">&#x27;error_deleting&#x27;</span></span><br><span class=\"line\">CREATING = <span class=\"string\">&#x27;creating&#x27;</span></span><br><span class=\"line\">AVAILABLE = <span class=\"string\">&#x27;available&#x27;</span></span><br><span class=\"line\">DELETING = <span class=\"string\">&#x27;deleting&#x27;</span></span><br><span class=\"line\">DELETED = <span class=\"string\">&#x27;deleted&#x27;</span></span><br><span class=\"line\">RESTORING = <span class=\"string\">&#x27;restoring&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># SnapshotStatus</span></span><br><span class=\"line\">ERROR = <span class=\"string\">&#x27;error&#x27;</span></span><br><span class=\"line\">AVAILABLE = <span class=\"string\">&#x27;available&#x27;</span></span><br><span class=\"line\">CREATING = <span class=\"string\">&#x27;creating&#x27;</span></span><br><span class=\"line\">DELETING = <span class=\"string\">&#x27;deleting&#x27;</span></span><br><span class=\"line\">DELETED = <span class=\"string\">&#x27;deleted&#x27;</span></span><br><span class=\"line\">UPDATING = <span class=\"string\">&#x27;updating&#x27;</span></span><br><span class=\"line\">ERROR_DELETING = <span class=\"string\">&#x27;error_deleting&#x27;</span></span><br><span class=\"line\">UNMANAGING = <span class=\"string\">&#x27;unmanaging&#x27;</span></span><br><span class=\"line\">BACKING_UP = <span class=\"string\">&#x27;backing-up&#x27;</span></span><br><span class=\"line\">RESTORING = <span class=\"string\">&#x27;restoring&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># VolumeAttachStatus</span></span><br><span class=\"line\">ATTACHED = <span class=\"string\">&#x27;attached&#x27;</span></span><br><span class=\"line\">ATTACHING = <span class=\"string\">&#x27;attaching&#x27;</span></span><br><span class=\"line\">DETACHED = <span class=\"string\">&#x27;detached&#x27;</span></span><br><span class=\"line\">RESERVED = <span class=\"string\">&#x27;reserved&#x27;</span></span><br><span class=\"line\">ERROR_ATTACHING = <span class=\"string\">&#x27;error_attaching&#x27;</span></span><br><span class=\"line\">ERROR_DETACHING = <span class=\"string\">&#x27;error_detaching&#x27;</span></span><br><span class=\"line\">DELETED = <span class=\"string\">&#x27;deleted&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># VolumeMigrationStatus</span></span><br><span class=\"line\">MIGRATING = <span class=\"string\">&#x27;migrating&#x27;</span></span><br><span class=\"line\">ERROR = <span class=\"string\">&#x27;error&#x27;</span></span><br><span class=\"line\">SUCCESS = <span class=\"string\">&#x27;success&#x27;</span></span><br><span class=\"line\">COMPLETING = <span class=\"string\">&#x27;completing&#x27;</span></span><br><span class=\"line\">NONE = <span class=\"string\">&#x27;none&#x27;</span></span><br><span class=\"line\">STARTING = <span class=\"string\">&#x27;starting&#x27;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1 id=\"neutron\"><a href=\"#neutron\" class=\"headerlink\" title=\"neutron\"></a>neutron</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NET_STATUS_ACTIVE = <span class=\"string\">&#x27;ACTIVE&#x27;</span></span><br><span class=\"line\">NET_STATUS_BUILD = <span class=\"string\">&#x27;BUILD&#x27;</span></span><br><span class=\"line\">NET_STATUS_DOWN = <span class=\"string\">&#x27;DOWN&#x27;</span></span><br><span class=\"line\">NET_STATUS_ERROR = <span class=\"string\">&#x27;ERROR&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">PORT_STATUS_ACTIVE = <span class=\"string\">&#x27;ACTIVE&#x27;</span></span><br><span class=\"line\">PORT_STATUS_BUILD = <span class=\"string\">&#x27;BUILD&#x27;</span></span><br><span class=\"line\">PORT_STATUS_DOWN = <span class=\"string\">&#x27;DOWN&#x27;</span></span><br><span class=\"line\">PORT_STATUS_ERROR = <span class=\"string\">&#x27;ERROR&#x27;</span></span><br><span class=\"line\">PORT_STATUS_NOTAPPLICABLE = <span class=\"string\">&#x27;N/A&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">FLOATINGIP_STATUS_ACTIVE = <span class=\"string\">&#x27;ACTIVE&#x27;</span></span><br><span class=\"line\">FLOATINGIP_STATUS_DOWN = <span class=\"string\">&#x27;DOWN&#x27;</span></span><br><span class=\"line\">FLOATINGIP_STATUS_ERROR = <span class=\"string\">&#x27;ERROR&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">ROUTER_STATUS_ACTIVE = <span class=\"string\">&#x27;ACTIVE&#x27;</span></span><br><span class=\"line\">ROUTER_STATUS_ALLOCATING = <span class=\"string\">&#x27;ALLOCATING&#x27;</span></span><br><span class=\"line\">ROUTER_STATUS_ERROR = <span class=\"string\">&#x27;ERROR&#x27;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"创建windows的qcow2镜像","date":"2024-01-10T02:27:28.000Z","description":"Linux Python环境配置","type":"tags","comments":1,"_content":"\n创建qcow2\n```bash\nqemu-img create -f qcow2 /path/to/win-iso/windows_server_2019.qcow2 50G\n```\n\n安装windows镜像到qcow2\n\n```bash\nvirt-install --virt-type=kvm --name win-2019 --cpu=host --memory 3072 --vcpus=2 --os-type=windows --os-variant=windows --disk=//path/to/win-iso/cn_windows_server_2019_x64_dvd_4de40f33.iso,device=cdrom --disk=/path/to//win-iso/virtio-win-0.1.172.iso,device=cdrom --network=default,model=virtio --graphics vnc --disk=/path/to/win-iso/windows_server_2019.qcow2,size=50,bus=virtio,format=qcow2 --boot cdrom --check all=off\n```\n\n压缩镜像\n\n```bash\nqemu-img convert -O qcow2 windows_server_2019.qcow2 new-windows_server_2019.qcow2\n```\n\n","source":"_posts/创建windows的qcow2镜像.md","raw":"---\ntitle: 创建windows的qcow2镜像\ndate: 2024-01-10 10:27:28\ndescription: Linux Python环境配置\ntype: \"tags\"\ncomments: true\ncategories:\n- Linux\n- Python\ntags:\n- Linux\n- Python\n---\n\n创建qcow2\n```bash\nqemu-img create -f qcow2 /path/to/win-iso/windows_server_2019.qcow2 50G\n```\n\n安装windows镜像到qcow2\n\n```bash\nvirt-install --virt-type=kvm --name win-2019 --cpu=host --memory 3072 --vcpus=2 --os-type=windows --os-variant=windows --disk=//path/to/win-iso/cn_windows_server_2019_x64_dvd_4de40f33.iso,device=cdrom --disk=/path/to//win-iso/virtio-win-0.1.172.iso,device=cdrom --network=default,model=virtio --graphics vnc --disk=/path/to/win-iso/windows_server_2019.qcow2,size=50,bus=virtio,format=qcow2 --boot cdrom --check all=off\n```\n\n压缩镜像\n\n```bash\nqemu-img convert -O qcow2 windows_server_2019.qcow2 new-windows_server_2019.qcow2\n```\n\n","slug":"创建windows的qcow2镜像","published":1,"updated":"2025-03-27T00:57:01.340Z","layout":"post","photos":[],"link":"","_id":"cmamklq73001pfkd1dmo41gdt","content":"<p>创建qcow2</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">qemu-img create -f qcow2 /path/to/win-iso/windows_server_2019.qcow2 50G</span><br></pre></td></tr></table></figure>\n\n<p>安装windows镜像到qcow2</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">virt-install --virt-type=kvm --name win-2019 --cpu=host --memory 3072 --vcpus=2 --os-type=windows --os-variant=windows --disk=//path/to/win-iso/cn_windows_server_2019_x64_dvd_4de40f33.iso,device=cdrom --disk=/path/to//win-iso/virtio-win-0.1.172.iso,device=cdrom --network=default,model=virtio --graphics vnc --disk=/path/to/win-iso/windows_server_2019.qcow2,size=50,bus=virtio,format=qcow2 --boot cdrom --check all=off</span><br></pre></td></tr></table></figure>\n\n<p>压缩镜像</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">qemu-img convert -O qcow2 windows_server_2019.qcow2 new-windows_server_2019.qcow2</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p>创建qcow2</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">qemu-img create -f qcow2 /path/to/win-iso/windows_server_2019.qcow2 50G</span><br></pre></td></tr></table></figure>\n\n<p>安装windows镜像到qcow2</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">virt-install --virt-type=kvm --name win-2019 --cpu=host --memory 3072 --vcpus=2 --os-type=windows --os-variant=windows --disk=//path/to/win-iso/cn_windows_server_2019_x64_dvd_4de40f33.iso,device=cdrom --disk=/path/to//win-iso/virtio-win-0.1.172.iso,device=cdrom --network=default,model=virtio --graphics vnc --disk=/path/to/win-iso/windows_server_2019.qcow2,size=50,bus=virtio,format=qcow2 --boot cdrom --check all=off</span><br></pre></td></tr></table></figure>\n\n<p>压缩镜像</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">qemu-img convert -O qcow2 windows_server_2019.qcow2 new-windows_server_2019.qcow2</span><br></pre></td></tr></table></figure>\n\n"},{"title":"基于Debian使用Docker","date":"2023-12-25T02:27:28.000Z","description":"基于Debian使用Docker","type":"tags","comments":1,"_content":"# 安装docker\n```bash\n sudo apt-get update\n sudo apt-get install docker-ce docker-ce-cli containerd.io\n```\n","source":"_posts/基于Debian使用docker.md","raw":"---\ntitle: 基于Debian使用Docker\ndate: 2023-12-25 10:27:28\ndescription: 基于Debian使用Docker\ntype: \"tags\"\ncomments: true\ncategories:\n- Linux\n- Tools\n- Docker\ntags:\n- Linux\n- Docker\n---\n# 安装docker\n```bash\n sudo apt-get update\n sudo apt-get install docker-ce docker-ce-cli containerd.io\n```\n","slug":"基于Debian使用docker","published":1,"updated":"2025-05-13T11:38:58.277Z","layout":"post","photos":[],"link":"","_id":"cmamklq73001ufkd12u0v3so0","content":"<h1 id=\"安装docker\"><a href=\"#安装docker\" class=\"headerlink\" title=\"安装docker\"></a>安装docker</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"安装docker\"><a href=\"#安装docker\" class=\"headerlink\" title=\"安装docker\"></a>安装docker</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure>\n"},{"title":"常用性能测试小工具集锦","date":"2023-12-25T02:27:28.000Z","description":"常用性能测试小工具集锦","type":"tags","comments":1,"_content":"# 常用性能测试小工具集锦\n\n## 性能测试\n\n​\t基于工作中做的性能测试，收纳整理出《常用性能测试小工具集锦》。主要从性能测试和工具集锦两个方面分享。\n\n### 性能测试\n\n​\t\t性能测试是一种评估系统性能的方法，它可以检测系统的可扩展性、吞吐量、响应时间、负载能力、稳定性和安全性等指标。性能测试可以帮助开发人员、系统管理员和业务用户了解系统的实际运行情况，并找出可能存在的瓶颈和问题。\n\n#### 性能测试指标\n\n​\t\t衡量系统性能的评价标准。\n\n##### **系统性能测试指标**\n\n​\t\t响应时间、系统处理能力，吞吐量，并发用户数，错误率等。\n\n##### 响应时间\n\n​\t\t简称RT，指的是客户发出请求到得到系统响应的整个过程的时间。也就是用户从客户端发起一个请求开始，到客户端接收到从服务器端返回的响应结束，整个过程所耗费的时间。\n\n##### 系统处理能力\n\n​\t\t系统在利用系统硬件平台和软件平台进行信息处理的能力。系统处理能力通过系统每秒钟能够处理的交易数量来评价。交易有两种理解：一是业务人员角度的一笔业务过程；二是系统角度的一次交易申请和响应过程。前者称为业务交易过程，后者称为事务。系统处理能力又用HPS(每秒点击次数)，TPS(系统每秒处理交易次数)，QPS(系统每秒处理查询次数)指标来度量。\n\n##### 吞吐量\n\n​\t\t吞吐量是指系统在单位时间内处理请求的数量。尤其对于并发系统，通常需要用吞吐量作为性能指标。\n\n##### 并发用户数\n\n​\t\t并发用户数指在同一时刻内，登录系统并进行业务操作的用户数量。\n\n##### 错误率\n\n​\t\t简称FR，指系统在负载情况下，失败交易的概率。错误率＝(失败交易数/交易总数)*100%。\n\n#### **资源性能指标**\n\nCPU、内存、磁盘吞吐量、网络吞吐量等。\n\n##### CPU\n\n​\t\tCPU指标主要指的CPU利用率。单位时间内服务器CPU的使用统计，可以用除CPU空闲时间外其他时间占总CPU时间的百分比来表示。即：CPU使用率=1-CPU空闲时间/总CPU时间。\n\n```\n字段说明：\nus (user)：用户态的CPU使用时间比例，是用户运行程序的真正时间，它不包括后面的ni时间。\nsy (system): 内核态的CPU使用时间比例，是操作系统的运行时间，操作系统运行时，用户运行程序往往处于等待状态。\nni (nice): 表示低优先级用户态的CPU时间比例，取值范围为[-20,19]，数值越大，则优先级越低。\nid (idle): 表示空闲的CPU时间比例，值越大，CPU空闲时间比例越高，利用率越低。\nwa (iowait): 表示处于IO等待状态的CPU时间比例。\nhi (hard interrupt): 表示处理硬中断的CPU时间比例。硬中断，也叫异步中断。硬中断是由硬件设备依照CPU时钟信号产生的，即意味着中断发生具备随机性和突发性，可以在指令正在执行时发生。\nsi (soft interrupt): 与hi相反，表示处理软中断的CPU时间比例。软中断，也叫同步中断。软中断是由CPU执行中断产生指令时产生，是由程序预先实现好的，不是随机的。\nst (steal): 表示当前系统运行在虚拟机中被其他虚拟机占用的CPU时间比例。这体现为物理 CPU 没有办法为当前系统服务，通常正在为另一个系统服务。 在虚拟机超卖比较严重的场景，这个数值非常明显。 这部分时间显然不是当前系统所用，而是被其他系统占用了。\n```\n\n​\t\t当us很高时，说明CPU时间主要消耗在用户代码上，可以从用户代码角度考虑优化性能；当sy很高时，说明CPU时间主要消耗在内核上，可以从是否系统调用频繁、CPU进程或线程切换频繁角度考虑性能的优化；当wa很高时，说明有进程在进行频繁的IO操作，可能是磁盘IO或者网络IO。一般情况下，如果%us+%sy<=70%，我们可以认为系统的运行状态良好。\n\n##### 内存\n\n​\t\ttotal(内存总量),free(空闲内存),used(已使用内存),buffer/cache(缓存)。buffers与cached都是内存操作，用来保存系统曾经打开过的文件以及文件属性信息，这样当操作系统需要读取某些文件时，会优先从buffers与cached内存区查找，然后才从磁盘读取。通过缓存，能够大大提高了操作系统的性能。因此，对于linux系统来说，可用于分配的内存不止free的内存，同时还包括cached的内存（其实还包括buffers的内存）。cached和buffers都属于缓存，它们的区别主要在于cached主要用来缓冲频繁读取的文件，它可以直接记忆我们打开的文件内容；而buffers主要用来给块设备做的缓冲大小，只记录文件系统的元数据(metadata)以及缓存文件(tracking in-flight pages)信息，比如存储目录里面的内容，权限等。\n\n在性能测试中，经常会用到系统已用内存、物理已用内存、系统内存占用率以及物理内存占用率这几个指标，它们的计算公式如下：\n\n```\n物理已用内存 = 实际已用内存 - 缓冲 - 缓存 \n物理空闲内存 = 总物理内存 - 实际已用内存 + 缓冲 + 缓存 \n应用程序可用空闲内存 = 总物理内存 - 实际已用内存 \n应用程序已用内存 = 实际已用内存 - 缓冲 - 缓存\ntotal = used + free + buffer/cache\navaiable = free + buffer/cache\n```\n\n​\t\t一般情况下，系统内存占用率<=70%，我们可以认为系统的内存使用情况良好，如果超出则说明系统内存资源紧张。\n\n##### 磁盘\n\n- 磁盘I/O：I/O，即input/output，磁盘的输入输出，输入指的是对磁盘写入数据，输出指的是从磁盘读出数据，磁盘I/O可以理解为读写。应用发起的一次或多次数据请求，I/O请求的数据量又称I/O大小，单位为KiB，例如4KiB、256KiB、1024KiB等；\n- 磁盘IOPS：磁盘IOPS是指一秒内磁盘进行多少次I/O读写；\n- 磁盘吞吐量：每秒磁盘I/O的流量，即磁盘写入加上读出的数据的大小。\n\n```\nI/O 读写的类型，大体上可以分为：\n读 / 写 I/O：存数据时候对应的是写操作，取数据的时候对应的是是读操作。\n大 / 小块 I/O：这个数值指的是控制器指令中给出的连续读出扇区数目的多少。\n连续 / 随机 I/O：连续 I/O 指的是本次 I/O 给出的初始扇区地址和上一次 I/O 的结束扇区地址是完全连续或者相隔不多的。反之，如果相差很大，则算作一次随机 I/O。连续 I/O 比随机 I/O 效率高，因为在做连续 I/O 的时候，磁头几乎不用换道，或者换道的时间很短；而对于随机 I/O，如果这个 I/O 很多的话，会导致磁头不停地换道，造成效率的极大降低。\n顺序 / 并发 I/O：从概念上讲，并发 I/O 就是指向一块磁盘发出一条 I/O 指令后，不必等待它回应，接着向另外一块磁盘发 I/O 指令。对于具有条带性的 RAID（LUN），对其进行的 I/O 操作是并发的，例如：raid 0+1(1+0),raid5 等。反之则为顺序 I/O。\n吞吐量 = IOPS * I/O大小\n```\n\n##### 网络\n\n​\t网络吞吐量是指在某个时刻，在网络中的两个节点之间，提给给网络应用的剩余带宽。 即在没有帧丢失的状况下，设备能够接受的最大速率。\n\n```\n通常是以 4 个指标来衡量网络的性能，分别是带宽、延时、吞吐率、PPS（Packet Per Second），它们表示的意义如下\n带宽，表示链路的最大传输速率，单位是 b/s （比特 / 秒），带宽越大，其传输能力就越强。\n延时，表示请求数据包发送后，收到对端响应，所需要的时间延迟。不同的场景有着不同的含义，比如可以表示建立 TCP 连接所需的时间延迟，或一个数据包往返所需的时间延迟。\n吞吐率，表示单位时间内成功传输的数据量，单位是 b/s（比特 / 秒）或者 B/s（字节 / 秒），吞吐受带宽限制，带宽越大，吞吐率的上限才可能越高。\nPPS，全称是 Packet Per Second（包 / 秒），表示以网络包为单位的传输速率，一般用来评估系统对于网络的转发能力。\n当然，除了以上这四种基本的指标，还有一些其他常用的性能指标，比如：\n\n网络的可用性，表示网络能否正常通信；\n并发连接数，表示 TCP 连接数量；\n丢包率，表示所丢失数据包数量占所发送数据组的比率；\n重传率，表示重传网络包的比例；\n```\n\n## 工具集锦\n\n#### unixBench\n\nUnixBench的测试能力包含系统调用、读写、进程、2D、3D、管道、运算等系统基准性能，会对系统CPU、内存、磁盘、网络等各个方面进行一系列的测试。\n\n```\n./Run -c 1 -c 8 //表示执行两次，第一次单个copies,第二次8个copies的测试任务。\n```\n\n测试结果\n\n```\nmake all\nmake[1]: Entering directory '/path/to/test-tool/UnixBench5.1.3-1'\nChecking distribution of files\n./pgms  exists\n./src  exists\n./testdir  exists\n./results  exists\nmake[1]: Leaving directory '/path/to/test-tool/UnixBench5.1.3-1'\n\n   #    #  #    #  #  #    #          #####   ######  #    #   ####   #    #\n   #    #  ##   #  #   #  #           #    #  #       ##   #  #    #  #    #\n   #    #  # #  #  #    ##            #####   #####   # #  #  #       ######\n   #    #  #  # #  #    ##            #    #  #       #  # #  #       #    #\n   #    #  #   ##  #   #  #           #    #  #       #   ##  #    #  #    #\n    ####   #    #  #  #    #          #####   ######  #    #   ####   #    #\n\n   Version 5.1.3                      Based on the Byte Magazine Unix Benchmark\n\n   Multi-CPU version                  Version 5 revisions by Ian Smith,\n                                      Sunnyvale, CA, USA\n   January 13, 2011                   johantheghost at yahoo period com\n\n\n1 x Dhrystone 2 using register variables  1 2 3 4 5 6 7 8 9 10\n\n1 x Double-Precision Whetstone  1 2 3 4 5 6 7 8 9 10\n\n1 x Execl Throughput  1 2 3\n\n1 x File Copy 1024 bufsize 2000 maxblocks  1 2 3\n\n1 x File Copy 256 bufsize 500 maxblocks  1 2 3\n\n1 x File Copy 4096 bufsize 8000 maxblocks  1 2 3\n\n1 x Pipe Throughput  1 2 3 4 5 6 7 8 9 10\n\n1 x Pipe-based Context Switching  1 2 3 4 5 6 7 8 9 10\n\n1 x Process Creation  1 2 3\n\n1 x System Call Overhead  1 2 3 4 5 6 7 8 9 10\n\n1 x Shell Scripts (1 concurrent)  1 2 3\n\n1 x Shell Scripts (8 concurrent)  1 2 3\n\n8 x Dhrystone 2 using register variables  1 2 3 4 5 6 7 8 9 10\n\n8 x Double-Precision Whetstone  1 2 3 4 5 6 7 8 9 10\n\n8 x Execl Throughput  1 2 3\n\n8 x File Copy 1024 bufsize 2000 maxblocks  1 2 3\n\n8 x File Copy 256 bufsize 500 maxblocks  1 2 3\n\n8 x File Copy 4096 bufsize 8000 maxblocks  1 2 3\n\n8 x Pipe Throughput  1 2 3 4 5 6 7 8 9 10\n\n8 x Pipe-based Context Switching  1 2 3 4 5 6 7 8 9 10\n\n8 x Process Creation  1 2 3\n\n8 x System Call Overhead  1 2 3 4 5 6 7 8 9 10\n\n8 x Shell Scripts (1 concurrent)  1 2 3\n\n8 x Shell Scripts (8 concurrent)  1 2 3\n\n========================================================================\n   BYTE UNIX Benchmarks (Version 5.1.3)\n\n   System: wang-PC: GNU/Linux\n   OS: GNU/Linux -- 5.15.77-amd64-desktop -- #2 SMP Thu Jun 15 16:06:18 CST 2023\n   Machine: x86_64 (unknown)\n   Language: en_US.utf8 (charmap=\"UTF-8\", collate=\"UTF-8\")\n   CPU 0: Intel(R) Core(TM) i5-10210U CPU @ 1.60GHz (4199.9 bogomips)\n          Hyper-Threading, x86-64, MMX, Physical Address Ext, SYSENTER/SYSEXIT, SYSCALL/SYSRET, Intel virtualization\n   CPU 1: Intel(R) Core(TM) i5-10210U CPU @ 1.60GHz (4199.9 bogomips)\n          Hyper-Threading, x86-64, MMX, Physical Address Ext, SYSENTER/SYSEXIT, SYSCALL/SYSRET, Intel virtualization\n   CPU 2: Intel(R) Core(TM) i5-10210U CPU @ 1.60GHz (4199.9 bogomips)\n          Hyper-Threading, x86-64, MMX, Physical Address Ext, SYSENTER/SYSEXIT, SYSCALL/SYSRET, Intel virtualization\n   CPU 3: Intel(R) Core(TM) i5-10210U CPU @ 1.60GHz (4199.9 bogomips)\n          Hyper-Threading, x86-64, MMX, Physical Address Ext, SYSENTER/SYSEXIT, SYSCALL/SYSRET, Intel virtualization\n   CPU 4: Intel(R) Core(TM) i5-10210U CPU @ 1.60GHz (4199.9 bogomips)\n          Hyper-Threading, x86-64, MMX, Physical Address Ext, SYSENTER/SYSEXIT, SYSCALL/SYSRET, Intel virtualization\n   CPU 5: Intel(R) Core(TM) i5-10210U CPU @ 1.60GHz (4199.9 bogomips)\n          Hyper-Threading, x86-64, MMX, Physical Address Ext, SYSENTER/SYSEXIT, SYSCALL/SYSRET, Intel virtualization\n   CPU 6: Intel(R) Core(TM) i5-10210U CPU @ 1.60GHz (4199.9 bogomips)\n          Hyper-Threading, x86-64, MMX, Physical Address Ext, SYSENTER/SYSEXIT, SYSCALL/SYSRET, Intel virtualization\n   CPU 7: Intel(R) Core(TM) i5-10210U CPU @ 1.60GHz (4199.9 bogomips)\n          Hyper-Threading, x86-64, MMX, Physical Address Ext, SYSENTER/SYSEXIT, SYSCALL/SYSRET, Intel virtualization\n   14:50:41 up 11 days, 23:45,  1 user,  load average: 0.95, 1.32, 7.18; runlevel 5\n\n------------------------------------------------------------------------\nBenchmark Run: Wed Jan 24 2024 14:50:41 - 15:18:32\n8 CPUs in system; running 1 parallel copy of tests\n\nDhrystone 2 using register variables       47877041.4 lps   (10.0 s, 7 samples)\nDouble-Precision Whetstone                     7784.4 MWIPS (9.0 s, 7 samples)\nExecl Throughput                               5666.5 lps   (30.0 s, 2 samples)\nFile Copy 1024 bufsize 2000 maxblocks       1493924.1 KBps  (30.0 s, 2 samples)\nFile Copy 256 bufsize 500 maxblocks          426805.3 KBps  (30.0 s, 2 samples)\nFile Copy 4096 bufsize 8000 maxblocks       3119870.2 KBps  (30.0 s, 2 samples)\nPipe Throughput                             2577750.5 lps   (10.0 s, 7 samples)\nPipe-based Context Switching                 296557.3 lps   (10.0 s, 7 samples)\nProcess Creation                              13157.5 lps   (30.0 s, 2 samples)\nShell Scripts (1 concurrent)                  14761.5 lpm   (60.0 s, 2 samples)\nShell Scripts (8 concurrent)                   4321.8 lpm   (60.0 s, 2 samples)\nSystem Call Overhead                        2784511.9 lps   (10.0 s, 7 samples)\n\nSystem Benchmarks Index Values               BASELINE       RESULT    INDEX\nDhrystone 2 using register variables         116700.0   47877041.4   4102.6\nDouble-Precision Whetstone                       55.0       7784.4   1415.3\nExecl Throughput                                 43.0       5666.5   1317.8\nFile Copy 1024 bufsize 2000 maxblocks          3960.0    1493924.1   3772.5\nFile Copy 256 bufsize 500 maxblocks            1655.0     426805.3   2578.9\nFile Copy 4096 bufsize 8000 maxblocks          5800.0    3119870.2   5379.1\nPipe Throughput                               12440.0    2577750.5   2072.1\nPipe-based Context Switching                   4000.0     296557.3    741.4\nProcess Creation                                126.0      13157.5   1044.2\nShell Scripts (1 concurrent)                     42.4      14761.5   3481.5\nShell Scripts (8 concurrent)                      6.0       4321.8   7203.0\nSystem Call Overhead                          15000.0    2784511.9   1856.3\n                                                                   ========\nSystem Benchmarks Index Score                                        2360.4\n\n------------------------------------------------------------------------\nBenchmark Run: Wed Jan 24 2024 15:18:32 - 15:46:49\n8 CPUs in system; running 8 parallel copies of tests\n\nDhrystone 2 using register variables      176274670.8 lps   (10.0 s, 7 samples)\nDouble-Precision Whetstone                    46994.6 MWIPS (9.4 s, 7 samples)\nExecl Throughput                              20151.0 lps   (30.0 s, 2 samples)\nFile Copy 1024 bufsize 2000 maxblocks       1745833.5 KBps  (30.0 s, 2 samples)\nFile Copy 256 bufsize 500 maxblocks          478830.4 KBps  (30.0 s, 2 samples)\nFile Copy 4096 bufsize 8000 maxblocks       4568801.0 KBps  (30.0 s, 2 samples)\nPipe Throughput                             9157085.1 lps   (10.0 s, 7 samples)\nPipe-based Context Switching                1132991.1 lps   (10.0 s, 7 samples)\nProcess Creation                              44340.3 lps   (30.0 s, 2 samples)\nShell Scripts (1 concurrent)                  36537.4 lpm   (60.0 s, 2 samples)\nShell Scripts (8 concurrent)                   4653.2 lpm   (60.1 s, 2 samples)\nSystem Call Overhead                        8498217.7 lps   (10.0 s, 7 samples)\n\nSystem Benchmarks Index Values               BASELINE       RESULT    INDEX\nDhrystone 2 using register variables         116700.0  176274670.8  15104.9\nDouble-Precision Whetstone                       55.0      46994.6   8544.5\nExecl Throughput                                 43.0      20151.0   4686.3\nFile Copy 1024 bufsize 2000 maxblocks          3960.0    1745833.5   4408.7\nFile Copy 256 bufsize 500 maxblocks            1655.0     478830.4   2893.2\nFile Copy 4096 bufsize 8000 maxblocks          5800.0    4568801.0   7877.2\nPipe Throughput                               12440.0    9157085.1   7361.0\nPipe-based Context Switching                   4000.0    1132991.1   2832.5\nProcess Creation                                126.0      44340.3   3519.1\nShell Scripts (1 concurrent)                     42.4      36537.4   8617.3\nShell Scripts (8 concurrent)                      6.0       4653.2   7755.3\nSystem Call Overhead                          15000.0    8498217.7   5665.5\n                                                                   ========\nSystem Benchmarks Index Score                                        5874.3\n```\n\n测试项目\n\n![image-20240124153054135](/home/wang/.config/Typora/typora-user-images/image-20240124153054135.png)\n\n```\nDhrystone测试：\n\t测试聚焦在字符串处理，没有浮点运算操作。这个测试用于测试链接器编译、代码优化、内存缓存、等待状态、整数数据类型等。\nWhetstone测试：\n\t测试项目用于测试浮点运算效率和速度。含若干个科学计算的典型性能模块，包含大量的C语言函数,sin cos sqrt exp和日志以及使用整数和浮点的数学操作。包含数组访问、条件分支和过程调用。\nExecl Throughput测试：\n\t每秒钟可以执行的execl系统调用的次数。\nFile Copy测试：\n\t这项测试衡量文件数据从一个文件被传输到另外一个，使用大量的缓存。包括文件的读、写、复制测试，测试指标是一定时间内（默认是10秒）被重写、读、复制的字符数量。\nPipe Throughput(管道吞吐)测试:\n\t测试在一秒钟一个进程写512比特到一个管道中并且读回来的次数。管道吞吐测试和实际编程有差距。\nPipe-based Context Switching(基于管道的上下文交互)测试:\n\t测试衡量两个进程通过管道交换和整数倍的增加吞吐的次数。基于管道的上下文切换和真实程序很类似。测试程序产生一个双向管道通讯的子线程。\nProcess Creation(进程创建)测试:\n\t这项测试衡量一个进程能产生子线程并且立即退出的次数。新进程真的创建进程阻塞和内存占用，所以测试程序直接使用内存带宽。这项测试用于典型的比较大量的操作系统进程创建操作。\nShell Scripts测试:\n\tshell脚本测试用于衡量在一分钟内，一个进程可以启动并停止shell脚本的次数，通常会测试1，2， 3， 4， 8 个shell脚本的共同拷贝，shell脚本是一套转化数据文件的脚本。\nSystem Call Overhead （系统调用消耗）测试:\n\t测试衡量进入和离开系统内核的消耗，例如，系统调用的消耗。程序简单重复的执行getpid调用（返回调用的进程id）。消耗的指标是调用进入和离开内核的执行时间。\nGraphical Tests(图形)测试:\n\t测试非常粗的2D和3D图形性能，尤其是3D测试非常有限。测试结果和硬件，系统合适的驱动关系很大。\n```\n\n#### fio\n\nfio主要用来测试硬盘io性能。这个工具的可定制性非常强，可以根据测试者的想法进行各种混合io测试，它支持13种不同类型io引擎（libaio、sync、mmap、posixaio、network等等）。它可以测试块设备或文件，可以通过多线程或进程模拟各种io操作，可以测试统计iops、带宽和时延等性能。我们主要使用fio工具进行存储性能测试。\n\n```\nfio -name=iouring_test -filename=/mnt/vdd/testfile -iodepth=128 -thread -rw=randread -ioengine=io_uring -sqthread_poll=1 -direct=1 -bs=4k -size=10G -numjobs=1 -runtime=120 -group_reporting\n```\n\n说明：\nfilename=/dev/sdb1    测试文件名称，通常选择需要测试的盘的data目录。\ndirect=1         测试过程绕过机器自带的buffer。使测试结果更真实。\nbs=4k          单次io的块文件大小为16k\nsize=5g  本次的测试文件大小为5g，以每次4k的io进行测试。\nnumjobs=1        本次的测试线程为30.\nruntime=120       测试时间为120秒，如果不写则一直将5g文件分4k每次写完为止。\nioengine=io_uring      io引擎使用io_uring方式\ngroup_reporting     关于显示结果的，汇总每个进程的信息。\n\n此外\nrwmixwrite=30      在混合读写的模式下，写占30%\nlockmem=1g        只使用1g内存进行测试。\nzero_buffers       用0初始化系统buffer。\nnrfiles=8        每个进程生成文件的数量。\nread 顺序读\nwrite 顺序写\nrw,readwrite 顺序混合读写\nrandwrite 随机写\nrandread 随机读\nrandrw 随机混合读写\n\n```\nuring -sqthread_poll=1 -direct=1 -bs=4k -size=10G -numjobs=1 -runtime=120 -group_reporting\niouring_test: (g=0): rw=randread, bs=(R) 4096B-4096B, (W) 4096B-4096B, (T) 4096B-4096B, ioengine=io_uring, iodepth=128\nfio-3.22\nStarting 1 thread\nJobs: 1 (f=1): [r(1)][3.2%][eta 01h:01m:42s]                        \niouring_test: (groupid=0, jobs=1): err= 0: pid=63227: Wed Jan 24 15:55:58 2024\n  read: IOPS=682, BW=2729KiB/s (2795kB/s)(330MiB/123713msec)  //读操作的iops(每秒输入输出量)和bw(带宽)\n    clat (usec): min=506, max=11807k, avg=187540.47, stdev=846840.59\n     lat (usec): min=507, max=11807k, avg=187541.31, stdev=846840.60\n    clat percentiles (usec):\n     |  1.00th=[    1188],  5.00th=[    5800], 10.00th=[    8160],\n     | 20.00th=[   11469], 30.00th=[   15008], 40.00th=[   19792],\n     | 50.00th=[   26084], 60.00th=[   36439], 70.00th=[   56361],\n     | 80.00th=[  104334], 90.00th=[  238027], 95.00th=[  425722],\n     | 99.00th=[ 5804917], 99.50th=[ 7214203], 99.90th=[ 8422163],\n     | 99.95th=[ 8657044], 99.99th=[10804528]\n   bw (  KiB/s): min= 1357, max= 5397, per=100.00%, avg=2806.35, stdev=636.20, samples=240\n   iops        : min=  339, max= 1349, avg=701.40, stdev=159.08, samples=240\n  lat (usec)   : 750=0.13%, 1000=0.50%\n  lat (msec)   : 2=0.93%, 4=1.25%, 10=12.60%, 20=25.15%, 50=27.08%\n  lat (msec)   : 100=11.79%, 250=11.16%, 500=5.21%, 750=1.25%, 1000=0.54%\n  lat (msec)   : 2000=0.58%, >=2000=1.83%\n  cpu          : usr=99.85%, sys=0.08%, ctx=94, majf=0, minf=0\n  IO depths    : 1=0.1%, 2=0.1%, 4=0.1%, 8=0.1%, 16=0.1%, 32=0.1%, >=64=99.9%\n     submit    : 0=0.0%, 4=0.0%, 8=0.0%, 16=0.0%, 32=0.0%, 64=0.0%, >=64=0.0%\n     complete  : 0=0.0%, 4=100.0%, 8=0.0%, 16=0.0%, 32=0.0%, 64=0.0%, >=64=0.1%\n     issued rwts: total=84415,0,0,0 short=0,0,0,0 dropped=0,0,0,0\n     latency   : target=0, window=0, percentile=100.00%, depth=128\n\nRun status group 0 (all jobs):\n   READ: bw=2729KiB/s (2795kB/s), 2729KiB/s-2729KiB/s (2795kB/s-2795kB/s), io=330MiB (346MB), run=123713-123713msec\n\nDisk stats (read/write):\n    dm-0: ios=84415/17, merge=0/0, ticks=15416332/27284, in_queue=15443616, util=100.00%, aggrios=84414/15, aggrmerge=1/2, aggrticks=15402295/25881, aggrin_queue=15260184, aggrutil=100.00%\n  vda: ios=84414/15, merge=1/2, ticks=15402295/25881, in_queue=15260184, util=100.00%\n```\n\n#### lmbench\n\n`Lmbench` 是一款简易可以移植的内存测试工具，其主要功能有，带宽测评（读取缓存文件、拷贝内存、读/写内存、管道、TCP），延时测评（上下文切换、网络、文件系统的建立和删除、进程创建、[信号处理](https://so.csdn.net/so/search?q=信号处理&spm=1001.2101.3001.7020)、上层系统调用、内存读入反应时间）等功能。\n\n#### Stream\n\nStream内存带宽性能测试基准工具。\n\nstream通过生成四种不同模式下的内存读写操作，用于测试内存带宽。\n\nCopy操作最为简单，它先访问一个内存单元读出其中的值，再将值写入到另一个内存单元。\n\nScale操作先从内存单元读出其中的值，作一个乘法运算，再将结果写入到另一个内存单元。\n\nAdd操作先从内存单元读出两个值，做加法运算， 再将结果写入到另一个内存单元。\n\nTriad的中文含义是将三个组合起来，在本测试中表示的意思是将Copy、Scale、Add三种操作组合起来进行测试。具体操作方式是：先从内存数组中读两个值a、b，对其进行乘加混合运算（a+因子* b），将运算结果写入到另一个内存单元。 \n\n#### iozone\n\nIOzone是文件系统性能测试工具。可以测试不同的操作系统中文件系统的读写性能。可以测试 Read, write, re-read,re-write, read backwards, read strided, fread, fwrite, random read, pread, mmap, aio_read, aio_write 等等不同的模式下的硬盘的性能。\n\n| Write          | 测试向一个新文件写入的性能。当一个新文件被写入时，不仅仅是那些文件中的数据需要被存储，还包括那些用于定位数据存储在存储介质的具体位置的额外信息。这些额外信息被称作 “元数据”。它包括目录信息，所分配的空间和一些与该文件有关但又并非该文件所含数据的其他数据。拜这些额外信息所赐，Write 的性能通常会比 Re-write 的性能低。 |\n| -------------- | ------------------------------------------------------------ |\n| Re-write       | 测试向一个已存在的文件写入的性能。当一个已存在的文件被写入时，所需工作量较少，因为此时元数据已经存在。Re-write 的性能通常比 Write 的性能高。 |\n| Read           | 测试读一个已存在的文件的性能。                               |\n| Re-Read        | 测试读一个最近读过的文件的性能。Re-Read 性能会高些，因为操作系统通常会缓存最近读过的文件数据。这个缓存可以被用于读以提高性能。 |\n| Random Read    | 测试读一个文件中的随机偏移量的性能。许多因素可能影响这种情况下的系统性能，例如：操作系统缓存的大小，磁盘数量，寻道延迟和其他。 |\n| Random Write   | 测试写一个文件中的随机偏移量的性能。同样，许多因素可能影响这种情况下的系统性能，例如：操作系统缓存的大小，磁盘数量，寻道延迟和其他。 |\n| Random Mix     | 测试读写一个文件中的随机偏移量的性能。同样，许多因素可能影响这种情况下的系统性能，例如：操作系统缓存的大小，磁盘数量，寻道延迟和其他。这个测试只有在吞吐量测试模式下才能进行。每个线程 / 进程运行读或写测试。这种分布式读 / 写测试是基于 round robin 模式的。最好使用多于一个线程 / 进程执行此测试。 |\n| Backwards Read | 测试使用倒序读一个文件的性能。这种读文件方法可能看起来很可笑，事实上，有些应用确实这么干。MSC Nastran 是一个使用倒序读文件的应用程序的一个例子。它所读的文件都十分大（大小从 G 级别到 T 级别）。尽管许多操作系统使用一些特殊实现来优化顺序读文件的速度，很少有操作系统注意到并增强倒序读文件的性能。 |\n| Record Rewrite | 测试写与覆盖写一个文件中的特定块的性能。这个块可能会发生一些很有趣的事。如果这个块足够小（比 CPU 数据缓存小），测出来的性能将会非常高。如果比 CPU 数据缓存大而比 TLB 小，测出来的是另一个阶段的性能。如果比此二者都大，但比操作系统缓存小，得到的性能又是一个阶段。若大到超过操作系统缓存，又是另一番结果。 |\n| Strided Read   | 测试跳跃读一个文件的性能。举例如下：在 0 偏移量处读 4Kbytes，然后间隔 200Kbytes, 读 4Kbytes，再间隔 200Kbytes，如此反复。此时的模式是读 4Kbytes，间隔 200Kbytes 并重复这个模式。这又是一个典型的应用行为，文件中使用了数据结构并且访问这个数据结构的特定区域的应用程序常常这样做。许多操作系统并没注意到这种行为或者针对这种类型的访问做一些优化。同样，这种访问行为也可能导致一些有趣的性能异常。一个例子是在一个数据片化的文件系统里，应用程序的跳跃导致某一个特定的磁盘成为性能瓶颈。 |\n| Fwrite         | 测试调用库函数 fwrite () 来写文件的性能。这是一个执行缓存与阻塞写操作的库例程。缓存在用户空间之内。如果一个应用程序想要写很小的传输块，fwrite () 函数中的缓存与阻塞 I/O 功能能通过减少实际操作系统调用并在操作系统调用时增加传输块的大小来增强应用程序的性能。这个测试是写一个新文件，所以元数据的写入也是要的。 |\n| Frewrite       | 测试调用库函数 fwrite () 来写文件的性能。这是一个执行缓存与阻塞写操作的库例程。缓存在用户空间之内。如果一个应用程序想要写很小的传输块，fwrite () 函数中的缓存与阻塞 I/O 功能能通过减少实际操作系统调用并在操作系统调用时增加传输块的大小来增强应用程序的性能。 |\n\n#### iperf3\n\niperf3是基于Client/Server的网络性能测试工具，通常用于测试网络上可达到的最大带宽，它能够测试TCP、UDP及SCTP的带宽质量，可以提供网络吞吐量、网络波动、网络丢包率以及最大传输单元大小等信息，能够帮助我们测试网络性能，定位网络瓶颈。\n\n#### netperf\n\nNetperf是一种网络性能的测量工具，可以测试基于TCP或UDP吞吐、响应速率。Netperf包括Clien和Server端，Server端主要用来实现监听工作，Client端进行测试。\n\n#### ltp\n\nLTP测试套件是测试Linux内核和内核相关特性的工具的集合。该工具的目的是通过把测试自动化引入到Linux内核测试，提高Linux的内核质量。通过功能测试、压力测试和回归测试来验证 Linux 系统的可靠性、稳定性和健壮性。整个项目约4000个测试用例。\n","source":"_posts/常用性能测试小工具集锦.md","raw":"---\ntitle: 常用性能测试小工具集锦\ndate: 2023-12-25 10:27:28\ndescription: 常用性能测试小工具集锦\ntype: \"tags\"\ncomments: true\ncategories:\n- Linux\n- Tools\n- Test\ntags:\n- Linux\n- Test\n---\n# 常用性能测试小工具集锦\n\n## 性能测试\n\n​\t基于工作中做的性能测试，收纳整理出《常用性能测试小工具集锦》。主要从性能测试和工具集锦两个方面分享。\n\n### 性能测试\n\n​\t\t性能测试是一种评估系统性能的方法，它可以检测系统的可扩展性、吞吐量、响应时间、负载能力、稳定性和安全性等指标。性能测试可以帮助开发人员、系统管理员和业务用户了解系统的实际运行情况，并找出可能存在的瓶颈和问题。\n\n#### 性能测试指标\n\n​\t\t衡量系统性能的评价标准。\n\n##### **系统性能测试指标**\n\n​\t\t响应时间、系统处理能力，吞吐量，并发用户数，错误率等。\n\n##### 响应时间\n\n​\t\t简称RT，指的是客户发出请求到得到系统响应的整个过程的时间。也就是用户从客户端发起一个请求开始，到客户端接收到从服务器端返回的响应结束，整个过程所耗费的时间。\n\n##### 系统处理能力\n\n​\t\t系统在利用系统硬件平台和软件平台进行信息处理的能力。系统处理能力通过系统每秒钟能够处理的交易数量来评价。交易有两种理解：一是业务人员角度的一笔业务过程；二是系统角度的一次交易申请和响应过程。前者称为业务交易过程，后者称为事务。系统处理能力又用HPS(每秒点击次数)，TPS(系统每秒处理交易次数)，QPS(系统每秒处理查询次数)指标来度量。\n\n##### 吞吐量\n\n​\t\t吞吐量是指系统在单位时间内处理请求的数量。尤其对于并发系统，通常需要用吞吐量作为性能指标。\n\n##### 并发用户数\n\n​\t\t并发用户数指在同一时刻内，登录系统并进行业务操作的用户数量。\n\n##### 错误率\n\n​\t\t简称FR，指系统在负载情况下，失败交易的概率。错误率＝(失败交易数/交易总数)*100%。\n\n#### **资源性能指标**\n\nCPU、内存、磁盘吞吐量、网络吞吐量等。\n\n##### CPU\n\n​\t\tCPU指标主要指的CPU利用率。单位时间内服务器CPU的使用统计，可以用除CPU空闲时间外其他时间占总CPU时间的百分比来表示。即：CPU使用率=1-CPU空闲时间/总CPU时间。\n\n```\n字段说明：\nus (user)：用户态的CPU使用时间比例，是用户运行程序的真正时间，它不包括后面的ni时间。\nsy (system): 内核态的CPU使用时间比例，是操作系统的运行时间，操作系统运行时，用户运行程序往往处于等待状态。\nni (nice): 表示低优先级用户态的CPU时间比例，取值范围为[-20,19]，数值越大，则优先级越低。\nid (idle): 表示空闲的CPU时间比例，值越大，CPU空闲时间比例越高，利用率越低。\nwa (iowait): 表示处于IO等待状态的CPU时间比例。\nhi (hard interrupt): 表示处理硬中断的CPU时间比例。硬中断，也叫异步中断。硬中断是由硬件设备依照CPU时钟信号产生的，即意味着中断发生具备随机性和突发性，可以在指令正在执行时发生。\nsi (soft interrupt): 与hi相反，表示处理软中断的CPU时间比例。软中断，也叫同步中断。软中断是由CPU执行中断产生指令时产生，是由程序预先实现好的，不是随机的。\nst (steal): 表示当前系统运行在虚拟机中被其他虚拟机占用的CPU时间比例。这体现为物理 CPU 没有办法为当前系统服务，通常正在为另一个系统服务。 在虚拟机超卖比较严重的场景，这个数值非常明显。 这部分时间显然不是当前系统所用，而是被其他系统占用了。\n```\n\n​\t\t当us很高时，说明CPU时间主要消耗在用户代码上，可以从用户代码角度考虑优化性能；当sy很高时，说明CPU时间主要消耗在内核上，可以从是否系统调用频繁、CPU进程或线程切换频繁角度考虑性能的优化；当wa很高时，说明有进程在进行频繁的IO操作，可能是磁盘IO或者网络IO。一般情况下，如果%us+%sy<=70%，我们可以认为系统的运行状态良好。\n\n##### 内存\n\n​\t\ttotal(内存总量),free(空闲内存),used(已使用内存),buffer/cache(缓存)。buffers与cached都是内存操作，用来保存系统曾经打开过的文件以及文件属性信息，这样当操作系统需要读取某些文件时，会优先从buffers与cached内存区查找，然后才从磁盘读取。通过缓存，能够大大提高了操作系统的性能。因此，对于linux系统来说，可用于分配的内存不止free的内存，同时还包括cached的内存（其实还包括buffers的内存）。cached和buffers都属于缓存，它们的区别主要在于cached主要用来缓冲频繁读取的文件，它可以直接记忆我们打开的文件内容；而buffers主要用来给块设备做的缓冲大小，只记录文件系统的元数据(metadata)以及缓存文件(tracking in-flight pages)信息，比如存储目录里面的内容，权限等。\n\n在性能测试中，经常会用到系统已用内存、物理已用内存、系统内存占用率以及物理内存占用率这几个指标，它们的计算公式如下：\n\n```\n物理已用内存 = 实际已用内存 - 缓冲 - 缓存 \n物理空闲内存 = 总物理内存 - 实际已用内存 + 缓冲 + 缓存 \n应用程序可用空闲内存 = 总物理内存 - 实际已用内存 \n应用程序已用内存 = 实际已用内存 - 缓冲 - 缓存\ntotal = used + free + buffer/cache\navaiable = free + buffer/cache\n```\n\n​\t\t一般情况下，系统内存占用率<=70%，我们可以认为系统的内存使用情况良好，如果超出则说明系统内存资源紧张。\n\n##### 磁盘\n\n- 磁盘I/O：I/O，即input/output，磁盘的输入输出，输入指的是对磁盘写入数据，输出指的是从磁盘读出数据，磁盘I/O可以理解为读写。应用发起的一次或多次数据请求，I/O请求的数据量又称I/O大小，单位为KiB，例如4KiB、256KiB、1024KiB等；\n- 磁盘IOPS：磁盘IOPS是指一秒内磁盘进行多少次I/O读写；\n- 磁盘吞吐量：每秒磁盘I/O的流量，即磁盘写入加上读出的数据的大小。\n\n```\nI/O 读写的类型，大体上可以分为：\n读 / 写 I/O：存数据时候对应的是写操作，取数据的时候对应的是是读操作。\n大 / 小块 I/O：这个数值指的是控制器指令中给出的连续读出扇区数目的多少。\n连续 / 随机 I/O：连续 I/O 指的是本次 I/O 给出的初始扇区地址和上一次 I/O 的结束扇区地址是完全连续或者相隔不多的。反之，如果相差很大，则算作一次随机 I/O。连续 I/O 比随机 I/O 效率高，因为在做连续 I/O 的时候，磁头几乎不用换道，或者换道的时间很短；而对于随机 I/O，如果这个 I/O 很多的话，会导致磁头不停地换道，造成效率的极大降低。\n顺序 / 并发 I/O：从概念上讲，并发 I/O 就是指向一块磁盘发出一条 I/O 指令后，不必等待它回应，接着向另外一块磁盘发 I/O 指令。对于具有条带性的 RAID（LUN），对其进行的 I/O 操作是并发的，例如：raid 0+1(1+0),raid5 等。反之则为顺序 I/O。\n吞吐量 = IOPS * I/O大小\n```\n\n##### 网络\n\n​\t网络吞吐量是指在某个时刻，在网络中的两个节点之间，提给给网络应用的剩余带宽。 即在没有帧丢失的状况下，设备能够接受的最大速率。\n\n```\n通常是以 4 个指标来衡量网络的性能，分别是带宽、延时、吞吐率、PPS（Packet Per Second），它们表示的意义如下\n带宽，表示链路的最大传输速率，单位是 b/s （比特 / 秒），带宽越大，其传输能力就越强。\n延时，表示请求数据包发送后，收到对端响应，所需要的时间延迟。不同的场景有着不同的含义，比如可以表示建立 TCP 连接所需的时间延迟，或一个数据包往返所需的时间延迟。\n吞吐率，表示单位时间内成功传输的数据量，单位是 b/s（比特 / 秒）或者 B/s（字节 / 秒），吞吐受带宽限制，带宽越大，吞吐率的上限才可能越高。\nPPS，全称是 Packet Per Second（包 / 秒），表示以网络包为单位的传输速率，一般用来评估系统对于网络的转发能力。\n当然，除了以上这四种基本的指标，还有一些其他常用的性能指标，比如：\n\n网络的可用性，表示网络能否正常通信；\n并发连接数，表示 TCP 连接数量；\n丢包率，表示所丢失数据包数量占所发送数据组的比率；\n重传率，表示重传网络包的比例；\n```\n\n## 工具集锦\n\n#### unixBench\n\nUnixBench的测试能力包含系统调用、读写、进程、2D、3D、管道、运算等系统基准性能，会对系统CPU、内存、磁盘、网络等各个方面进行一系列的测试。\n\n```\n./Run -c 1 -c 8 //表示执行两次，第一次单个copies,第二次8个copies的测试任务。\n```\n\n测试结果\n\n```\nmake all\nmake[1]: Entering directory '/path/to/test-tool/UnixBench5.1.3-1'\nChecking distribution of files\n./pgms  exists\n./src  exists\n./testdir  exists\n./results  exists\nmake[1]: Leaving directory '/path/to/test-tool/UnixBench5.1.3-1'\n\n   #    #  #    #  #  #    #          #####   ######  #    #   ####   #    #\n   #    #  ##   #  #   #  #           #    #  #       ##   #  #    #  #    #\n   #    #  # #  #  #    ##            #####   #####   # #  #  #       ######\n   #    #  #  # #  #    ##            #    #  #       #  # #  #       #    #\n   #    #  #   ##  #   #  #           #    #  #       #   ##  #    #  #    #\n    ####   #    #  #  #    #          #####   ######  #    #   ####   #    #\n\n   Version 5.1.3                      Based on the Byte Magazine Unix Benchmark\n\n   Multi-CPU version                  Version 5 revisions by Ian Smith,\n                                      Sunnyvale, CA, USA\n   January 13, 2011                   johantheghost at yahoo period com\n\n\n1 x Dhrystone 2 using register variables  1 2 3 4 5 6 7 8 9 10\n\n1 x Double-Precision Whetstone  1 2 3 4 5 6 7 8 9 10\n\n1 x Execl Throughput  1 2 3\n\n1 x File Copy 1024 bufsize 2000 maxblocks  1 2 3\n\n1 x File Copy 256 bufsize 500 maxblocks  1 2 3\n\n1 x File Copy 4096 bufsize 8000 maxblocks  1 2 3\n\n1 x Pipe Throughput  1 2 3 4 5 6 7 8 9 10\n\n1 x Pipe-based Context Switching  1 2 3 4 5 6 7 8 9 10\n\n1 x Process Creation  1 2 3\n\n1 x System Call Overhead  1 2 3 4 5 6 7 8 9 10\n\n1 x Shell Scripts (1 concurrent)  1 2 3\n\n1 x Shell Scripts (8 concurrent)  1 2 3\n\n8 x Dhrystone 2 using register variables  1 2 3 4 5 6 7 8 9 10\n\n8 x Double-Precision Whetstone  1 2 3 4 5 6 7 8 9 10\n\n8 x Execl Throughput  1 2 3\n\n8 x File Copy 1024 bufsize 2000 maxblocks  1 2 3\n\n8 x File Copy 256 bufsize 500 maxblocks  1 2 3\n\n8 x File Copy 4096 bufsize 8000 maxblocks  1 2 3\n\n8 x Pipe Throughput  1 2 3 4 5 6 7 8 9 10\n\n8 x Pipe-based Context Switching  1 2 3 4 5 6 7 8 9 10\n\n8 x Process Creation  1 2 3\n\n8 x System Call Overhead  1 2 3 4 5 6 7 8 9 10\n\n8 x Shell Scripts (1 concurrent)  1 2 3\n\n8 x Shell Scripts (8 concurrent)  1 2 3\n\n========================================================================\n   BYTE UNIX Benchmarks (Version 5.1.3)\n\n   System: wang-PC: GNU/Linux\n   OS: GNU/Linux -- 5.15.77-amd64-desktop -- #2 SMP Thu Jun 15 16:06:18 CST 2023\n   Machine: x86_64 (unknown)\n   Language: en_US.utf8 (charmap=\"UTF-8\", collate=\"UTF-8\")\n   CPU 0: Intel(R) Core(TM) i5-10210U CPU @ 1.60GHz (4199.9 bogomips)\n          Hyper-Threading, x86-64, MMX, Physical Address Ext, SYSENTER/SYSEXIT, SYSCALL/SYSRET, Intel virtualization\n   CPU 1: Intel(R) Core(TM) i5-10210U CPU @ 1.60GHz (4199.9 bogomips)\n          Hyper-Threading, x86-64, MMX, Physical Address Ext, SYSENTER/SYSEXIT, SYSCALL/SYSRET, Intel virtualization\n   CPU 2: Intel(R) Core(TM) i5-10210U CPU @ 1.60GHz (4199.9 bogomips)\n          Hyper-Threading, x86-64, MMX, Physical Address Ext, SYSENTER/SYSEXIT, SYSCALL/SYSRET, Intel virtualization\n   CPU 3: Intel(R) Core(TM) i5-10210U CPU @ 1.60GHz (4199.9 bogomips)\n          Hyper-Threading, x86-64, MMX, Physical Address Ext, SYSENTER/SYSEXIT, SYSCALL/SYSRET, Intel virtualization\n   CPU 4: Intel(R) Core(TM) i5-10210U CPU @ 1.60GHz (4199.9 bogomips)\n          Hyper-Threading, x86-64, MMX, Physical Address Ext, SYSENTER/SYSEXIT, SYSCALL/SYSRET, Intel virtualization\n   CPU 5: Intel(R) Core(TM) i5-10210U CPU @ 1.60GHz (4199.9 bogomips)\n          Hyper-Threading, x86-64, MMX, Physical Address Ext, SYSENTER/SYSEXIT, SYSCALL/SYSRET, Intel virtualization\n   CPU 6: Intel(R) Core(TM) i5-10210U CPU @ 1.60GHz (4199.9 bogomips)\n          Hyper-Threading, x86-64, MMX, Physical Address Ext, SYSENTER/SYSEXIT, SYSCALL/SYSRET, Intel virtualization\n   CPU 7: Intel(R) Core(TM) i5-10210U CPU @ 1.60GHz (4199.9 bogomips)\n          Hyper-Threading, x86-64, MMX, Physical Address Ext, SYSENTER/SYSEXIT, SYSCALL/SYSRET, Intel virtualization\n   14:50:41 up 11 days, 23:45,  1 user,  load average: 0.95, 1.32, 7.18; runlevel 5\n\n------------------------------------------------------------------------\nBenchmark Run: Wed Jan 24 2024 14:50:41 - 15:18:32\n8 CPUs in system; running 1 parallel copy of tests\n\nDhrystone 2 using register variables       47877041.4 lps   (10.0 s, 7 samples)\nDouble-Precision Whetstone                     7784.4 MWIPS (9.0 s, 7 samples)\nExecl Throughput                               5666.5 lps   (30.0 s, 2 samples)\nFile Copy 1024 bufsize 2000 maxblocks       1493924.1 KBps  (30.0 s, 2 samples)\nFile Copy 256 bufsize 500 maxblocks          426805.3 KBps  (30.0 s, 2 samples)\nFile Copy 4096 bufsize 8000 maxblocks       3119870.2 KBps  (30.0 s, 2 samples)\nPipe Throughput                             2577750.5 lps   (10.0 s, 7 samples)\nPipe-based Context Switching                 296557.3 lps   (10.0 s, 7 samples)\nProcess Creation                              13157.5 lps   (30.0 s, 2 samples)\nShell Scripts (1 concurrent)                  14761.5 lpm   (60.0 s, 2 samples)\nShell Scripts (8 concurrent)                   4321.8 lpm   (60.0 s, 2 samples)\nSystem Call Overhead                        2784511.9 lps   (10.0 s, 7 samples)\n\nSystem Benchmarks Index Values               BASELINE       RESULT    INDEX\nDhrystone 2 using register variables         116700.0   47877041.4   4102.6\nDouble-Precision Whetstone                       55.0       7784.4   1415.3\nExecl Throughput                                 43.0       5666.5   1317.8\nFile Copy 1024 bufsize 2000 maxblocks          3960.0    1493924.1   3772.5\nFile Copy 256 bufsize 500 maxblocks            1655.0     426805.3   2578.9\nFile Copy 4096 bufsize 8000 maxblocks          5800.0    3119870.2   5379.1\nPipe Throughput                               12440.0    2577750.5   2072.1\nPipe-based Context Switching                   4000.0     296557.3    741.4\nProcess Creation                                126.0      13157.5   1044.2\nShell Scripts (1 concurrent)                     42.4      14761.5   3481.5\nShell Scripts (8 concurrent)                      6.0       4321.8   7203.0\nSystem Call Overhead                          15000.0    2784511.9   1856.3\n                                                                   ========\nSystem Benchmarks Index Score                                        2360.4\n\n------------------------------------------------------------------------\nBenchmark Run: Wed Jan 24 2024 15:18:32 - 15:46:49\n8 CPUs in system; running 8 parallel copies of tests\n\nDhrystone 2 using register variables      176274670.8 lps   (10.0 s, 7 samples)\nDouble-Precision Whetstone                    46994.6 MWIPS (9.4 s, 7 samples)\nExecl Throughput                              20151.0 lps   (30.0 s, 2 samples)\nFile Copy 1024 bufsize 2000 maxblocks       1745833.5 KBps  (30.0 s, 2 samples)\nFile Copy 256 bufsize 500 maxblocks          478830.4 KBps  (30.0 s, 2 samples)\nFile Copy 4096 bufsize 8000 maxblocks       4568801.0 KBps  (30.0 s, 2 samples)\nPipe Throughput                             9157085.1 lps   (10.0 s, 7 samples)\nPipe-based Context Switching                1132991.1 lps   (10.0 s, 7 samples)\nProcess Creation                              44340.3 lps   (30.0 s, 2 samples)\nShell Scripts (1 concurrent)                  36537.4 lpm   (60.0 s, 2 samples)\nShell Scripts (8 concurrent)                   4653.2 lpm   (60.1 s, 2 samples)\nSystem Call Overhead                        8498217.7 lps   (10.0 s, 7 samples)\n\nSystem Benchmarks Index Values               BASELINE       RESULT    INDEX\nDhrystone 2 using register variables         116700.0  176274670.8  15104.9\nDouble-Precision Whetstone                       55.0      46994.6   8544.5\nExecl Throughput                                 43.0      20151.0   4686.3\nFile Copy 1024 bufsize 2000 maxblocks          3960.0    1745833.5   4408.7\nFile Copy 256 bufsize 500 maxblocks            1655.0     478830.4   2893.2\nFile Copy 4096 bufsize 8000 maxblocks          5800.0    4568801.0   7877.2\nPipe Throughput                               12440.0    9157085.1   7361.0\nPipe-based Context Switching                   4000.0    1132991.1   2832.5\nProcess Creation                                126.0      44340.3   3519.1\nShell Scripts (1 concurrent)                     42.4      36537.4   8617.3\nShell Scripts (8 concurrent)                      6.0       4653.2   7755.3\nSystem Call Overhead                          15000.0    8498217.7   5665.5\n                                                                   ========\nSystem Benchmarks Index Score                                        5874.3\n```\n\n测试项目\n\n![image-20240124153054135](/home/wang/.config/Typora/typora-user-images/image-20240124153054135.png)\n\n```\nDhrystone测试：\n\t测试聚焦在字符串处理，没有浮点运算操作。这个测试用于测试链接器编译、代码优化、内存缓存、等待状态、整数数据类型等。\nWhetstone测试：\n\t测试项目用于测试浮点运算效率和速度。含若干个科学计算的典型性能模块，包含大量的C语言函数,sin cos sqrt exp和日志以及使用整数和浮点的数学操作。包含数组访问、条件分支和过程调用。\nExecl Throughput测试：\n\t每秒钟可以执行的execl系统调用的次数。\nFile Copy测试：\n\t这项测试衡量文件数据从一个文件被传输到另外一个，使用大量的缓存。包括文件的读、写、复制测试，测试指标是一定时间内（默认是10秒）被重写、读、复制的字符数量。\nPipe Throughput(管道吞吐)测试:\n\t测试在一秒钟一个进程写512比特到一个管道中并且读回来的次数。管道吞吐测试和实际编程有差距。\nPipe-based Context Switching(基于管道的上下文交互)测试:\n\t测试衡量两个进程通过管道交换和整数倍的增加吞吐的次数。基于管道的上下文切换和真实程序很类似。测试程序产生一个双向管道通讯的子线程。\nProcess Creation(进程创建)测试:\n\t这项测试衡量一个进程能产生子线程并且立即退出的次数。新进程真的创建进程阻塞和内存占用，所以测试程序直接使用内存带宽。这项测试用于典型的比较大量的操作系统进程创建操作。\nShell Scripts测试:\n\tshell脚本测试用于衡量在一分钟内，一个进程可以启动并停止shell脚本的次数，通常会测试1，2， 3， 4， 8 个shell脚本的共同拷贝，shell脚本是一套转化数据文件的脚本。\nSystem Call Overhead （系统调用消耗）测试:\n\t测试衡量进入和离开系统内核的消耗，例如，系统调用的消耗。程序简单重复的执行getpid调用（返回调用的进程id）。消耗的指标是调用进入和离开内核的执行时间。\nGraphical Tests(图形)测试:\n\t测试非常粗的2D和3D图形性能，尤其是3D测试非常有限。测试结果和硬件，系统合适的驱动关系很大。\n```\n\n#### fio\n\nfio主要用来测试硬盘io性能。这个工具的可定制性非常强，可以根据测试者的想法进行各种混合io测试，它支持13种不同类型io引擎（libaio、sync、mmap、posixaio、network等等）。它可以测试块设备或文件，可以通过多线程或进程模拟各种io操作，可以测试统计iops、带宽和时延等性能。我们主要使用fio工具进行存储性能测试。\n\n```\nfio -name=iouring_test -filename=/mnt/vdd/testfile -iodepth=128 -thread -rw=randread -ioengine=io_uring -sqthread_poll=1 -direct=1 -bs=4k -size=10G -numjobs=1 -runtime=120 -group_reporting\n```\n\n说明：\nfilename=/dev/sdb1    测试文件名称，通常选择需要测试的盘的data目录。\ndirect=1         测试过程绕过机器自带的buffer。使测试结果更真实。\nbs=4k          单次io的块文件大小为16k\nsize=5g  本次的测试文件大小为5g，以每次4k的io进行测试。\nnumjobs=1        本次的测试线程为30.\nruntime=120       测试时间为120秒，如果不写则一直将5g文件分4k每次写完为止。\nioengine=io_uring      io引擎使用io_uring方式\ngroup_reporting     关于显示结果的，汇总每个进程的信息。\n\n此外\nrwmixwrite=30      在混合读写的模式下，写占30%\nlockmem=1g        只使用1g内存进行测试。\nzero_buffers       用0初始化系统buffer。\nnrfiles=8        每个进程生成文件的数量。\nread 顺序读\nwrite 顺序写\nrw,readwrite 顺序混合读写\nrandwrite 随机写\nrandread 随机读\nrandrw 随机混合读写\n\n```\nuring -sqthread_poll=1 -direct=1 -bs=4k -size=10G -numjobs=1 -runtime=120 -group_reporting\niouring_test: (g=0): rw=randread, bs=(R) 4096B-4096B, (W) 4096B-4096B, (T) 4096B-4096B, ioengine=io_uring, iodepth=128\nfio-3.22\nStarting 1 thread\nJobs: 1 (f=1): [r(1)][3.2%][eta 01h:01m:42s]                        \niouring_test: (groupid=0, jobs=1): err= 0: pid=63227: Wed Jan 24 15:55:58 2024\n  read: IOPS=682, BW=2729KiB/s (2795kB/s)(330MiB/123713msec)  //读操作的iops(每秒输入输出量)和bw(带宽)\n    clat (usec): min=506, max=11807k, avg=187540.47, stdev=846840.59\n     lat (usec): min=507, max=11807k, avg=187541.31, stdev=846840.60\n    clat percentiles (usec):\n     |  1.00th=[    1188],  5.00th=[    5800], 10.00th=[    8160],\n     | 20.00th=[   11469], 30.00th=[   15008], 40.00th=[   19792],\n     | 50.00th=[   26084], 60.00th=[   36439], 70.00th=[   56361],\n     | 80.00th=[  104334], 90.00th=[  238027], 95.00th=[  425722],\n     | 99.00th=[ 5804917], 99.50th=[ 7214203], 99.90th=[ 8422163],\n     | 99.95th=[ 8657044], 99.99th=[10804528]\n   bw (  KiB/s): min= 1357, max= 5397, per=100.00%, avg=2806.35, stdev=636.20, samples=240\n   iops        : min=  339, max= 1349, avg=701.40, stdev=159.08, samples=240\n  lat (usec)   : 750=0.13%, 1000=0.50%\n  lat (msec)   : 2=0.93%, 4=1.25%, 10=12.60%, 20=25.15%, 50=27.08%\n  lat (msec)   : 100=11.79%, 250=11.16%, 500=5.21%, 750=1.25%, 1000=0.54%\n  lat (msec)   : 2000=0.58%, >=2000=1.83%\n  cpu          : usr=99.85%, sys=0.08%, ctx=94, majf=0, minf=0\n  IO depths    : 1=0.1%, 2=0.1%, 4=0.1%, 8=0.1%, 16=0.1%, 32=0.1%, >=64=99.9%\n     submit    : 0=0.0%, 4=0.0%, 8=0.0%, 16=0.0%, 32=0.0%, 64=0.0%, >=64=0.0%\n     complete  : 0=0.0%, 4=100.0%, 8=0.0%, 16=0.0%, 32=0.0%, 64=0.0%, >=64=0.1%\n     issued rwts: total=84415,0,0,0 short=0,0,0,0 dropped=0,0,0,0\n     latency   : target=0, window=0, percentile=100.00%, depth=128\n\nRun status group 0 (all jobs):\n   READ: bw=2729KiB/s (2795kB/s), 2729KiB/s-2729KiB/s (2795kB/s-2795kB/s), io=330MiB (346MB), run=123713-123713msec\n\nDisk stats (read/write):\n    dm-0: ios=84415/17, merge=0/0, ticks=15416332/27284, in_queue=15443616, util=100.00%, aggrios=84414/15, aggrmerge=1/2, aggrticks=15402295/25881, aggrin_queue=15260184, aggrutil=100.00%\n  vda: ios=84414/15, merge=1/2, ticks=15402295/25881, in_queue=15260184, util=100.00%\n```\n\n#### lmbench\n\n`Lmbench` 是一款简易可以移植的内存测试工具，其主要功能有，带宽测评（读取缓存文件、拷贝内存、读/写内存、管道、TCP），延时测评（上下文切换、网络、文件系统的建立和删除、进程创建、[信号处理](https://so.csdn.net/so/search?q=信号处理&spm=1001.2101.3001.7020)、上层系统调用、内存读入反应时间）等功能。\n\n#### Stream\n\nStream内存带宽性能测试基准工具。\n\nstream通过生成四种不同模式下的内存读写操作，用于测试内存带宽。\n\nCopy操作最为简单，它先访问一个内存单元读出其中的值，再将值写入到另一个内存单元。\n\nScale操作先从内存单元读出其中的值，作一个乘法运算，再将结果写入到另一个内存单元。\n\nAdd操作先从内存单元读出两个值，做加法运算， 再将结果写入到另一个内存单元。\n\nTriad的中文含义是将三个组合起来，在本测试中表示的意思是将Copy、Scale、Add三种操作组合起来进行测试。具体操作方式是：先从内存数组中读两个值a、b，对其进行乘加混合运算（a+因子* b），将运算结果写入到另一个内存单元。 \n\n#### iozone\n\nIOzone是文件系统性能测试工具。可以测试不同的操作系统中文件系统的读写性能。可以测试 Read, write, re-read,re-write, read backwards, read strided, fread, fwrite, random read, pread, mmap, aio_read, aio_write 等等不同的模式下的硬盘的性能。\n\n| Write          | 测试向一个新文件写入的性能。当一个新文件被写入时，不仅仅是那些文件中的数据需要被存储，还包括那些用于定位数据存储在存储介质的具体位置的额外信息。这些额外信息被称作 “元数据”。它包括目录信息，所分配的空间和一些与该文件有关但又并非该文件所含数据的其他数据。拜这些额外信息所赐，Write 的性能通常会比 Re-write 的性能低。 |\n| -------------- | ------------------------------------------------------------ |\n| Re-write       | 测试向一个已存在的文件写入的性能。当一个已存在的文件被写入时，所需工作量较少，因为此时元数据已经存在。Re-write 的性能通常比 Write 的性能高。 |\n| Read           | 测试读一个已存在的文件的性能。                               |\n| Re-Read        | 测试读一个最近读过的文件的性能。Re-Read 性能会高些，因为操作系统通常会缓存最近读过的文件数据。这个缓存可以被用于读以提高性能。 |\n| Random Read    | 测试读一个文件中的随机偏移量的性能。许多因素可能影响这种情况下的系统性能，例如：操作系统缓存的大小，磁盘数量，寻道延迟和其他。 |\n| Random Write   | 测试写一个文件中的随机偏移量的性能。同样，许多因素可能影响这种情况下的系统性能，例如：操作系统缓存的大小，磁盘数量，寻道延迟和其他。 |\n| Random Mix     | 测试读写一个文件中的随机偏移量的性能。同样，许多因素可能影响这种情况下的系统性能，例如：操作系统缓存的大小，磁盘数量，寻道延迟和其他。这个测试只有在吞吐量测试模式下才能进行。每个线程 / 进程运行读或写测试。这种分布式读 / 写测试是基于 round robin 模式的。最好使用多于一个线程 / 进程执行此测试。 |\n| Backwards Read | 测试使用倒序读一个文件的性能。这种读文件方法可能看起来很可笑，事实上，有些应用确实这么干。MSC Nastran 是一个使用倒序读文件的应用程序的一个例子。它所读的文件都十分大（大小从 G 级别到 T 级别）。尽管许多操作系统使用一些特殊实现来优化顺序读文件的速度，很少有操作系统注意到并增强倒序读文件的性能。 |\n| Record Rewrite | 测试写与覆盖写一个文件中的特定块的性能。这个块可能会发生一些很有趣的事。如果这个块足够小（比 CPU 数据缓存小），测出来的性能将会非常高。如果比 CPU 数据缓存大而比 TLB 小，测出来的是另一个阶段的性能。如果比此二者都大，但比操作系统缓存小，得到的性能又是一个阶段。若大到超过操作系统缓存，又是另一番结果。 |\n| Strided Read   | 测试跳跃读一个文件的性能。举例如下：在 0 偏移量处读 4Kbytes，然后间隔 200Kbytes, 读 4Kbytes，再间隔 200Kbytes，如此反复。此时的模式是读 4Kbytes，间隔 200Kbytes 并重复这个模式。这又是一个典型的应用行为，文件中使用了数据结构并且访问这个数据结构的特定区域的应用程序常常这样做。许多操作系统并没注意到这种行为或者针对这种类型的访问做一些优化。同样，这种访问行为也可能导致一些有趣的性能异常。一个例子是在一个数据片化的文件系统里，应用程序的跳跃导致某一个特定的磁盘成为性能瓶颈。 |\n| Fwrite         | 测试调用库函数 fwrite () 来写文件的性能。这是一个执行缓存与阻塞写操作的库例程。缓存在用户空间之内。如果一个应用程序想要写很小的传输块，fwrite () 函数中的缓存与阻塞 I/O 功能能通过减少实际操作系统调用并在操作系统调用时增加传输块的大小来增强应用程序的性能。这个测试是写一个新文件，所以元数据的写入也是要的。 |\n| Frewrite       | 测试调用库函数 fwrite () 来写文件的性能。这是一个执行缓存与阻塞写操作的库例程。缓存在用户空间之内。如果一个应用程序想要写很小的传输块，fwrite () 函数中的缓存与阻塞 I/O 功能能通过减少实际操作系统调用并在操作系统调用时增加传输块的大小来增强应用程序的性能。 |\n\n#### iperf3\n\niperf3是基于Client/Server的网络性能测试工具，通常用于测试网络上可达到的最大带宽，它能够测试TCP、UDP及SCTP的带宽质量，可以提供网络吞吐量、网络波动、网络丢包率以及最大传输单元大小等信息，能够帮助我们测试网络性能，定位网络瓶颈。\n\n#### netperf\n\nNetperf是一种网络性能的测量工具，可以测试基于TCP或UDP吞吐、响应速率。Netperf包括Clien和Server端，Server端主要用来实现监听工作，Client端进行测试。\n\n#### ltp\n\nLTP测试套件是测试Linux内核和内核相关特性的工具的集合。该工具的目的是通过把测试自动化引入到Linux内核测试，提高Linux的内核质量。通过功能测试、压力测试和回归测试来验证 Linux 系统的可靠性、稳定性和健壮性。整个项目约4000个测试用例。\n","slug":"常用性能测试小工具集锦","published":1,"updated":"2025-03-27T00:57:01.341Z","layout":"post","photos":[],"link":"","_id":"cmamklq74001wfkd126192wju","content":"<h1 id=\"常用性能测试小工具集锦\"><a href=\"#常用性能测试小工具集锦\" class=\"headerlink\" title=\"常用性能测试小工具集锦\"></a>常用性能测试小工具集锦</h1><h2 id=\"性能测试\"><a href=\"#性能测试\" class=\"headerlink\" title=\"性能测试\"></a>性能测试</h2><p>​\t基于工作中做的性能测试，收纳整理出《常用性能测试小工具集锦》。主要从性能测试和工具集锦两个方面分享。</p>\n<h3 id=\"性能测试-1\"><a href=\"#性能测试-1\" class=\"headerlink\" title=\"性能测试\"></a>性能测试</h3><p>​\t\t性能测试是一种评估系统性能的方法，它可以检测系统的可扩展性、吞吐量、响应时间、负载能力、稳定性和安全性等指标。性能测试可以帮助开发人员、系统管理员和业务用户了解系统的实际运行情况，并找出可能存在的瓶颈和问题。</p>\n<h4 id=\"性能测试指标\"><a href=\"#性能测试指标\" class=\"headerlink\" title=\"性能测试指标\"></a>性能测试指标</h4><p>​\t\t衡量系统性能的评价标准。</p>\n<h5 id=\"系统性能测试指标\"><a href=\"#系统性能测试指标\" class=\"headerlink\" title=\"系统性能测试指标\"></a><strong>系统性能测试指标</strong></h5><p>​\t\t响应时间、系统处理能力，吞吐量，并发用户数，错误率等。</p>\n<h5 id=\"响应时间\"><a href=\"#响应时间\" class=\"headerlink\" title=\"响应时间\"></a>响应时间</h5><p>​\t\t简称RT，指的是客户发出请求到得到系统响应的整个过程的时间。也就是用户从客户端发起一个请求开始，到客户端接收到从服务器端返回的响应结束，整个过程所耗费的时间。</p>\n<h5 id=\"系统处理能力\"><a href=\"#系统处理能力\" class=\"headerlink\" title=\"系统处理能力\"></a>系统处理能力</h5><p>​\t\t系统在利用系统硬件平台和软件平台进行信息处理的能力。系统处理能力通过系统每秒钟能够处理的交易数量来评价。交易有两种理解：一是业务人员角度的一笔业务过程；二是系统角度的一次交易申请和响应过程。前者称为业务交易过程，后者称为事务。系统处理能力又用HPS(每秒点击次数)，TPS(系统每秒处理交易次数)，QPS(系统每秒处理查询次数)指标来度量。</p>\n<h5 id=\"吞吐量\"><a href=\"#吞吐量\" class=\"headerlink\" title=\"吞吐量\"></a>吞吐量</h5><p>​\t\t吞吐量是指系统在单位时间内处理请求的数量。尤其对于并发系统，通常需要用吞吐量作为性能指标。</p>\n<h5 id=\"并发用户数\"><a href=\"#并发用户数\" class=\"headerlink\" title=\"并发用户数\"></a>并发用户数</h5><p>​\t\t并发用户数指在同一时刻内，登录系统并进行业务操作的用户数量。</p>\n<h5 id=\"错误率\"><a href=\"#错误率\" class=\"headerlink\" title=\"错误率\"></a>错误率</h5><p>​\t\t简称FR，指系统在负载情况下，失败交易的概率。错误率＝(失败交易数&#x2F;交易总数)*100%。</p>\n<h4 id=\"资源性能指标\"><a href=\"#资源性能指标\" class=\"headerlink\" title=\"资源性能指标\"></a><strong>资源性能指标</strong></h4><p>CPU、内存、磁盘吞吐量、网络吞吐量等。</p>\n<h5 id=\"CPU\"><a href=\"#CPU\" class=\"headerlink\" title=\"CPU\"></a>CPU</h5><p>​\t\tCPU指标主要指的CPU利用率。单位时间内服务器CPU的使用统计，可以用除CPU空闲时间外其他时间占总CPU时间的百分比来表示。即：CPU使用率&#x3D;1-CPU空闲时间&#x2F;总CPU时间。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">字段说明：</span><br><span class=\"line\">us (user)：用户态的CPU使用时间比例，是用户运行程序的真正时间，它不包括后面的ni时间。</span><br><span class=\"line\">sy (system): 内核态的CPU使用时间比例，是操作系统的运行时间，操作系统运行时，用户运行程序往往处于等待状态。</span><br><span class=\"line\">ni (nice): 表示低优先级用户态的CPU时间比例，取值范围为[-20,19]，数值越大，则优先级越低。</span><br><span class=\"line\">id (idle): 表示空闲的CPU时间比例，值越大，CPU空闲时间比例越高，利用率越低。</span><br><span class=\"line\">wa (iowait): 表示处于IO等待状态的CPU时间比例。</span><br><span class=\"line\">hi (hard interrupt): 表示处理硬中断的CPU时间比例。硬中断，也叫异步中断。硬中断是由硬件设备依照CPU时钟信号产生的，即意味着中断发生具备随机性和突发性，可以在指令正在执行时发生。</span><br><span class=\"line\">si (soft interrupt): 与hi相反，表示处理软中断的CPU时间比例。软中断，也叫同步中断。软中断是由CPU执行中断产生指令时产生，是由程序预先实现好的，不是随机的。</span><br><span class=\"line\">st (steal): 表示当前系统运行在虚拟机中被其他虚拟机占用的CPU时间比例。这体现为物理 CPU 没有办法为当前系统服务，通常正在为另一个系统服务。 在虚拟机超卖比较严重的场景，这个数值非常明显。 这部分时间显然不是当前系统所用，而是被其他系统占用了。</span><br></pre></td></tr></table></figure>\n\n<p>​\t\t当us很高时，说明CPU时间主要消耗在用户代码上，可以从用户代码角度考虑优化性能；当sy很高时，说明CPU时间主要消耗在内核上，可以从是否系统调用频繁、CPU进程或线程切换频繁角度考虑性能的优化；当wa很高时，说明有进程在进行频繁的IO操作，可能是磁盘IO或者网络IO。一般情况下，如果%us+%sy&lt;&#x3D;70%，我们可以认为系统的运行状态良好。</p>\n<h5 id=\"内存\"><a href=\"#内存\" class=\"headerlink\" title=\"内存\"></a>内存</h5><p>​\t\ttotal(内存总量),free(空闲内存),used(已使用内存),buffer&#x2F;cache(缓存)。buffers与cached都是内存操作，用来保存系统曾经打开过的文件以及文件属性信息，这样当操作系统需要读取某些文件时，会优先从buffers与cached内存区查找，然后才从磁盘读取。通过缓存，能够大大提高了操作系统的性能。因此，对于linux系统来说，可用于分配的内存不止free的内存，同时还包括cached的内存（其实还包括buffers的内存）。cached和buffers都属于缓存，它们的区别主要在于cached主要用来缓冲频繁读取的文件，它可以直接记忆我们打开的文件内容；而buffers主要用来给块设备做的缓冲大小，只记录文件系统的元数据(metadata)以及缓存文件(tracking in-flight pages)信息，比如存储目录里面的内容，权限等。</p>\n<p>在性能测试中，经常会用到系统已用内存、物理已用内存、系统内存占用率以及物理内存占用率这几个指标，它们的计算公式如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">物理已用内存 = 实际已用内存 - 缓冲 - 缓存 </span><br><span class=\"line\">物理空闲内存 = 总物理内存 - 实际已用内存 + 缓冲 + 缓存 </span><br><span class=\"line\">应用程序可用空闲内存 = 总物理内存 - 实际已用内存 </span><br><span class=\"line\">应用程序已用内存 = 实际已用内存 - 缓冲 - 缓存</span><br><span class=\"line\">total = used + free + buffer/cache</span><br><span class=\"line\">avaiable = free + buffer/cache</span><br></pre></td></tr></table></figure>\n\n<p>​\t\t一般情况下，系统内存占用率&lt;&#x3D;70%，我们可以认为系统的内存使用情况良好，如果超出则说明系统内存资源紧张。</p>\n<h5 id=\"磁盘\"><a href=\"#磁盘\" class=\"headerlink\" title=\"磁盘\"></a>磁盘</h5><ul>\n<li>磁盘I&#x2F;O：I&#x2F;O，即input&#x2F;output，磁盘的输入输出，输入指的是对磁盘写入数据，输出指的是从磁盘读出数据，磁盘I&#x2F;O可以理解为读写。应用发起的一次或多次数据请求，I&#x2F;O请求的数据量又称I&#x2F;O大小，单位为KiB，例如4KiB、256KiB、1024KiB等；</li>\n<li>磁盘IOPS：磁盘IOPS是指一秒内磁盘进行多少次I&#x2F;O读写；</li>\n<li>磁盘吞吐量：每秒磁盘I&#x2F;O的流量，即磁盘写入加上读出的数据的大小。</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">I/O 读写的类型，大体上可以分为：</span><br><span class=\"line\">读 / 写 I/O：存数据时候对应的是写操作，取数据的时候对应的是是读操作。</span><br><span class=\"line\">大 / 小块 I/O：这个数值指的是控制器指令中给出的连续读出扇区数目的多少。</span><br><span class=\"line\">连续 / 随机 I/O：连续 I/O 指的是本次 I/O 给出的初始扇区地址和上一次 I/O 的结束扇区地址是完全连续或者相隔不多的。反之，如果相差很大，则算作一次随机 I/O。连续 I/O 比随机 I/O 效率高，因为在做连续 I/O 的时候，磁头几乎不用换道，或者换道的时间很短；而对于随机 I/O，如果这个 I/O 很多的话，会导致磁头不停地换道，造成效率的极大降低。</span><br><span class=\"line\">顺序 / 并发 I/O：从概念上讲，并发 I/O 就是指向一块磁盘发出一条 I/O 指令后，不必等待它回应，接着向另外一块磁盘发 I/O 指令。对于具有条带性的 RAID（LUN），对其进行的 I/O 操作是并发的，例如：raid 0+1(1+0),raid5 等。反之则为顺序 I/O。</span><br><span class=\"line\">吞吐量 = IOPS * I/O大小</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"网络\"><a href=\"#网络\" class=\"headerlink\" title=\"网络\"></a>网络</h5><p>​\t网络吞吐量是指在某个时刻，在网络中的两个节点之间，提给给网络应用的剩余带宽。 即在没有帧丢失的状况下，设备能够接受的最大速率。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">通常是以 4 个指标来衡量网络的性能，分别是带宽、延时、吞吐率、PPS（Packet Per Second），它们表示的意义如下</span><br><span class=\"line\">带宽，表示链路的最大传输速率，单位是 b/s （比特 / 秒），带宽越大，其传输能力就越强。</span><br><span class=\"line\">延时，表示请求数据包发送后，收到对端响应，所需要的时间延迟。不同的场景有着不同的含义，比如可以表示建立 TCP 连接所需的时间延迟，或一个数据包往返所需的时间延迟。</span><br><span class=\"line\">吞吐率，表示单位时间内成功传输的数据量，单位是 b/s（比特 / 秒）或者 B/s（字节 / 秒），吞吐受带宽限制，带宽越大，吞吐率的上限才可能越高。</span><br><span class=\"line\">PPS，全称是 Packet Per Second（包 / 秒），表示以网络包为单位的传输速率，一般用来评估系统对于网络的转发能力。</span><br><span class=\"line\">当然，除了以上这四种基本的指标，还有一些其他常用的性能指标，比如：</span><br><span class=\"line\"></span><br><span class=\"line\">网络的可用性，表示网络能否正常通信；</span><br><span class=\"line\">并发连接数，表示 TCP 连接数量；</span><br><span class=\"line\">丢包率，表示所丢失数据包数量占所发送数据组的比率；</span><br><span class=\"line\">重传率，表示重传网络包的比例；</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"工具集锦\"><a href=\"#工具集锦\" class=\"headerlink\" title=\"工具集锦\"></a>工具集锦</h2><h4 id=\"unixBench\"><a href=\"#unixBench\" class=\"headerlink\" title=\"unixBench\"></a>unixBench</h4><p>UnixBench的测试能力包含系统调用、读写、进程、2D、3D、管道、运算等系统基准性能，会对系统CPU、内存、磁盘、网络等各个方面进行一系列的测试。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./Run -c 1 -c 8 //表示执行两次，第一次单个copies,第二次8个copies的测试任务。</span><br></pre></td></tr></table></figure>\n\n<p>测试结果</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make all</span><br><span class=\"line\">make[1]: Entering directory &#x27;/path/to/test-tool/UnixBench5.1.3-1&#x27;</span><br><span class=\"line\">Checking distribution of files</span><br><span class=\"line\">./pgms  exists</span><br><span class=\"line\">./src  exists</span><br><span class=\"line\">./testdir  exists</span><br><span class=\"line\">./results  exists</span><br><span class=\"line\">make[1]: Leaving directory &#x27;/path/to/test-tool/UnixBench5.1.3-1&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">   #    #  #    #  #  #    #          #####   ######  #    #   ####   #    #</span><br><span class=\"line\">   #    #  ##   #  #   #  #           #    #  #       ##   #  #    #  #    #</span><br><span class=\"line\">   #    #  # #  #  #    ##            #####   #####   # #  #  #       ######</span><br><span class=\"line\">   #    #  #  # #  #    ##            #    #  #       #  # #  #       #    #</span><br><span class=\"line\">   #    #  #   ##  #   #  #           #    #  #       #   ##  #    #  #    #</span><br><span class=\"line\">    ####   #    #  #  #    #          #####   ######  #    #   ####   #    #</span><br><span class=\"line\"></span><br><span class=\"line\">   Version 5.1.3                      Based on the Byte Magazine Unix Benchmark</span><br><span class=\"line\"></span><br><span class=\"line\">   Multi-CPU version                  Version 5 revisions by Ian Smith,</span><br><span class=\"line\">                                      Sunnyvale, CA, USA</span><br><span class=\"line\">   January 13, 2011                   johantheghost at yahoo period com</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">1 x Dhrystone 2 using register variables  1 2 3 4 5 6 7 8 9 10</span><br><span class=\"line\"></span><br><span class=\"line\">1 x Double-Precision Whetstone  1 2 3 4 5 6 7 8 9 10</span><br><span class=\"line\"></span><br><span class=\"line\">1 x Execl Throughput  1 2 3</span><br><span class=\"line\"></span><br><span class=\"line\">1 x File Copy 1024 bufsize 2000 maxblocks  1 2 3</span><br><span class=\"line\"></span><br><span class=\"line\">1 x File Copy 256 bufsize 500 maxblocks  1 2 3</span><br><span class=\"line\"></span><br><span class=\"line\">1 x File Copy 4096 bufsize 8000 maxblocks  1 2 3</span><br><span class=\"line\"></span><br><span class=\"line\">1 x Pipe Throughput  1 2 3 4 5 6 7 8 9 10</span><br><span class=\"line\"></span><br><span class=\"line\">1 x Pipe-based Context Switching  1 2 3 4 5 6 7 8 9 10</span><br><span class=\"line\"></span><br><span class=\"line\">1 x Process Creation  1 2 3</span><br><span class=\"line\"></span><br><span class=\"line\">1 x System Call Overhead  1 2 3 4 5 6 7 8 9 10</span><br><span class=\"line\"></span><br><span class=\"line\">1 x Shell Scripts (1 concurrent)  1 2 3</span><br><span class=\"line\"></span><br><span class=\"line\">1 x Shell Scripts (8 concurrent)  1 2 3</span><br><span class=\"line\"></span><br><span class=\"line\">8 x Dhrystone 2 using register variables  1 2 3 4 5 6 7 8 9 10</span><br><span class=\"line\"></span><br><span class=\"line\">8 x Double-Precision Whetstone  1 2 3 4 5 6 7 8 9 10</span><br><span class=\"line\"></span><br><span class=\"line\">8 x Execl Throughput  1 2 3</span><br><span class=\"line\"></span><br><span class=\"line\">8 x File Copy 1024 bufsize 2000 maxblocks  1 2 3</span><br><span class=\"line\"></span><br><span class=\"line\">8 x File Copy 256 bufsize 500 maxblocks  1 2 3</span><br><span class=\"line\"></span><br><span class=\"line\">8 x File Copy 4096 bufsize 8000 maxblocks  1 2 3</span><br><span class=\"line\"></span><br><span class=\"line\">8 x Pipe Throughput  1 2 3 4 5 6 7 8 9 10</span><br><span class=\"line\"></span><br><span class=\"line\">8 x Pipe-based Context Switching  1 2 3 4 5 6 7 8 9 10</span><br><span class=\"line\"></span><br><span class=\"line\">8 x Process Creation  1 2 3</span><br><span class=\"line\"></span><br><span class=\"line\">8 x System Call Overhead  1 2 3 4 5 6 7 8 9 10</span><br><span class=\"line\"></span><br><span class=\"line\">8 x Shell Scripts (1 concurrent)  1 2 3</span><br><span class=\"line\"></span><br><span class=\"line\">8 x Shell Scripts (8 concurrent)  1 2 3</span><br><span class=\"line\"></span><br><span class=\"line\">========================================================================</span><br><span class=\"line\">   BYTE UNIX Benchmarks (Version 5.1.3)</span><br><span class=\"line\"></span><br><span class=\"line\">   System: wang-PC: GNU/Linux</span><br><span class=\"line\">   OS: GNU/Linux -- 5.15.77-amd64-desktop -- #2 SMP Thu Jun 15 16:06:18 CST 2023</span><br><span class=\"line\">   Machine: x86_64 (unknown)</span><br><span class=\"line\">   Language: en_US.utf8 (charmap=&quot;UTF-8&quot;, collate=&quot;UTF-8&quot;)</span><br><span class=\"line\">   CPU 0: Intel(R) Core(TM) i5-10210U CPU @ 1.60GHz (4199.9 bogomips)</span><br><span class=\"line\">          Hyper-Threading, x86-64, MMX, Physical Address Ext, SYSENTER/SYSEXIT, SYSCALL/SYSRET, Intel virtualization</span><br><span class=\"line\">   CPU 1: Intel(R) Core(TM) i5-10210U CPU @ 1.60GHz (4199.9 bogomips)</span><br><span class=\"line\">          Hyper-Threading, x86-64, MMX, Physical Address Ext, SYSENTER/SYSEXIT, SYSCALL/SYSRET, Intel virtualization</span><br><span class=\"line\">   CPU 2: Intel(R) Core(TM) i5-10210U CPU @ 1.60GHz (4199.9 bogomips)</span><br><span class=\"line\">          Hyper-Threading, x86-64, MMX, Physical Address Ext, SYSENTER/SYSEXIT, SYSCALL/SYSRET, Intel virtualization</span><br><span class=\"line\">   CPU 3: Intel(R) Core(TM) i5-10210U CPU @ 1.60GHz (4199.9 bogomips)</span><br><span class=\"line\">          Hyper-Threading, x86-64, MMX, Physical Address Ext, SYSENTER/SYSEXIT, SYSCALL/SYSRET, Intel virtualization</span><br><span class=\"line\">   CPU 4: Intel(R) Core(TM) i5-10210U CPU @ 1.60GHz (4199.9 bogomips)</span><br><span class=\"line\">          Hyper-Threading, x86-64, MMX, Physical Address Ext, SYSENTER/SYSEXIT, SYSCALL/SYSRET, Intel virtualization</span><br><span class=\"line\">   CPU 5: Intel(R) Core(TM) i5-10210U CPU @ 1.60GHz (4199.9 bogomips)</span><br><span class=\"line\">          Hyper-Threading, x86-64, MMX, Physical Address Ext, SYSENTER/SYSEXIT, SYSCALL/SYSRET, Intel virtualization</span><br><span class=\"line\">   CPU 6: Intel(R) Core(TM) i5-10210U CPU @ 1.60GHz (4199.9 bogomips)</span><br><span class=\"line\">          Hyper-Threading, x86-64, MMX, Physical Address Ext, SYSENTER/SYSEXIT, SYSCALL/SYSRET, Intel virtualization</span><br><span class=\"line\">   CPU 7: Intel(R) Core(TM) i5-10210U CPU @ 1.60GHz (4199.9 bogomips)</span><br><span class=\"line\">          Hyper-Threading, x86-64, MMX, Physical Address Ext, SYSENTER/SYSEXIT, SYSCALL/SYSRET, Intel virtualization</span><br><span class=\"line\">   14:50:41 up 11 days, 23:45,  1 user,  load average: 0.95, 1.32, 7.18; runlevel 5</span><br><span class=\"line\"></span><br><span class=\"line\">------------------------------------------------------------------------</span><br><span class=\"line\">Benchmark Run: Wed Jan 24 2024 14:50:41 - 15:18:32</span><br><span class=\"line\">8 CPUs in system; running 1 parallel copy of tests</span><br><span class=\"line\"></span><br><span class=\"line\">Dhrystone 2 using register variables       47877041.4 lps   (10.0 s, 7 samples)</span><br><span class=\"line\">Double-Precision Whetstone                     7784.4 MWIPS (9.0 s, 7 samples)</span><br><span class=\"line\">Execl Throughput                               5666.5 lps   (30.0 s, 2 samples)</span><br><span class=\"line\">File Copy 1024 bufsize 2000 maxblocks       1493924.1 KBps  (30.0 s, 2 samples)</span><br><span class=\"line\">File Copy 256 bufsize 500 maxblocks          426805.3 KBps  (30.0 s, 2 samples)</span><br><span class=\"line\">File Copy 4096 bufsize 8000 maxblocks       3119870.2 KBps  (30.0 s, 2 samples)</span><br><span class=\"line\">Pipe Throughput                             2577750.5 lps   (10.0 s, 7 samples)</span><br><span class=\"line\">Pipe-based Context Switching                 296557.3 lps   (10.0 s, 7 samples)</span><br><span class=\"line\">Process Creation                              13157.5 lps   (30.0 s, 2 samples)</span><br><span class=\"line\">Shell Scripts (1 concurrent)                  14761.5 lpm   (60.0 s, 2 samples)</span><br><span class=\"line\">Shell Scripts (8 concurrent)                   4321.8 lpm   (60.0 s, 2 samples)</span><br><span class=\"line\">System Call Overhead                        2784511.9 lps   (10.0 s, 7 samples)</span><br><span class=\"line\"></span><br><span class=\"line\">System Benchmarks Index Values               BASELINE       RESULT    INDEX</span><br><span class=\"line\">Dhrystone 2 using register variables         116700.0   47877041.4   4102.6</span><br><span class=\"line\">Double-Precision Whetstone                       55.0       7784.4   1415.3</span><br><span class=\"line\">Execl Throughput                                 43.0       5666.5   1317.8</span><br><span class=\"line\">File Copy 1024 bufsize 2000 maxblocks          3960.0    1493924.1   3772.5</span><br><span class=\"line\">File Copy 256 bufsize 500 maxblocks            1655.0     426805.3   2578.9</span><br><span class=\"line\">File Copy 4096 bufsize 8000 maxblocks          5800.0    3119870.2   5379.1</span><br><span class=\"line\">Pipe Throughput                               12440.0    2577750.5   2072.1</span><br><span class=\"line\">Pipe-based Context Switching                   4000.0     296557.3    741.4</span><br><span class=\"line\">Process Creation                                126.0      13157.5   1044.2</span><br><span class=\"line\">Shell Scripts (1 concurrent)                     42.4      14761.5   3481.5</span><br><span class=\"line\">Shell Scripts (8 concurrent)                      6.0       4321.8   7203.0</span><br><span class=\"line\">System Call Overhead                          15000.0    2784511.9   1856.3</span><br><span class=\"line\">                                                                   ========</span><br><span class=\"line\">System Benchmarks Index Score                                        2360.4</span><br><span class=\"line\"></span><br><span class=\"line\">------------------------------------------------------------------------</span><br><span class=\"line\">Benchmark Run: Wed Jan 24 2024 15:18:32 - 15:46:49</span><br><span class=\"line\">8 CPUs in system; running 8 parallel copies of tests</span><br><span class=\"line\"></span><br><span class=\"line\">Dhrystone 2 using register variables      176274670.8 lps   (10.0 s, 7 samples)</span><br><span class=\"line\">Double-Precision Whetstone                    46994.6 MWIPS (9.4 s, 7 samples)</span><br><span class=\"line\">Execl Throughput                              20151.0 lps   (30.0 s, 2 samples)</span><br><span class=\"line\">File Copy 1024 bufsize 2000 maxblocks       1745833.5 KBps  (30.0 s, 2 samples)</span><br><span class=\"line\">File Copy 256 bufsize 500 maxblocks          478830.4 KBps  (30.0 s, 2 samples)</span><br><span class=\"line\">File Copy 4096 bufsize 8000 maxblocks       4568801.0 KBps  (30.0 s, 2 samples)</span><br><span class=\"line\">Pipe Throughput                             9157085.1 lps   (10.0 s, 7 samples)</span><br><span class=\"line\">Pipe-based Context Switching                1132991.1 lps   (10.0 s, 7 samples)</span><br><span class=\"line\">Process Creation                              44340.3 lps   (30.0 s, 2 samples)</span><br><span class=\"line\">Shell Scripts (1 concurrent)                  36537.4 lpm   (60.0 s, 2 samples)</span><br><span class=\"line\">Shell Scripts (8 concurrent)                   4653.2 lpm   (60.1 s, 2 samples)</span><br><span class=\"line\">System Call Overhead                        8498217.7 lps   (10.0 s, 7 samples)</span><br><span class=\"line\"></span><br><span class=\"line\">System Benchmarks Index Values               BASELINE       RESULT    INDEX</span><br><span class=\"line\">Dhrystone 2 using register variables         116700.0  176274670.8  15104.9</span><br><span class=\"line\">Double-Precision Whetstone                       55.0      46994.6   8544.5</span><br><span class=\"line\">Execl Throughput                                 43.0      20151.0   4686.3</span><br><span class=\"line\">File Copy 1024 bufsize 2000 maxblocks          3960.0    1745833.5   4408.7</span><br><span class=\"line\">File Copy 256 bufsize 500 maxblocks            1655.0     478830.4   2893.2</span><br><span class=\"line\">File Copy 4096 bufsize 8000 maxblocks          5800.0    4568801.0   7877.2</span><br><span class=\"line\">Pipe Throughput                               12440.0    9157085.1   7361.0</span><br><span class=\"line\">Pipe-based Context Switching                   4000.0    1132991.1   2832.5</span><br><span class=\"line\">Process Creation                                126.0      44340.3   3519.1</span><br><span class=\"line\">Shell Scripts (1 concurrent)                     42.4      36537.4   8617.3</span><br><span class=\"line\">Shell Scripts (8 concurrent)                      6.0       4653.2   7755.3</span><br><span class=\"line\">System Call Overhead                          15000.0    8498217.7   5665.5</span><br><span class=\"line\">                                                                   ========</span><br><span class=\"line\">System Benchmarks Index Score                                        5874.3</span><br></pre></td></tr></table></figure>\n\n<p>测试项目</p>\n<p><img src=\"/home/wang/.config/Typora/typora-user-images/image-20240124153054135.png\" alt=\"image-20240124153054135\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Dhrystone测试：</span><br><span class=\"line\">\t测试聚焦在字符串处理，没有浮点运算操作。这个测试用于测试链接器编译、代码优化、内存缓存、等待状态、整数数据类型等。</span><br><span class=\"line\">Whetstone测试：</span><br><span class=\"line\">\t测试项目用于测试浮点运算效率和速度。含若干个科学计算的典型性能模块，包含大量的C语言函数,sin cos sqrt exp和日志以及使用整数和浮点的数学操作。包含数组访问、条件分支和过程调用。</span><br><span class=\"line\">Execl Throughput测试：</span><br><span class=\"line\">\t每秒钟可以执行的execl系统调用的次数。</span><br><span class=\"line\">File Copy测试：</span><br><span class=\"line\">\t这项测试衡量文件数据从一个文件被传输到另外一个，使用大量的缓存。包括文件的读、写、复制测试，测试指标是一定时间内（默认是10秒）被重写、读、复制的字符数量。</span><br><span class=\"line\">Pipe Throughput(管道吞吐)测试:</span><br><span class=\"line\">\t测试在一秒钟一个进程写512比特到一个管道中并且读回来的次数。管道吞吐测试和实际编程有差距。</span><br><span class=\"line\">Pipe-based Context Switching(基于管道的上下文交互)测试:</span><br><span class=\"line\">\t测试衡量两个进程通过管道交换和整数倍的增加吞吐的次数。基于管道的上下文切换和真实程序很类似。测试程序产生一个双向管道通讯的子线程。</span><br><span class=\"line\">Process Creation(进程创建)测试:</span><br><span class=\"line\">\t这项测试衡量一个进程能产生子线程并且立即退出的次数。新进程真的创建进程阻塞和内存占用，所以测试程序直接使用内存带宽。这项测试用于典型的比较大量的操作系统进程创建操作。</span><br><span class=\"line\">Shell Scripts测试:</span><br><span class=\"line\">\tshell脚本测试用于衡量在一分钟内，一个进程可以启动并停止shell脚本的次数，通常会测试1，2， 3， 4， 8 个shell脚本的共同拷贝，shell脚本是一套转化数据文件的脚本。</span><br><span class=\"line\">System Call Overhead （系统调用消耗）测试:</span><br><span class=\"line\">\t测试衡量进入和离开系统内核的消耗，例如，系统调用的消耗。程序简单重复的执行getpid调用（返回调用的进程id）。消耗的指标是调用进入和离开内核的执行时间。</span><br><span class=\"line\">Graphical Tests(图形)测试:</span><br><span class=\"line\">\t测试非常粗的2D和3D图形性能，尤其是3D测试非常有限。测试结果和硬件，系统合适的驱动关系很大。</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"fio\"><a href=\"#fio\" class=\"headerlink\" title=\"fio\"></a>fio</h4><p>fio主要用来测试硬盘io性能。这个工具的可定制性非常强，可以根据测试者的想法进行各种混合io测试，它支持13种不同类型io引擎（libaio、sync、mmap、posixaio、network等等）。它可以测试块设备或文件，可以通过多线程或进程模拟各种io操作，可以测试统计iops、带宽和时延等性能。我们主要使用fio工具进行存储性能测试。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fio -name=iouring_test -filename=/mnt/vdd/testfile -iodepth=128 -thread -rw=randread -ioengine=io_uring -sqthread_poll=1 -direct=1 -bs=4k -size=10G -numjobs=1 -runtime=120 -group_reporting</span><br></pre></td></tr></table></figure>\n\n<p>说明：<br>filename&#x3D;&#x2F;dev&#x2F;sdb1    测试文件名称，通常选择需要测试的盘的data目录。<br>direct&#x3D;1         测试过程绕过机器自带的buffer。使测试结果更真实。<br>bs&#x3D;4k          单次io的块文件大小为16k<br>size&#x3D;5g  本次的测试文件大小为5g，以每次4k的io进行测试。<br>numjobs&#x3D;1        本次的测试线程为30.<br>runtime&#x3D;120       测试时间为120秒，如果不写则一直将5g文件分4k每次写完为止。<br>ioengine&#x3D;io_uring      io引擎使用io_uring方式<br>group_reporting     关于显示结果的，汇总每个进程的信息。</p>\n<p>此外<br>rwmixwrite&#x3D;30      在混合读写的模式下，写占30%<br>lockmem&#x3D;1g        只使用1g内存进行测试。<br>zero_buffers       用0初始化系统buffer。<br>nrfiles&#x3D;8        每个进程生成文件的数量。<br>read 顺序读<br>write 顺序写<br>rw,readwrite 顺序混合读写<br>randwrite 随机写<br>randread 随机读<br>randrw 随机混合读写</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uring -sqthread_poll=1 -direct=1 -bs=4k -size=10G -numjobs=1 -runtime=120 -group_reporting</span><br><span class=\"line\">iouring_test: (g=0): rw=randread, bs=(R) 4096B-4096B, (W) 4096B-4096B, (T) 4096B-4096B, ioengine=io_uring, iodepth=128</span><br><span class=\"line\">fio-3.22</span><br><span class=\"line\">Starting 1 thread</span><br><span class=\"line\">Jobs: 1 (f=1): [r(1)][3.2%][eta 01h:01m:42s]                        </span><br><span class=\"line\">iouring_test: (groupid=0, jobs=1): err= 0: pid=63227: Wed Jan 24 15:55:58 2024</span><br><span class=\"line\">  read: IOPS=682, BW=2729KiB/s (2795kB/s)(330MiB/123713msec)  //读操作的iops(每秒输入输出量)和bw(带宽)</span><br><span class=\"line\">    clat (usec): min=506, max=11807k, avg=187540.47, stdev=846840.59</span><br><span class=\"line\">     lat (usec): min=507, max=11807k, avg=187541.31, stdev=846840.60</span><br><span class=\"line\">    clat percentiles (usec):</span><br><span class=\"line\">     |  1.00th=[    1188],  5.00th=[    5800], 10.00th=[    8160],</span><br><span class=\"line\">     | 20.00th=[   11469], 30.00th=[   15008], 40.00th=[   19792],</span><br><span class=\"line\">     | 50.00th=[   26084], 60.00th=[   36439], 70.00th=[   56361],</span><br><span class=\"line\">     | 80.00th=[  104334], 90.00th=[  238027], 95.00th=[  425722],</span><br><span class=\"line\">     | 99.00th=[ 5804917], 99.50th=[ 7214203], 99.90th=[ 8422163],</span><br><span class=\"line\">     | 99.95th=[ 8657044], 99.99th=[10804528]</span><br><span class=\"line\">   bw (  KiB/s): min= 1357, max= 5397, per=100.00%, avg=2806.35, stdev=636.20, samples=240</span><br><span class=\"line\">   iops        : min=  339, max= 1349, avg=701.40, stdev=159.08, samples=240</span><br><span class=\"line\">  lat (usec)   : 750=0.13%, 1000=0.50%</span><br><span class=\"line\">  lat (msec)   : 2=0.93%, 4=1.25%, 10=12.60%, 20=25.15%, 50=27.08%</span><br><span class=\"line\">  lat (msec)   : 100=11.79%, 250=11.16%, 500=5.21%, 750=1.25%, 1000=0.54%</span><br><span class=\"line\">  lat (msec)   : 2000=0.58%, &gt;=2000=1.83%</span><br><span class=\"line\">  cpu          : usr=99.85%, sys=0.08%, ctx=94, majf=0, minf=0</span><br><span class=\"line\">  IO depths    : 1=0.1%, 2=0.1%, 4=0.1%, 8=0.1%, 16=0.1%, 32=0.1%, &gt;=64=99.9%</span><br><span class=\"line\">     submit    : 0=0.0%, 4=0.0%, 8=0.0%, 16=0.0%, 32=0.0%, 64=0.0%, &gt;=64=0.0%</span><br><span class=\"line\">     complete  : 0=0.0%, 4=100.0%, 8=0.0%, 16=0.0%, 32=0.0%, 64=0.0%, &gt;=64=0.1%</span><br><span class=\"line\">     issued rwts: total=84415,0,0,0 short=0,0,0,0 dropped=0,0,0,0</span><br><span class=\"line\">     latency   : target=0, window=0, percentile=100.00%, depth=128</span><br><span class=\"line\"></span><br><span class=\"line\">Run status group 0 (all jobs):</span><br><span class=\"line\">   READ: bw=2729KiB/s (2795kB/s), 2729KiB/s-2729KiB/s (2795kB/s-2795kB/s), io=330MiB (346MB), run=123713-123713msec</span><br><span class=\"line\"></span><br><span class=\"line\">Disk stats (read/write):</span><br><span class=\"line\">    dm-0: ios=84415/17, merge=0/0, ticks=15416332/27284, in_queue=15443616, util=100.00%, aggrios=84414/15, aggrmerge=1/2, aggrticks=15402295/25881, aggrin_queue=15260184, aggrutil=100.00%</span><br><span class=\"line\">  vda: ios=84414/15, merge=1/2, ticks=15402295/25881, in_queue=15260184, util=100.00%</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"lmbench\"><a href=\"#lmbench\" class=\"headerlink\" title=\"lmbench\"></a>lmbench</h4><p><code>Lmbench</code> 是一款简易可以移植的内存测试工具，其主要功能有，带宽测评（读取缓存文件、拷贝内存、读&#x2F;写内存、管道、TCP），延时测评（上下文切换、网络、文件系统的建立和删除、进程创建、<a href=\"https://so.csdn.net/so/search?q=%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86&spm=1001.2101.3001.7020\">信号处理</a>、上层系统调用、内存读入反应时间）等功能。</p>\n<h4 id=\"Stream\"><a href=\"#Stream\" class=\"headerlink\" title=\"Stream\"></a>Stream</h4><p>Stream内存带宽性能测试基准工具。</p>\n<p>stream通过生成四种不同模式下的内存读写操作，用于测试内存带宽。</p>\n<p>Copy操作最为简单，它先访问一个内存单元读出其中的值，再将值写入到另一个内存单元。</p>\n<p>Scale操作先从内存单元读出其中的值，作一个乘法运算，再将结果写入到另一个内存单元。</p>\n<p>Add操作先从内存单元读出两个值，做加法运算， 再将结果写入到另一个内存单元。</p>\n<p>Triad的中文含义是将三个组合起来，在本测试中表示的意思是将Copy、Scale、Add三种操作组合起来进行测试。具体操作方式是：先从内存数组中读两个值a、b，对其进行乘加混合运算（a+因子* b），将运算结果写入到另一个内存单元。 </p>\n<h4 id=\"iozone\"><a href=\"#iozone\" class=\"headerlink\" title=\"iozone\"></a>iozone</h4><p>IOzone是文件系统性能测试工具。可以测试不同的操作系统中文件系统的读写性能。可以测试 Read, write, re-read,re-write, read backwards, read strided, fread, fwrite, random read, pread, mmap, aio_read, aio_write 等等不同的模式下的硬盘的性能。</p>\n<table>\n<thead>\n<tr>\n<th>Write</th>\n<th>测试向一个新文件写入的性能。当一个新文件被写入时，不仅仅是那些文件中的数据需要被存储，还包括那些用于定位数据存储在存储介质的具体位置的额外信息。这些额外信息被称作 “元数据”。它包括目录信息，所分配的空间和一些与该文件有关但又并非该文件所含数据的其他数据。拜这些额外信息所赐，Write 的性能通常会比 Re-write 的性能低。</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Re-write</td>\n<td>测试向一个已存在的文件写入的性能。当一个已存在的文件被写入时，所需工作量较少，因为此时元数据已经存在。Re-write 的性能通常比 Write 的性能高。</td>\n</tr>\n<tr>\n<td>Read</td>\n<td>测试读一个已存在的文件的性能。</td>\n</tr>\n<tr>\n<td>Re-Read</td>\n<td>测试读一个最近读过的文件的性能。Re-Read 性能会高些，因为操作系统通常会缓存最近读过的文件数据。这个缓存可以被用于读以提高性能。</td>\n</tr>\n<tr>\n<td>Random Read</td>\n<td>测试读一个文件中的随机偏移量的性能。许多因素可能影响这种情况下的系统性能，例如：操作系统缓存的大小，磁盘数量，寻道延迟和其他。</td>\n</tr>\n<tr>\n<td>Random Write</td>\n<td>测试写一个文件中的随机偏移量的性能。同样，许多因素可能影响这种情况下的系统性能，例如：操作系统缓存的大小，磁盘数量，寻道延迟和其他。</td>\n</tr>\n<tr>\n<td>Random Mix</td>\n<td>测试读写一个文件中的随机偏移量的性能。同样，许多因素可能影响这种情况下的系统性能，例如：操作系统缓存的大小，磁盘数量，寻道延迟和其他。这个测试只有在吞吐量测试模式下才能进行。每个线程 &#x2F; 进程运行读或写测试。这种分布式读 &#x2F; 写测试是基于 round robin 模式的。最好使用多于一个线程 &#x2F; 进程执行此测试。</td>\n</tr>\n<tr>\n<td>Backwards Read</td>\n<td>测试使用倒序读一个文件的性能。这种读文件方法可能看起来很可笑，事实上，有些应用确实这么干。MSC Nastran 是一个使用倒序读文件的应用程序的一个例子。它所读的文件都十分大（大小从 G 级别到 T 级别）。尽管许多操作系统使用一些特殊实现来优化顺序读文件的速度，很少有操作系统注意到并增强倒序读文件的性能。</td>\n</tr>\n<tr>\n<td>Record Rewrite</td>\n<td>测试写与覆盖写一个文件中的特定块的性能。这个块可能会发生一些很有趣的事。如果这个块足够小（比 CPU 数据缓存小），测出来的性能将会非常高。如果比 CPU 数据缓存大而比 TLB 小，测出来的是另一个阶段的性能。如果比此二者都大，但比操作系统缓存小，得到的性能又是一个阶段。若大到超过操作系统缓存，又是另一番结果。</td>\n</tr>\n<tr>\n<td>Strided Read</td>\n<td>测试跳跃读一个文件的性能。举例如下：在 0 偏移量处读 4Kbytes，然后间隔 200Kbytes, 读 4Kbytes，再间隔 200Kbytes，如此反复。此时的模式是读 4Kbytes，间隔 200Kbytes 并重复这个模式。这又是一个典型的应用行为，文件中使用了数据结构并且访问这个数据结构的特定区域的应用程序常常这样做。许多操作系统并没注意到这种行为或者针对这种类型的访问做一些优化。同样，这种访问行为也可能导致一些有趣的性能异常。一个例子是在一个数据片化的文件系统里，应用程序的跳跃导致某一个特定的磁盘成为性能瓶颈。</td>\n</tr>\n<tr>\n<td>Fwrite</td>\n<td>测试调用库函数 fwrite () 来写文件的性能。这是一个执行缓存与阻塞写操作的库例程。缓存在用户空间之内。如果一个应用程序想要写很小的传输块，fwrite () 函数中的缓存与阻塞 I&#x2F;O 功能能通过减少实际操作系统调用并在操作系统调用时增加传输块的大小来增强应用程序的性能。这个测试是写一个新文件，所以元数据的写入也是要的。</td>\n</tr>\n<tr>\n<td>Frewrite</td>\n<td>测试调用库函数 fwrite () 来写文件的性能。这是一个执行缓存与阻塞写操作的库例程。缓存在用户空间之内。如果一个应用程序想要写很小的传输块，fwrite () 函数中的缓存与阻塞 I&#x2F;O 功能能通过减少实际操作系统调用并在操作系统调用时增加传输块的大小来增强应用程序的性能。</td>\n</tr>\n</tbody></table>\n<h4 id=\"iperf3\"><a href=\"#iperf3\" class=\"headerlink\" title=\"iperf3\"></a>iperf3</h4><p>iperf3是基于Client&#x2F;Server的网络性能测试工具，通常用于测试网络上可达到的最大带宽，它能够测试TCP、UDP及SCTP的带宽质量，可以提供网络吞吐量、网络波动、网络丢包率以及最大传输单元大小等信息，能够帮助我们测试网络性能，定位网络瓶颈。</p>\n<h4 id=\"netperf\"><a href=\"#netperf\" class=\"headerlink\" title=\"netperf\"></a>netperf</h4><p>Netperf是一种网络性能的测量工具，可以测试基于TCP或UDP吞吐、响应速率。Netperf包括Clien和Server端，Server端主要用来实现监听工作，Client端进行测试。</p>\n<h4 id=\"ltp\"><a href=\"#ltp\" class=\"headerlink\" title=\"ltp\"></a>ltp</h4><p>LTP测试套件是测试Linux内核和内核相关特性的工具的集合。该工具的目的是通过把测试自动化引入到Linux内核测试，提高Linux的内核质量。通过功能测试、压力测试和回归测试来验证 Linux 系统的可靠性、稳定性和健壮性。整个项目约4000个测试用例。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"常用性能测试小工具集锦\"><a href=\"#常用性能测试小工具集锦\" class=\"headerlink\" title=\"常用性能测试小工具集锦\"></a>常用性能测试小工具集锦</h1><h2 id=\"性能测试\"><a href=\"#性能测试\" class=\"headerlink\" title=\"性能测试\"></a>性能测试</h2><p>​\t基于工作中做的性能测试，收纳整理出《常用性能测试小工具集锦》。主要从性能测试和工具集锦两个方面分享。</p>\n<h3 id=\"性能测试-1\"><a href=\"#性能测试-1\" class=\"headerlink\" title=\"性能测试\"></a>性能测试</h3><p>​\t\t性能测试是一种评估系统性能的方法，它可以检测系统的可扩展性、吞吐量、响应时间、负载能力、稳定性和安全性等指标。性能测试可以帮助开发人员、系统管理员和业务用户了解系统的实际运行情况，并找出可能存在的瓶颈和问题。</p>\n<h4 id=\"性能测试指标\"><a href=\"#性能测试指标\" class=\"headerlink\" title=\"性能测试指标\"></a>性能测试指标</h4><p>​\t\t衡量系统性能的评价标准。</p>\n<h5 id=\"系统性能测试指标\"><a href=\"#系统性能测试指标\" class=\"headerlink\" title=\"系统性能测试指标\"></a><strong>系统性能测试指标</strong></h5><p>​\t\t响应时间、系统处理能力，吞吐量，并发用户数，错误率等。</p>\n<h5 id=\"响应时间\"><a href=\"#响应时间\" class=\"headerlink\" title=\"响应时间\"></a>响应时间</h5><p>​\t\t简称RT，指的是客户发出请求到得到系统响应的整个过程的时间。也就是用户从客户端发起一个请求开始，到客户端接收到从服务器端返回的响应结束，整个过程所耗费的时间。</p>\n<h5 id=\"系统处理能力\"><a href=\"#系统处理能力\" class=\"headerlink\" title=\"系统处理能力\"></a>系统处理能力</h5><p>​\t\t系统在利用系统硬件平台和软件平台进行信息处理的能力。系统处理能力通过系统每秒钟能够处理的交易数量来评价。交易有两种理解：一是业务人员角度的一笔业务过程；二是系统角度的一次交易申请和响应过程。前者称为业务交易过程，后者称为事务。系统处理能力又用HPS(每秒点击次数)，TPS(系统每秒处理交易次数)，QPS(系统每秒处理查询次数)指标来度量。</p>\n<h5 id=\"吞吐量\"><a href=\"#吞吐量\" class=\"headerlink\" title=\"吞吐量\"></a>吞吐量</h5><p>​\t\t吞吐量是指系统在单位时间内处理请求的数量。尤其对于并发系统，通常需要用吞吐量作为性能指标。</p>\n<h5 id=\"并发用户数\"><a href=\"#并发用户数\" class=\"headerlink\" title=\"并发用户数\"></a>并发用户数</h5><p>​\t\t并发用户数指在同一时刻内，登录系统并进行业务操作的用户数量。</p>\n<h5 id=\"错误率\"><a href=\"#错误率\" class=\"headerlink\" title=\"错误率\"></a>错误率</h5><p>​\t\t简称FR，指系统在负载情况下，失败交易的概率。错误率＝(失败交易数&#x2F;交易总数)*100%。</p>\n<h4 id=\"资源性能指标\"><a href=\"#资源性能指标\" class=\"headerlink\" title=\"资源性能指标\"></a><strong>资源性能指标</strong></h4><p>CPU、内存、磁盘吞吐量、网络吞吐量等。</p>\n<h5 id=\"CPU\"><a href=\"#CPU\" class=\"headerlink\" title=\"CPU\"></a>CPU</h5><p>​\t\tCPU指标主要指的CPU利用率。单位时间内服务器CPU的使用统计，可以用除CPU空闲时间外其他时间占总CPU时间的百分比来表示。即：CPU使用率&#x3D;1-CPU空闲时间&#x2F;总CPU时间。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">字段说明：</span><br><span class=\"line\">us (user)：用户态的CPU使用时间比例，是用户运行程序的真正时间，它不包括后面的ni时间。</span><br><span class=\"line\">sy (system): 内核态的CPU使用时间比例，是操作系统的运行时间，操作系统运行时，用户运行程序往往处于等待状态。</span><br><span class=\"line\">ni (nice): 表示低优先级用户态的CPU时间比例，取值范围为[-20,19]，数值越大，则优先级越低。</span><br><span class=\"line\">id (idle): 表示空闲的CPU时间比例，值越大，CPU空闲时间比例越高，利用率越低。</span><br><span class=\"line\">wa (iowait): 表示处于IO等待状态的CPU时间比例。</span><br><span class=\"line\">hi (hard interrupt): 表示处理硬中断的CPU时间比例。硬中断，也叫异步中断。硬中断是由硬件设备依照CPU时钟信号产生的，即意味着中断发生具备随机性和突发性，可以在指令正在执行时发生。</span><br><span class=\"line\">si (soft interrupt): 与hi相反，表示处理软中断的CPU时间比例。软中断，也叫同步中断。软中断是由CPU执行中断产生指令时产生，是由程序预先实现好的，不是随机的。</span><br><span class=\"line\">st (steal): 表示当前系统运行在虚拟机中被其他虚拟机占用的CPU时间比例。这体现为物理 CPU 没有办法为当前系统服务，通常正在为另一个系统服务。 在虚拟机超卖比较严重的场景，这个数值非常明显。 这部分时间显然不是当前系统所用，而是被其他系统占用了。</span><br></pre></td></tr></table></figure>\n\n<p>​\t\t当us很高时，说明CPU时间主要消耗在用户代码上，可以从用户代码角度考虑优化性能；当sy很高时，说明CPU时间主要消耗在内核上，可以从是否系统调用频繁、CPU进程或线程切换频繁角度考虑性能的优化；当wa很高时，说明有进程在进行频繁的IO操作，可能是磁盘IO或者网络IO。一般情况下，如果%us+%sy&lt;&#x3D;70%，我们可以认为系统的运行状态良好。</p>\n<h5 id=\"内存\"><a href=\"#内存\" class=\"headerlink\" title=\"内存\"></a>内存</h5><p>​\t\ttotal(内存总量),free(空闲内存),used(已使用内存),buffer&#x2F;cache(缓存)。buffers与cached都是内存操作，用来保存系统曾经打开过的文件以及文件属性信息，这样当操作系统需要读取某些文件时，会优先从buffers与cached内存区查找，然后才从磁盘读取。通过缓存，能够大大提高了操作系统的性能。因此，对于linux系统来说，可用于分配的内存不止free的内存，同时还包括cached的内存（其实还包括buffers的内存）。cached和buffers都属于缓存，它们的区别主要在于cached主要用来缓冲频繁读取的文件，它可以直接记忆我们打开的文件内容；而buffers主要用来给块设备做的缓冲大小，只记录文件系统的元数据(metadata)以及缓存文件(tracking in-flight pages)信息，比如存储目录里面的内容，权限等。</p>\n<p>在性能测试中，经常会用到系统已用内存、物理已用内存、系统内存占用率以及物理内存占用率这几个指标，它们的计算公式如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">物理已用内存 = 实际已用内存 - 缓冲 - 缓存 </span><br><span class=\"line\">物理空闲内存 = 总物理内存 - 实际已用内存 + 缓冲 + 缓存 </span><br><span class=\"line\">应用程序可用空闲内存 = 总物理内存 - 实际已用内存 </span><br><span class=\"line\">应用程序已用内存 = 实际已用内存 - 缓冲 - 缓存</span><br><span class=\"line\">total = used + free + buffer/cache</span><br><span class=\"line\">avaiable = free + buffer/cache</span><br></pre></td></tr></table></figure>\n\n<p>​\t\t一般情况下，系统内存占用率&lt;&#x3D;70%，我们可以认为系统的内存使用情况良好，如果超出则说明系统内存资源紧张。</p>\n<h5 id=\"磁盘\"><a href=\"#磁盘\" class=\"headerlink\" title=\"磁盘\"></a>磁盘</h5><ul>\n<li>磁盘I&#x2F;O：I&#x2F;O，即input&#x2F;output，磁盘的输入输出，输入指的是对磁盘写入数据，输出指的是从磁盘读出数据，磁盘I&#x2F;O可以理解为读写。应用发起的一次或多次数据请求，I&#x2F;O请求的数据量又称I&#x2F;O大小，单位为KiB，例如4KiB、256KiB、1024KiB等；</li>\n<li>磁盘IOPS：磁盘IOPS是指一秒内磁盘进行多少次I&#x2F;O读写；</li>\n<li>磁盘吞吐量：每秒磁盘I&#x2F;O的流量，即磁盘写入加上读出的数据的大小。</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">I/O 读写的类型，大体上可以分为：</span><br><span class=\"line\">读 / 写 I/O：存数据时候对应的是写操作，取数据的时候对应的是是读操作。</span><br><span class=\"line\">大 / 小块 I/O：这个数值指的是控制器指令中给出的连续读出扇区数目的多少。</span><br><span class=\"line\">连续 / 随机 I/O：连续 I/O 指的是本次 I/O 给出的初始扇区地址和上一次 I/O 的结束扇区地址是完全连续或者相隔不多的。反之，如果相差很大，则算作一次随机 I/O。连续 I/O 比随机 I/O 效率高，因为在做连续 I/O 的时候，磁头几乎不用换道，或者换道的时间很短；而对于随机 I/O，如果这个 I/O 很多的话，会导致磁头不停地换道，造成效率的极大降低。</span><br><span class=\"line\">顺序 / 并发 I/O：从概念上讲，并发 I/O 就是指向一块磁盘发出一条 I/O 指令后，不必等待它回应，接着向另外一块磁盘发 I/O 指令。对于具有条带性的 RAID（LUN），对其进行的 I/O 操作是并发的，例如：raid 0+1(1+0),raid5 等。反之则为顺序 I/O。</span><br><span class=\"line\">吞吐量 = IOPS * I/O大小</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"网络\"><a href=\"#网络\" class=\"headerlink\" title=\"网络\"></a>网络</h5><p>​\t网络吞吐量是指在某个时刻，在网络中的两个节点之间，提给给网络应用的剩余带宽。 即在没有帧丢失的状况下，设备能够接受的最大速率。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">通常是以 4 个指标来衡量网络的性能，分别是带宽、延时、吞吐率、PPS（Packet Per Second），它们表示的意义如下</span><br><span class=\"line\">带宽，表示链路的最大传输速率，单位是 b/s （比特 / 秒），带宽越大，其传输能力就越强。</span><br><span class=\"line\">延时，表示请求数据包发送后，收到对端响应，所需要的时间延迟。不同的场景有着不同的含义，比如可以表示建立 TCP 连接所需的时间延迟，或一个数据包往返所需的时间延迟。</span><br><span class=\"line\">吞吐率，表示单位时间内成功传输的数据量，单位是 b/s（比特 / 秒）或者 B/s（字节 / 秒），吞吐受带宽限制，带宽越大，吞吐率的上限才可能越高。</span><br><span class=\"line\">PPS，全称是 Packet Per Second（包 / 秒），表示以网络包为单位的传输速率，一般用来评估系统对于网络的转发能力。</span><br><span class=\"line\">当然，除了以上这四种基本的指标，还有一些其他常用的性能指标，比如：</span><br><span class=\"line\"></span><br><span class=\"line\">网络的可用性，表示网络能否正常通信；</span><br><span class=\"line\">并发连接数，表示 TCP 连接数量；</span><br><span class=\"line\">丢包率，表示所丢失数据包数量占所发送数据组的比率；</span><br><span class=\"line\">重传率，表示重传网络包的比例；</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"工具集锦\"><a href=\"#工具集锦\" class=\"headerlink\" title=\"工具集锦\"></a>工具集锦</h2><h4 id=\"unixBench\"><a href=\"#unixBench\" class=\"headerlink\" title=\"unixBench\"></a>unixBench</h4><p>UnixBench的测试能力包含系统调用、读写、进程、2D、3D、管道、运算等系统基准性能，会对系统CPU、内存、磁盘、网络等各个方面进行一系列的测试。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./Run -c 1 -c 8 //表示执行两次，第一次单个copies,第二次8个copies的测试任务。</span><br></pre></td></tr></table></figure>\n\n<p>测试结果</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make all</span><br><span class=\"line\">make[1]: Entering directory &#x27;/path/to/test-tool/UnixBench5.1.3-1&#x27;</span><br><span class=\"line\">Checking distribution of files</span><br><span class=\"line\">./pgms  exists</span><br><span class=\"line\">./src  exists</span><br><span class=\"line\">./testdir  exists</span><br><span class=\"line\">./results  exists</span><br><span class=\"line\">make[1]: Leaving directory &#x27;/path/to/test-tool/UnixBench5.1.3-1&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">   #    #  #    #  #  #    #          #####   ######  #    #   ####   #    #</span><br><span class=\"line\">   #    #  ##   #  #   #  #           #    #  #       ##   #  #    #  #    #</span><br><span class=\"line\">   #    #  # #  #  #    ##            #####   #####   # #  #  #       ######</span><br><span class=\"line\">   #    #  #  # #  #    ##            #    #  #       #  # #  #       #    #</span><br><span class=\"line\">   #    #  #   ##  #   #  #           #    #  #       #   ##  #    #  #    #</span><br><span class=\"line\">    ####   #    #  #  #    #          #####   ######  #    #   ####   #    #</span><br><span class=\"line\"></span><br><span class=\"line\">   Version 5.1.3                      Based on the Byte Magazine Unix Benchmark</span><br><span class=\"line\"></span><br><span class=\"line\">   Multi-CPU version                  Version 5 revisions by Ian Smith,</span><br><span class=\"line\">                                      Sunnyvale, CA, USA</span><br><span class=\"line\">   January 13, 2011                   johantheghost at yahoo period com</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">1 x Dhrystone 2 using register variables  1 2 3 4 5 6 7 8 9 10</span><br><span class=\"line\"></span><br><span class=\"line\">1 x Double-Precision Whetstone  1 2 3 4 5 6 7 8 9 10</span><br><span class=\"line\"></span><br><span class=\"line\">1 x Execl Throughput  1 2 3</span><br><span class=\"line\"></span><br><span class=\"line\">1 x File Copy 1024 bufsize 2000 maxblocks  1 2 3</span><br><span class=\"line\"></span><br><span class=\"line\">1 x File Copy 256 bufsize 500 maxblocks  1 2 3</span><br><span class=\"line\"></span><br><span class=\"line\">1 x File Copy 4096 bufsize 8000 maxblocks  1 2 3</span><br><span class=\"line\"></span><br><span class=\"line\">1 x Pipe Throughput  1 2 3 4 5 6 7 8 9 10</span><br><span class=\"line\"></span><br><span class=\"line\">1 x Pipe-based Context Switching  1 2 3 4 5 6 7 8 9 10</span><br><span class=\"line\"></span><br><span class=\"line\">1 x Process Creation  1 2 3</span><br><span class=\"line\"></span><br><span class=\"line\">1 x System Call Overhead  1 2 3 4 5 6 7 8 9 10</span><br><span class=\"line\"></span><br><span class=\"line\">1 x Shell Scripts (1 concurrent)  1 2 3</span><br><span class=\"line\"></span><br><span class=\"line\">1 x Shell Scripts (8 concurrent)  1 2 3</span><br><span class=\"line\"></span><br><span class=\"line\">8 x Dhrystone 2 using register variables  1 2 3 4 5 6 7 8 9 10</span><br><span class=\"line\"></span><br><span class=\"line\">8 x Double-Precision Whetstone  1 2 3 4 5 6 7 8 9 10</span><br><span class=\"line\"></span><br><span class=\"line\">8 x Execl Throughput  1 2 3</span><br><span class=\"line\"></span><br><span class=\"line\">8 x File Copy 1024 bufsize 2000 maxblocks  1 2 3</span><br><span class=\"line\"></span><br><span class=\"line\">8 x File Copy 256 bufsize 500 maxblocks  1 2 3</span><br><span class=\"line\"></span><br><span class=\"line\">8 x File Copy 4096 bufsize 8000 maxblocks  1 2 3</span><br><span class=\"line\"></span><br><span class=\"line\">8 x Pipe Throughput  1 2 3 4 5 6 7 8 9 10</span><br><span class=\"line\"></span><br><span class=\"line\">8 x Pipe-based Context Switching  1 2 3 4 5 6 7 8 9 10</span><br><span class=\"line\"></span><br><span class=\"line\">8 x Process Creation  1 2 3</span><br><span class=\"line\"></span><br><span class=\"line\">8 x System Call Overhead  1 2 3 4 5 6 7 8 9 10</span><br><span class=\"line\"></span><br><span class=\"line\">8 x Shell Scripts (1 concurrent)  1 2 3</span><br><span class=\"line\"></span><br><span class=\"line\">8 x Shell Scripts (8 concurrent)  1 2 3</span><br><span class=\"line\"></span><br><span class=\"line\">========================================================================</span><br><span class=\"line\">   BYTE UNIX Benchmarks (Version 5.1.3)</span><br><span class=\"line\"></span><br><span class=\"line\">   System: wang-PC: GNU/Linux</span><br><span class=\"line\">   OS: GNU/Linux -- 5.15.77-amd64-desktop -- #2 SMP Thu Jun 15 16:06:18 CST 2023</span><br><span class=\"line\">   Machine: x86_64 (unknown)</span><br><span class=\"line\">   Language: en_US.utf8 (charmap=&quot;UTF-8&quot;, collate=&quot;UTF-8&quot;)</span><br><span class=\"line\">   CPU 0: Intel(R) Core(TM) i5-10210U CPU @ 1.60GHz (4199.9 bogomips)</span><br><span class=\"line\">          Hyper-Threading, x86-64, MMX, Physical Address Ext, SYSENTER/SYSEXIT, SYSCALL/SYSRET, Intel virtualization</span><br><span class=\"line\">   CPU 1: Intel(R) Core(TM) i5-10210U CPU @ 1.60GHz (4199.9 bogomips)</span><br><span class=\"line\">          Hyper-Threading, x86-64, MMX, Physical Address Ext, SYSENTER/SYSEXIT, SYSCALL/SYSRET, Intel virtualization</span><br><span class=\"line\">   CPU 2: Intel(R) Core(TM) i5-10210U CPU @ 1.60GHz (4199.9 bogomips)</span><br><span class=\"line\">          Hyper-Threading, x86-64, MMX, Physical Address Ext, SYSENTER/SYSEXIT, SYSCALL/SYSRET, Intel virtualization</span><br><span class=\"line\">   CPU 3: Intel(R) Core(TM) i5-10210U CPU @ 1.60GHz (4199.9 bogomips)</span><br><span class=\"line\">          Hyper-Threading, x86-64, MMX, Physical Address Ext, SYSENTER/SYSEXIT, SYSCALL/SYSRET, Intel virtualization</span><br><span class=\"line\">   CPU 4: Intel(R) Core(TM) i5-10210U CPU @ 1.60GHz (4199.9 bogomips)</span><br><span class=\"line\">          Hyper-Threading, x86-64, MMX, Physical Address Ext, SYSENTER/SYSEXIT, SYSCALL/SYSRET, Intel virtualization</span><br><span class=\"line\">   CPU 5: Intel(R) Core(TM) i5-10210U CPU @ 1.60GHz (4199.9 bogomips)</span><br><span class=\"line\">          Hyper-Threading, x86-64, MMX, Physical Address Ext, SYSENTER/SYSEXIT, SYSCALL/SYSRET, Intel virtualization</span><br><span class=\"line\">   CPU 6: Intel(R) Core(TM) i5-10210U CPU @ 1.60GHz (4199.9 bogomips)</span><br><span class=\"line\">          Hyper-Threading, x86-64, MMX, Physical Address Ext, SYSENTER/SYSEXIT, SYSCALL/SYSRET, Intel virtualization</span><br><span class=\"line\">   CPU 7: Intel(R) Core(TM) i5-10210U CPU @ 1.60GHz (4199.9 bogomips)</span><br><span class=\"line\">          Hyper-Threading, x86-64, MMX, Physical Address Ext, SYSENTER/SYSEXIT, SYSCALL/SYSRET, Intel virtualization</span><br><span class=\"line\">   14:50:41 up 11 days, 23:45,  1 user,  load average: 0.95, 1.32, 7.18; runlevel 5</span><br><span class=\"line\"></span><br><span class=\"line\">------------------------------------------------------------------------</span><br><span class=\"line\">Benchmark Run: Wed Jan 24 2024 14:50:41 - 15:18:32</span><br><span class=\"line\">8 CPUs in system; running 1 parallel copy of tests</span><br><span class=\"line\"></span><br><span class=\"line\">Dhrystone 2 using register variables       47877041.4 lps   (10.0 s, 7 samples)</span><br><span class=\"line\">Double-Precision Whetstone                     7784.4 MWIPS (9.0 s, 7 samples)</span><br><span class=\"line\">Execl Throughput                               5666.5 lps   (30.0 s, 2 samples)</span><br><span class=\"line\">File Copy 1024 bufsize 2000 maxblocks       1493924.1 KBps  (30.0 s, 2 samples)</span><br><span class=\"line\">File Copy 256 bufsize 500 maxblocks          426805.3 KBps  (30.0 s, 2 samples)</span><br><span class=\"line\">File Copy 4096 bufsize 8000 maxblocks       3119870.2 KBps  (30.0 s, 2 samples)</span><br><span class=\"line\">Pipe Throughput                             2577750.5 lps   (10.0 s, 7 samples)</span><br><span class=\"line\">Pipe-based Context Switching                 296557.3 lps   (10.0 s, 7 samples)</span><br><span class=\"line\">Process Creation                              13157.5 lps   (30.0 s, 2 samples)</span><br><span class=\"line\">Shell Scripts (1 concurrent)                  14761.5 lpm   (60.0 s, 2 samples)</span><br><span class=\"line\">Shell Scripts (8 concurrent)                   4321.8 lpm   (60.0 s, 2 samples)</span><br><span class=\"line\">System Call Overhead                        2784511.9 lps   (10.0 s, 7 samples)</span><br><span class=\"line\"></span><br><span class=\"line\">System Benchmarks Index Values               BASELINE       RESULT    INDEX</span><br><span class=\"line\">Dhrystone 2 using register variables         116700.0   47877041.4   4102.6</span><br><span class=\"line\">Double-Precision Whetstone                       55.0       7784.4   1415.3</span><br><span class=\"line\">Execl Throughput                                 43.0       5666.5   1317.8</span><br><span class=\"line\">File Copy 1024 bufsize 2000 maxblocks          3960.0    1493924.1   3772.5</span><br><span class=\"line\">File Copy 256 bufsize 500 maxblocks            1655.0     426805.3   2578.9</span><br><span class=\"line\">File Copy 4096 bufsize 8000 maxblocks          5800.0    3119870.2   5379.1</span><br><span class=\"line\">Pipe Throughput                               12440.0    2577750.5   2072.1</span><br><span class=\"line\">Pipe-based Context Switching                   4000.0     296557.3    741.4</span><br><span class=\"line\">Process Creation                                126.0      13157.5   1044.2</span><br><span class=\"line\">Shell Scripts (1 concurrent)                     42.4      14761.5   3481.5</span><br><span class=\"line\">Shell Scripts (8 concurrent)                      6.0       4321.8   7203.0</span><br><span class=\"line\">System Call Overhead                          15000.0    2784511.9   1856.3</span><br><span class=\"line\">                                                                   ========</span><br><span class=\"line\">System Benchmarks Index Score                                        2360.4</span><br><span class=\"line\"></span><br><span class=\"line\">------------------------------------------------------------------------</span><br><span class=\"line\">Benchmark Run: Wed Jan 24 2024 15:18:32 - 15:46:49</span><br><span class=\"line\">8 CPUs in system; running 8 parallel copies of tests</span><br><span class=\"line\"></span><br><span class=\"line\">Dhrystone 2 using register variables      176274670.8 lps   (10.0 s, 7 samples)</span><br><span class=\"line\">Double-Precision Whetstone                    46994.6 MWIPS (9.4 s, 7 samples)</span><br><span class=\"line\">Execl Throughput                              20151.0 lps   (30.0 s, 2 samples)</span><br><span class=\"line\">File Copy 1024 bufsize 2000 maxblocks       1745833.5 KBps  (30.0 s, 2 samples)</span><br><span class=\"line\">File Copy 256 bufsize 500 maxblocks          478830.4 KBps  (30.0 s, 2 samples)</span><br><span class=\"line\">File Copy 4096 bufsize 8000 maxblocks       4568801.0 KBps  (30.0 s, 2 samples)</span><br><span class=\"line\">Pipe Throughput                             9157085.1 lps   (10.0 s, 7 samples)</span><br><span class=\"line\">Pipe-based Context Switching                1132991.1 lps   (10.0 s, 7 samples)</span><br><span class=\"line\">Process Creation                              44340.3 lps   (30.0 s, 2 samples)</span><br><span class=\"line\">Shell Scripts (1 concurrent)                  36537.4 lpm   (60.0 s, 2 samples)</span><br><span class=\"line\">Shell Scripts (8 concurrent)                   4653.2 lpm   (60.1 s, 2 samples)</span><br><span class=\"line\">System Call Overhead                        8498217.7 lps   (10.0 s, 7 samples)</span><br><span class=\"line\"></span><br><span class=\"line\">System Benchmarks Index Values               BASELINE       RESULT    INDEX</span><br><span class=\"line\">Dhrystone 2 using register variables         116700.0  176274670.8  15104.9</span><br><span class=\"line\">Double-Precision Whetstone                       55.0      46994.6   8544.5</span><br><span class=\"line\">Execl Throughput                                 43.0      20151.0   4686.3</span><br><span class=\"line\">File Copy 1024 bufsize 2000 maxblocks          3960.0    1745833.5   4408.7</span><br><span class=\"line\">File Copy 256 bufsize 500 maxblocks            1655.0     478830.4   2893.2</span><br><span class=\"line\">File Copy 4096 bufsize 8000 maxblocks          5800.0    4568801.0   7877.2</span><br><span class=\"line\">Pipe Throughput                               12440.0    9157085.1   7361.0</span><br><span class=\"line\">Pipe-based Context Switching                   4000.0    1132991.1   2832.5</span><br><span class=\"line\">Process Creation                                126.0      44340.3   3519.1</span><br><span class=\"line\">Shell Scripts (1 concurrent)                     42.4      36537.4   8617.3</span><br><span class=\"line\">Shell Scripts (8 concurrent)                      6.0       4653.2   7755.3</span><br><span class=\"line\">System Call Overhead                          15000.0    8498217.7   5665.5</span><br><span class=\"line\">                                                                   ========</span><br><span class=\"line\">System Benchmarks Index Score                                        5874.3</span><br></pre></td></tr></table></figure>\n\n<p>测试项目</p>\n<p><img src=\"/home/wang/.config/Typora/typora-user-images/image-20240124153054135.png\" alt=\"image-20240124153054135\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Dhrystone测试：</span><br><span class=\"line\">\t测试聚焦在字符串处理，没有浮点运算操作。这个测试用于测试链接器编译、代码优化、内存缓存、等待状态、整数数据类型等。</span><br><span class=\"line\">Whetstone测试：</span><br><span class=\"line\">\t测试项目用于测试浮点运算效率和速度。含若干个科学计算的典型性能模块，包含大量的C语言函数,sin cos sqrt exp和日志以及使用整数和浮点的数学操作。包含数组访问、条件分支和过程调用。</span><br><span class=\"line\">Execl Throughput测试：</span><br><span class=\"line\">\t每秒钟可以执行的execl系统调用的次数。</span><br><span class=\"line\">File Copy测试：</span><br><span class=\"line\">\t这项测试衡量文件数据从一个文件被传输到另外一个，使用大量的缓存。包括文件的读、写、复制测试，测试指标是一定时间内（默认是10秒）被重写、读、复制的字符数量。</span><br><span class=\"line\">Pipe Throughput(管道吞吐)测试:</span><br><span class=\"line\">\t测试在一秒钟一个进程写512比特到一个管道中并且读回来的次数。管道吞吐测试和实际编程有差距。</span><br><span class=\"line\">Pipe-based Context Switching(基于管道的上下文交互)测试:</span><br><span class=\"line\">\t测试衡量两个进程通过管道交换和整数倍的增加吞吐的次数。基于管道的上下文切换和真实程序很类似。测试程序产生一个双向管道通讯的子线程。</span><br><span class=\"line\">Process Creation(进程创建)测试:</span><br><span class=\"line\">\t这项测试衡量一个进程能产生子线程并且立即退出的次数。新进程真的创建进程阻塞和内存占用，所以测试程序直接使用内存带宽。这项测试用于典型的比较大量的操作系统进程创建操作。</span><br><span class=\"line\">Shell Scripts测试:</span><br><span class=\"line\">\tshell脚本测试用于衡量在一分钟内，一个进程可以启动并停止shell脚本的次数，通常会测试1，2， 3， 4， 8 个shell脚本的共同拷贝，shell脚本是一套转化数据文件的脚本。</span><br><span class=\"line\">System Call Overhead （系统调用消耗）测试:</span><br><span class=\"line\">\t测试衡量进入和离开系统内核的消耗，例如，系统调用的消耗。程序简单重复的执行getpid调用（返回调用的进程id）。消耗的指标是调用进入和离开内核的执行时间。</span><br><span class=\"line\">Graphical Tests(图形)测试:</span><br><span class=\"line\">\t测试非常粗的2D和3D图形性能，尤其是3D测试非常有限。测试结果和硬件，系统合适的驱动关系很大。</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"fio\"><a href=\"#fio\" class=\"headerlink\" title=\"fio\"></a>fio</h4><p>fio主要用来测试硬盘io性能。这个工具的可定制性非常强，可以根据测试者的想法进行各种混合io测试，它支持13种不同类型io引擎（libaio、sync、mmap、posixaio、network等等）。它可以测试块设备或文件，可以通过多线程或进程模拟各种io操作，可以测试统计iops、带宽和时延等性能。我们主要使用fio工具进行存储性能测试。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fio -name=iouring_test -filename=/mnt/vdd/testfile -iodepth=128 -thread -rw=randread -ioengine=io_uring -sqthread_poll=1 -direct=1 -bs=4k -size=10G -numjobs=1 -runtime=120 -group_reporting</span><br></pre></td></tr></table></figure>\n\n<p>说明：<br>filename&#x3D;&#x2F;dev&#x2F;sdb1    测试文件名称，通常选择需要测试的盘的data目录。<br>direct&#x3D;1         测试过程绕过机器自带的buffer。使测试结果更真实。<br>bs&#x3D;4k          单次io的块文件大小为16k<br>size&#x3D;5g  本次的测试文件大小为5g，以每次4k的io进行测试。<br>numjobs&#x3D;1        本次的测试线程为30.<br>runtime&#x3D;120       测试时间为120秒，如果不写则一直将5g文件分4k每次写完为止。<br>ioengine&#x3D;io_uring      io引擎使用io_uring方式<br>group_reporting     关于显示结果的，汇总每个进程的信息。</p>\n<p>此外<br>rwmixwrite&#x3D;30      在混合读写的模式下，写占30%<br>lockmem&#x3D;1g        只使用1g内存进行测试。<br>zero_buffers       用0初始化系统buffer。<br>nrfiles&#x3D;8        每个进程生成文件的数量。<br>read 顺序读<br>write 顺序写<br>rw,readwrite 顺序混合读写<br>randwrite 随机写<br>randread 随机读<br>randrw 随机混合读写</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uring -sqthread_poll=1 -direct=1 -bs=4k -size=10G -numjobs=1 -runtime=120 -group_reporting</span><br><span class=\"line\">iouring_test: (g=0): rw=randread, bs=(R) 4096B-4096B, (W) 4096B-4096B, (T) 4096B-4096B, ioengine=io_uring, iodepth=128</span><br><span class=\"line\">fio-3.22</span><br><span class=\"line\">Starting 1 thread</span><br><span class=\"line\">Jobs: 1 (f=1): [r(1)][3.2%][eta 01h:01m:42s]                        </span><br><span class=\"line\">iouring_test: (groupid=0, jobs=1): err= 0: pid=63227: Wed Jan 24 15:55:58 2024</span><br><span class=\"line\">  read: IOPS=682, BW=2729KiB/s (2795kB/s)(330MiB/123713msec)  //读操作的iops(每秒输入输出量)和bw(带宽)</span><br><span class=\"line\">    clat (usec): min=506, max=11807k, avg=187540.47, stdev=846840.59</span><br><span class=\"line\">     lat (usec): min=507, max=11807k, avg=187541.31, stdev=846840.60</span><br><span class=\"line\">    clat percentiles (usec):</span><br><span class=\"line\">     |  1.00th=[    1188],  5.00th=[    5800], 10.00th=[    8160],</span><br><span class=\"line\">     | 20.00th=[   11469], 30.00th=[   15008], 40.00th=[   19792],</span><br><span class=\"line\">     | 50.00th=[   26084], 60.00th=[   36439], 70.00th=[   56361],</span><br><span class=\"line\">     | 80.00th=[  104334], 90.00th=[  238027], 95.00th=[  425722],</span><br><span class=\"line\">     | 99.00th=[ 5804917], 99.50th=[ 7214203], 99.90th=[ 8422163],</span><br><span class=\"line\">     | 99.95th=[ 8657044], 99.99th=[10804528]</span><br><span class=\"line\">   bw (  KiB/s): min= 1357, max= 5397, per=100.00%, avg=2806.35, stdev=636.20, samples=240</span><br><span class=\"line\">   iops        : min=  339, max= 1349, avg=701.40, stdev=159.08, samples=240</span><br><span class=\"line\">  lat (usec)   : 750=0.13%, 1000=0.50%</span><br><span class=\"line\">  lat (msec)   : 2=0.93%, 4=1.25%, 10=12.60%, 20=25.15%, 50=27.08%</span><br><span class=\"line\">  lat (msec)   : 100=11.79%, 250=11.16%, 500=5.21%, 750=1.25%, 1000=0.54%</span><br><span class=\"line\">  lat (msec)   : 2000=0.58%, &gt;=2000=1.83%</span><br><span class=\"line\">  cpu          : usr=99.85%, sys=0.08%, ctx=94, majf=0, minf=0</span><br><span class=\"line\">  IO depths    : 1=0.1%, 2=0.1%, 4=0.1%, 8=0.1%, 16=0.1%, 32=0.1%, &gt;=64=99.9%</span><br><span class=\"line\">     submit    : 0=0.0%, 4=0.0%, 8=0.0%, 16=0.0%, 32=0.0%, 64=0.0%, &gt;=64=0.0%</span><br><span class=\"line\">     complete  : 0=0.0%, 4=100.0%, 8=0.0%, 16=0.0%, 32=0.0%, 64=0.0%, &gt;=64=0.1%</span><br><span class=\"line\">     issued rwts: total=84415,0,0,0 short=0,0,0,0 dropped=0,0,0,0</span><br><span class=\"line\">     latency   : target=0, window=0, percentile=100.00%, depth=128</span><br><span class=\"line\"></span><br><span class=\"line\">Run status group 0 (all jobs):</span><br><span class=\"line\">   READ: bw=2729KiB/s (2795kB/s), 2729KiB/s-2729KiB/s (2795kB/s-2795kB/s), io=330MiB (346MB), run=123713-123713msec</span><br><span class=\"line\"></span><br><span class=\"line\">Disk stats (read/write):</span><br><span class=\"line\">    dm-0: ios=84415/17, merge=0/0, ticks=15416332/27284, in_queue=15443616, util=100.00%, aggrios=84414/15, aggrmerge=1/2, aggrticks=15402295/25881, aggrin_queue=15260184, aggrutil=100.00%</span><br><span class=\"line\">  vda: ios=84414/15, merge=1/2, ticks=15402295/25881, in_queue=15260184, util=100.00%</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"lmbench\"><a href=\"#lmbench\" class=\"headerlink\" title=\"lmbench\"></a>lmbench</h4><p><code>Lmbench</code> 是一款简易可以移植的内存测试工具，其主要功能有，带宽测评（读取缓存文件、拷贝内存、读&#x2F;写内存、管道、TCP），延时测评（上下文切换、网络、文件系统的建立和删除、进程创建、<a href=\"https://so.csdn.net/so/search?q=%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86&spm=1001.2101.3001.7020\">信号处理</a>、上层系统调用、内存读入反应时间）等功能。</p>\n<h4 id=\"Stream\"><a href=\"#Stream\" class=\"headerlink\" title=\"Stream\"></a>Stream</h4><p>Stream内存带宽性能测试基准工具。</p>\n<p>stream通过生成四种不同模式下的内存读写操作，用于测试内存带宽。</p>\n<p>Copy操作最为简单，它先访问一个内存单元读出其中的值，再将值写入到另一个内存单元。</p>\n<p>Scale操作先从内存单元读出其中的值，作一个乘法运算，再将结果写入到另一个内存单元。</p>\n<p>Add操作先从内存单元读出两个值，做加法运算， 再将结果写入到另一个内存单元。</p>\n<p>Triad的中文含义是将三个组合起来，在本测试中表示的意思是将Copy、Scale、Add三种操作组合起来进行测试。具体操作方式是：先从内存数组中读两个值a、b，对其进行乘加混合运算（a+因子* b），将运算结果写入到另一个内存单元。 </p>\n<h4 id=\"iozone\"><a href=\"#iozone\" class=\"headerlink\" title=\"iozone\"></a>iozone</h4><p>IOzone是文件系统性能测试工具。可以测试不同的操作系统中文件系统的读写性能。可以测试 Read, write, re-read,re-write, read backwards, read strided, fread, fwrite, random read, pread, mmap, aio_read, aio_write 等等不同的模式下的硬盘的性能。</p>\n<table>\n<thead>\n<tr>\n<th>Write</th>\n<th>测试向一个新文件写入的性能。当一个新文件被写入时，不仅仅是那些文件中的数据需要被存储，还包括那些用于定位数据存储在存储介质的具体位置的额外信息。这些额外信息被称作 “元数据”。它包括目录信息，所分配的空间和一些与该文件有关但又并非该文件所含数据的其他数据。拜这些额外信息所赐，Write 的性能通常会比 Re-write 的性能低。</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Re-write</td>\n<td>测试向一个已存在的文件写入的性能。当一个已存在的文件被写入时，所需工作量较少，因为此时元数据已经存在。Re-write 的性能通常比 Write 的性能高。</td>\n</tr>\n<tr>\n<td>Read</td>\n<td>测试读一个已存在的文件的性能。</td>\n</tr>\n<tr>\n<td>Re-Read</td>\n<td>测试读一个最近读过的文件的性能。Re-Read 性能会高些，因为操作系统通常会缓存最近读过的文件数据。这个缓存可以被用于读以提高性能。</td>\n</tr>\n<tr>\n<td>Random Read</td>\n<td>测试读一个文件中的随机偏移量的性能。许多因素可能影响这种情况下的系统性能，例如：操作系统缓存的大小，磁盘数量，寻道延迟和其他。</td>\n</tr>\n<tr>\n<td>Random Write</td>\n<td>测试写一个文件中的随机偏移量的性能。同样，许多因素可能影响这种情况下的系统性能，例如：操作系统缓存的大小，磁盘数量，寻道延迟和其他。</td>\n</tr>\n<tr>\n<td>Random Mix</td>\n<td>测试读写一个文件中的随机偏移量的性能。同样，许多因素可能影响这种情况下的系统性能，例如：操作系统缓存的大小，磁盘数量，寻道延迟和其他。这个测试只有在吞吐量测试模式下才能进行。每个线程 &#x2F; 进程运行读或写测试。这种分布式读 &#x2F; 写测试是基于 round robin 模式的。最好使用多于一个线程 &#x2F; 进程执行此测试。</td>\n</tr>\n<tr>\n<td>Backwards Read</td>\n<td>测试使用倒序读一个文件的性能。这种读文件方法可能看起来很可笑，事实上，有些应用确实这么干。MSC Nastran 是一个使用倒序读文件的应用程序的一个例子。它所读的文件都十分大（大小从 G 级别到 T 级别）。尽管许多操作系统使用一些特殊实现来优化顺序读文件的速度，很少有操作系统注意到并增强倒序读文件的性能。</td>\n</tr>\n<tr>\n<td>Record Rewrite</td>\n<td>测试写与覆盖写一个文件中的特定块的性能。这个块可能会发生一些很有趣的事。如果这个块足够小（比 CPU 数据缓存小），测出来的性能将会非常高。如果比 CPU 数据缓存大而比 TLB 小，测出来的是另一个阶段的性能。如果比此二者都大，但比操作系统缓存小，得到的性能又是一个阶段。若大到超过操作系统缓存，又是另一番结果。</td>\n</tr>\n<tr>\n<td>Strided Read</td>\n<td>测试跳跃读一个文件的性能。举例如下：在 0 偏移量处读 4Kbytes，然后间隔 200Kbytes, 读 4Kbytes，再间隔 200Kbytes，如此反复。此时的模式是读 4Kbytes，间隔 200Kbytes 并重复这个模式。这又是一个典型的应用行为，文件中使用了数据结构并且访问这个数据结构的特定区域的应用程序常常这样做。许多操作系统并没注意到这种行为或者针对这种类型的访问做一些优化。同样，这种访问行为也可能导致一些有趣的性能异常。一个例子是在一个数据片化的文件系统里，应用程序的跳跃导致某一个特定的磁盘成为性能瓶颈。</td>\n</tr>\n<tr>\n<td>Fwrite</td>\n<td>测试调用库函数 fwrite () 来写文件的性能。这是一个执行缓存与阻塞写操作的库例程。缓存在用户空间之内。如果一个应用程序想要写很小的传输块，fwrite () 函数中的缓存与阻塞 I&#x2F;O 功能能通过减少实际操作系统调用并在操作系统调用时增加传输块的大小来增强应用程序的性能。这个测试是写一个新文件，所以元数据的写入也是要的。</td>\n</tr>\n<tr>\n<td>Frewrite</td>\n<td>测试调用库函数 fwrite () 来写文件的性能。这是一个执行缓存与阻塞写操作的库例程。缓存在用户空间之内。如果一个应用程序想要写很小的传输块，fwrite () 函数中的缓存与阻塞 I&#x2F;O 功能能通过减少实际操作系统调用并在操作系统调用时增加传输块的大小来增强应用程序的性能。</td>\n</tr>\n</tbody></table>\n<h4 id=\"iperf3\"><a href=\"#iperf3\" class=\"headerlink\" title=\"iperf3\"></a>iperf3</h4><p>iperf3是基于Client&#x2F;Server的网络性能测试工具，通常用于测试网络上可达到的最大带宽，它能够测试TCP、UDP及SCTP的带宽质量，可以提供网络吞吐量、网络波动、网络丢包率以及最大传输单元大小等信息，能够帮助我们测试网络性能，定位网络瓶颈。</p>\n<h4 id=\"netperf\"><a href=\"#netperf\" class=\"headerlink\" title=\"netperf\"></a>netperf</h4><p>Netperf是一种网络性能的测量工具，可以测试基于TCP或UDP吞吐、响应速率。Netperf包括Clien和Server端，Server端主要用来实现监听工作，Client端进行测试。</p>\n<h4 id=\"ltp\"><a href=\"#ltp\" class=\"headerlink\" title=\"ltp\"></a>ltp</h4><p>LTP测试套件是测试Linux内核和内核相关特性的工具的集合。该工具的目的是通过把测试自动化引入到Linux内核测试，提高Linux的内核质量。通过功能测试、压力测试和回归测试来验证 Linux 系统的可靠性、稳定性和健壮性。整个项目约4000个测试用例。</p>\n"},{"title":"搭建Blog","date":"2023-12-14T02:27:28.000Z","description":"梳理Blog搭建流程","type":"tags","comments":1,"_content":"\n# 搭建Blog\n\n## 安装node npm n\n\n- 安装node.js\n\n  ```bash\n  sudo apt-get install nodejs\n  ```\n\n- 安装npm\n  npm是nodejs的包管理器。\n  \n  ```bash\n  sudo apt-get install npm\n  ```\n\n- 安装n\n\n  n 是交互式 node.js 版本管理工具。\n\n  ```bash\n  sudo npm install -g n\n  ```\n\n  可以使用n安装特定版本的nodejs。\n  \n\n## 安装hexo\n\n​\t\tHexo 是**一个快速、简洁且高效的博客框架**。 Hexo 使用Markdown（或其他标记语言）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。\n\n- 配置国内源\n\n  ```bash\n  sudo npm set registry=https://registry.npm.taobao.org\n  ```\n\n- 安装hexo-cli\n\n  ``` bash\n  sudo npm install hexo-cli -g\n  ```\n\n- 初始化项目\n\n  ```bash\n  sudo npm init blog\n  ```\n\n- 安装依赖\n\n  ``` bash\n  npm install\n  ```\n- 打包成dist\n\n  ``` bash\n  npm run build\n  ```\n  \n- 运行hexo项目\n\n  ```bash\n  hexo server\n  ```\n\n- 清楚hexo部署数据\n\n  ```bash\n  #可删除.deploy_git文件夹在执行hexo clean和hexo deploy\n  hexo clean\n  ```\n\n- 部署到服务器\n  ```bash\n  #根据_config.yaml配置文件中的仓库地址，部署到服务器。\n  hexo delpoy\n  ```\n- 替换主题\n\n  ```bash\n  安装主题和渲染器：\n  $ git clone https://github.com/tufu9441/maupassant-hexo.git themes/maupassant  \n  $ npm install hexo-renderer-pug --save  \n  $ npm install hexo-renderer-sass --save  \n  编辑Hexo目录下的 _config.yml，将theme的值改为maupassant。\n  注：依赖hexo-renderer-sass安装时容易报错，很可能是国内网络问题，请尝试使用代理或者切换至NPM的国内镜像源安装。\n  ```\n\n- 创建\"About页\"\n\n```bash\nhexo new page about\n创建成功后，编辑博客目录下 /source/about/index.md，添加 layout 属性。\n```\n- 创建\"Archive页\"\n\n```bash\nhexo new page archive\n创建成功后，编辑博客目录下 /source/archive/index.md。\n```\n- hexo使用参考：<https://hexo.io/zh-cn/>\n","source":"_posts/搭建Blog.md","raw":"---\ntitle: 搭建Blog\ndate: 2023-12-14 10:27:28\ndescription: 梳理Blog搭建流程\ntype: \"tags\"\ncomments: true\ncategories:\n- Learning Tools\n- Hexo\ntags:\n- nodejs\n- Blog\n---\n\n# 搭建Blog\n\n## 安装node npm n\n\n- 安装node.js\n\n  ```bash\n  sudo apt-get install nodejs\n  ```\n\n- 安装npm\n  npm是nodejs的包管理器。\n  \n  ```bash\n  sudo apt-get install npm\n  ```\n\n- 安装n\n\n  n 是交互式 node.js 版本管理工具。\n\n  ```bash\n  sudo npm install -g n\n  ```\n\n  可以使用n安装特定版本的nodejs。\n  \n\n## 安装hexo\n\n​\t\tHexo 是**一个快速、简洁且高效的博客框架**。 Hexo 使用Markdown（或其他标记语言）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。\n\n- 配置国内源\n\n  ```bash\n  sudo npm set registry=https://registry.npm.taobao.org\n  ```\n\n- 安装hexo-cli\n\n  ``` bash\n  sudo npm install hexo-cli -g\n  ```\n\n- 初始化项目\n\n  ```bash\n  sudo npm init blog\n  ```\n\n- 安装依赖\n\n  ``` bash\n  npm install\n  ```\n- 打包成dist\n\n  ``` bash\n  npm run build\n  ```\n  \n- 运行hexo项目\n\n  ```bash\n  hexo server\n  ```\n\n- 清楚hexo部署数据\n\n  ```bash\n  #可删除.deploy_git文件夹在执行hexo clean和hexo deploy\n  hexo clean\n  ```\n\n- 部署到服务器\n  ```bash\n  #根据_config.yaml配置文件中的仓库地址，部署到服务器。\n  hexo delpoy\n  ```\n- 替换主题\n\n  ```bash\n  安装主题和渲染器：\n  $ git clone https://github.com/tufu9441/maupassant-hexo.git themes/maupassant  \n  $ npm install hexo-renderer-pug --save  \n  $ npm install hexo-renderer-sass --save  \n  编辑Hexo目录下的 _config.yml，将theme的值改为maupassant。\n  注：依赖hexo-renderer-sass安装时容易报错，很可能是国内网络问题，请尝试使用代理或者切换至NPM的国内镜像源安装。\n  ```\n\n- 创建\"About页\"\n\n```bash\nhexo new page about\n创建成功后，编辑博客目录下 /source/about/index.md，添加 layout 属性。\n```\n- 创建\"Archive页\"\n\n```bash\nhexo new page archive\n创建成功后，编辑博客目录下 /source/archive/index.md。\n```\n- hexo使用参考：<https://hexo.io/zh-cn/>\n","slug":"搭建Blog","published":1,"updated":"2025-05-13T11:38:58.277Z","layout":"post","photos":[],"link":"","_id":"cmamklq74001yfkd1haz96ii5","content":"<h1 id=\"搭建Blog\"><a href=\"#搭建Blog\" class=\"headerlink\" title=\"搭建Blog\"></a>搭建Blog</h1><h2 id=\"安装node-npm-n\"><a href=\"#安装node-npm-n\" class=\"headerlink\" title=\"安装node npm n\"></a>安装node npm n</h2><ul>\n<li><p>安装node.js</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install nodejs</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装npm<br>npm是nodejs的包管理器。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install npm</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装n</p>\n<p>n 是交互式 node.js 版本管理工具。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo npm install -g n</span><br></pre></td></tr></table></figure>\n\n<p>可以使用n安装特定版本的nodejs。</p>\n</li>\n</ul>\n<h2 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h2><p>​\t\tHexo 是<strong>一个快速、简洁且高效的博客框架</strong>。 Hexo 使用Markdown（或其他标记语言）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>\n<ul>\n<li><p>配置国内源</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo npm <span class=\"built_in\">set</span> registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装hexo-cli</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo npm install hexo-cli -g</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>初始化项目</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo npm init blog</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装依赖</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install</span><br></pre></td></tr></table></figure></li>\n<li><p>打包成dist</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run build</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>运行hexo项目</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo server</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>清楚hexo部署数据</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#可删除.deploy_git文件夹在执行hexo clean和hexo deploy</span></span><br><span class=\"line\">hexo clean</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>部署到服务器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#根据_config.yaml配置文件中的仓库地址，部署到服务器。</span></span><br><span class=\"line\">hexo delpoy</span><br></pre></td></tr></table></figure></li>\n<li><p>替换主题</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">安装主题和渲染器：</span><br><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/tufu9441/maupassant-hexo.git themes/maupassant  </span><br><span class=\"line\">$ npm install hexo-renderer-pug --save  </span><br><span class=\"line\">$ npm install hexo-renderer-sass --save  </span><br><span class=\"line\">编辑Hexo目录下的 _config.yml，将theme的值改为maupassant。</span><br><span class=\"line\">注：依赖hexo-renderer-sass安装时容易报错，很可能是国内网络问题，请尝试使用代理或者切换至NPM的国内镜像源安装。</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建”About页”</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page about</span><br><span class=\"line\">创建成功后，编辑博客目录下 /source/about/index.md，添加 layout 属性。</span><br></pre></td></tr></table></figure>\n<ul>\n<li>创建”Archive页”</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page archive</span><br><span class=\"line\">创建成功后，编辑博客目录下 /source/archive/index.md。</span><br></pre></td></tr></table></figure>\n<ul>\n<li>hexo使用参考：<a href=\"https://hexo.io/zh-cn/\">https://hexo.io/zh-cn/</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"搭建Blog\"><a href=\"#搭建Blog\" class=\"headerlink\" title=\"搭建Blog\"></a>搭建Blog</h1><h2 id=\"安装node-npm-n\"><a href=\"#安装node-npm-n\" class=\"headerlink\" title=\"安装node npm n\"></a>安装node npm n</h2><ul>\n<li><p>安装node.js</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install nodejs</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装npm<br>npm是nodejs的包管理器。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install npm</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装n</p>\n<p>n 是交互式 node.js 版本管理工具。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo npm install -g n</span><br></pre></td></tr></table></figure>\n\n<p>可以使用n安装特定版本的nodejs。</p>\n</li>\n</ul>\n<h2 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h2><p>​\t\tHexo 是<strong>一个快速、简洁且高效的博客框架</strong>。 Hexo 使用Markdown（或其他标记语言）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>\n<ul>\n<li><p>配置国内源</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo npm <span class=\"built_in\">set</span> registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装hexo-cli</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo npm install hexo-cli -g</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>初始化项目</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo npm init blog</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装依赖</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install</span><br></pre></td></tr></table></figure></li>\n<li><p>打包成dist</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run build</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>运行hexo项目</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo server</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>清楚hexo部署数据</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#可删除.deploy_git文件夹在执行hexo clean和hexo deploy</span></span><br><span class=\"line\">hexo clean</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>部署到服务器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#根据_config.yaml配置文件中的仓库地址，部署到服务器。</span></span><br><span class=\"line\">hexo delpoy</span><br></pre></td></tr></table></figure></li>\n<li><p>替换主题</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">安装主题和渲染器：</span><br><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/tufu9441/maupassant-hexo.git themes/maupassant  </span><br><span class=\"line\">$ npm install hexo-renderer-pug --save  </span><br><span class=\"line\">$ npm install hexo-renderer-sass --save  </span><br><span class=\"line\">编辑Hexo目录下的 _config.yml，将theme的值改为maupassant。</span><br><span class=\"line\">注：依赖hexo-renderer-sass安装时容易报错，很可能是国内网络问题，请尝试使用代理或者切换至NPM的国内镜像源安装。</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建”About页”</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page about</span><br><span class=\"line\">创建成功后，编辑博客目录下 /source/about/index.md，添加 layout 属性。</span><br></pre></td></tr></table></figure>\n<ul>\n<li>创建”Archive页”</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page archive</span><br><span class=\"line\">创建成功后，编辑博客目录下 /source/archive/index.md。</span><br></pre></td></tr></table></figure>\n<ul>\n<li>hexo使用参考：<a href=\"https://hexo.io/zh-cn/\">https://hexo.io/zh-cn/</a></li>\n</ul>\n"},{"title":"Mysql8数据库配置","date":"2023-12-15T02:27:28.000Z","description":"Linux Mysql8数据库配置","type":"tags","comments":1,"_content":"# mysql8.0\n\n## mysql8.0 设置表名不区分大小写\n\n* 安装数据库之后不启动的情况下，修改/etc/my.cnf,在末行添加如下内容：\n```plain\n[mysqld]\nlower_case_table_names=1\n```\n## mysql8.0 设置密码\n\n* 设置密码\n```shell\n$ mysqladmin -uroot -p'' password 'new-password'\n```\n## mysql8.0 开启远程连接\n\n* 选择mysql数据库\n```plain\n> use mysql\n```\n* 更新域属性，'%'表示允许外部访问\n```plain\n> update user set host='%' where user ='root';\n```\n* 刷新:\n```plain\n> FLUSH PRIVILEGES;\n```\n将当前user和privilige表中的用户信息/权限设置从mysql库(MySQL数据库的内置库)中提取到内存里。\nMySQL用户数据和权限有修改后，希望在\"不重启MySQL服务\"的情况下直接生效，那么就需要执行这个命令。\n\n* 执行授权语句\n```plain\n> GRANT ALL PRIVILEGES ON *.* TO 'root'@'%'WITH GRANT OPTION;\n```\n* 关闭防火墙\n```shell\n$ systemctl disable firewalld\n$ systemctl stop firewalld\n```\n* 或者开放3306端口\n```shell\n#开放端口\n$ firewall-cmd --zone=public --add-port=3306/tcp --permanent\n#查看端口\n$ firewall-cmd --list-ports\n```\n# 保存现有数据更新数据库\n\n保存指定数据库数据到sql文件\n\n```plain\nmysqldump -uroot -pUnion@1234 --databases ustack_test > ustack_test.sql\n```\n查看表结构\n```plain\ndesc tablename;\n```\n查询数据库创建时间\n```plain\nSELECT create_time  FROM information_schema.tables  WHERE table_schema = '数据库名'\n```\n导出数据到sql\n```bash\nmysqldump -uroot -pPASSWORD  database_name > name.sql\n```\n导入现有sql\n","source":"_posts/数据库配置.md","raw":"---\ntitle: Mysql8数据库配置\ndate: 2023-12-15 10:27:28\ndescription: Linux Mysql8数据库配置\ntype: \"tags\"\ncomments: true\ncategories:\n- Linux\n- Mysql\ntags:\n- Linux\n- Mysql\n---\n# mysql8.0\n\n## mysql8.0 设置表名不区分大小写\n\n* 安装数据库之后不启动的情况下，修改/etc/my.cnf,在末行添加如下内容：\n```plain\n[mysqld]\nlower_case_table_names=1\n```\n## mysql8.0 设置密码\n\n* 设置密码\n```shell\n$ mysqladmin -uroot -p'' password 'new-password'\n```\n## mysql8.0 开启远程连接\n\n* 选择mysql数据库\n```plain\n> use mysql\n```\n* 更新域属性，'%'表示允许外部访问\n```plain\n> update user set host='%' where user ='root';\n```\n* 刷新:\n```plain\n> FLUSH PRIVILEGES;\n```\n将当前user和privilige表中的用户信息/权限设置从mysql库(MySQL数据库的内置库)中提取到内存里。\nMySQL用户数据和权限有修改后，希望在\"不重启MySQL服务\"的情况下直接生效，那么就需要执行这个命令。\n\n* 执行授权语句\n```plain\n> GRANT ALL PRIVILEGES ON *.* TO 'root'@'%'WITH GRANT OPTION;\n```\n* 关闭防火墙\n```shell\n$ systemctl disable firewalld\n$ systemctl stop firewalld\n```\n* 或者开放3306端口\n```shell\n#开放端口\n$ firewall-cmd --zone=public --add-port=3306/tcp --permanent\n#查看端口\n$ firewall-cmd --list-ports\n```\n# 保存现有数据更新数据库\n\n保存指定数据库数据到sql文件\n\n```plain\nmysqldump -uroot -pUnion@1234 --databases ustack_test > ustack_test.sql\n```\n查看表结构\n```plain\ndesc tablename;\n```\n查询数据库创建时间\n```plain\nSELECT create_time  FROM information_schema.tables  WHERE table_schema = '数据库名'\n```\n导出数据到sql\n```bash\nmysqldump -uroot -pPASSWORD  database_name > name.sql\n```\n导入现有sql\n","slug":"数据库配置","published":1,"updated":"2025-03-27T00:57:01.342Z","layout":"post","photos":[],"link":"","_id":"cmamklq7d004ufkd12qyo43za","content":"<h1 id=\"mysql8-0\"><a href=\"#mysql8-0\" class=\"headerlink\" title=\"mysql8.0\"></a>mysql8.0</h1><h2 id=\"mysql8-0-设置表名不区分大小写\"><a href=\"#mysql8-0-设置表名不区分大小写\" class=\"headerlink\" title=\"mysql8.0 设置表名不区分大小写\"></a>mysql8.0 设置表名不区分大小写</h2><ul>\n<li>安装数据库之后不启动的情况下，修改&#x2F;etc&#x2F;my.cnf,在末行添加如下内容：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\">lower_case_table_names=1</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"mysql8-0-设置密码\"><a href=\"#mysql8-0-设置密码\" class=\"headerlink\" title=\"mysql8.0 设置密码\"></a>mysql8.0 设置密码</h2><ul>\n<li>设置密码<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">mysqladmin -uroot -p<span class=\"string\">&#x27;&#x27;</span> password <span class=\"string\">&#x27;new-password&#x27;</span></span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"mysql8-0-开启远程连接\"><a href=\"#mysql8-0-开启远程连接\" class=\"headerlink\" title=\"mysql8.0 开启远程连接\"></a>mysql8.0 开启远程连接</h2><ul>\n<li><p>选择mysql数据库</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; use mysql</span><br></pre></td></tr></table></figure></li>\n<li><p>更新域属性，’%’表示允许外部访问</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; update user set host=&#x27;%&#x27; where user =&#x27;root&#x27;;</span><br></pre></td></tr></table></figure></li>\n<li><p>刷新:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure>\n<p>将当前user和privilige表中的用户信息&#x2F;权限设置从mysql库(MySQL数据库的内置库)中提取到内存里。<br>MySQL用户数据和权限有修改后，希望在”不重启MySQL服务”的情况下直接生效，那么就需要执行这个命令。</p>\n</li>\n<li><p>执行授权语句</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; GRANT ALL PRIVILEGES ON *.* TO &#x27;root&#x27;@&#x27;%&#x27;WITH GRANT OPTION;</span><br></pre></td></tr></table></figure></li>\n<li><p>关闭防火墙</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">systemctl <span class=\"built_in\">disable</span> firewalld</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">systemctl stop firewalld</span></span><br></pre></td></tr></table></figure></li>\n<li><p>或者开放3306端口</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">开放端口</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">firewall-cmd --zone=public --add-port=3306/tcp --permanent</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">查看端口</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">firewall-cmd --list-ports</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"保存现有数据更新数据库\"><a href=\"#保存现有数据更新数据库\" class=\"headerlink\" title=\"保存现有数据更新数据库\"></a>保存现有数据更新数据库</h1><p>保存指定数据库数据到sql文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqldump -uroot -pUnion@1234 --databases ustack_test &gt; ustack_test.sql</span><br></pre></td></tr></table></figure>\n<p>查看表结构</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">desc tablename;</span><br></pre></td></tr></table></figure>\n<p>查询数据库创建时间</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT create_time  FROM information_schema.tables  WHERE table_schema = &#x27;数据库名&#x27;</span><br></pre></td></tr></table></figure>\n<p>导出数据到sql</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqldump -uroot -pPASSWORD  database_name &gt; name.sql</span><br></pre></td></tr></table></figure>\n<p>导入现有sql</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"mysql8-0\"><a href=\"#mysql8-0\" class=\"headerlink\" title=\"mysql8.0\"></a>mysql8.0</h1><h2 id=\"mysql8-0-设置表名不区分大小写\"><a href=\"#mysql8-0-设置表名不区分大小写\" class=\"headerlink\" title=\"mysql8.0 设置表名不区分大小写\"></a>mysql8.0 设置表名不区分大小写</h2><ul>\n<li>安装数据库之后不启动的情况下，修改&#x2F;etc&#x2F;my.cnf,在末行添加如下内容：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\">lower_case_table_names=1</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"mysql8-0-设置密码\"><a href=\"#mysql8-0-设置密码\" class=\"headerlink\" title=\"mysql8.0 设置密码\"></a>mysql8.0 设置密码</h2><ul>\n<li>设置密码<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">mysqladmin -uroot -p<span class=\"string\">&#x27;&#x27;</span> password <span class=\"string\">&#x27;new-password&#x27;</span></span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"mysql8-0-开启远程连接\"><a href=\"#mysql8-0-开启远程连接\" class=\"headerlink\" title=\"mysql8.0 开启远程连接\"></a>mysql8.0 开启远程连接</h2><ul>\n<li><p>选择mysql数据库</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; use mysql</span><br></pre></td></tr></table></figure></li>\n<li><p>更新域属性，’%’表示允许外部访问</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; update user set host=&#x27;%&#x27; where user =&#x27;root&#x27;;</span><br></pre></td></tr></table></figure></li>\n<li><p>刷新:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure>\n<p>将当前user和privilige表中的用户信息&#x2F;权限设置从mysql库(MySQL数据库的内置库)中提取到内存里。<br>MySQL用户数据和权限有修改后，希望在”不重启MySQL服务”的情况下直接生效，那么就需要执行这个命令。</p>\n</li>\n<li><p>执行授权语句</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; GRANT ALL PRIVILEGES ON *.* TO &#x27;root&#x27;@&#x27;%&#x27;WITH GRANT OPTION;</span><br></pre></td></tr></table></figure></li>\n<li><p>关闭防火墙</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">systemctl <span class=\"built_in\">disable</span> firewalld</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">systemctl stop firewalld</span></span><br></pre></td></tr></table></figure></li>\n<li><p>或者开放3306端口</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">开放端口</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">firewall-cmd --zone=public --add-port=3306/tcp --permanent</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">查看端口</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">firewall-cmd --list-ports</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"保存现有数据更新数据库\"><a href=\"#保存现有数据更新数据库\" class=\"headerlink\" title=\"保存现有数据更新数据库\"></a>保存现有数据更新数据库</h1><p>保存指定数据库数据到sql文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqldump -uroot -pUnion@1234 --databases ustack_test &gt; ustack_test.sql</span><br></pre></td></tr></table></figure>\n<p>查看表结构</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">desc tablename;</span><br></pre></td></tr></table></figure>\n<p>查询数据库创建时间</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT create_time  FROM information_schema.tables  WHERE table_schema = &#x27;数据库名&#x27;</span><br></pre></td></tr></table></figure>\n<p>导出数据到sql</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqldump -uroot -pPASSWORD  database_name &gt; name.sql</span><br></pre></td></tr></table></figure>\n<p>导入现有sql</p>\n"},{"title":"lvm磁盘扩容","date":"2023-12-15T02:27:28.000Z","description":"Linux lvm磁盘扩容到根分区","type":"tags","comments":1,"_content":"# 扩容脚本\n```bash\n#!/bin/bash\n\n# 定义新磁盘，若当前磁盘分区不存在可使用fdisk提前划分。\n\ndisk=/dev/vda3\nvg=***\n\npvcreate $disk \nvgextend \"$vg\" $disk \nlvextend /dev/${vg}/root $disk # xfs文件系统时，写入文件系统，使扩容生效 \nxfs_growfs /dev/mapper/${vg}-root # ext文件系统用resize2fs命令替换xfs_growfs命令\n```\n# 详解\n\n- 磁盘，使用fdisk进行硬盘分区，三个主分区(p)，其余都是拓展分区(e)。\n- 物理卷(PV)，在逻辑卷管理系统最底层，可以是整个物理硬盘或实际物理硬盘上的分区。\n- 卷组(VG)，建立在物理卷上，一卷组中至少要包括一物理卷，卷组建立后可动态的添加卷到卷组中，一个逻辑卷管理系统工程中可有多个卷组。对于LVM上面的文件系统而言，VG就是一个大磁盘。文件系统时看不到LVM下面的组成部分的，它只管使用，而LVM则负责管理下面的组成储存块。\n- 逻辑卷(LV)，建立在卷组基础上，卷组中未分配空间可用于建立新的逻辑卷，逻辑卷建立后可以动态扩展和缩小空间。\n- 物理区域(PE)，是物理卷中可用于分配的最小存储单元，物理区域大小在建立卷组时指定，一旦确定不能更改，同一卷组所有物理卷的物理区域大小需一致，新的pv(物理卷)加入到vg(卷组)后，pe(物理区域)的大小自动更改为vg(卷组)中定义的pe大小。\n- 逻辑区域（LE），是逻辑卷中可用于分配的最小存储单元，逻辑区域的大小取决于逻辑卷所在卷组中的物理区域的大小。在同一个卷组中，LE的大小和PE是相同的，并且一一对应。\n- 卷组描述区域：卷组描述区域存在于每个物理卷中，用于描述物理卷本身、物理卷所属卷组、卷组中逻辑卷、逻辑卷中物理区域的分配等所有信息，它是在使用pvcreate建立物理卷时建立的。\n# xfs_growfs\n- 扩展一个现存的XFS文件系统\n\n# 依赖工具\n- 使用pv，vg，lv相关命令请先安装lvm2\n```bash\nyum insall lvm2\n```\n\n# 参考\n<https://blog.csdn.net/m0_52544877/article/details/127764618#t2>","source":"_posts/磁盘扩容根分区.md","raw":"---\ntitle: lvm磁盘扩容\ndate: 2023-12-15 10:27:28\ndescription: Linux lvm磁盘扩容到根分区\ntype: \"tags\"\ncomments: true\ncategories:\n- Learning Tools\n- Linux\ntags:\n- Linux\n- 磁盘\n---\n# 扩容脚本\n```bash\n#!/bin/bash\n\n# 定义新磁盘，若当前磁盘分区不存在可使用fdisk提前划分。\n\ndisk=/dev/vda3\nvg=***\n\npvcreate $disk \nvgextend \"$vg\" $disk \nlvextend /dev/${vg}/root $disk # xfs文件系统时，写入文件系统，使扩容生效 \nxfs_growfs /dev/mapper/${vg}-root # ext文件系统用resize2fs命令替换xfs_growfs命令\n```\n# 详解\n\n- 磁盘，使用fdisk进行硬盘分区，三个主分区(p)，其余都是拓展分区(e)。\n- 物理卷(PV)，在逻辑卷管理系统最底层，可以是整个物理硬盘或实际物理硬盘上的分区。\n- 卷组(VG)，建立在物理卷上，一卷组中至少要包括一物理卷，卷组建立后可动态的添加卷到卷组中，一个逻辑卷管理系统工程中可有多个卷组。对于LVM上面的文件系统而言，VG就是一个大磁盘。文件系统时看不到LVM下面的组成部分的，它只管使用，而LVM则负责管理下面的组成储存块。\n- 逻辑卷(LV)，建立在卷组基础上，卷组中未分配空间可用于建立新的逻辑卷，逻辑卷建立后可以动态扩展和缩小空间。\n- 物理区域(PE)，是物理卷中可用于分配的最小存储单元，物理区域大小在建立卷组时指定，一旦确定不能更改，同一卷组所有物理卷的物理区域大小需一致，新的pv(物理卷)加入到vg(卷组)后，pe(物理区域)的大小自动更改为vg(卷组)中定义的pe大小。\n- 逻辑区域（LE），是逻辑卷中可用于分配的最小存储单元，逻辑区域的大小取决于逻辑卷所在卷组中的物理区域的大小。在同一个卷组中，LE的大小和PE是相同的，并且一一对应。\n- 卷组描述区域：卷组描述区域存在于每个物理卷中，用于描述物理卷本身、物理卷所属卷组、卷组中逻辑卷、逻辑卷中物理区域的分配等所有信息，它是在使用pvcreate建立物理卷时建立的。\n# xfs_growfs\n- 扩展一个现存的XFS文件系统\n\n# 依赖工具\n- 使用pv，vg，lv相关命令请先安装lvm2\n```bash\nyum insall lvm2\n```\n\n# 参考\n<https://blog.csdn.net/m0_52544877/article/details/127764618#t2>","slug":"磁盘扩容根分区","published":1,"updated":"2025-03-27T00:57:01.343Z","layout":"post","photos":[],"link":"","_id":"cmamklq7e004vfkd15y1v7dvy","content":"<h1 id=\"扩容脚本\"><a href=\"#扩容脚本\" class=\"headerlink\" title=\"扩容脚本\"></a>扩容脚本</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义新磁盘，若当前磁盘分区不存在可使用fdisk提前划分。</span></span><br><span class=\"line\"></span><br><span class=\"line\">disk=/dev/vda3</span><br><span class=\"line\">vg=***</span><br><span class=\"line\"></span><br><span class=\"line\">pvcreate <span class=\"variable\">$disk</span> </span><br><span class=\"line\">vgextend <span class=\"string\">&quot;<span class=\"variable\">$vg</span>&quot;</span> <span class=\"variable\">$disk</span> </span><br><span class=\"line\">lvextend /dev/<span class=\"variable\">$&#123;vg&#125;</span>/root <span class=\"variable\">$disk</span> <span class=\"comment\"># xfs文件系统时，写入文件系统，使扩容生效 </span></span><br><span class=\"line\">xfs_growfs /dev/mapper/<span class=\"variable\">$&#123;vg&#125;</span>-root <span class=\"comment\"># ext文件系统用resize2fs命令替换xfs_growfs命令</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"详解\"><a href=\"#详解\" class=\"headerlink\" title=\"详解\"></a>详解</h1><ul>\n<li>磁盘，使用fdisk进行硬盘分区，三个主分区(p)，其余都是拓展分区(e)。</li>\n<li>物理卷(PV)，在逻辑卷管理系统最底层，可以是整个物理硬盘或实际物理硬盘上的分区。</li>\n<li>卷组(VG)，建立在物理卷上，一卷组中至少要包括一物理卷，卷组建立后可动态的添加卷到卷组中，一个逻辑卷管理系统工程中可有多个卷组。对于LVM上面的文件系统而言，VG就是一个大磁盘。文件系统时看不到LVM下面的组成部分的，它只管使用，而LVM则负责管理下面的组成储存块。</li>\n<li>逻辑卷(LV)，建立在卷组基础上，卷组中未分配空间可用于建立新的逻辑卷，逻辑卷建立后可以动态扩展和缩小空间。</li>\n<li>物理区域(PE)，是物理卷中可用于分配的最小存储单元，物理区域大小在建立卷组时指定，一旦确定不能更改，同一卷组所有物理卷的物理区域大小需一致，新的pv(物理卷)加入到vg(卷组)后，pe(物理区域)的大小自动更改为vg(卷组)中定义的pe大小。</li>\n<li>逻辑区域（LE），是逻辑卷中可用于分配的最小存储单元，逻辑区域的大小取决于逻辑卷所在卷组中的物理区域的大小。在同一个卷组中，LE的大小和PE是相同的，并且一一对应。</li>\n<li>卷组描述区域：卷组描述区域存在于每个物理卷中，用于描述物理卷本身、物理卷所属卷组、卷组中逻辑卷、逻辑卷中物理区域的分配等所有信息，它是在使用pvcreate建立物理卷时建立的。</li>\n</ul>\n<h1 id=\"xfs-growfs\"><a href=\"#xfs-growfs\" class=\"headerlink\" title=\"xfs_growfs\"></a>xfs_growfs</h1><ul>\n<li>扩展一个现存的XFS文件系统</li>\n</ul>\n<h1 id=\"依赖工具\"><a href=\"#依赖工具\" class=\"headerlink\" title=\"依赖工具\"></a>依赖工具</h1><ul>\n<li>使用pv，vg，lv相关命令请先安装lvm2<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum insall lvm2</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://blog.csdn.net/m0_52544877/article/details/127764618#t2\">https://blog.csdn.net/m0_52544877/article/details/127764618#t2</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"扩容脚本\"><a href=\"#扩容脚本\" class=\"headerlink\" title=\"扩容脚本\"></a>扩容脚本</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义新磁盘，若当前磁盘分区不存在可使用fdisk提前划分。</span></span><br><span class=\"line\"></span><br><span class=\"line\">disk=/dev/vda3</span><br><span class=\"line\">vg=***</span><br><span class=\"line\"></span><br><span class=\"line\">pvcreate <span class=\"variable\">$disk</span> </span><br><span class=\"line\">vgextend <span class=\"string\">&quot;<span class=\"variable\">$vg</span>&quot;</span> <span class=\"variable\">$disk</span> </span><br><span class=\"line\">lvextend /dev/<span class=\"variable\">$&#123;vg&#125;</span>/root <span class=\"variable\">$disk</span> <span class=\"comment\"># xfs文件系统时，写入文件系统，使扩容生效 </span></span><br><span class=\"line\">xfs_growfs /dev/mapper/<span class=\"variable\">$&#123;vg&#125;</span>-root <span class=\"comment\"># ext文件系统用resize2fs命令替换xfs_growfs命令</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"详解\"><a href=\"#详解\" class=\"headerlink\" title=\"详解\"></a>详解</h1><ul>\n<li>磁盘，使用fdisk进行硬盘分区，三个主分区(p)，其余都是拓展分区(e)。</li>\n<li>物理卷(PV)，在逻辑卷管理系统最底层，可以是整个物理硬盘或实际物理硬盘上的分区。</li>\n<li>卷组(VG)，建立在物理卷上，一卷组中至少要包括一物理卷，卷组建立后可动态的添加卷到卷组中，一个逻辑卷管理系统工程中可有多个卷组。对于LVM上面的文件系统而言，VG就是一个大磁盘。文件系统时看不到LVM下面的组成部分的，它只管使用，而LVM则负责管理下面的组成储存块。</li>\n<li>逻辑卷(LV)，建立在卷组基础上，卷组中未分配空间可用于建立新的逻辑卷，逻辑卷建立后可以动态扩展和缩小空间。</li>\n<li>物理区域(PE)，是物理卷中可用于分配的最小存储单元，物理区域大小在建立卷组时指定，一旦确定不能更改，同一卷组所有物理卷的物理区域大小需一致，新的pv(物理卷)加入到vg(卷组)后，pe(物理区域)的大小自动更改为vg(卷组)中定义的pe大小。</li>\n<li>逻辑区域（LE），是逻辑卷中可用于分配的最小存储单元，逻辑区域的大小取决于逻辑卷所在卷组中的物理区域的大小。在同一个卷组中，LE的大小和PE是相同的，并且一一对应。</li>\n<li>卷组描述区域：卷组描述区域存在于每个物理卷中，用于描述物理卷本身、物理卷所属卷组、卷组中逻辑卷、逻辑卷中物理区域的分配等所有信息，它是在使用pvcreate建立物理卷时建立的。</li>\n</ul>\n<h1 id=\"xfs-growfs\"><a href=\"#xfs-growfs\" class=\"headerlink\" title=\"xfs_growfs\"></a>xfs_growfs</h1><ul>\n<li>扩展一个现存的XFS文件系统</li>\n</ul>\n<h1 id=\"依赖工具\"><a href=\"#依赖工具\" class=\"headerlink\" title=\"依赖工具\"></a>依赖工具</h1><ul>\n<li>使用pv，vg，lv相关命令请先安装lvm2<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum insall lvm2</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://blog.csdn.net/m0_52544877/article/details/127764618#t2\">https://blog.csdn.net/m0_52544877/article/details/127764618#t2</a></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cmamklq6m0001fkd10vx78ic2","category_id":"cmamklq6q0004fkd1446bggjw","_id":"cmamklq6z000vfkd15asu8u4l"},{"post_id":"cmamklq6m0001fkd10vx78ic2","category_id":"cmamklq6v000jfkd13l77b6bc","_id":"cmamklq6z000zfkd15kwxa42j"},{"post_id":"cmamklq6r0006fkd13upk2x10","category_id":"cmamklq6s0009fkd1gzh575w2","_id":"cmamklq71001dfkd1ccnt437n"},{"post_id":"cmamklq6r0006fkd13upk2x10","category_id":"cmamklq700011fkd1h6i8d9yu","_id":"cmamklq72001gfkd14i3l5qk3"},{"post_id":"cmamklq6u000ffkd1an6fc8ia","category_id":"cmamklq6s0009fkd1gzh575w2","_id":"cmamklq72001kfkd14twrfdry"},{"post_id":"cmamklq6u000ffkd1an6fc8ia","category_id":"cmamklq700011fkd1h6i8d9yu","_id":"cmamklq73001ofkd183ushdsc"},{"post_id":"cmamklq6r0007fkd1b9gwfkoq","category_id":"cmamklq6s0009fkd1gzh575w2","_id":"cmamklq73001qfkd18rfjajhe"},{"post_id":"cmamklq6r0007fkd1b9gwfkoq","category_id":"cmamklq700011fkd1h6i8d9yu","_id":"cmamklq74001vfkd163oc0xw6"},{"post_id":"cmamklq6w000lfkd1hrbs1dpo","category_id":"cmamklq6q0004fkd1446bggjw","_id":"cmamklq750021fkd1a1e1eftw"},{"post_id":"cmamklq6w000lfkd1hrbs1dpo","category_id":"cmamklq73001rfkd1b5a27agm","_id":"cmamklq760025fkd17081bonu"},{"post_id":"cmamklq6s0008fkd19btfaoph","category_id":"cmamklq6s0009fkd1gzh575w2","_id":"cmamklq76002afkd1gpqd28z9"},{"post_id":"cmamklq6s0008fkd19btfaoph","category_id":"cmamklq700011fkd1h6i8d9yu","_id":"cmamklq76002efkd1cor8ejmx"},{"post_id":"cmamklq6t000bfkd1c7qi8i3d","category_id":"cmamklq6z000ufkd182cvcjr3","_id":"cmamklq77002jfkd1ak662ebc"},{"post_id":"cmamklq6t000bfkd1c7qi8i3d","category_id":"cmamklq76002bfkd1h9lq201q","_id":"cmamklq77002nfkd1h8c95e1v"},{"post_id":"cmamklq700013fkd139c504vk","category_id":"cmamklq6q0004fkd1446bggjw","_id":"cmamklq78002tfkd1bbf8hx45"},{"post_id":"cmamklq700013fkd139c504vk","category_id":"cmamklq77002kfkd1fi48d6cz","_id":"cmamklq78002xfkd1daih8rh0"},{"post_id":"cmamklq700014fkd14jrc8h42","category_id":"cmamklq6q0004fkd1446bggjw","_id":"cmamklq780030fkd143j5f1v3"},{"post_id":"cmamklq700014fkd14jrc8h42","category_id":"cmamklq77002pfkd14jzy90qf","_id":"cmamklq790033fkd15avhbv5v"},{"post_id":"cmamklq6v000hfkd14t51aylw","category_id":"cmamklq6s0009fkd1gzh575w2","_id":"cmamklq7a003ifkd1a1zeg6mz"},{"post_id":"cmamklq6v000hfkd14t51aylw","category_id":"cmamklq72001jfkd1fi854q8t","_id":"cmamklq7a003lfkd1bu7xf162"},{"post_id":"cmamklq6v000hfkd14t51aylw","category_id":"cmamklq790039fkd10jp10mx0","_id":"cmamklq7a003ofkd1hjay0wzs"},{"post_id":"cmamklq73001pfkd1dmo41gdt","category_id":"cmamklq6q0004fkd1446bggjw","_id":"cmamklq7a003qfkd146v8f3za"},{"post_id":"cmamklq73001pfkd1dmo41gdt","category_id":"cmamklq77002pfkd14jzy90qf","_id":"cmamklq7b003tfkd18yuz0mks"},{"post_id":"cmamklq6y000rfkd18n030duf","category_id":"cmamklq6q0004fkd1446bggjw","_id":"cmamklq7b003xfkd164o68h10"},{"post_id":"cmamklq6y000rfkd18n030duf","category_id":"cmamklq74001xfkd14c17gfqb","_id":"cmamklq7b003zfkd1a8c93qxz"},{"post_id":"cmamklq6y000rfkd18n030duf","category_id":"cmamklq7b003vfkd15iuxfg90","_id":"cmamklq7b0040fkd1d6q25ghd"},{"post_id":"cmamklq6y000tfkd189419kh7","category_id":"cmamklq760027fkd13tsc9qrn","_id":"cmamklq7b0042fkd19xgx1imf"},{"post_id":"cmamklq6y000tfkd189419kh7","category_id":"cmamklq7b003wfkd1a67bergj","_id":"cmamklq7b0043fkd1emda58k9"},{"post_id":"cmamklq6z0010fkd1fu548y8d","category_id":"cmamklq6q0004fkd1446bggjw","_id":"cmamklq7c0045fkd10jlv1xpa"},{"post_id":"cmamklq6z0010fkd1fu548y8d","category_id":"cmamklq76002gfkd10e2fcst3","_id":"cmamklq7c0046fkd15ro75nqu"},{"post_id":"cmamklq6z0010fkd1fu548y8d","category_id":"cmamklq7b003yfkd14xesc2jh","_id":"cmamklq7c0048fkd132kjg64b"},{"post_id":"cmamklq700015fkd1asfz253z","category_id":"cmamklq6q0004fkd1446bggjw","_id":"cmamklq7c0049fkd149fngjfk"},{"post_id":"cmamklq700015fkd1asfz253z","category_id":"cmamklq76002gfkd10e2fcst3","_id":"cmamklq7c004afkd12g6ygzn1"},{"post_id":"cmamklq700015fkd1asfz253z","category_id":"cmamklq7b0041fkd1gk6xgpgg","_id":"cmamklq7c004cfkd12ucudse4"},{"post_id":"cmamklq73001nfkd112ge7wk6","category_id":"cmamklq6s0009fkd1gzh575w2","_id":"cmamklq7c004dfkd1b4q5g0v1"},{"post_id":"cmamklq73001nfkd112ge7wk6","category_id":"cmamklq790035fkd19vfxacit","_id":"cmamklq7c004ffkd1gceg6qkv"},{"post_id":"cmamklq73001nfkd112ge7wk6","category_id":"cmamklq7c0047fkd18elides9","_id":"cmamklq7c004gfkd1388qc1yr"},{"post_id":"cmamklq73001ufkd12u0v3so0","category_id":"cmamklq6q0004fkd1446bggjw","_id":"cmamklq7c004ifkd12qtx2hwq"},{"post_id":"cmamklq73001ufkd12u0v3so0","category_id":"cmamklq76002gfkd10e2fcst3","_id":"cmamklq7c004jfkd17m5i15ce"},{"post_id":"cmamklq73001ufkd12u0v3so0","category_id":"cmamklq7c004bfkd152szcijw","_id":"cmamklq7c004lfkd19jxz78rp"},{"post_id":"cmamklq74001wfkd126192wju","category_id":"cmamklq6q0004fkd1446bggjw","_id":"cmamklq7c004mfkd1gltwgyk3"},{"post_id":"cmamklq74001wfkd126192wju","category_id":"cmamklq76002gfkd10e2fcst3","_id":"cmamklq7c004nfkd1ezach6ch"},{"post_id":"cmamklq74001wfkd126192wju","category_id":"cmamklq7b003yfkd14xesc2jh","_id":"cmamklq7c004ofkd11ixsel61"},{"post_id":"cmamklq74001yfkd1haz96ii5","category_id":"cmamklq760027fkd13tsc9qrn","_id":"cmamklq7c004pfkd14ukm1rgx"},{"post_id":"cmamklq74001yfkd1haz96ii5","category_id":"cmamklq7b003wfkd1a67bergj","_id":"cmamklq7c004qfkd1elkghii8"},{"post_id":"cmamklq72001ifkd1g7bp32uq","category_id":"cmamklq760027fkd13tsc9qrn","_id":"cmamklq7c004rfkd1etfpc7fv"},{"post_id":"cmamklq72001ifkd1g7bp32uq","category_id":"cmamklq7b0044fkd1c1tdcnlf","_id":"cmamklq7c004sfkd11o6bd61r"},{"post_id":"cmamklq72001ifkd1g7bp32uq","category_id":"cmamklq7c004kfkd1hv7ofj6f","_id":"cmamklq7c004tfkd1acyy6mc9"},{"post_id":"cmamklq7e004vfkd15y1v7dvy","category_id":"cmamklq760027fkd13tsc9qrn","_id":"cmamklq7h004zfkd130r41q9j"},{"post_id":"cmamklq7e004vfkd15y1v7dvy","category_id":"cmamklq7b0044fkd1c1tdcnlf","_id":"cmamklq7h0051fkd13sc12f7p"},{"post_id":"cmamklq7d004ufkd12qyo43za","category_id":"cmamklq6q0004fkd1446bggjw","_id":"cmamklq7h0053fkd18a43d5gz"},{"post_id":"cmamklq7d004ufkd12qyo43za","category_id":"cmamklq7f004xfkd174280kpr","_id":"cmamklq7h0055fkd10ck0e3ez"}],"PostTag":[{"post_id":"cmamklq6m0001fkd10vx78ic2","tag_id":"cmamklq6q0005fkd199p9b9zk","_id":"cmamklq6v000gfkd1bufe6v0k"},{"post_id":"cmamklq6m0001fkd10vx78ic2","tag_id":"cmamklq6t000afkd19mf8gyrb","_id":"cmamklq6v000ifkd128bm191k"},{"post_id":"cmamklq6u000ffkd1an6fc8ia","tag_id":"cmamklq6u000efkd1co5sduho","_id":"cmamklq6w000mfkd1fcit8vt8"},{"post_id":"cmamklq6r0006fkd13upk2x10","tag_id":"cmamklq6u000efkd1co5sduho","_id":"cmamklq6x000ofkd16w9ohway"},{"post_id":"cmamklq6r0007fkd1b9gwfkoq","tag_id":"cmamklq6u000efkd1co5sduho","_id":"cmamklq6y000sfkd1ea32c3ya"},{"post_id":"cmamklq6s0008fkd19btfaoph","tag_id":"cmamklq6u000efkd1co5sduho","_id":"cmamklq6z000yfkd10wib2ruv"},{"post_id":"cmamklq6t000bfkd1c7qi8i3d","tag_id":"cmamklq6z000wfkd1dni028pl","_id":"cmamklq710018fkd1hw7nb5hx"},{"post_id":"cmamklq6t000bfkd1c7qi8i3d","tag_id":"cmamklq700012fkd1b4fvazrz","_id":"cmamklq71001afkd111pfdt9s"},{"post_id":"cmamklq6v000hfkd14t51aylw","tag_id":"cmamklq6u000efkd1co5sduho","_id":"cmamklq72001hfkd17c9d36kp"},{"post_id":"cmamklq6v000hfkd14t51aylw","tag_id":"cmamklq710017fkd1epqe9vqr","_id":"cmamklq72001lfkd188cw5vgd"},{"post_id":"cmamklq73001nfkd112ge7wk6","tag_id":"cmamklq6u000efkd1co5sduho","_id":"cmamklq73001sfkd120to3cap"},{"post_id":"cmamklq6w000lfkd1hrbs1dpo","tag_id":"cmamklq71001efkd1fzvi0gps","_id":"cmamklq750020fkd1apg5boot"},{"post_id":"cmamklq6w000lfkd1hrbs1dpo","tag_id":"cmamklq72001mfkd178843t6i","_id":"cmamklq750023fkd1cgz16etl"},{"post_id":"cmamklq6w000lfkd1hrbs1dpo","tag_id":"cmamklq73001tfkd1g7odc17q","_id":"cmamklq760026fkd133rz2lmc"},{"post_id":"cmamklq6y000rfkd18n030duf","tag_id":"cmamklq6q0005fkd199p9b9zk","_id":"cmamklq760029fkd1eum432lg"},{"post_id":"cmamklq6y000rfkd18n030duf","tag_id":"cmamklq75001zfkd1dxm36i4x","_id":"cmamklq76002cfkd12o69hfuk"},{"post_id":"cmamklq6y000rfkd18n030duf","tag_id":"cmamklq760024fkd1bgpkebdn","_id":"cmamklq76002ffkd161dj6s4a"},{"post_id":"cmamklq6y000tfkd189419kh7","tag_id":"cmamklq73001tfkd1g7odc17q","_id":"cmamklq77002ifkd1h37w306v"},{"post_id":"cmamklq6y000tfkd189419kh7","tag_id":"cmamklq76002dfkd14bxl2jj3","_id":"cmamklq77002lfkd1do6n77qh"},{"post_id":"cmamklq6z0010fkd1fu548y8d","tag_id":"cmamklq6q0005fkd199p9b9zk","_id":"cmamklq77002ofkd1cgtubl57"},{"post_id":"cmamklq6z0010fkd1fu548y8d","tag_id":"cmamklq76002hfkd1452og5wg","_id":"cmamklq77002qfkd1eg6x8y1t"},{"post_id":"cmamklq700013fkd139c504vk","tag_id":"cmamklq6q0005fkd199p9b9zk","_id":"cmamklq78002sfkd1bnvqgx0a"},{"post_id":"cmamklq700013fkd139c504vk","tag_id":"cmamklq77002mfkd1badyc1qy","_id":"cmamklq78002vfkd184e95bts"},{"post_id":"cmamklq700014fkd14jrc8h42","tag_id":"cmamklq6q0005fkd199p9b9zk","_id":"cmamklq78002yfkd145qg7249"},{"post_id":"cmamklq700014fkd14jrc8h42","tag_id":"cmamklq77002rfkd189hu0xrw","_id":"cmamklq780031fkd1dh9ada9j"},{"post_id":"cmamklq700015fkd1asfz253z","tag_id":"cmamklq6q0005fkd199p9b9zk","_id":"cmamklq790034fkd1a3asg75k"},{"post_id":"cmamklq700015fkd1asfz253z","tag_id":"cmamklq78002wfkd17vmp64ia","_id":"cmamklq790036fkd1cnmyghld"},{"post_id":"cmamklq72001ifkd1g7bp32uq","tag_id":"cmamklq6q0005fkd199p9b9zk","_id":"cmamklq790038fkd166826tm1"},{"post_id":"cmamklq72001ifkd1g7bp32uq","tag_id":"cmamklq75001zfkd1dxm36i4x","_id":"cmamklq79003afkd1fxfv27i6"},{"post_id":"cmamklq73001pfkd1dmo41gdt","tag_id":"cmamklq6q0005fkd199p9b9zk","_id":"cmamklq7a003cfkd17ty6h4sh"},{"post_id":"cmamklq73001pfkd1dmo41gdt","tag_id":"cmamklq77002rfkd189hu0xrw","_id":"cmamklq7a003efkd19gii4b0c"},{"post_id":"cmamklq73001ufkd12u0v3so0","tag_id":"cmamklq6q0005fkd199p9b9zk","_id":"cmamklq7a003gfkd11deufbcc"},{"post_id":"cmamklq73001ufkd12u0v3so0","tag_id":"cmamklq79003bfkd13yal2dc0","_id":"cmamklq7a003jfkd1atez1vdt"},{"post_id":"cmamklq74001wfkd126192wju","tag_id":"cmamklq6q0005fkd199p9b9zk","_id":"cmamklq7a003mfkd1cz1e4gxe"},{"post_id":"cmamklq74001wfkd126192wju","tag_id":"cmamklq76002hfkd1452og5wg","_id":"cmamklq7a003pfkd1992ah7xq"},{"post_id":"cmamklq74001yfkd1haz96ii5","tag_id":"cmamklq73001tfkd1g7odc17q","_id":"cmamklq7a003rfkd1ayh01ste"},{"post_id":"cmamklq74001yfkd1haz96ii5","tag_id":"cmamklq76002dfkd14bxl2jj3","_id":"cmamklq7b003ufkd107hd3u1o"},{"post_id":"cmamklq7d004ufkd12qyo43za","tag_id":"cmamklq6q0005fkd199p9b9zk","_id":"cmamklq7h0050fkd1bkso7zl2"},{"post_id":"cmamklq7d004ufkd12qyo43za","tag_id":"cmamklq7e004wfkd1hbjmdk5d","_id":"cmamklq7h0052fkd188fu077y"},{"post_id":"cmamklq7e004vfkd15y1v7dvy","tag_id":"cmamklq6q0005fkd199p9b9zk","_id":"cmamklq7h0054fkd1b9pq20wv"},{"post_id":"cmamklq7e004vfkd15y1v7dvy","tag_id":"cmamklq7h004yfkd1d37v4fs7","_id":"cmamklq7h0056fkd1ffmcaw1j"}],"Tag":[{"name":"Linux","_id":"cmamklq6q0005fkd199p9b9zk"},{"name":"Openstack","_id":"cmamklq6t000afkd19mf8gyrb"},{"name":"openstack","_id":"cmamklq6u000efkd1co5sduho"},{"name":"标签1","_id":"cmamklq6z000wfkd1dni028pl"},{"name":"标签2","_id":"cmamklq700012fkd1b4fvazrz"},{"name":"nova","_id":"cmamklq710017fkd1epqe9vqr"},{"name":"web","_id":"cmamklq71001efkd1fzvi0gps"},{"name":"npm","_id":"cmamklq72001mfkd178843t6i"},{"name":"nodejs","_id":"cmamklq73001tfkd1g7odc17q"},{"name":"Rpm","_id":"cmamklq75001zfkd1dxm36i4x"},{"name":"OpenEuler","_id":"cmamklq760024fkd1bgpkebdn"},{"name":"Blog","_id":"cmamklq76002dfkd14bxl2jj3"},{"name":"Test","_id":"cmamklq76002hfkd1452og5wg"},{"name":"Java","_id":"cmamklq77002mfkd1badyc1qy"},{"name":"Python","_id":"cmamklq77002rfkd189hu0xrw"},{"name":"Git","_id":"cmamklq78002wfkd17vmp64ia"},{"name":"Docker","_id":"cmamklq79003bfkd13yal2dc0"},{"name":"Mysql","_id":"cmamklq7e004wfkd1hbjmdk5d"},{"name":"磁盘","_id":"cmamklq7h004yfkd1d37v4fs7"}]}}